(()=>{var t={62520:(t,r,e)=>{t.exports=e(71339)},71339:(t,r,e)=>{e(52004),e(28407),e(70462),e(22429),e(71172),e(38288),e(91274),e(98201),e(56626),e(93211),e(79952),e(20015),e(19831),e(7521),e(72972),e(38487),e(83759),e(21719),e(33328),e(75293),e(11646),e(87178),e(25652),e(51271),e(38833),e(47715),e(85375),e(3712),e(84367),e(39390),e(30655),e(95680),e(23675),e(12076),e(27228),e(51301),e(55677),e(67441),e(46825),e(92070),e(87896),e(74573),e(4363),e(96382),e(57021),e(20288),e(7262),e(74486),e(91029),e(6429),e(55892),e(46270),e(28107),e(74047),e(6541),e(6399),e(73163),e(94975),e(72609),e(57436),e(25649),e(32001),e(39762),e(22466),e(75298),e(81526),e(67469),e(43344),e(54458),e(76169),e(84415),e(76956),e(14327),e(27680),e(28743),e(59295),e(62794),e(52340),e(74779),e(97359),e(29627),e(32474),e(76493),e(59630),e(30357),e(92374),e(52079),e(17388),e(94593),e(55222),e(45777),e(30717),e(77483),e(74176),e(12406),e(92437),e(23311),e(66474),e(65206),e(71579),e(66016),e(49294),e(56660),e(96785),e(74517),e(4334),e(89610),e(90190),e(74649),e(77031),e(86737),e(47561),e(5809),e(10815),e(79174),e(5536),e(25101),e(70850),e(45710),e(22698),e(49815),e(55056),e(99751),e(51796),e(61904),e(95738),e(46204),e(47595),e(27867),e(56394),e(49628),e(56718),e(573),e(25334),e(86969),e(32021),e(38328),e(31678),e(13080),e(9079),e(36714),e(36582),e(69723),e(14728),e(22704),e(76401),e(5274),e(54817),e(91183),e(32309),e(52257),e(7390),e(86956),e(62322),e(93710),e(514),e(19297),e(64669),e(26922),e(95304),e(619),e(23223),e(40594),e(97723),e(92129),e(55017),e(70698),e(82433),e(11932),e(45924),e(51142),e(93296),e(66553),e(79006),e(49268),e(97754),e(52933),e(13233),e(28599),e(20087),e(36993),e(76755),e(99138),e(42448),e(92378),e(61892),e(40842),e(66060),e(59808),e(17590),e(39353),e(79068),e(53631),e(31351),e(1998),e(28729),e(29151),e(23330),e(73594),e(93525),e(30337),e(60506),e(97761),e(53224),e(50597),e(43543),e(35210),e(95785),e(30091),e(86205),e(57391),e(29595),e(63181),e(23357),e(91816),e(2161),e(47445),e(84875),e(71608),e(24283),e(72994),e(284),e(30601),e(39494),e(66229),e(19149),e(79503),e(9617),e(91962),e(8097),e(7878),e(31770),e(70435),e(98974),e(87167),e(7715),e(93876),e(50633),e(15167),e(71977),e(59239),e(34223),e(15141),e(52581),e(43726),e(56335),e(29658),e(11224),e(83076),e(7692),e(70733),e(72983),e(25981),e(7270),e(4056),e(22421),e(55879),e(93302),e(3124),e(46419),e(45097),e(40261),e(32855),e(88304),e(97246),e(32865),e(49866),e(79548),e(69527),e(85835),e(10779),e(82756),e(25871),e(96691),e(97420),e(3949),e(26921),e(21594),e(72311),e(63917),e(23406),e(10581),e(14912),e(8855),e(15544),e(39271),e(60943),e(15765),e(21292),e(10241),e(8068),e(1310),e(29913),e(96003),e(37709),e(73826),e(52510),e(43092),e(39960),e(98536),e(94061),e(84173),e(32787),e(99151),e(95664),e(63502),e(30924),e(8990),e(63053),e(16705),e(97146),e(22503),e(92414),e(84890),e(88023),e(93278),e(24951),e(40374),e(37770),e(94305),e(64251),e(99175),e(86945),e(64114),e(14960),e(15306),e(31183),e(42106),e(53261),e(43637),e(75045),e(51092),e(58936),e(28041),e(85748),e(78193),e(5646),e(9250),e(17525),e(50519),e(20613),e(6905),e(83868),e(54651),e(14846),e(14488),e(91327),e(43970),e(65030),e(48698),e(73123),e(90634),e(7820),e(93022),e(85927),e(13163),e(39027),e(33299),e(44644),e(85942),e(9063),e(17012),e(91437),e(63278),e(13607),e(95685),e(92034),e(4365),e(52826),e(28579),e(59371),e(48132),e(985),e(60146),e(10377),e(31086),e(20091),e(68694),e(6316),e(9029),e(25298),e(18971),e(90531),e(24192),e(95589),e(73884),e(11649),e(90925),e(3020),e(48462),e(98501),e(95869),e(59686),e(95175),e(21806),e(71710),e(55090),e(24655),e(99508),e(2241),e(11079),e(68192),e(39201),e(98043),e(60151),e(76453),e(58138),e(46549),t.exports=e(21287)},99365:(t,r,e)=>{t.exports=e(62520)},18257:(t,r,e)=>{var n=e(9212),o=e(75637),i=TypeError;t.exports=function(t){if(n(t))return t;throw i(o(t)+" is not a function")}},41186:(t,r,e)=>{var n=e(62097),o=e(75637),i=TypeError;t.exports=function(t){if(n(t))return t;throw i(o(t)+" is not a constructor")}},79882:(t,r,e)=>{function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}var o=e(9212),i=String,a=TypeError;t.exports=function(t){if("object"==n(t)||o(t))return t;throw a("Can't set "+i(t)+" as a prototype")}},36288:(t,r,e)=>{var n=e(3649),o=e(3590),i=e(94615).f,a=n("unscopables"),u=Array.prototype;null==u[a]&&i(u,a,{configurable:!0,value:o(null)}),t.exports=function(t){u[a][t]=!0}},96733:(t,r,e)=>{"use strict";var n=e(96389).charAt;t.exports=function(t,r,e){return r+(e?n(t,r).length:1)}},44761:(t,r,e)=>{var n=e(22447),o=TypeError;t.exports=function(t,r){if(n(r,t))return t;throw o("Incorrect invocation")}},92569:(t,r,e)=>{var n=e(90794),o=String,i=TypeError;t.exports=function(t){if(n(t))return t;throw i(o(t)+" is not an object")}},48578:t=>{t.exports="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView},91537:(t,r,e)=>{var n=e(16544);t.exports=n((function(){if("function"==typeof ArrayBuffer){var t=new ArrayBuffer(8);Object.isExtensible(t)&&Object.defineProperty(t,"a",{value:8})}}))},13977:(t,r,e)=>{"use strict";var n,o,i,a=e(48578),u=e(18494),s=e(47583),c=e(9212),f=e(90794),l=e(62870),p=e(33058),h=e(75637),v=e(57),d=e(73746),y=e(94615).f,g=e(22447),m=e(80729),b=e(17496),x=e(3649),w=e(98284),S=e(42743),E=S.enforce,A=S.get,I=s.Int8Array,_=I&&I.prototype,R=s.Uint8ClampedArray,O=R&&R.prototype,T=I&&m(I),k=_&&m(_),M=Object.prototype,P=s.TypeError,j=x("toStringTag"),C=w("TYPED_ARRAY_TAG"),L=a&&!!b&&"Opera"!==p(s.opera),N=!1,D={Int8Array:1,Uint8Array:1,Uint8ClampedArray:1,Int16Array:2,Uint16Array:2,Int32Array:4,Uint32Array:4,Float32Array:4,Float64Array:8},U={BigInt64Array:8,BigUint64Array:8},F=function(t){if(!f(t))return!1;var r=p(t);return l(D,r)||l(U,r)};for(n in D)(i=(o=s[n])&&o.prototype)?E(i).TypedArrayConstructor=o:L=!1;for(n in U)(i=(o=s[n])&&o.prototype)&&(E(i).TypedArrayConstructor=o);if((!L||!c(T)||T===Function.prototype)&&(T=function(){throw P("Incorrect invocation")},L))for(n in D)s[n]&&b(s[n],T);if((!L||!k||k===M)&&(k=T.prototype,L))for(n in D)s[n]&&b(s[n].prototype,k);if(L&&m(O)!==k&&b(O,k),u&&!l(k,j))for(n in N=!0,y(k,j,{get:function(){return f(this)?this[C]:void 0}}),D)s[n]&&v(s[n],C,n);t.exports={NATIVE_ARRAY_BUFFER_VIEWS:L,TYPED_ARRAY_TAG:N&&C,aTypedArray:function(t){if(F(t))return t;throw P("Target is not a typed array")},aTypedArrayConstructor:function(t){if(c(t)&&(!b||g(T,t)))return t;throw P(h(t)+" is not a typed array constructor")},exportTypedArrayMethod:function(t,r,e,n){if(u){if(e)for(var o in D){var i=s[o];if(i&&l(i.prototype,t))try{delete i.prototype[t]}catch(e){try{i.prototype[t]=r}catch(t){}}}k[t]&&!e||d(k,t,e?r:L&&_[t]||r,n)}},exportTypedArrayStaticMethod:function(t,r,e){var n,o;if(u){if(b){if(e)for(n in D)if((o=s[n])&&l(o,t))try{delete o[t]}catch(t){}if(T[t]&&!e)return;try{return d(T,t,e?r:L&&T[t]||r)}catch(t){}}for(n in D)!(o=s[n])||o[t]&&!e||d(o,t,r)}},getTypedArrayConstructor:function t(r){var e=m(r);if(f(e)){var n=A(e);return n&&l(n,"TypedArrayConstructor")?n.TypedArrayConstructor:t(e)}},isView:function(t){if(!f(t))return!1;var r=p(t);return"DataView"===r||l(D,r)||l(U,r)},isTypedArray:F,TypedArray:T,TypedArrayPrototype:k}},5562:(t,r,e)=>{"use strict";var n=e(47583),o=e(7386),i=e(18494),a=e(48578),u=e(14340),s=e(57),c=e(23705),f=e(16544),l=e(44761),p=e(87486),h=e(70097),v=e(12488),d=e(43834),y=e(80729),g=e(17496),m=e(9275).f,b=e(94615).f,x=e(93579),w=e(74546),S=e(98821),E=e(42743),A=u.PROPER,I=u.CONFIGURABLE,_=E.get,R=E.set,O="ArrayBuffer",T="Wrong index",k=n.ArrayBuffer,M=k,P=M&&M.prototype,j=n.DataView,C=j&&j.prototype,L=Object.prototype,N=n.Array,D=n.RangeError,U=o(x),F=o([].reverse),B=d.pack,q=d.unpack,z=function(t){return[255&t]},W=function(t){return[255&t,t>>8&255]},V=function(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]},H=function(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]},G=function(t){return B(t,23,4)},Y=function(t){return B(t,52,8)},$=function(t,r){b(t.prototype,r,{get:function(){return _(this)[r]}})},K=function(t,r,e,n){var o=v(e),i=_(t);if(o+r>i.byteLength)throw D(T);var a=_(i.buffer).bytes,u=o+i.byteOffset,s=w(a,u,u+r);return n?s:F(s)},J=function(t,r,e,n,o,i){var a=v(e),u=_(t);if(a+r>u.byteLength)throw D(T);for(var s=_(u.buffer).bytes,c=a+u.byteOffset,f=n(+o),l=0;l<r;l++)s[c+l]=f[i?l:r-l-1]};if(a){var X=A&&k.name!==O;if(f((function(){k(1)}))&&f((function(){new k(-1)}))&&!f((function(){return new k,new k(1.5),new k(NaN),1!=k.length||X&&!I})))X&&I&&s(k,"name",O);else{(M=function(t){return l(this,P),new k(v(t))}).prototype=P;for(var Q,Z=m(k),tt=0;Z.length>tt;)(Q=Z[tt++])in M||s(M,Q,k[Q]);P.constructor=M}g&&y(C)!==L&&g(C,L);var rt=new j(new M(2)),et=o(C.setInt8);rt.setInt8(0,2147483648),rt.setInt8(1,2147483649),!rt.getInt8(0)&&rt.getInt8(1)||c(C,{setInt8:function(t,r){et(this,t,r<<24>>24)},setUint8:function(t,r){et(this,t,r<<24>>24)}},{unsafe:!0})}else P=(M=function(t){l(this,P);var r=v(t);R(this,{bytes:U(N(r),0),byteLength:r}),i||(this.byteLength=r)}).prototype,C=(j=function(t,r,e){l(this,C),l(t,P);var n=_(t).byteLength,o=p(r);if(o<0||o>n)throw D("Wrong offset");if(o+(e=void 0===e?n-o:h(e))>n)throw D("Wrong length");R(this,{buffer:t,byteLength:e,byteOffset:o}),i||(this.buffer=t,this.byteLength=e,this.byteOffset=o)}).prototype,i&&($(M,"byteLength"),$(j,"buffer"),$(j,"byteLength"),$(j,"byteOffset")),c(C,{getInt8:function(t){return K(this,1,t)[0]<<24>>24},getUint8:function(t){return K(this,1,t)[0]},getInt16:function(t){var r=K(this,2,t,arguments.length>1?arguments[1]:void 0);return(r[1]<<8|r[0])<<16>>16},getUint16:function(t){var r=K(this,2,t,arguments.length>1?arguments[1]:void 0);return r[1]<<8|r[0]},getInt32:function(t){return H(K(this,4,t,arguments.length>1?arguments[1]:void 0))},getUint32:function(t){return H(K(this,4,t,arguments.length>1?arguments[1]:void 0))>>>0},getFloat32:function(t){return q(K(this,4,t,arguments.length>1?arguments[1]:void 0),23)},getFloat64:function(t){return q(K(this,8,t,arguments.length>1?arguments[1]:void 0),52)},setInt8:function(t,r){J(this,1,t,z,r)},setUint8:function(t,r){J(this,1,t,z,r)},setInt16:function(t,r){J(this,2,t,W,r,arguments.length>2?arguments[2]:void 0)},setUint16:function(t,r){J(this,2,t,W,r,arguments.length>2?arguments[2]:void 0)},setInt32:function(t,r){J(this,4,t,V,r,arguments.length>2?arguments[2]:void 0)},setUint32:function(t,r){J(this,4,t,V,r,arguments.length>2?arguments[2]:void 0)},setFloat32:function(t,r){J(this,4,t,G,r,arguments.length>2?arguments[2]:void 0)},setFloat64:function(t,r){J(this,8,t,Y,r,arguments.length>2?arguments[2]:void 0)}});S(M,O),S(j,"DataView"),t.exports={ArrayBuffer:M,DataView:j}},68050:(t,r,e)=>{"use strict";var n=e(61324),o=e(96782),i=e(1825),a=e(37774),u=Math.min;t.exports=[].copyWithin||function(t,r){var e=n(this),s=i(e),c=o(t,s),f=o(r,s),l=arguments.length>2?arguments[2]:void 0,p=u((void 0===l?s:o(l,s))-f,s-c),h=1;for(f<c&&c<f+p&&(h=-1,f+=p-1,c+=p-1);p-- >0;)f in e?e[c]=e[f]:a(e,c),c+=h,f+=h;return e}},93579:(t,r,e)=>{"use strict";var n=e(61324),o=e(96782),i=e(1825);t.exports=function(t){for(var r=n(this),e=i(r),a=arguments.length,u=o(a>1?arguments[1]:void 0,e),s=a>2?arguments[2]:void 0,c=void 0===s?e:o(s,e);c>u;)r[u++]=t;return r}},63200:(t,r,e)=>{"use strict";var n=e(24805).forEach,o=e(60906)("forEach");t.exports=o?[].forEach:function(t){return n(this,t,arguments.length>1?arguments[1]:void 0)}},48160:(t,r,e)=>{"use strict";var n=e(12938),o=e(61324),i=e(62097),a=e(10862),u=e(36307),s=e(38272),c=e(60911),f=e(12176),l=e(35897),p=e(3649),h=e(33670),v=e(60316).toArray,d=p("asyncIterator"),y=f("Array").values;t.exports=function(t){var r=this,e=arguments.length,f=e>1?arguments[1]:void 0,p=e>2?arguments[2]:void 0;return new(l("Promise"))((function(e){var l=o(t);void 0!==f&&(f=n(f,p));var g=c(l,d),m=g?void 0:s(l)||y,b=i(r)?new r:[],x=g?a(l,g):new h(u(l,m));e(v(x,f,b))}))}},4114:(t,r,e)=>{var n=e(1825);t.exports=function(t,r){for(var e=0,o=n(r),i=new t(o);o>e;)i[e]=r[e++];return i}},35513:(t,r,e)=>{"use strict";var n=e(12938),o=e(38262),i=e(61324),a=e(65294),u=e(70114),s=e(62097),c=e(1825),f=e(65999),l=e(36307),p=e(38272),h=Array;t.exports=function(t){var r=i(t),e=s(this),v=arguments.length,d=v>1?arguments[1]:void 0,y=void 0!==d;y&&(d=n(d,v>2?arguments[2]:void 0));var g,m,b,x,w,S,E=p(r),A=0;if(!E||this===h&&u(E))for(g=c(r),m=e?new this(g):h(g);g>A;A++)S=y?d(r[A],A):r[A],f(m,A,S);else for(w=(x=l(r,E)).next,m=e?new this:[];!(b=o(w,x)).done;A++)S=y?a(x,d,[b.value,A],!0):b.value,f(m,A,S);return m.length=A,m}},62661:(t,r,e)=>{"use strict";var n=e(35897),o=e(12938),i=e(7386),a=e(55044),u=e(61324),s=e(1825),c=n("Map"),f=c.prototype,l=i(f.get),p=i(f.has),h=i(f.set),v=i([].push);t.exports=function(t){for(var r,e,n=u(this),i=a(n),f=o(t,arguments.length>1?arguments[1]:void 0),d=new c,y=s(i),g=0;y>g;g++)r=f(e=i[g],g,n),p(d,r)?v(l(d,r),e):h(d,r,[e]);return d}},3151:(t,r,e)=>{var n=e(12938),o=e(7386),i=e(55044),a=e(61324),u=e(98734),s=e(1825),c=e(3590),f=e(4114),l=Array,p=o([].push);t.exports=function(t,r,e,o){for(var h,v,d,y=a(t),g=i(y),m=n(r,e),b=c(null),x=s(g),w=0;x>w;w++)d=g[w],(v=u(m(d,w,y)))in b?p(b[v],d):b[v]=[d];if(o&&(h=o(y))!==l)for(v in b)b[v]=f(h,b[v]);return b}},15766:(t,r,e)=>{var n=e(22977),o=e(96782),i=e(1825),a=function(t){return function(r,e,a){var u,s=n(r),c=i(s),f=o(a,c);if(t&&e!=e){for(;c>f;)if((u=s[f++])!=u)return!0}else for(;c>f;f++)if((t||f in s)&&s[f]===e)return t||f||0;return!t&&-1}};t.exports={includes:a(!0),indexOf:a(!1)}},32544:(t,r,e)=>{var n=e(12938),o=e(55044),i=e(61324),a=e(1825),u=function(t){var r=1==t;return function(e,u,s){for(var c,f=i(e),l=o(f),p=n(u,s),h=a(l);h-- >0;)if(p(c=l[h],h,f))switch(t){case 0:return c;case 1:return h}return r?-1:void 0}};t.exports={findLast:u(0),findLastIndex:u(1)}},24805:(t,r,e)=>{var n=e(12938),o=e(7386),i=e(55044),a=e(61324),u=e(1825),s=e(44822),c=o([].push),f=function(t){var r=1==t,e=2==t,o=3==t,f=4==t,l=6==t,p=7==t,h=5==t||l;return function(v,d,y,g){for(var m,b,x=a(v),w=i(x),S=n(d,y),E=u(w),A=0,I=g||s,_=r?I(v,E):e||p?I(v,0):void 0;E>A;A++)if((h||A in w)&&(b=S(m=w[A],A,x),t))if(r)_[A]=b;else if(b)switch(t){case 3:return!0;case 5:return m;case 6:return A;case 2:c(_,m)}else switch(t){case 4:return!1;case 7:c(_,m)}return l?-1:o||f?f:_}};t.exports={forEach:f(0),map:f(1),filter:f(2),some:f(3),every:f(4),find:f(5),findIndex:f(6),filterReject:f(7)}},73161:(t,r,e)=>{"use strict";var n=e(71611),o=e(22977),i=e(87486),a=e(1825),u=e(60906),s=Math.min,c=[].lastIndexOf,f=!!c&&1/[1].lastIndexOf(1,-0)<0,l=u("lastIndexOf"),p=f||!l;t.exports=p?function(t){if(f)return n(c,this,arguments)||0;var r=o(this),e=a(r),u=e-1;for(arguments.length>1&&(u=s(u,i(arguments[1]))),u<0&&(u=e+u);u>=0;u--)if(u in r&&r[u]===t)return u||0;return-1}:c},69269:(t,r,e)=>{var n=e(16544),o=e(3649),i=e(24061),a=o("species");t.exports=function(t){return i>=51||!n((function(){var r=[];return(r.constructor={})[a]=function(){return{foo:1}},1!==r[t](Boolean).foo}))}},60906:(t,r,e)=>{"use strict";var n=e(16544);t.exports=function(t,r){var e=[][t];return!!e&&n((function(){e.call(null,r||function(){return 1},1)}))}},64325:(t,r,e)=>{var n=e(18257),o=e(61324),i=e(55044),a=e(1825),u=TypeError,s=function(t){return function(r,e,s,c){n(e);var f=o(r),l=i(f),p=a(f),h=t?p-1:0,v=t?-1:1;if(s<2)for(;;){if(h in l){c=l[h],h+=v;break}if(h+=v,t?h<0:p<=h)throw u("Reduce of empty array with no initial value")}for(;t?h>=0:p>h;h+=v)h in l&&(c=e(c,l[h],h,f));return c}};t.exports={left:s(!1),right:s(!0)}},98173:(t,r,e)=>{"use strict";var n=e(18494),o=e(54521),i=TypeError,a=Object.getOwnPropertyDescriptor,u=n&&!function(){if(void 0!==this)return!0;try{Object.defineProperty([],"length",{writable:!1}).length=1}catch(t){return t instanceof TypeError}}();t.exports=u?function(t,r){if(o(t)&&!a(t,"length").writable)throw i("Cannot set read only .length");return t.length=r}:function(t,r){return t.length=r}},74546:(t,r,e)=>{var n=e(96782),o=e(1825),i=e(65999),a=Array,u=Math.max;t.exports=function(t,r,e){for(var s=o(t),c=n(r,s),f=n(void 0===e?s:e,s),l=a(u(f-c,0)),p=0;c<f;c++,p++)i(l,p,t[c]);return l.length=p,l}},46917:(t,r,e)=>{var n=e(7386);t.exports=n([].slice)},25744:(t,r,e)=>{var n=e(74546),o=Math.floor;t.exports=function t(r,e){var i=r.length,a=o(i/2);return i<8?function(t,r){for(var e,n,o=t.length,i=1;i<o;){for(n=i,e=t[i];n&&r(t[n-1],e)>0;)t[n]=t[--n];n!==i++&&(t[n]=e)}return t}(r,e):function(t,r,e,n){for(var o=r.length,i=e.length,a=0,u=0;a<o||u<i;)t[a+u]=a<o&&u<i?n(r[a],e[u])<=0?r[a++]:e[u++]:a<o?r[a++]:e[u++];return t}(r,t(n(r,0,a),e),t(n(r,a),e),e)}},15289:(t,r,e)=>{var n=e(54521),o=e(62097),i=e(90794),a=e(3649)("species"),u=Array;t.exports=function(t){var r;return n(t)&&(r=t.constructor,(o(r)&&(r===u||n(r.prototype))||i(r)&&null===(r=r[a]))&&(r=void 0)),void 0===r?u:r}},44822:(t,r,e)=>{var n=e(15289);t.exports=function(t,r){return new(n(t))(0===r?0:r)}},48976:(t,r,e)=>{var n=e(1825);t.exports=function(t,r){for(var e=n(t),o=new r(e),i=0;i<e;i++)o[i]=t[e-i-1];return o}},33878:(t,r,e)=>{"use strict";var n=e(35897),o=e(7386),i=e(18257),a=e(88505),u=e(1825),s=e(61324),c=e(44822),f=n("Map"),l=f.prototype,p=o(l.forEach),h=o(l.has),v=o(l.set),d=o([].push);t.exports=function(t){var r,e,n,o=s(this),l=u(o),y=c(o,0),g=new f,m=a(t)?function(t){return t}:i(t);for(r=0;r<l;r++)n=m(e=o[r]),h(g,n)||v(g,n,e);return p(g,(function(t){d(y,t)})),y}},41030:(t,r,e)=>{var n=e(1825),o=e(87486),i=RangeError;t.exports=function(t,r,e,a){var u=n(t),s=o(e),c=s<0?u+s:s;if(c>=u||c<0)throw i("Incorrect index");for(var f=new r(u),l=0;l<u;l++)f[l]=l===c?a:t[l];return f}},33670:(t,r,e)=>{"use strict";var n=e(38262),o=e(92569),i=e(3590),a=e(60911),u=e(23705),s=e(42743),c=e(35897),f=e(46578),l=e(71002),p=c("Promise"),h="AsyncFromSyncIterator",v=s.set,d=s.getterFor(h),y=function(t,r,e){var n=t.done;p.resolve(t.value).then((function(t){r(l(t,n))}),e)},g=function(t){v(this,{type:h,iterator:o(t),next:t.next})};g.prototype=u(i(f),{next:function(){var t=d(this);return new p((function(r,e){var i=o(n(t.next,t.iterator));y(i,r,e)}))},return:function(){var t=d(this).iterator;return new p((function(r,e){var i=a(t,"return");if(void 0===i)return r(l(void 0,!0));var u=o(n(i,t));y(u,r,e)}))}}),t.exports=g},59498:(t,r,e)=>{var n=e(38262),o=e(35897),i=e(60911);t.exports=function(t,r,e,a){try{var u=i(t,"return");if(u)return o("Promise").resolve(n(u,t)).then((function(){r(e)}),(function(t){a(t)}))}catch(t){return a(t)}r(e)}},17562:(t,r,e)=>{"use strict";var n=e(38262),o=e(80544),i=e(92569),a=e(3590),u=e(57),s=e(23705),c=e(3649),f=e(42743),l=e(35897),p=e(60911),h=e(46578),v=e(71002),d=e(47093),y=l("Promise"),g="AsyncIteratorHelper",m="WrapForValidAsyncIterator",b=f.set,x=c("toStringTag"),w=function(t){var r=!t,e=t?m:g,c=f.getterFor(e),l=function(t){var e=o((function(){return c(t)})),n=e.error,i=e.value;return n||r&&i.done?{exit:!0,value:n?y.reject(i):y.resolve(v(void 0,!0))}:{exit:!1,value:i}},b=function(t,e){var n=function(){var n=e();if(r){t.awaiting=n;var o=function(){t.awaiting===n&&(t.awaiting=null)};n.then(o,o)}return n};return t.awaiting?t.awaiting=t.awaiting.then(n,n):n()},w=s(a(h),{next:function(){var t=l(this),r=t.exit,e=t.value;return r?e:b(e,(function(){var t=o((function(){return i(e.nextHandler(y))})),r=t.error,n=t.value;return r&&(e.done=!0),r?y.reject(n):y.resolve(n)}))},return:function(){var r=l(this),e=r.exit,a=r.value;return e?a:b(a,(function(){a.done=!0;var r,e,u=a.iterator,s=a.innerIterator,c=o((function(){if(s)try{d(s,"return")}catch(t){return d(u,"throw",t)}return p(u,"return")}));return r=e=c.value,c.error?y.reject(e):void 0===r?y.resolve(v(void 0,!0)):(e=(c=o((function(){return n(r,u)}))).value,c.error?y.reject(e):t?y.resolve(e):y.resolve(e).then((function(t){return i(t),v(void 0,!0)})))}))}});return r&&u(w,x,"Async Iterator Helper"),w},S=w(!1),E=w(!0);t.exports=function(t,r){var e=r?m:g,n=function(r,n){n?(n.iterator=r.iterator,n.next=r.next):n=r,n.type=e,n.nextHandler=t,n.done=!1,n.awaiting=null,b(this,n)};return n.prototype=r?E:S,n}},72278:(t,r,e)=>{"use strict";var n=e(38262),o=e(92569),i=e(7388),a=e(17562),u=e(71002),s=a((function(t){var r=this,e=r.iterator;return t.resolve(o(n(r.next,e))).then((function(t){return o(t).done?(r.done=!0,u(void 0,!0)):u([r.index++,t.value],!1)})).then(null,(function(t){throw r.done=!0,t}))}));t.exports=function(){return new s(i(this),{index:0})}},60316:(t,r,e)=>{"use strict";var n=e(38262),o=e(18257),i=e(92569),a=e(6768),u=e(35897),s=e(7388),c=e(59498),f=function(t){var r=0==t,e=1==t,f=2==t,l=3==t;return function(t,p,h){var v=s(t),d=u("Promise"),y=v.iterator,g=v.next,m=0,b=void 0!==p;return!b&&r||o(p),new d((function(t,o){var u=function(t){c(y,o,t,o)};!function s(){try{if(r&&b)try{a(m)}catch(t){u(t)}d.resolve(i(n(g,y))).then((function(n){try{if(i(n).done)r?(h.length=m,t(h)):t(!l&&(f||void 0));else{var a=n.value;try{b?d.resolve(r?p(a,m):p(a)).then((function(n){if(e)s();else if(f)n?s():c(y,t,!1,o);else if(r)try{h[m++]=n,s()}catch(t){u(t)}else n?c(y,t,l||a,o):s()}),u):(h[m++]=a,s())}catch(t){u(t)}}}catch(t){o(t)}}),o)}catch(t){o(t)}}()}))}};t.exports={toArray:f(0),forEach:f(1),every:f(2),some:f(3),find:f(4)}},46578:(t,r,e)=>{var n,o,i=e(47583),a=e(31314),u=e(9212),s=e(3590),c=e(80729),f=e(73746),l=e(3649),p=e(86268),h=l("asyncIterator"),v=i.AsyncIterator,d=a.AsyncIteratorPrototype;if(d)n=d;else if(u(v))n=v.prototype;else if(a.USE_FUNCTION_CONSTRUCTOR||i.USE_FUNCTION_CONSTRUCTOR)try{o=c(c(c(Function("return async function*(){}()")()))),c(o)===Object.prototype&&(n=o)}catch(t){}n?p&&(n=s(n)):n={},u(n[h])||f(n,h,(function(){return this})),t.exports=n},81530:(t,r,e)=>{var n=e(38262),o=e(17562);t.exports=o((function(){return n(this.next,this.iterator)}),!0)},42990:t=>{for(var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",e={},n=0;n<66;n++)e[r.charAt(n)]=n;t.exports={itoc:r,ctoi:e}},65294:(t,r,e)=>{var n=e(92569),o=e(47093);t.exports=function(t,r,e,i){try{return i?r(n(e)[0],e[1]):r(e)}catch(r){o(t,"throw",r)}}},3616:(t,r,e)=>{var n=e(3649)("iterator"),o=!1;try{var i=0,a={next:function(){return{done:!!i++}},return:function(){o=!0}};a[n]=function(){return this},Array.from(a,(function(){throw 2}))}catch(t){}t.exports=function(t,r){if(!r&&!o)return!1;var e=!1;try{var i={};i[n]=function(){return{next:function(){return{done:e=!0}}}},t(i)}catch(t){}return e}},39624:(t,r,e)=>{var n=e(7386),o=n({}.toString),i=n("".slice);t.exports=function(t){return i(o(t),8,-1)}},33058:(t,r,e)=>{var n=e(88191),o=e(9212),i=e(39624),a=e(3649)("toStringTag"),u=Object,s="Arguments"==i(function(){return arguments}());t.exports=n?i:function(t){var r,e,n;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=function(t,r){try{return t[r]}catch(t){}}(r=u(t),a))?e:s?i(r):"Object"==(n=i(r))&&o(r.callee)?"Arguments":n}},99390:(t,r,e)=>{"use strict";var n=e(38262),o=e(18257),i=e(92569);t.exports=function(){for(var t=i(this),r=o(t.add),e=0,a=arguments.length;e<a;e++)n(r,t,arguments[e]);return t}},85337:(t,r,e)=>{"use strict";var n=e(38262),o=e(18257),i=e(92569);t.exports=function(){for(var t,r=i(this),e=o(r.delete),a=!0,u=0,s=arguments.length;u<s;u++)t=n(e,r,arguments[u]),a=a&&t;return!!a}},46123:(t,r,e)=>{"use strict";var n=e(12938),o=e(38262),i=e(18257),a=e(41186),u=e(88505),s=e(54026),c=[].push;t.exports=function(t){var r,e,f,l,p=arguments.length,h=p>1?arguments[1]:void 0;return a(this),(r=void 0!==h)&&i(h),u(t)?new this:(e=[],r?(f=0,l=n(h,p>2?arguments[2]:void 0),s(t,(function(t){o(c,e,l(t,f++))}))):s(t,c,{that:e}),new this(e))}},59284:(t,r,e)=>{"use strict";var n=e(46917);t.exports=function(){return new this(n(arguments))}},26100:(t,r,e)=>{"use strict";var n=e(94615).f,o=e(3590),i=e(23705),a=e(12938),u=e(44761),s=e(88505),c=e(54026),f=e(20059),l=e(71002),p=e(7730),h=e(18494),v=e(51909).fastKey,d=e(42743),y=d.set,g=d.getterFor;t.exports={getConstructor:function(t,r,e,f){var l=t((function(t,n){u(t,p),y(t,{type:r,index:o(null),first:void 0,last:void 0,size:0}),h||(t.size=0),s(n)||c(n,t[f],{that:t,AS_ENTRIES:e})})),p=l.prototype,d=g(r),m=function(t,r,e){var n,o,i=d(t),a=b(t,r);return a?a.value=e:(i.last=a={index:o=v(r,!0),key:r,value:e,previous:n=i.last,next:void 0,removed:!1},i.first||(i.first=a),n&&(n.next=a),h?i.size++:t.size++,"F"!==o&&(i.index[o]=a)),t},b=function(t,r){var e,n=d(t),o=v(r);if("F"!==o)return n.index[o];for(e=n.first;e;e=e.next)if(e.key==r)return e};return i(p,{clear:function(){for(var t=d(this),r=t.index,e=t.first;e;)e.removed=!0,e.previous&&(e.previous=e.previous.next=void 0),delete r[e.index],e=e.next;t.first=t.last=void 0,h?t.size=0:this.size=0},delete:function(t){var r=this,e=d(r),n=b(r,t);if(n){var o=n.next,i=n.previous;delete e.index[n.index],n.removed=!0,i&&(i.next=o),o&&(o.previous=i),e.first==n&&(e.first=o),e.last==n&&(e.last=i),h?e.size--:r.size--}return!!n},forEach:function(t){for(var r,e=d(this),n=a(t,arguments.length>1?arguments[1]:void 0);r=r?r.next:e.first;)for(n(r.value,r.key,this);r&&r.removed;)r=r.previous},has:function(t){return!!b(this,t)}}),i(p,e?{get:function(t){var r=b(this,t);return r&&r.value},set:function(t,r){return m(this,0===t?0:t,r)}}:{add:function(t){return m(this,t=0===t?0:t,t)}}),h&&n(p,"size",{get:function(){return d(this).size}}),l},setStrong:function(t,r,e){var n=r+" Iterator",o=g(r),i=g(n);f(t,r,(function(t,r){y(this,{type:n,target:t,state:o(t),kind:r,last:void 0})}),(function(){for(var t=i(this),r=t.kind,e=t.last;e&&e.removed;)e=e.previous;return t.target&&(t.last=e=e?e.next:t.state.first)?l("keys"==r?e.key:"values"==r?e.value:[e.key,e.value],!1):(t.target=void 0,l(void 0,!0))}),e?"entries":"values",!e,!0),p(r)}}},57012:(t,r,e)=>{"use strict";var n=e(7386),o=e(23705),i=e(51909).getWeakData,a=e(44761),u=e(92569),s=e(88505),c=e(90794),f=e(54026),l=e(24805),p=e(62870),h=e(42743),v=h.set,d=h.getterFor,y=l.find,g=l.findIndex,m=n([].splice),b=0,x=function(t){return t.frozen||(t.frozen=new w)},w=function(){this.entries=[]},S=function(t,r){return y(t.entries,(function(t){return t[0]===r}))};w.prototype={get:function(t){var r=S(this,t);if(r)return r[1]},has:function(t){return!!S(this,t)},set:function(t,r){var e=S(this,t);e?e[1]=r:this.entries.push([t,r])},delete:function(t){var r=g(this.entries,(function(r){return r[0]===t}));return~r&&m(this.entries,r,1),!!~r}},t.exports={getConstructor:function(t,r,e,n){var l=t((function(t,o){a(t,h),v(t,{type:r,id:b++,frozen:void 0}),s(o)||f(o,t[n],{that:t,AS_ENTRIES:e})})),h=l.prototype,y=d(r),g=function(t,r,e){var n=y(t),o=i(u(r),!0);return!0===o?x(n).set(r,e):o[n.id]=e,t};return o(h,{delete:function(t){var r=y(this);if(!c(t))return!1;var e=i(t);return!0===e?x(r).delete(t):e&&p(e,r.id)&&delete e[r.id]},has:function(t){var r=y(this);if(!c(t))return!1;var e=i(t);return!0===e?x(r).has(t):e&&p(e,r.id)}}),o(h,e?{get:function(t){var r=y(this);if(c(t)){var e=i(t);return!0===e?x(r).get(t):e?e[r.id]:void 0}},set:function(t,r){return g(this,t,r)}}:{add:function(t){return g(this,t,!0)}}),l}}},24802:(t,r,e)=>{"use strict";var n=e(37263),o=e(47583),i=e(7386),a=e(34451),u=e(73746),s=e(51909),c=e(54026),f=e(44761),l=e(9212),p=e(88505),h=e(90794),v=e(16544),d=e(3616),y=e(98821),g=e(40434);t.exports=function(t,r,e){var m=-1!==t.indexOf("Map"),b=-1!==t.indexOf("Weak"),x=m?"set":"add",w=o[t],S=w&&w.prototype,E=w,A={},I=function(t){var r=i(S[t]);u(S,t,"add"==t?function(t){return r(this,0===t?0:t),this}:"delete"==t?function(t){return!(b&&!h(t))&&r(this,0===t?0:t)}:"get"==t?function(t){return b&&!h(t)?void 0:r(this,0===t?0:t)}:"has"==t?function(t){return!(b&&!h(t))&&r(this,0===t?0:t)}:function(t,e){return r(this,0===t?0:t,e),this})};if(a(t,!l(w)||!(b||S.forEach&&!v((function(){(new w).entries().next()})))))E=e.getConstructor(r,t,m,x),s.enable();else if(a(t,!0)){var _=new E,R=_[x](b?{}:-0,1)!=_,O=v((function(){_.has(1)})),T=d((function(t){new w(t)})),k=!b&&v((function(){for(var t=new w,r=5;r--;)t[x](r,r);return!t.has(-0)}));T||((E=r((function(t,r){f(t,S);var e=g(new w,t,E);return p(r)||c(r,e[x],{that:e,AS_ENTRIES:m}),e}))).prototype=S,S.constructor=E),(O||k)&&(I("delete"),I("has"),m&&I("get")),(k||R)&&I(x),b&&S.clear&&delete S.clear}return A[t]=E,n({global:!0,constructor:!0,forced:E!=w},A),y(E,t),b||e.setStrong(E,t,m),E}},3246:(t,r,e)=>{e(14327),e(31770);var n=e(35897),o=e(3590),i=e(90794),a=Object,u=TypeError,s=n("Map"),c=n("WeakMap"),f=function(){this.object=null,this.symbol=null,this.primitives=null,this.objectsByIndex=o(null)};f.prototype.get=function(t,r){return this[t]||(this[t]=r())},f.prototype.next=function(t,r,e){var n=e?this.objectsByIndex[t]||(this.objectsByIndex[t]=new c):this.primitives||(this.primitives=new s),o=n.get(r);return o||n.set(r,o=new f),o};var l=new f;t.exports=function(){var t,r,e=l,n=arguments.length;for(t=0;t<n;t++)i(r=arguments[t])&&(e=e.next(t,r,!0));if(this===a&&e===l)throw u("Composite keys must contain a non-primitive component");for(t=0;t<n;t++)i(r=arguments[t])||(e=e.next(t,r,!1));return e}},83478:(t,r,e)=>{var n=e(62870),o=e(40929),i=e(46683),a=e(94615);t.exports=function(t,r,e){for(var u=o(r),s=a.f,c=i.f,f=0;f<u.length;f++){var l=u[f];n(t,l)||e&&n(e,l)||s(t,l,c(r,l))}}},83989:(t,r,e)=>{var n=e(3649)("match");t.exports=function(t){var r=/./;try{"/./"[t](r)}catch(e){try{return r[n]=!1,"/./"[t](r)}catch(t){}}return!1}},50926:(t,r,e)=>{var n=e(16544);t.exports=!n((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},35888:(t,r,e)=>{var n=e(7386),o=e(63955),i=e(28320),a=/"/g,u=n("".replace);t.exports=function(t,r,e,n){var s=i(o(t)),c="<"+r;return""!==e&&(c+=" "+e+'="'+u(i(n),a,"&quot;")+'"'),c+">"+s+"</"+r+">"}},71002:t=>{t.exports=function(t,r){return{value:t,done:r}}},57:(t,r,e)=>{var n=e(18494),o=e(94615),i=e(54677);t.exports=n?function(t,r,e){return o.f(t,r,i(1,e))}:function(t,r,e){return t[r]=e,t}},54677:t=>{t.exports=function(t,r){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:r}}},65999:(t,r,e)=>{"use strict";var n=e(98734),o=e(94615),i=e(54677);t.exports=function(t,r,e){var a=n(r);a in t?o.f(t,a,i(0,e)):t[a]=e}},74095:(t,r,e)=>{"use strict";var n=e(7386),o=e(16544),i=e(70578).start,a=RangeError,u=isFinite,s=Math.abs,c=Date.prototype,f=c.toISOString,l=n(c.getTime),p=n(c.getUTCDate),h=n(c.getUTCFullYear),v=n(c.getUTCHours),d=n(c.getUTCMilliseconds),y=n(c.getUTCMinutes),g=n(c.getUTCMonth),m=n(c.getUTCSeconds);t.exports=o((function(){return"0385-07-25T07:06:39.999Z"!=f.call(new Date(-50000000000001))}))||!o((function(){f.call(new Date(NaN))}))?function(){if(!u(l(this)))throw a("Invalid time value");var t=this,r=h(t),e=d(t),n=r<0?"-":r>9999?"+":"";return n+i(s(r),n?6:4,0)+"-"+i(g(t)+1,2,0)+"-"+i(p(t),2,0)+"T"+i(v(t),2,0)+":"+i(y(t),2,0)+":"+i(m(t),2,0)+"."+i(e,3,0)+"Z"}:f},40307:(t,r,e)=>{"use strict";var n=e(92569),o=e(76252),i=TypeError;t.exports=function(t){if(n(this),"string"===t||"default"===t)t="string";else if("number"!==t)throw i("Incorrect hint");return o(this,t)}},92499:(t,r,e)=>{var n=e(49594),o=e(94615);t.exports=function(t,r,e){return e.get&&n(e.get,r,{getter:!0}),e.set&&n(e.set,r,{setter:!0}),o.f(t,r,e)}},73746:(t,r,e)=>{var n=e(9212),o=e(94615),i=e(49594),a=e(32296);t.exports=function(t,r,e,u){u||(u={});var s=u.enumerable,c=void 0!==u.name?u.name:r;if(n(e)&&i(e,c,u),u.global)s?t[r]=e:a(r,e);else{try{u.unsafe?t[r]&&(s=!0):delete t[r]}catch(t){}s?t[r]=e:o.f(t,r,{value:e,enumerable:!1,configurable:!u.nonConfigurable,writable:!u.nonWritable})}return t}},23705:(t,r,e)=>{var n=e(73746);t.exports=function(t,r,e){for(var o in r)n(t,o,r[o],e);return t}},32296:(t,r,e)=>{var n=e(47583),o=Object.defineProperty;t.exports=function(t,r){try{o(n,t,{value:r,configurable:!0,writable:!0})}catch(e){n[t]=r}return r}},37774:(t,r,e)=>{"use strict";var n=e(75637),o=TypeError;t.exports=function(t,r){if(!delete t[r])throw o("Cannot delete property "+n(r)+" of "+n(t))}},18494:(t,r,e)=>{var n=e(16544);t.exports=!n((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},92952:t=>{function r(t){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r(t)}var e="object"==("undefined"==typeof document?"undefined":r(document))&&document.all,n=void 0===e&&void 0!==e;t.exports={all:e,IS_HTMLDDA:n}},26668:(t,r,e)=>{var n=e(47583),o=e(90794),i=n.document,a=o(i)&&o(i.createElement);t.exports=function(t){return a?i.createElement(t):{}}},6768:t=>{var r=TypeError;t.exports=function(t){if(t>9007199254740991)throw r("Maximum allowed index exceeded");return t}},5331:t=>{t.exports={IndexSizeError:{s:"INDEX_SIZE_ERR",c:1,m:1},DOMStringSizeError:{s:"DOMSTRING_SIZE_ERR",c:2,m:0},HierarchyRequestError:{s:"HIERARCHY_REQUEST_ERR",c:3,m:1},WrongDocumentError:{s:"WRONG_DOCUMENT_ERR",c:4,m:1},InvalidCharacterError:{s:"INVALID_CHARACTER_ERR",c:5,m:1},NoDataAllowedError:{s:"NO_DATA_ALLOWED_ERR",c:6,m:0},NoModificationAllowedError:{s:"NO_MODIFICATION_ALLOWED_ERR",c:7,m:1},NotFoundError:{s:"NOT_FOUND_ERR",c:8,m:1},NotSupportedError:{s:"NOT_SUPPORTED_ERR",c:9,m:1},InUseAttributeError:{s:"INUSE_ATTRIBUTE_ERR",c:10,m:1},InvalidStateError:{s:"INVALID_STATE_ERR",c:11,m:1},SyntaxError:{s:"SYNTAX_ERR",c:12,m:1},InvalidModificationError:{s:"INVALID_MODIFICATION_ERR",c:13,m:1},NamespaceError:{s:"NAMESPACE_ERR",c:14,m:1},InvalidAccessError:{s:"INVALID_ACCESS_ERR",c:15,m:1},ValidationError:{s:"VALIDATION_ERR",c:16,m:0},TypeMismatchError:{s:"TYPE_MISMATCH_ERR",c:17,m:1},SecurityError:{s:"SECURITY_ERR",c:18,m:1},NetworkError:{s:"NETWORK_ERR",c:19,m:1},AbortError:{s:"ABORT_ERR",c:20,m:1},URLMismatchError:{s:"URL_MISMATCH_ERR",c:21,m:1},QuotaExceededError:{s:"QUOTA_EXCEEDED_ERR",c:22,m:1},TimeoutError:{s:"TIMEOUT_ERR",c:23,m:1},InvalidNodeTypeError:{s:"INVALID_NODE_TYPE_ERR",c:24,m:1},DataCloneError:{s:"DATA_CLONE_ERR",c:25,m:1}}},86778:t=>{t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},49307:(t,r,e)=>{var n=e(26668)("span").classList,o=n&&n.constructor&&n.constructor.prototype;t.exports=o===Object.prototype?void 0:o},15857:(t,r,e)=>{var n=e(46918).match(/firefox\/(\d+)/i);t.exports=!!n&&+n[1]},12274:(t,r,e)=>{function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}var o=e(733),i=e(45354);t.exports=!o&&!i&&"object"==("undefined"==typeof window?"undefined":n(window))&&"object"==("undefined"==typeof document?"undefined":n(document))},733:t=>{function r(t){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r(t)}t.exports="object"==("undefined"==typeof Deno?"undefined":r(Deno))&&Deno&&"object"==r(Deno.version)},50924:(t,r,e)=>{var n=e(46918);t.exports=/MSIE|Trident/.test(n)},63256:(t,r,e)=>{var n=e(46918),o=e(47583);t.exports=/ipad|iphone|ipod/i.test(n)&&void 0!==o.Pebble},17020:(t,r,e)=>{var n=e(46918);t.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(n)},45354:(t,r,e)=>{var n=e(39624),o=e(47583);t.exports="process"==n(o.process)},86846:(t,r,e)=>{var n=e(46918);t.exports=/web0s(?!.*chrome)/i.test(n)},46918:(t,r,e)=>{var n=e(35897);t.exports=n("navigator","userAgent")||""},24061:(t,r,e)=>{var n,o,i=e(47583),a=e(46918),u=i.process,s=i.Deno,c=u&&u.versions||s&&s.version,f=c&&c.v8;f&&(o=(n=f.split("."))[0]>0&&n[0]<4?1:+(n[0]+n[1])),!o&&a&&(!(n=a.match(/Edge\/(\d+)/))||n[1]>=74)&&(n=a.match(/Chrome\/(\d+)/))&&(o=+n[1]),t.exports=o},20003:(t,r,e)=>{var n=e(46918).match(/AppleWebKit\/(\d+)\./);t.exports=!!n&&+n[1]},12176:(t,r,e)=>{var n=e(47583);t.exports=function(t){return n[t].prototype}},15690:t=>{t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},80668:(t,r,e)=>{var n=e(7386),o=Error,i=n("".replace),a=String(o("zxcasd").stack),u=/\n\s*at [^:]*:[^\n]*/,s=u.test(a);t.exports=function(t,r){if(s&&"string"==typeof t&&!o.prepareStackTrace)for(;r--;)t=i(t,u,"");return t}},51178:(t,r,e)=>{var n=e(16544),o=e(54677);t.exports=!n((function(){var t=Error("a");return!("stack"in t)||(Object.defineProperty(t,"stack",o(1,7)),7!==t.stack)}))},88477:(t,r,e)=>{"use strict";var n=e(18494),o=e(16544),i=e(92569),a=e(3590),u=e(22764),s=Error.prototype.toString,c=o((function(){if(n){var t=a(Object.defineProperty({},"name",{get:function(){return this===t}}));if("true"!==s.call(t))return!0}return"2: 1"!==s.call({message:1,name:2})||"Error"!==s.call({})}));t.exports=c?function(){var t=i(this),r=u(t.name,"Error"),e=u(t.message);return r?e?r+": "+e:r:e}:s},37263:(t,r,e)=>{function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}var o=e(47583),i=e(46683).f,a=e(57),u=e(73746),s=e(32296),c=e(83478),f=e(34451);t.exports=function(t,r){var e,l,p,h,v,d=t.target,y=t.global,g=t.stat;if(e=y?o:g?o[d]||s(d,{}):(o[d]||{}).prototype)for(l in r){if(h=r[l],p=t.dontCallGetSet?(v=i(e,l))&&v.value:e[l],!f(y?l:d+(g?".":"#")+l,t.forced)&&void 0!==p){if(n(h)==n(p))continue;c(h,p)}(t.sham||p&&p.sham)&&a(h,"sham",!0),u(e,l,h,t)}}},16544:t=>{t.exports=function(t){try{return!!t()}catch(t){return!0}}},90783:(t,r,e)=>{"use strict";e(62322);var n=e(7386),o=e(73746),i=e(48445),a=e(16544),u=e(3649),s=e(57),c=u("species"),f=RegExp.prototype;t.exports=function(t,r,e,l){var p=u(t),h=!a((function(){var r={};return r[p]=function(){return 7},7!=""[t](r)})),v=h&&!a((function(){var r=!1,e=/a/;return"split"===t&&((e={}).constructor={},e.constructor[c]=function(){return e},e.flags="",e[p]=/./[p]),e.exec=function(){return r=!0,null},e[p](""),!r}));if(!h||!v||e){var d=n(/./[p]),y=r(p,""[t],(function(t,r,e,o,a){var u=n(t),s=r.exec;return s===i||s===f.exec?h&&!a?{done:!0,value:d(r,e,o)}:{done:!0,value:u(e,r,o)}:{done:!1}}));o(String.prototype,t,y[0]),o(f,p,y[1])}l&&s(f[p],"sham",!0)}},21266:(t,r,e)=>{"use strict";var n=e(54521),o=e(1825),i=e(6768),a=e(12938);t.exports=function t(r,e,u,s,c,f,l,p){for(var h,v=c,d=0,y=!!l&&a(l,p);d<s;)d in u&&(h=y?y(u[d],d,e):u[d],f>0&&n(h)?v=t(r,e,h,o(h),v,f-1)-1:(i(v+1),r[v]=h),v++),d++;return v}},39974:(t,r,e)=>{var n=e(16544);t.exports=!n((function(){return Object.isExtensible(Object.preventExtensions({}))}))},71611:(t,r,e)=>{function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}var o=e(88987),i=Function.prototype,a=i.apply,u=i.call;t.exports="object"==("undefined"==typeof Reflect?"undefined":n(Reflect))&&Reflect.apply||(o?u.bind(a):function(){return u.apply(a,arguments)})},12938:(t,r,e)=>{var n=e(7386),o=e(18257),i=e(88987),a=n(n.bind);t.exports=function(t,r){return o(t),void 0===r?t:i?a(t,r):function(){return t.apply(r,arguments)}}},88987:(t,r,e)=>{var n=e(16544);t.exports=!n((function(){var t=function(){}.bind();return"function"!=typeof t||t.hasOwnProperty("prototype")}))},51335:(t,r,e)=>{"use strict";var n=e(7386),o=e(18257),i=e(90794),a=e(62870),u=e(46917),s=e(88987),c=Function,f=n([].concat),l=n([].join),p={},h=function(t,r,e){if(!a(p,r)){for(var n=[],o=0;o<r;o++)n[o]="a["+o+"]";p[r]=c("C,a","return new C("+l(n,",")+")")}return p[r](t,e)};t.exports=s?c.bind:function(t){var r=o(this),e=r.prototype,n=u(arguments,1),a=function(){var e=f(n,u(arguments));return this instanceof a?h(r,e.length,e):r.apply(t,e)};return i(e)&&(a.prototype=e),a}},38262:(t,r,e)=>{var n=e(88987),o=Function.prototype.call;t.exports=n?o.bind(o):function(){return o.apply(o,arguments)}},14340:(t,r,e)=>{var n=e(18494),o=e(62870),i=Function.prototype,a=n&&Object.getOwnPropertyDescriptor,u=o(i,"name"),s=u&&"something"===function(){}.name,c=u&&(!n||n&&a(i,"name").configurable);t.exports={EXISTS:u,PROPER:s,CONFIGURABLE:c}},7386:(t,r,e)=>{var n=e(88987),o=Function.prototype,i=o.bind,a=o.call,u=n&&i.bind(a,a);t.exports=n?function(t){return t&&u(t)}:function(t){return t&&function(){return a.apply(t,arguments)}}},10862:(t,r,e)=>{var n=e(38262),o=e(33670),i=e(92569),a=e(36307),u=e(60911),s=e(3649)("asyncIterator");t.exports=function(t,r){var e=arguments.length<2?u(t,s):r;return e?i(n(e,t)):new o(a(t))}},35897:(t,r,e)=>{var n=e(47583),o=e(9212),i=function(t){return o(t)?t:void 0};t.exports=function(t,r){return arguments.length<2?i(n[t]):n[t]&&n[t][r]}},7388:(t,r,e)=>{var n=e(18257),o=e(92569);t.exports=function(t){return{iterator:t,next:n(o(t).next)}}},38272:(t,r,e)=>{var n=e(33058),o=e(60911),i=e(88505),a=e(60339),u=e(3649)("iterator");t.exports=function(t){if(!i(t))return o(t,u)||o(t,"@@iterator")||a[n(t)]}},36307:(t,r,e)=>{var n=e(38262),o=e(18257),i=e(92569),a=e(75637),u=e(38272),s=TypeError;t.exports=function(t,r){var e=arguments.length<2?u(t):r;if(o(e))return i(n(e,t));throw s(a(t)+" is not iterable")}},53780:(t,r,e)=>{var n=e(38262);t.exports=function(t){return n(Map.prototype.entries,t)}},60911:(t,r,e)=>{var n=e(18257),o=e(88505);t.exports=function(t,r){var e=t[r];return o(e)?void 0:n(e)}},91206:(t,r,e)=>{var n=e(38262);t.exports=function(t){return n(Set.prototype.values,t)}},4305:(t,r,e)=>{var n=e(7386),o=e(61324),i=Math.floor,a=n("".charAt),u=n("".replace),s=n("".slice),c=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,f=/\$([$&'`]|\d{1,2})/g;t.exports=function(t,r,e,n,l,p){var h=e+t.length,v=n.length,d=f;return void 0!==l&&(l=o(l),d=c),u(p,d,(function(o,u){var c;switch(a(u,0)){case"$":return"$";case"&":return t;case"`":return s(r,0,e);case"'":return s(r,h);case"<":c=l[s(u,1,-1)];break;default:var f=+u;if(0===f)return o;if(f>v){var p=i(f/10);return 0===p?o:p<=v?void 0===n[p-1]?a(u,1):n[p-1]+a(u,1):o}c=n[f-1]}return void 0===c?"":c}))}},47583:(t,r,e)=>{function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}var o=function(t){return t&&t.Math==Math&&t};t.exports=o("object"==("undefined"==typeof globalThis?"undefined":n(globalThis))&&globalThis)||o("object"==("undefined"==typeof window?"undefined":n(window))&&window)||o("object"==("undefined"==typeof self?"undefined":n(self))&&self)||o("object"==(void 0===e.g?"undefined":n(e.g))&&e.g)||function(){return this}()||Function("return this")()},62870:(t,r,e)=>{var n=e(7386),o=e(61324),i=n({}.hasOwnProperty);t.exports=Object.hasOwn||function(t,r){return i(o(t),r)}},64639:t=>{t.exports={}},92716:(t,r,e)=>{var n=e(47583);t.exports=function(t,r){var e=n.console;e&&e.error&&(1==arguments.length?e.error(t):e.error(t,r))}},90482:(t,r,e)=>{var n=e(35897);t.exports=n("document","documentElement")},275:(t,r,e)=>{var n=e(18494),o=e(16544),i=e(26668);t.exports=!n&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},43834:t=>{var r=Array,e=Math.abs,n=Math.pow,o=Math.floor,i=Math.log,a=Math.LN2;t.exports={pack:function(t,u,s){var c,f,l,p=r(s),h=8*s-u-1,v=(1<<h)-1,d=v>>1,y=23===u?n(2,-24)-n(2,-77):0,g=t<0||0===t&&1/t<0?1:0,m=0;for((t=e(t))!=t||t===1/0?(f=t!=t?1:0,c=v):(c=o(i(t)/a),t*(l=n(2,-c))<1&&(c--,l*=2),(t+=c+d>=1?y/l:y*n(2,1-d))*l>=2&&(c++,l/=2),c+d>=v?(f=0,c=v):c+d>=1?(f=(t*l-1)*n(2,u),c+=d):(f=t*n(2,d-1)*n(2,u),c=0));u>=8;)p[m++]=255&f,f/=256,u-=8;for(c=c<<u|f,h+=u;h>0;)p[m++]=255&c,c/=256,h-=8;return p[--m]|=128*g,p},unpack:function(t,r){var e,o=t.length,i=8*o-r-1,a=(1<<i)-1,u=a>>1,s=i-7,c=o-1,f=t[c--],l=127&f;for(f>>=7;s>0;)l=256*l+t[c--],s-=8;for(e=l&(1<<-s)-1,l>>=-s,s+=r;s>0;)e=256*e+t[c--],s-=8;if(0===l)l=1-u;else{if(l===a)return e?NaN:f?-1/0:1/0;e+=n(2,r),l-=u}return(f?-1:1)*e*n(2,l-r)}}},55044:(t,r,e)=>{var n=e(7386),o=e(16544),i=e(39624),a=Object,u=n("".split);t.exports=o((function(){return!a("z").propertyIsEnumerable(0)}))?function(t){return"String"==i(t)?u(t,""):a(t)}:a},40434:(t,r,e)=>{var n=e(9212),o=e(90794),i=e(17496);t.exports=function(t,r,e){var a,u;return i&&n(a=r.constructor)&&a!==e&&o(u=a.prototype)&&u!==e.prototype&&i(t,u),t}},69734:(t,r,e)=>{var n=e(7386),o=e(9212),i=e(31314),a=n(Function.toString);o(i.inspectSource)||(i.inspectSource=function(t){return a(t)}),t.exports=i.inspectSource},94402:(t,r,e)=>{var n=e(90794),o=e(57);t.exports=function(t,r){n(r)&&"cause"in r&&o(t,"cause",r.cause)}},51909:(t,r,e)=>{function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}var o=e(37263),i=e(7386),a=e(64639),u=e(90794),s=e(62870),c=e(94615).f,f=e(9275),l=e(63130),p=e(4766),h=e(98284),v=e(39974),d=!1,y=h("meta"),g=0,m=function(t){c(t,y,{value:{objectID:"O"+g++,weakData:{}}})},b=t.exports={enable:function(){b.enable=function(){},d=!0;var t=f.f,r=i([].splice),e={};e[y]=1,t(e).length&&(f.f=function(e){for(var n=t(e),o=0,i=n.length;o<i;o++)if(n[o]===y){r(n,o,1);break}return n},o({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:l.f}))},fastKey:function(t,r){if(!u(t))return"symbol"==n(t)?t:("string"==typeof t?"S":"P")+t;if(!s(t,y)){if(!p(t))return"F";if(!r)return"E";m(t)}return t[y].objectID},getWeakData:function(t,r){if(!s(t,y)){if(!p(t))return!0;if(!r)return!1;m(t)}return t[y].weakData},onFreeze:function(t){return v&&d&&p(t)&&!s(t,y)&&m(t),t}};a[y]=!0},42743:(t,r,e)=>{var n,o,i,a=e(75307),u=e(47583),s=e(7386),c=e(90794),f=e(57),l=e(62870),p=e(31314),h=e(89137),v=e(64639),d="Object already initialized",y=u.TypeError,g=u.WeakMap;if(a||p.state){var m=p.state||(p.state=new g),b=s(m.get),x=s(m.has),w=s(m.set);n=function(t,r){if(x(m,t))throw y(d);return r.facade=t,w(m,t,r),r},o=function(t){return b(m,t)||{}},i=function(t){return x(m,t)}}else{var S=h("state");v[S]=!0,n=function(t,r){if(l(t,S))throw y(d);return r.facade=t,f(t,S,r),r},o=function(t){return l(t,S)?t[S]:{}},i=function(t){return l(t,S)}}t.exports={set:n,get:o,has:i,enforce:function(t){return i(t)?o(t):n(t,{})},getterFor:function(t){return function(r){var e;if(!c(r)||(e=o(r)).type!==t)throw y("Incompatible receiver, "+t+" required");return e}}}},70114:(t,r,e)=>{var n=e(3649),o=e(60339),i=n("iterator"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||a[i]===t)}},54521:(t,r,e)=>{var n=e(39624);t.exports=Array.isArray||function(t){return"Array"==n(t)}},19022:(t,r,e)=>{var n=e(33058),o=e(7386)("".slice);t.exports=function(t){return"Big"===o(n(t),0,3)}},9212:(t,r,e)=>{var n=e(92952),o=n.all;t.exports=n.IS_HTMLDDA?function(t){return"function"==typeof t||t===o}:function(t){return"function"==typeof t}},62097:(t,r,e)=>{var n=e(7386),o=e(16544),i=e(9212),a=e(33058),u=e(35897),s=e(69734),c=function(){},f=[],l=u("Reflect","construct"),p=/^\s*(?:class|function)\b/,h=n(p.exec),v=!p.exec(c),d=function(t){if(!i(t))return!1;try{return l(c,f,t),!0}catch(t){return!1}},y=function(t){if(!i(t))return!1;switch(a(t)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return v||!!h(p,s(t))}catch(t){return!0}};y.sham=!0,t.exports=!l||o((function(){var t;return d(d.call)||!d(Object)||!d((function(){t=!0}))||t}))?y:d},78118:(t,r,e)=>{var n=e(62870);t.exports=function(t){return void 0!==t&&(n(t,"value")||n(t,"writable"))}},34451:(t,r,e)=>{var n=e(16544),o=e(9212),i=/#|\.prototype\./,a=function(t,r){var e=s[u(t)];return e==f||e!=c&&(o(r)?n(r):!!r)},u=a.normalize=function(t){return String(t).replace(i,".").toLowerCase()},s=a.data={},c=a.NATIVE="N",f=a.POLYFILL="P";t.exports=a},69352:(t,r,e)=>{var n=e(90794),o=Math.floor;t.exports=Number.isInteger||function(t){return!n(t)&&isFinite(t)&&o(t)===t}},88505:t=>{t.exports=function(t){return null==t}},90794:(t,r,e)=>{function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}var o=e(9212),i=e(92952),a=i.all;t.exports=i.IS_HTMLDDA?function(t){return"object"==n(t)?null!==t:o(t)||t===a}:function(t){return"object"==n(t)?null!==t:o(t)}},86268:t=>{t.exports=!1},17574:(t,r,e)=>{var n=e(90794),o=e(39624),i=e(3649)("match");t.exports=function(t){var r;return n(t)&&(void 0!==(r=t[i])?!!r:"RegExp"==o(t))}},35871:(t,r,e)=>{function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}var o=e(35897),i=e(9212),a=e(22447),u=e(67786),s=Object;t.exports=u?function(t){return"symbol"==n(t)}:function(t){var r=o("Symbol");return i(r)&&a(r.prototype,s(t))}},54026:(t,r,e)=>{function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}var o=e(12938),i=e(38262),a=e(92569),u=e(75637),s=e(70114),c=e(1825),f=e(22447),l=e(36307),p=e(38272),h=e(47093),v=TypeError,d=function(t,r){this.stopped=t,this.result=r},y=d.prototype;t.exports=function(t,r,e){var g,m,b,x,w,S,E,A=e&&e.that,I=!(!e||!e.AS_ENTRIES),_=!(!e||!e.IS_RECORD),R=!(!e||!e.IS_ITERATOR),O=!(!e||!e.INTERRUPTED),T=o(r,A),k=function(t){return g&&h(g,"normal",t),new d(!0,t)},M=function(t){return I?(a(t),O?T(t[0],t[1],k):T(t[0],t[1])):O?T(t,k):T(t)};if(_)g=t.iterator;else if(R)g=t;else{if(!(m=p(t)))throw v(u(t)+" is not iterable");if(s(m)){for(b=0,x=c(t);x>b;b++)if((w=M(t[b]))&&f(y,w))return w;return new d(!1)}g=l(t,m)}for(S=_?t.next:g.next;!(E=i(S,g)).done;){try{w=M(E.value)}catch(t){h(g,"throw",t)}if("object"==n(w)&&w&&f(y,w))return w}return new d(!1)}},47093:(t,r,e)=>{var n=e(38262),o=e(92569),i=e(60911);t.exports=function(t,r,e){var a,u;o(t);try{if(!(a=i(t,"return"))){if("throw"===r)throw e;return e}a=n(a,t)}catch(t){u=!0,a=t}if("throw"===r)throw e;if(u)throw a;return o(a),e}},73098:(t,r,e)=>{"use strict";var n=e(72365).IteratorPrototype,o=e(3590),i=e(54677),a=e(98821),u=e(60339),s=function(){return this};t.exports=function(t,r,e,c){var f=r+" Iterator";return t.prototype=o(n,{next:i(+!c,e)}),a(t,f,!1,!0),u[f]=s,t}},72471:(t,r,e)=>{"use strict";var n=e(38262),o=e(3590),i=e(57),a=e(23705),u=e(3649),s=e(42743),c=e(60911),f=e(72365).IteratorPrototype,l=e(71002),p=e(47093),h="IteratorHelper",v="WrapForValidIterator",d=s.set,y=u("toStringTag"),g=function(t){var r=t?v:h,e=s.getterFor(r),u=a(o(f),{next:function(){var r=e(this);if(t)return r.nextHandler();try{var n=r.done?void 0:r.nextHandler();return l(n,r.done)}catch(t){throw r.done=!0,t}},return:function(){var r=e(this),o=r.iterator;if(r.done=!0,t){var i=c(o,"return");return i?n(i,o):l(void 0,!0)}var a=r.innerIterator;if(a)try{p(a,"return")}catch(t){return p(o,"throw",t)}return p(o,"return"),l(void 0,!0)}});return t||i(u,y,"Iterator Helper"),u},m=g(!1),b=g(!0);t.exports=function(t,r){var e=r?v:h,n=function(r,n){n?(n.iterator=r.iterator,n.next=r.next):n=r,n.type=e,n.nextHandler=t,n.done=!1,d(this,n)};return n.prototype=r?b:m,n}},20059:(t,r,e)=>{"use strict";var n=e(37263),o=e(38262),i=e(86268),a=e(14340),u=e(9212),s=e(73098),c=e(80729),f=e(17496),l=e(98821),p=e(57),h=e(73746),v=e(3649),d=e(60339),y=e(72365),g=a.PROPER,m=a.CONFIGURABLE,b=y.IteratorPrototype,x=y.BUGGY_SAFARI_ITERATORS,w=v("iterator"),S="keys",E="values",A="entries",I=function(){return this};t.exports=function(t,r,e,a,v,y,_){s(e,r,a);var R,O,T,k=function(t){if(t===v&&L)return L;if(!x&&t in j)return j[t];switch(t){case S:case E:case A:return function(){return new e(this,t)}}return function(){return new e(this)}},M=r+" Iterator",P=!1,j=t.prototype,C=j[w]||j["@@iterator"]||v&&j[v],L=!x&&C||k(v),N="Array"==r&&j.entries||C;if(N&&(R=c(N.call(new t)))!==Object.prototype&&R.next&&(i||c(R)===b||(f?f(R,b):u(R[w])||h(R,w,I)),l(R,M,!0,!0),i&&(d[M]=I)),g&&v==E&&C&&C.name!==E&&(!i&&m?p(j,"name",E):(P=!0,L=function(){return o(C,this)})),v)if(O={values:k(E),keys:y?L:k(S),entries:k(A)},_)for(T in O)(x||P||!(T in j))&&h(j,T,O[T]);else n({target:r,proto:!0,forced:x||P},O);return i&&!_||j[w]===L||h(j,w,L,{name:v}),d[r]=L,O}},88747:(t,r,e)=>{"use strict";var n=e(38262),o=e(92569),i=e(7388),a=e(72471)((function(){var t=o(n(this.next,this.iterator));if(!(this.done=!!t.done))return[this.index++,t.value]}));t.exports=function(){return new a(i(this),{index:0})}},72365:(t,r,e)=>{"use strict";var n,o,i,a=e(16544),u=e(9212),s=e(90794),c=e(3590),f=e(80729),l=e(73746),p=e(3649),h=e(86268),v=p("iterator"),d=!1;[].keys&&("next"in(i=[].keys())?(o=f(f(i)))!==Object.prototype&&(n=o):d=!0),!s(n)||a((function(){var t={};return n[v].call(t)!==t}))?n={}:h&&(n=c(n)),u(n[v])||l(n,v,(function(){return this})),t.exports={IteratorPrototype:n,BUGGY_SAFARI_ITERATORS:d}},60339:t=>{t.exports={}},1825:(t,r,e)=>{var n=e(70097);t.exports=function(t){return n(t.length)}},49594:(t,r,e)=>{var n=e(16544),o=e(9212),i=e(62870),a=e(18494),u=e(14340).CONFIGURABLE,s=e(69734),c=e(42743),f=c.enforce,l=c.get,p=Object.defineProperty,h=a&&!n((function(){return 8!==p((function(){}),"length",{value:8}).length})),v=String(String).split("String"),d=t.exports=function(t,r,e){"Symbol("===String(r).slice(0,7)&&(r="["+String(r).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),e&&e.getter&&(r="get "+r),e&&e.setter&&(r="set "+r),(!i(t,"name")||u&&t.name!==r)&&(a?p(t,"name",{value:r,configurable:!0}):t.name=r),h&&e&&i(e,"arity")&&t.length!==e.arity&&p(t,"length",{value:e.arity});try{e&&i(e,"constructor")&&e.constructor?a&&p(t,"prototype",{writable:!1}):t.prototype&&(t.prototype=void 0)}catch(t){}var n=f(t);return i(n,"source")||(n.source=v.join("string"==typeof r?r:"")),t};Function.prototype.toString=d((function(){return o(this)&&l(this).source||s(this)}),"toString")},53069:(t,r,e)=>{"use strict";var n=e(38262),o=e(18257),i=e(92569);t.exports=function(t,r){var e,a,u=i(this),s=o(u.get),c=o(u.has),f=o(u.set);return n(c,u,t)?(e=n(s,u,t),"update"in r&&(e=r.update(e,t,u),n(f,u,t,e)),e):(a=r.insert(t,u),n(f,u,t,a),a)}},48080:(t,r,e)=>{"use strict";var n=e(38262),o=e(18257),i=e(9212),a=e(92569),u=TypeError;t.exports=function(t,r){var e,s=a(this),c=o(s.get),f=o(s.has),l=o(s.set),p=arguments.length>2?arguments[2]:void 0;if(!i(r)&&!i(p))throw u("At least one callback required");return n(f,s,t)?(e=n(c,s,t),i(r)&&(e=r(e),n(l,s,t,e))):i(p)&&(e=p(),n(l,s,t,e)),e}},1599:t=>{var r=Math.expm1,e=Math.exp;t.exports=!r||r(10)>22025.465794806718||r(10)<22025.465794806718||-2e-17!=r(-2e-17)?function(t){var r=+t;return 0==r?r:r>-1e-6&&r<1e-6?r+r*r/2:e(r)-1}:r},75661:(t,r,e)=>{var n=e(87768),o=Math.abs,i=Math.pow,a=i(2,-52),u=i(2,-23),s=i(2,127)*(2-u),c=i(2,-126);t.exports=Math.fround||function(t){var r,e,i=+t,f=o(i),l=n(i);return f<c?l*function(t){return t+1/a-1/a}(f/c/u)*c*u:(e=(r=(1+u/a)*f)-(r-f))>s||e!=e?l*(1/0):l*e}},52789:t=>{var r=Math.log,e=Math.LOG10E;t.exports=Math.log10||function(t){return r(t)*e}},40865:t=>{var r=Math.log;t.exports=Math.log1p||function(t){var e=+t;return e>-1e-8&&e<1e-8?e-e*e/2:r(1+e)}},86617:t=>{t.exports=Math.scale||function(t,r,e,n,o){var i=+t,a=+r,u=+e,s=+n,c=+o;return i!=i||a!=a||u!=u||s!=s||c!=c?NaN:i===1/0||i===-1/0?i:(i-a)*(c-s)/(u-a)+s}},87768:t=>{t.exports=Math.sign||function(t){var r=+t;return 0==r||r!=r?r:r<0?-1:1}},19021:t=>{var r=Math.ceil,e=Math.floor;t.exports=Math.trunc||function(t){var n=+t;return(n>0?e:r)(n)}},92095:(t,r,e)=>{var n,o,i,a,u,s,c,f,l=e(47583),p=e(12938),h=e(46683).f,v=e(48117).set,d=e(17020),y=e(63256),g=e(86846),m=e(45354),b=l.MutationObserver||l.WebKitMutationObserver,x=l.document,w=l.process,S=l.Promise,E=h(l,"queueMicrotask"),A=E&&E.value;A||(n=function(){var t,r;for(m&&(t=w.domain)&&t.exit();o;){r=o.fn,o=o.next;try{r()}catch(t){throw o?a():i=void 0,t}}i=void 0,t&&t.enter()},d||m||g||!b||!x?!y&&S&&S.resolve?((c=S.resolve(void 0)).constructor=S,f=p(c.then,c),a=function(){f(n)}):m?a=function(){w.nextTick(n)}:(v=p(v,l),a=function(){v(n)}):(u=!0,s=x.createTextNode(""),new b(n).observe(s,{characterData:!0}),a=function(){s.data=u=!u})),t.exports=A||function(t){var r={fn:t,next:void 0};i&&(i.next=r),o||(o=r,a()),i=r}},5084:(t,r,e)=>{"use strict";var n=e(18257),o=TypeError,i=function(t){var r,e;this.promise=new t((function(t,n){if(void 0!==r||void 0!==e)throw o("Bad Promise constructor");r=t,e=n})),this.resolve=n(r),this.reject=n(e)};t.exports.f=function(t){return new i(t)}},22764:(t,r,e)=>{var n=e(28320);t.exports=function(t,r){return void 0===t?arguments.length<2?"":r:n(t)}},52183:t=>{var r=RangeError;t.exports=function(t){if(t==t)return t;throw r("NaN is not allowed")}},59041:(t,r,e)=>{var n=e(17574),o=TypeError;t.exports=function(t){if(n(t))throw o("The method doesn't accept regular expressions");return t}},79606:(t,r,e)=>{var n=e(47583).isFinite;t.exports=Number.isFinite||function(t){return"number"==typeof t&&n(t)}},17560:(t,r,e)=>{var n=e(47583),o=e(16544),i=e(7386),a=e(28320),u=e(68940).trim,s=e(20771),c=i("".charAt),f=n.parseFloat,l=n.Symbol,p=l&&l.iterator,h=1/f(s+"-0")!=-1/0||p&&!o((function(){f(Object(p))}));t.exports=h?function(t){var r=u(a(t)),e=f(r);return 0===e&&"-"==c(r,0)?-0:e}:f},35407:(t,r,e)=>{var n=e(47583),o=e(16544),i=e(7386),a=e(28320),u=e(68940).trim,s=e(20771),c=n.parseInt,f=n.Symbol,l=f&&f.iterator,p=/^[+-]?0x/i,h=i(p.exec),v=8!==c(s+"08")||22!==c(s+"0x16")||l&&!o((function(){c(Object(l))}));t.exports=v?function(t,r){var e=u(a(t));return c(e,r>>>0||(h(p,e)?16:10))}:c},94106:(t,r,e)=>{"use strict";function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}var o=e(42743),i=e(73098),a=e(71002),u=e(88505),s=e(90794),c=e(28728).f,f=e(18494),l="Incorrect Number.range arguments",p="NumericRangeIterator",h=o.set,v=o.getterFor(p),d=RangeError,y=TypeError,g=i((function(t,r,e,o,i,a){if(n(t)!=o||r!==1/0&&r!==-1/0&&n(r)!=o)throw y(l);if(t===1/0||t===-1/0)throw d(l);var c,v=r>t,g=!1;if(void 0===e)c=void 0;else if(s(e))c=e.step,g=!!e.inclusive;else{if(n(e)!=o)throw y(l);c=e}if(u(c)&&(c=v?a:-a),n(c)!=o)throw y(l);if(c===1/0||c===-1/0||c===i&&t!==r)throw d(l);h(this,{type:p,start:t,end:r,step:c,inclusiveEnd:g,hitsEnd:t!=t||r!=r||c!=c||r>t!=c>i,currentCount:i,zero:i}),f||(this.start=t,this.end=r,this.step=c,this.inclusive=g)}),p,(function(){var t=v(this);if(t.hitsEnd)return a(void 0,!0);var r=t.start,e=t.end,n=r+t.step*t.currentCount++;n===e&&(t.hitsEnd=!0);var o=t.inclusiveEnd;return(e>r?o?n>e:n>=e:o?e>n:e>=n)?(t.hitsEnd=!0,a(void 0,!0)):a(n,!1)})),m=function(t){return{get:t,set:function(){},configurable:!0,enumerable:!1}};f&&c(g.prototype,{start:m((function(){return v(this).start})),end:m((function(){return v(this).end})),inclusive:m((function(){return v(this).inclusiveEnd})),step:m((function(){return v(this).step}))}),t.exports=g},79304:(t,r,e)=>{"use strict";var n=e(18494),o=e(7386),i=e(38262),a=e(16544),u=e(75432),s=e(74012),c=e(20112),f=e(61324),l=e(55044),p=Object.assign,h=Object.defineProperty,v=o([].concat);t.exports=!p||a((function(){if(n&&1!==p({b:1},p(h({},"a",{enumerable:!0,get:function(){h(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var t={},r={},e=Symbol(),o="abcdefghijklmnopqrst";return t[e]=7,o.split("").forEach((function(t){r[t]=t})),7!=p({},t)[e]||u(p({},r)).join("")!=o}))?function(t,r){for(var e=f(t),o=arguments.length,a=1,p=s.f,h=c.f;o>a;)for(var d,y=l(arguments[a++]),g=p?v(u(y),p(y)):u(y),m=g.length,b=0;m>b;)d=g[b++],n&&!i(h,y,d)||(e[d]=y[d]);return e}:p},3590:(t,r,e)=>{var n,o=e(92569),i=e(28728),a=e(15690),u=e(64639),s=e(90482),c=e(26668),f=e(89137)("IE_PROTO"),l=function(){},p=function(t){return"<script>"+t+"<\/script>"},h=function(t){t.write(p("")),t.close();var r=t.parentWindow.Object;return t=null,r},v=function(){try{n=new ActiveXObject("htmlfile")}catch(t){}var t,r;v="undefined"!=typeof document?document.domain&&n?h(n):((r=c("iframe")).style.display="none",s.appendChild(r),r.src=String("javascript:"),(t=r.contentWindow.document).open(),t.write(p("document.F=Object")),t.close(),t.F):h(n);for(var e=a.length;e--;)delete v.prototype[a[e]];return v()};u[f]=!0,t.exports=Object.create||function(t,r){var e;return null!==t?(l.prototype=o(t),e=new l,l.prototype=null,e[f]=t):e=v(),void 0===r?e:i.f(e,r)}},28728:(t,r,e)=>{var n=e(18494),o=e(7670),i=e(94615),a=e(92569),u=e(22977),s=e(75432);r.f=n&&!o?Object.defineProperties:function(t,r){a(t);for(var e,n=u(r),o=s(r),c=o.length,f=0;c>f;)i.f(t,e=o[f++],n[e]);return t}},94615:(t,r,e)=>{var n=e(18494),o=e(275),i=e(7670),a=e(92569),u=e(98734),s=TypeError,c=Object.defineProperty,f=Object.getOwnPropertyDescriptor;r.f=n?i?function(t,r,e){if(a(t),r=u(r),a(e),"function"==typeof t&&"prototype"===r&&"value"in e&&"writable"in e&&!e.writable){var n=f(t,r);n&&n.writable&&(t[r]=e.value,e={configurable:"configurable"in e?e.configurable:n.configurable,enumerable:"enumerable"in e?e.enumerable:n.enumerable,writable:!1})}return c(t,r,e)}:c:function(t,r,e){if(a(t),r=u(r),a(e),o)try{return c(t,r,e)}catch(t){}if("get"in e||"set"in e)throw s("Accessors not supported");return"value"in e&&(t[r]=e.value),t}},46683:(t,r,e)=>{var n=e(18494),o=e(38262),i=e(20112),a=e(54677),u=e(22977),s=e(98734),c=e(62870),f=e(275),l=Object.getOwnPropertyDescriptor;r.f=n?l:function(t,r){if(t=u(t),r=s(r),f)try{return l(t,r)}catch(t){}if(c(t,r))return a(!o(i.f,t,r),t[r])}},63130:(t,r,e)=>{function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}var o=e(39624),i=e(22977),a=e(9275).f,u=e(74546),s="object"==("undefined"==typeof window?"undefined":n(window))&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return s&&"Window"==o(t)?function(t){try{return a(t)}catch(t){return u(s)}}(t):a(i(t))}},9275:(t,r,e)=>{var n=e(98356),o=e(15690).concat("length","prototype");r.f=Object.getOwnPropertyNames||function(t){return n(t,o)}},74012:(t,r)=>{r.f=Object.getOwnPropertySymbols},80729:(t,r,e)=>{var n=e(62870),o=e(9212),i=e(61324),a=e(89137),u=e(50926),s=a("IE_PROTO"),c=Object,f=c.prototype;t.exports=u?c.getPrototypeOf:function(t){var r=i(t);if(n(r,s))return r[s];var e=r.constructor;return o(e)&&r instanceof e?e.prototype:r instanceof c?f:null}},4766:(t,r,e)=>{var n=e(16544),o=e(90794),i=e(39624),a=e(91537),u=Object.isExtensible,s=n((function(){u(1)}));t.exports=s||a?function(t){return!!o(t)&&(!a||"ArrayBuffer"!=i(t))&&(!u||u(t))}:u},22447:(t,r,e)=>{var n=e(7386);t.exports=n({}.isPrototypeOf)},40927:(t,r,e)=>{"use strict";var n=e(42743),o=e(73098),i=e(71002),a=e(62870),u=e(75432),s=e(61324),c="Object Iterator",f=n.set,l=n.getterFor(c);t.exports=o((function(t,r){var e=s(t);f(this,{type:c,mode:r,object:e,keys:u(e),index:0})}),"Object",(function(){for(var t=l(this),r=t.keys;;){if(null===r||t.index>=r.length)return t.object=t.keys=null,i(void 0,!0);var e=r[t.index++],n=t.object;if(a(n,e)){switch(t.mode){case"keys":return i(e,!1);case"values":return i(n[e],!1)}return i([e,n[e]],!1)}}}))},98356:(t,r,e)=>{var n=e(7386),o=e(62870),i=e(22977),a=e(15766).indexOf,u=e(64639),s=n([].push);t.exports=function(t,r){var e,n=i(t),c=0,f=[];for(e in n)!o(u,e)&&o(n,e)&&s(f,e);for(;r.length>c;)o(n,e=r[c++])&&(~a(f,e)||s(f,e));return f}},75432:(t,r,e)=>{var n=e(98356),o=e(15690);t.exports=Object.keys||function(t){return n(t,o)}},20112:(t,r)=>{"use strict";var e={}.propertyIsEnumerable,n=Object.getOwnPropertyDescriptor,o=n&&!e.call({1:2},1);r.f=o?function(t){var r=n(this,t);return!!r&&r.enumerable}:e},36037:(t,r,e)=>{"use strict";var n=e(86268),o=e(47583),i=e(16544),a=e(20003);t.exports=n||!i((function(){if(!(a&&a<535)){var t=Math.random();__defineSetter__.call(null,t,(function(){})),delete o[t]}}))},17496:(t,r,e)=>{var n=e(7386),o=e(92569),i=e(79882);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,r=!1,e={};try{(t=n(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(e,[]),r=e instanceof Array}catch(t){}return function(e,n){return o(e),i(n),r?t(e,n):e.__proto__=n,e}}():void 0)},69953:(t,r,e)=>{var n=e(18494),o=e(7386),i=e(75432),a=e(22977),u=o(e(20112).f),s=o([].push),c=function(t){return function(r){for(var e,o=a(r),c=i(o),f=c.length,l=0,p=[];f>l;)e=c[l++],n&&!u(o,e)||s(p,t?[e,o[e]]:o[e]);return p}};t.exports={entries:c(!0),values:c(!1)}},43060:(t,r,e)=>{"use strict";var n=e(88191),o=e(33058);t.exports=n?{}.toString:function(){return"[object "+o(this)+"]"}},28773:(t,r,e)=>{var n=e(47583),o=e(9212),i=e(3649)("observable"),a=n.Observable,u=a&&a.prototype;t.exports=!(o(a)&&o(a.from)&&o(a.of)&&o(u.subscribe)&&o(u[i]))},76252:(t,r,e)=>{var n=e(38262),o=e(9212),i=e(90794),a=TypeError;t.exports=function(t,r){var e,u;if("string"===r&&o(e=t.toString)&&!i(u=n(e,t)))return u;if(o(e=t.valueOf)&&!i(u=n(e,t)))return u;if("string"!==r&&o(e=t.toString)&&!i(u=n(e,t)))return u;throw a("Can't convert object to primitive value")}},40929:(t,r,e)=>{var n=e(35897),o=e(7386),i=e(9275),a=e(74012),u=e(92569),s=o([].concat);t.exports=n("Reflect","ownKeys")||function(t){var r=i.f(u(t)),e=a.f;return e?s(r,e(t)):r}},21287:(t,r,e)=>{var n=e(47583);t.exports=n},80544:t=>{t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},60190:(t,r,e)=>{var n=e(47583),o=e(44282),i=e(9212),a=e(34451),u=e(69734),s=e(3649),c=e(12274),f=e(733),l=e(86268),p=e(24061),h=o&&o.prototype,v=s("species"),d=!1,y=i(n.PromiseRejectionEvent),g=a("Promise",(function(){var t=u(o),r=t!==String(o);if(!r&&66===p)return!0;if(l&&(!h.catch||!h.finally))return!0;if(!p||p<51||!/native code/.test(t)){var e=new o((function(t){t(1)})),n=function(t){t((function(){}),(function(){}))};if((e.constructor={})[v]=n,!(d=e.then((function(){}))instanceof n))return!0}return!r&&(c||f)&&!y}));t.exports={CONSTRUCTOR:g,REJECTION_EVENT:y,SUBCLASSING:d}},44282:(t,r,e)=>{var n=e(47583);t.exports=n.Promise},95732:(t,r,e)=>{var n=e(92569),o=e(90794),i=e(5084);t.exports=function(t,r){if(n(t),o(r)&&r.constructor===t)return r;var e=i.f(t);return(0,e.resolve)(r),e.promise}},40409:(t,r,e)=>{var n=e(44282),o=e(3616),i=e(60190).CONSTRUCTOR;t.exports=i||!o((function(t){n.all(t).then(void 0,(function(){}))}))},75327:(t,r,e)=>{var n=e(94615).f;t.exports=function(t,r,e){e in t||n(t,e,{configurable:!0,get:function(){return r[e]},set:function(t){r[e]=t}})}},42723:t=>{var r=function(){this.head=null,this.tail=null};r.prototype={add:function(t){var r={item:t,next:null};this.head?this.tail.next=r:this.head=r,this.tail=r},get:function(){var t=this.head;if(t)return this.head=t.next,this.tail===t&&(this.tail=null),t.item}},t.exports=r},67802:(t,r,e)=>{function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}e(14327),e(31770);var o=e(35897),i=e(7386),a=e(17836),u=o("Map"),s=o("WeakMap"),c=i([].push),f=a("metadata"),l=f.store||(f.store=new s),p=function(t,r,e){var n=l.get(t);if(!n){if(!e)return;l.set(t,n=new u)}var o=n.get(r);if(!o){if(!e)return;n.set(r,o=new u)}return o};t.exports={store:l,getMap:p,has:function(t,r,e){var n=p(r,e,!1);return void 0!==n&&n.has(t)},get:function(t,r,e){var n=p(r,e,!1);return void 0===n?void 0:n.get(t)},set:function(t,r,e,n){p(e,n,!0).set(t,r)},keys:function(t,r){var e=p(t,r,!1),n=[];return e&&e.forEach((function(t,r){c(n,r)})),n},toKey:function(t){return void 0===t||"symbol"==n(t)?t:String(t)}}},74214:(t,r,e)=>{var n=e(38262),o=e(92569),i=e(9212),a=e(39624),u=e(48445),s=TypeError;t.exports=function(t,r){var e=t.exec;if(i(e)){var c=n(e,t,r);return null!==c&&o(c),c}if("RegExp"===a(t))return n(u,t,r);throw s("RegExp#exec called on incompatible receiver")}},48445:(t,r,e)=>{"use strict";var n,o,i=e(38262),a=e(7386),u=e(28320),s=e(41118),c=e(35230),f=e(17836),l=e(3590),p=e(42743).get,h=e(74121),v=e(1712),d=f("native-string-replace",String.prototype.replace),y=RegExp.prototype.exec,g=y,m=a("".charAt),b=a("".indexOf),x=a("".replace),w=a("".slice),S=(o=/b*/g,i(y,n=/a/,"a"),i(y,o,"a"),0!==n.lastIndex||0!==o.lastIndex),E=c.BROKEN_CARET,A=void 0!==/()??/.exec("")[1];(S||A||E||h||v)&&(g=function(t){var r,e,n,o,a,c,f,h=this,v=p(h),I=u(t),_=v.raw;if(_)return _.lastIndex=h.lastIndex,r=i(g,_,I),h.lastIndex=_.lastIndex,r;var R=v.groups,O=E&&h.sticky,T=i(s,h),k=h.source,M=0,P=I;if(O&&(T=x(T,"y",""),-1===b(T,"g")&&(T+="g"),P=w(I,h.lastIndex),h.lastIndex>0&&(!h.multiline||h.multiline&&"\n"!==m(I,h.lastIndex-1))&&(k="(?: "+k+")",P=" "+P,M++),e=new RegExp("^(?:"+k+")",T)),A&&(e=new RegExp("^"+k+"$(?!\\s)",T)),S&&(n=h.lastIndex),o=i(y,O?e:h,P),O?o?(o.input=w(o.input,M),o[0]=w(o[0],M),o.index=h.lastIndex,h.lastIndex+=o[0].length):h.lastIndex=0:S&&o&&(h.lastIndex=h.global?o.index+o[0].length:n),A&&o&&o.length>1&&i(d,o[0],e,(function(){for(a=1;a<arguments.length-2;a++)void 0===arguments[a]&&(o[a]=void 0)})),o&&R)for(o.groups=c=l(null),a=0;a<R.length;a++)c[(f=R[a])[0]]=o[f[1]];return o}),t.exports=g},41118:(t,r,e)=>{"use strict";var n=e(92569);t.exports=function(){var t=n(this),r="";return t.hasIndices&&(r+="d"),t.global&&(r+="g"),t.ignoreCase&&(r+="i"),t.multiline&&(r+="m"),t.dotAll&&(r+="s"),t.unicode&&(r+="u"),t.unicodeSets&&(r+="v"),t.sticky&&(r+="y"),r}},90640:(t,r,e)=>{var n=e(38262),o=e(62870),i=e(22447),a=e(41118),u=RegExp.prototype;t.exports=function(t){var r=t.flags;return void 0!==r||"flags"in u||o(t,"flags")||!i(u,t)?r:n(a,t)}},35230:(t,r,e)=>{var n=e(16544),o=e(47583).RegExp,i=n((function(){var t=o("a","y");return t.lastIndex=2,null!=t.exec("abcd")})),a=i||n((function(){return!o("a","y").sticky})),u=i||n((function(){var t=o("^r","gy");return t.lastIndex=2,null!=t.exec("str")}));t.exports={BROKEN_CARET:u,MISSED_STICKY:a,UNSUPPORTED_Y:i}},74121:(t,r,e)=>{var n=e(16544),o=e(47583).RegExp;t.exports=n((function(){var t=o(".","s");return!(t.dotAll&&t.exec("\n")&&"s"===t.flags)}))},1712:(t,r,e)=>{var n=e(16544),o=e(47583).RegExp;t.exports=n((function(){var t=o("(?<a>b)","g");return"b"!==t.exec("b").groups.a||"bc"!=="b".replace(t,"$<a>c")}))},63955:(t,r,e)=>{var n=e(88505),o=TypeError;t.exports=function(t){if(n(t))throw o("Can't call method on "+t);return t}},40994:t=>{t.exports=function(t,r){return t===r||t!=t&&r!=r}},8690:t=>{t.exports=Object.is||function(t,r){return t===r?0!==t||1/t==1/r:t!=t&&r!=r}},51328:(t,r,e)=>{var n=e(47583),o=e(71611),i=e(9212),a=e(46918),u=e(46917),s=e(57520),c=/MSIE .\./.test(a),f=n.Function,l=function(t){return c?function(r,e){var n=s(arguments.length,1)>2,a=i(r)?r:f(r),c=n?u(arguments,2):void 0;return t(n?function(){o(a,this,c)}:a,e)}:t};t.exports={setTimeout:l(n.setTimeout),setInterval:l(n.setInterval)}},7730:(t,r,e)=>{"use strict";var n=e(35897),o=e(94615),i=e(3649),a=e(18494),u=i("species");t.exports=function(t){var r=n(t),e=o.f;a&&r&&!r[u]&&e(r,u,{configurable:!0,get:function(){return this}})}},98821:(t,r,e)=>{var n=e(94615).f,o=e(62870),i=e(3649)("toStringTag");t.exports=function(t,r,e){t&&!e&&(t=t.prototype),t&&!o(t,i)&&n(t,i,{configurable:!0,value:r})}},89137:(t,r,e)=>{var n=e(17836),o=e(98284),i=n("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},31314:(t,r,e)=>{var n=e(47583),o=e(32296),i="__core-js_shared__",a=n[i]||o(i,{});t.exports=a},17836:(t,r,e)=>{var n=e(86268),o=e(31314);(t.exports=function(t,r){return o[t]||(o[t]=void 0!==r?r:{})})("versions",[]).push({version:"3.25.2",mode:n?"pure":"global",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.25.2/LICENSE",source:"https://github.com/zloirock/core-js"})},40564:(t,r,e)=>{var n=e(92569),o=e(41186),i=e(88505),a=e(3649)("species");t.exports=function(t,r){var e,u=n(t).constructor;return void 0===u||i(e=n(u)[a])?r:o(e)}},29578:(t,r,e)=>{var n=e(16544);t.exports=function(t){return n((function(){var r=""[t]('"');return r!==r.toLowerCase()||r.split('"').length>3}))}},96389:(t,r,e)=>{var n=e(7386),o=e(87486),i=e(28320),a=e(63955),u=n("".charAt),s=n("".charCodeAt),c=n("".slice),f=function(t){return function(r,e){var n,f,l=i(a(r)),p=o(e),h=l.length;return p<0||p>=h?t?"":void 0:(n=s(l,p))<55296||n>56319||p+1===h||(f=s(l,p+1))<56320||f>57343?t?u(l,p):n:t?c(l,p,p+2):f-56320+(n-55296<<10)+65536}};t.exports={codeAt:f(!1),charAt:f(!0)}},98040:(t,r,e)=>{var n=e(46918);t.exports=/Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(n)},70578:(t,r,e)=>{var n=e(7386),o=e(70097),i=e(28320),a=e(74061),u=e(63955),s=n(a),c=n("".slice),f=Math.ceil,l=function(t){return function(r,e,n){var a,l,p=i(u(r)),h=o(e),v=p.length,d=void 0===n?" ":i(n);return h<=v||""==d?p:((l=s(d,f((a=h-v)/d.length))).length>a&&(l=c(l,0,a)),t?p+l:l+p)}};t.exports={start:l(!1),end:l(!0)}},58304:(t,r,e)=>{"use strict";var n=e(7386),o=2147483647,i=/[^\0-\u007E]/,a=/[.\u3002\uFF0E\uFF61]/g,u="Overflow: input needs wider integers to process",s=RangeError,c=n(a.exec),f=Math.floor,l=String.fromCharCode,p=n("".charCodeAt),h=n([].join),v=n([].push),d=n("".replace),y=n("".split),g=n("".toLowerCase),m=function(t){return t+22+75*(t<26)},b=function(t,r,e){var n=0;for(t=e?f(t/700):t>>1,t+=f(t/r);t>455;)t=f(t/35),n+=36;return f(n+36*t/(t+38))},x=function(t){var r=[];t=function(t){for(var r=[],e=0,n=t.length;e<n;){var o=p(t,e++);if(o>=55296&&o<=56319&&e<n){var i=p(t,e++);56320==(64512&i)?v(r,((1023&o)<<10)+(1023&i)+65536):(v(r,o),e--)}else v(r,o)}return r}(t);var e,n,i=t.length,a=128,c=0,d=72;for(e=0;e<t.length;e++)(n=t[e])<128&&v(r,l(n));var y=r.length,g=y;for(y&&v(r,"-");g<i;){var x=o;for(e=0;e<t.length;e++)(n=t[e])>=a&&n<x&&(x=n);var w=g+1;if(x-a>f((o-c)/w))throw s(u);for(c+=(x-a)*w,a=x,e=0;e<t.length;e++){if((n=t[e])<a&&++c>o)throw s(u);if(n==a){for(var S=c,E=36;;){var A=E<=d?1:E>=d+26?26:E-d;if(S<A)break;var I=S-A,_=36-A;v(r,l(m(A+I%_))),S=f(I/_),E+=36}v(r,l(m(S))),d=b(c,w,g==y),c=0,g++}}c++,a++}return h(r,"")};t.exports=function(t){var r,e,n=[],o=y(d(g(t),a,"."),".");for(r=0;r<o.length;r++)e=o[r],v(n,c(i,e)?"xn--"+x(e):e);return h(n,".")}},74061:(t,r,e)=>{"use strict";var n=e(87486),o=e(28320),i=e(63955),a=RangeError;t.exports=function(t){var r=o(i(this)),e="",u=n(t);if(u<0||u==1/0)throw a("Wrong number of repetitions");for(;u>0;(u>>>=1)&&(r+=r))1&u&&(e+=r);return e}},22987:(t,r,e)=>{"use strict";var n=e(68940).end,o=e(65760);t.exports=o("trimEnd")?function(){return n(this)}:"".trimEnd},65760:(t,r,e)=>{var n=e(14340).PROPER,o=e(16544),i=e(20771);t.exports=function(t){return o((function(){return!!i[t]()||"​᠎"!=="​᠎"[t]()||n&&i[t].name!==t}))}},37686:(t,r,e)=>{"use strict";var n=e(68940).start,o=e(65760);t.exports=o("trimStart")?function(){return n(this)}:"".trimStart},68940:(t,r,e)=>{var n=e(7386),o=e(63955),i=e(28320),a=e(20771),u=n("".replace),s="["+a+"]",c=RegExp("^"+s+s+"*"),f=RegExp(s+s+"*$"),l=function(t){return function(r){var e=i(o(r));return 1&t&&(e=u(e,c,"")),2&t&&(e=u(e,f,"")),e}};t.exports={start:l(1),end:l(2),trim:l(3)}},4193:(t,r,e)=>{var n=e(24061),o=e(16544);t.exports=!!Object.getOwnPropertySymbols&&!o((function(){var t=Symbol();return!String(t)||!(Object(t)instanceof Symbol)||!Symbol.sham&&n&&n<41}))},88369:(t,r,e)=>{var n=e(38262),o=e(35897),i=e(3649),a=e(73746);t.exports=function(){var t=o("Symbol"),r=t&&t.prototype,e=r&&r.valueOf,u=i("toPrimitive");r&&!r[u]&&a(r,u,(function(t){return n(e,this)}),{arity:1})}},32471:(t,r,e)=>{var n=e(4193);t.exports=n&&!!Symbol.for&&!!Symbol.keyFor},48117:(t,r,e)=>{var n,o,i,a,u=e(47583),s=e(71611),c=e(12938),f=e(9212),l=e(62870),p=e(16544),h=e(90482),v=e(46917),d=e(26668),y=e(57520),g=e(17020),m=e(45354),b=u.setImmediate,x=u.clearImmediate,w=u.process,S=u.Dispatch,E=u.Function,A=u.MessageChannel,I=u.String,_=0,R={};try{n=u.location}catch(t){}var O=function(t){if(l(R,t)){var r=R[t];delete R[t],r()}},T=function(t){return function(){O(t)}},k=function(t){O(t.data)},M=function(t){u.postMessage(I(t),n.protocol+"//"+n.host)};b&&x||(b=function(t){y(arguments.length,1);var r=f(t)?t:E(t),e=v(arguments,1);return R[++_]=function(){s(r,void 0,e)},o(_),_},x=function(t){delete R[t]},m?o=function(t){w.nextTick(T(t))}:S&&S.now?o=function(t){S.now(T(t))}:A&&!g?(a=(i=new A).port2,i.port1.onmessage=k,o=c(a.postMessage,a)):u.addEventListener&&f(u.postMessage)&&!u.importScripts&&n&&"file:"!==n.protocol&&!p(M)?(o=M,u.addEventListener("message",k,!1)):o="onreadystatechange"in d("script")?function(t){h.appendChild(d("script")).onreadystatechange=function(){h.removeChild(this),O(t)}}:function(t){setTimeout(T(t),0)}),t.exports={set:b,clear:x}},38064:(t,r,e)=>{var n=e(7386);t.exports=n(1..valueOf)},96782:(t,r,e)=>{var n=e(87486),o=Math.max,i=Math.min;t.exports=function(t,r){var e=n(t);return e<0?o(e+r,0):i(e,r)}},92178:(t,r,e)=>{var n=e(22670),o=TypeError;t.exports=function(t){var r=n(t,"number");if("number"==typeof r)throw o("Can't convert number to bigint");return BigInt(r)}},12488:(t,r,e)=>{var n=e(87486),o=e(70097),i=RangeError;t.exports=function(t){if(void 0===t)return 0;var r=n(t),e=o(r);if(r!==e)throw i("Wrong length or index");return e}},22977:(t,r,e)=>{var n=e(55044),o=e(63955);t.exports=function(t){return n(o(t))}},87486:(t,r,e)=>{var n=e(19021);t.exports=function(t){var r=+t;return r!=r||0===r?0:n(r)}},70097:(t,r,e)=>{var n=e(87486),o=Math.min;t.exports=function(t){return t>0?o(n(t),9007199254740991):0}},61324:(t,r,e)=>{var n=e(63955),o=Object;t.exports=function(t){return o(n(t))}},33248:(t,r,e)=>{var n=e(42955),o=RangeError;t.exports=function(t,r){var e=n(t);if(e%r)throw o("Wrong offset");return e}},42955:(t,r,e)=>{var n=e(87486),o=RangeError;t.exports=function(t){var r=n(t);if(r<0)throw o("The argument can't be less than 0");return r}},22670:(t,r,e)=>{var n=e(38262),o=e(90794),i=e(35871),a=e(60911),u=e(76252),s=e(3649),c=TypeError,f=s("toPrimitive");t.exports=function(t,r){if(!o(t)||i(t))return t;var e,s=a(t,f);if(s){if(void 0===r&&(r="default"),e=n(s,t,r),!o(e)||i(e))return e;throw c("Can't convert object to primitive value")}return void 0===r&&(r="number"),u(t,r)}},98734:(t,r,e)=>{var n=e(22670),o=e(35871);t.exports=function(t){var r=n(t,"string");return o(r)?r:r+""}},88191:(t,r,e)=>{var n={};n[e(3649)("toStringTag")]="z",t.exports="[object z]"===String(n)},28320:(t,r,e)=>{var n=e(33058),o=String;t.exports=function(t){if("Symbol"===n(t))throw TypeError("Cannot convert a Symbol value to a string");return o(t)}},39676:(t,r,e)=>{var n=e(45354);t.exports=function(t){try{if(n)return Function('return require("'+t+'")')()}catch(t){}}},75637:t=>{var r=String;t.exports=function(t){try{return r(t)}catch(t){return"Object"}}},58073:(t,r,e)=>{"use strict";var n=e(37263),o=e(47583),i=e(38262),a=e(18494),u=e(40165),s=e(13977),c=e(5562),f=e(44761),l=e(54677),p=e(57),h=e(69352),v=e(70097),d=e(12488),y=e(33248),g=e(98734),m=e(62870),b=e(33058),x=e(90794),w=e(35871),S=e(3590),E=e(22447),A=e(17496),I=e(9275).f,_=e(77353),R=e(24805).forEach,O=e(7730),T=e(94615),k=e(46683),M=e(42743),P=e(40434),j=M.get,C=M.set,L=M.enforce,N=T.f,D=k.f,U=Math.round,F=o.RangeError,B=c.ArrayBuffer,q=B.prototype,z=c.DataView,W=s.NATIVE_ARRAY_BUFFER_VIEWS,V=s.TYPED_ARRAY_TAG,H=s.TypedArray,G=s.TypedArrayPrototype,Y=s.aTypedArrayConstructor,$=s.isTypedArray,K="BYTES_PER_ELEMENT",J="Wrong length",X=function(t,r){Y(t);for(var e=0,n=r.length,o=new t(n);n>e;)o[e]=r[e++];return o},Q=function(t,r){N(t,r,{get:function(){return j(this)[r]}})},Z=function(t){var r;return E(q,t)||"ArrayBuffer"==(r=b(t))||"SharedArrayBuffer"==r},tt=function(t,r){return $(t)&&!w(r)&&r in t&&h(+r)&&r>=0},rt=function(t,r){return r=g(r),tt(t,r)?l(2,t[r]):D(t,r)},et=function(t,r,e){return r=g(r),!(tt(t,r)&&x(e)&&m(e,"value"))||m(e,"get")||m(e,"set")||e.configurable||m(e,"writable")&&!e.writable||m(e,"enumerable")&&!e.enumerable?N(t,r,e):(t[r]=e.value,t)};a?(W||(k.f=rt,T.f=et,Q(G,"buffer"),Q(G,"byteOffset"),Q(G,"byteLength"),Q(G,"length")),n({target:"Object",stat:!0,forced:!W},{getOwnPropertyDescriptor:rt,defineProperty:et}),t.exports=function(t,r,e){var a=t.match(/\d+$/)[0]/8,s=t+(e?"Clamped":"")+"Array",c="get"+t,l="set"+t,h=o[s],g=h,m=g&&g.prototype,b={},w=function(t,r){N(t,r,{get:function(){return function(t,r){var e=j(t);return e.view[c](r*a+e.byteOffset,!0)}(this,r)},set:function(t){return function(t,r,n){var o=j(t);e&&(n=(n=U(n))<0?0:n>255?255:255&n),o.view[l](r*a+o.byteOffset,n,!0)}(this,r,t)},enumerable:!0})};W?u&&(g=r((function(t,r,e,n){return f(t,m),P(x(r)?Z(r)?void 0!==n?new h(r,y(e,a),n):void 0!==e?new h(r,y(e,a)):new h(r):$(r)?X(g,r):i(_,g,r):new h(d(r)),t,g)})),A&&A(g,H),R(I(h),(function(t){t in g||p(g,t,h[t])})),g.prototype=m):(g=r((function(t,r,e,n){f(t,m);var o,u,s,c=0,l=0;if(x(r)){if(!Z(r))return $(r)?X(g,r):i(_,g,r);o=r,l=y(e,a);var p=r.byteLength;if(void 0===n){if(p%a)throw F(J);if((u=p-l)<0)throw F(J)}else if((u=v(n)*a)+l>p)throw F(J);s=u/a}else s=d(r),o=new B(u=s*a);for(C(t,{buffer:o,byteOffset:l,byteLength:u,length:s,view:new z(o)});c<s;)w(t,c++)})),A&&A(g,H),m=g.prototype=S(G)),m.constructor!==g&&p(m,"constructor",g),L(m).TypedArrayConstructor=g,V&&p(m,V,s);var E=g!=h;b[s]=g,n({global:!0,constructor:!0,forced:E,sham:!W},b),K in g||p(g,K,a),K in m||p(m,K,a),O(s)}):t.exports=function(){}},40165:(t,r,e)=>{var n=e(47583),o=e(16544),i=e(3616),a=e(13977).NATIVE_ARRAY_BUFFER_VIEWS,u=n.ArrayBuffer,s=n.Int8Array;t.exports=!a||!o((function(){s(1)}))||!o((function(){new s(-1)}))||!i((function(t){new s,new s(null),new s(1.5),new s(t)}),!0)||o((function(){return 1!==new s(new u(2),1,void 0).length}))},49741:(t,r,e)=>{var n=e(4114),o=e(50992);t.exports=function(t,r){return n(o(t),r)}},77353:(t,r,e)=>{var n=e(12938),o=e(38262),i=e(41186),a=e(61324),u=e(1825),s=e(36307),c=e(38272),f=e(70114),l=e(19022),p=e(13977).aTypedArrayConstructor,h=e(92178);t.exports=function(t){var r,e,v,d,y,g,m,b,x=i(this),w=a(t),S=arguments.length,E=S>1?arguments[1]:void 0,A=void 0!==E,I=c(w);if(I&&!f(I))for(b=(m=s(w,I)).next,w=[];!(g=o(b,m)).done;)w.push(g.value);for(A&&S>2&&(E=n(E,arguments[2])),e=u(w),v=new(p(x))(e),d=l(v),r=0;e>r;r++)y=A?E(w[r],r):w[r],v[r]=d?h(y):+y;return v}},50992:(t,r,e)=>{var n=e(13977),o=e(40564),i=n.aTypedArrayConstructor,a=n.getTypedArrayConstructor;t.exports=function(t){return i(o(t,a(t)))}},98284:(t,r,e)=>{var n=e(7386),o=0,i=Math.random(),a=n(1..toString);t.exports=function(t){return"Symbol("+(void 0===t?"":t)+")_"+a(++o+i,36)}},8047:(t,r,e)=>{var n=e(16544),o=e(3649),i=e(86268),a=o("iterator");t.exports=!n((function(){var t=new URL("b?a=1&b=2&c=3","http://a"),r=t.searchParams,e="";return t.pathname="c%20d",r.forEach((function(t,n){r.delete("b"),e+=n+t})),i&&!t.toJSON||!r.sort||"http://a/c%20d?a=1&c=3"!==t.href||"3"!==r.get("c")||"a=1"!==String(new URLSearchParams("?a=1"))||!r[a]||"a"!==new URL("https://a@b").username||"b"!==new URLSearchParams(new URLSearchParams("a=b")).get("a")||"xn--e1aybc"!==new URL("http://тест").host||"#%D0%B1"!==new URL("http://a#б").hash||"a1c3"!==e||"x"!==new URL("http://x",void 0).host}))},67786:(t,r,e)=>{function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}var o=e(4193);t.exports=o&&!Symbol.sham&&"symbol"==n(Symbol.iterator)},7670:(t,r,e)=>{var n=e(18494),o=e(16544);t.exports=n&&o((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},57520:t=>{var r=TypeError;t.exports=function(t,e){if(t<e)throw r("Not enough arguments");return t}},75307:(t,r,e)=>{var n=e(47583),o=e(9212),i=n.WeakMap;t.exports=o(i)&&/native code/.test(String(i))},71513:(t,r,e)=>{var n=e(21287),o=e(62870),i=e(20491),a=e(94615).f;t.exports=function(t){var r=n.Symbol||(n.Symbol={});o(r,t)||a(r,t,{value:i.f(t)})}},20491:(t,r,e)=>{var n=e(3649);r.f=n},3649:(t,r,e)=>{var n=e(47583),o=e(17836),i=e(62870),a=e(98284),u=e(4193),s=e(67786),c=o("wks"),f=n.Symbol,l=f&&f.for,p=s?f:f&&f.withoutSetter||a;t.exports=function(t){if(!i(c,t)||!u&&"string"!=typeof c[t]){var r="Symbol."+t;u&&i(f,t)?c[t]=f[t]:c[t]=s&&l?l(r):p(r)}return c[t]}},20771:t=>{t.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},27442:(t,r,e)=>{"use strict";var n=e(35897),o=e(62870),i=e(57),a=e(22447),u=e(17496),s=e(83478),c=e(75327),f=e(40434),l=e(22764),p=e(94402),h=e(80668),v=e(51178),d=e(18494),y=e(86268);t.exports=function(t,r,e,g){var m="stackTraceLimit",b=g?2:1,x=t.split("."),w=x[x.length-1],S=n.apply(null,x);if(S){var E=S.prototype;if(!y&&o(E,"cause")&&delete E.cause,!e)return S;var A=n("Error"),I=r((function(t,r){var e=l(g?r:t,void 0),n=g?new S(t):new S;return void 0!==e&&i(n,"message",e),v&&i(n,"stack",h(n.stack,2)),this&&a(E,this)&&f(n,this,I),arguments.length>b&&p(n,arguments[b]),n}));if(I.prototype=E,"Error"!==w?u?u(I,A):s(I,A,{name:!0}):d&&m in S&&(c(I,S,m),c(I,S,"prepareStackTrace")),s(I,S),!y)try{E.name!==w&&i(E,"name",w),E.constructor=I}catch(t){}return I}}},33328:(t,r,e)=>{var n=e(37263),o=e(35897),i=e(71611),a=e(16544),u=e(27442),s="AggregateError",c=o(s),f=!a((function(){return 1!==c([1]).errors[0]}))&&a((function(){return 7!==c([1],s,{cause:7}).cause}));n({global:!0,constructor:!0,arity:2,forced:f},{AggregateError:u(s,(function(t){return function(r,e){return i(t,this,arguments)}}),f,!0)})},975:(t,r,e)=>{"use strict";var n=e(37263),o=e(22447),i=e(80729),a=e(17496),u=e(83478),s=e(3590),c=e(57),f=e(54677),l=e(80668),p=e(94402),h=e(54026),v=e(22764),d=e(3649),y=e(51178),g=d("toStringTag"),m=Error,b=[].push,x=function(t,r){var e,n=arguments.length>2?arguments[2]:void 0,u=o(w,this);a?e=a(m(),u?i(this):w):(e=u?this:s(w),c(e,g,"Error")),void 0!==r&&c(e,"message",v(r)),y&&c(e,"stack",l(e.stack,1)),p(e,n);var f=[];return h(t,b,{that:f}),c(e,"errors",f),e};a?a(x,m):u(x,m,{name:!0});var w=x.prototype=s(m.prototype,{constructor:f(1,x),message:f(1,""),name:f(1,"AggregateError")});n({global:!0,constructor:!0,arity:2},{AggregateError:x})},21719:(t,r,e)=>{e(975)},74047:(t,r,e)=>{"use strict";var n=e(37263),o=e(47583),i=e(5562),a=e(7730),u=i.ArrayBuffer;n({global:!0,constructor:!0,forced:o.ArrayBuffer!==u},{ArrayBuffer:u}),a("ArrayBuffer")},6541:(t,r,e)=>{var n=e(37263),o=e(13977);n({target:"ArrayBuffer",stat:!0,forced:!o.NATIVE_ARRAY_BUFFER_VIEWS},{isView:o.isView})},6399:(t,r,e)=>{"use strict";var n=e(37263),o=e(7386),i=e(16544),a=e(5562),u=e(92569),s=e(96782),c=e(70097),f=e(40564),l=a.ArrayBuffer,p=a.DataView,h=p.prototype,v=o(l.prototype.slice),d=o(h.getUint8),y=o(h.setUint8);n({target:"ArrayBuffer",proto:!0,unsafe:!0,forced:i((function(){return!new l(2).slice(1,void 0).byteLength}))},{slice:function(t,r){if(v&&void 0===r)return v(u(this),t);for(var e=u(this).byteLength,n=s(t,e),o=s(void 0===r?e:r,e),i=new(f(this,l))(c(o-n)),a=new p(this),h=new p(i),g=0;n<o;)y(h,g++,d(a,n++));return i}})},75293:(t,r,e)=>{"use strict";var n=e(37263),o=e(61324),i=e(1825),a=e(87486),u=e(36288);n({target:"Array",proto:!0},{at:function(t){var r=o(this),e=i(r),n=a(t),u=n>=0?n:e+n;return u<0||u>=e?void 0:r[u]}}),u("at")},11646:(t,r,e)=>{"use strict";var n=e(37263),o=e(16544),i=e(54521),a=e(90794),u=e(61324),s=e(1825),c=e(6768),f=e(65999),l=e(44822),p=e(69269),h=e(3649),v=e(24061),d=h("isConcatSpreadable"),y=v>=51||!o((function(){var t=[];return t[d]=!1,t.concat()[0]!==t})),g=p("concat"),m=function(t){if(!a(t))return!1;var r=t[d];return void 0!==r?!!r:i(t)};n({target:"Array",proto:!0,arity:1,forced:!y||!g},{concat:function(t){var r,e,n,o,i,a=u(this),p=l(a,0),h=0;for(r=-1,n=arguments.length;r<n;r++)if(m(i=-1===r?a:arguments[r]))for(o=s(i),c(h+o),e=0;e<o;e++,h++)e in i&&f(p,h,i[e]);else c(h+1),f(p,h++,i);return p.length=h,p}})},87178:(t,r,e)=>{var n=e(37263),o=e(68050),i=e(36288);n({target:"Array",proto:!0},{copyWithin:o}),i("copyWithin")},25652:(t,r,e)=>{"use strict";var n=e(37263),o=e(24805).every;n({target:"Array",proto:!0,forced:!e(60906)("every")},{every:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},51271:(t,r,e)=>{var n=e(37263),o=e(93579),i=e(36288);n({target:"Array",proto:!0},{fill:o}),i("fill")},38833:(t,r,e)=>{"use strict";var n=e(37263),o=e(24805).filter;n({target:"Array",proto:!0,forced:!e(69269)("filter")},{filter:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},85375:(t,r,e)=>{"use strict";var n=e(37263),o=e(24805).findIndex,i=e(36288),a="findIndex",u=!0;a in[]&&Array(1).findIndex((function(){u=!1})),n({target:"Array",proto:!0,forced:u},{findIndex:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),i(a)},84367:(t,r,e)=>{"use strict";var n=e(37263),o=e(32544).findLastIndex,i=e(36288);n({target:"Array",proto:!0},{findLastIndex:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),i("findLastIndex")},3712:(t,r,e)=>{"use strict";var n=e(37263),o=e(32544).findLast,i=e(36288);n({target:"Array",proto:!0},{findLast:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),i("findLast")},47715:(t,r,e)=>{"use strict";var n=e(37263),o=e(24805).find,i=e(36288),a="find",u=!0;a in[]&&Array(1).find((function(){u=!1})),n({target:"Array",proto:!0,forced:u},{find:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),i(a)},30655:(t,r,e)=>{"use strict";var n=e(37263),o=e(21266),i=e(18257),a=e(61324),u=e(1825),s=e(44822);n({target:"Array",proto:!0},{flatMap:function(t){var r,e=a(this),n=u(e);return i(t),(r=s(e,0)).length=o(r,e,e,n,0,1,t,arguments.length>1?arguments[1]:void 0),r}})},39390:(t,r,e)=>{"use strict";var n=e(37263),o=e(21266),i=e(61324),a=e(1825),u=e(87486),s=e(44822);n({target:"Array",proto:!0},{flat:function(){var t=arguments.length?arguments[0]:void 0,r=i(this),e=a(r),n=s(r,0);return n.length=o(n,r,r,e,0,void 0===t?1:u(t)),n}})},95680:(t,r,e)=>{"use strict";var n=e(37263),o=e(63200);n({target:"Array",proto:!0,forced:[].forEach!=o},{forEach:o})},23675:(t,r,e)=>{var n=e(37263),o=e(35513);n({target:"Array",stat:!0,forced:!e(3616)((function(t){Array.from(t)}))},{from:o})},12076:(t,r,e)=>{"use strict";var n=e(37263),o=e(15766).includes,i=e(16544),a=e(36288);n({target:"Array",proto:!0,forced:i((function(){return!Array(1).includes()}))},{includes:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),a("includes")},27228:(t,r,e)=>{"use strict";var n=e(37263),o=e(7386),i=e(15766).indexOf,a=e(60906),u=o([].indexOf),s=!!u&&1/u([1],1,-0)<0,c=a("indexOf");n({target:"Array",proto:!0,forced:s||!c},{indexOf:function(t){var r=arguments.length>1?arguments[1]:void 0;return s?u(this,t,r)||0:i(this,t,r)}})},51301:(t,r,e)=>{e(37263)({target:"Array",stat:!0},{isArray:e(54521)})},55677:(t,r,e)=>{"use strict";var n=e(22977),o=e(36288),i=e(60339),a=e(42743),u=e(94615).f,s=e(20059),c=e(71002),f=e(86268),l=e(18494),p="Array Iterator",h=a.set,v=a.getterFor(p);t.exports=s(Array,"Array",(function(t,r){h(this,{type:p,target:n(t),index:0,kind:r})}),(function(){var t=v(this),r=t.target,e=t.kind,n=t.index++;return!r||n>=r.length?(t.target=void 0,c(void 0,!0)):c("keys"==e?n:"values"==e?r[n]:[n,r[n]],!1)}),"values");var d=i.Arguments=i.Array;if(o("keys"),o("values"),o("entries"),!f&&l&&"values"!==d.name)try{u(d,"name",{value:"values"})}catch(t){}},67441:(t,r,e)=>{"use strict";var n=e(37263),o=e(7386),i=e(55044),a=e(22977),u=e(60906),s=o([].join),c=i!=Object,f=u("join",",");n({target:"Array",proto:!0,forced:c||!f},{join:function(t){return s(a(this),void 0===t?",":t)}})},46825:(t,r,e)=>{var n=e(37263),o=e(73161);n({target:"Array",proto:!0,forced:o!==[].lastIndexOf},{lastIndexOf:o})},92070:(t,r,e)=>{"use strict";var n=e(37263),o=e(24805).map;n({target:"Array",proto:!0,forced:!e(69269)("map")},{map:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},87896:(t,r,e)=>{"use strict";var n=e(37263),o=e(16544),i=e(62097),a=e(65999),u=Array;n({target:"Array",stat:!0,forced:o((function(){function t(){}return!(u.of.call(t)instanceof t)}))},{of:function(){for(var t=0,r=arguments.length,e=new(i(this)?this:u)(r);r>t;)a(e,t,arguments[t++]);return e.length=r,e}})},74573:(t,r,e)=>{"use strict";var n=e(37263),o=e(61324),i=e(1825),a=e(98173),u=e(6768),s=e(16544)((function(){return 4294967297!==[].push.call({length:4294967296},1)})),c=!function(){try{Object.defineProperty([],"length",{writable:!1}).push()}catch(t){return t instanceof TypeError}}();n({target:"Array",proto:!0,arity:1,forced:s||c},{push:function(t){var r=o(this),e=i(r),n=arguments.length;u(e+n);for(var s=0;s<n;s++)r[e]=arguments[s],e++;return a(r,e),e}})},96382:(t,r,e)=>{"use strict";var n=e(37263),o=e(64325).right,i=e(60906),a=e(24061),u=e(45354);n({target:"Array",proto:!0,forced:!i("reduceRight")||!u&&a>79&&a<83},{reduceRight:function(t){return o(this,t,arguments.length,arguments.length>1?arguments[1]:void 0)}})},4363:(t,r,e)=>{"use strict";var n=e(37263),o=e(64325).left,i=e(60906),a=e(24061),u=e(45354);n({target:"Array",proto:!0,forced:!i("reduce")||!u&&a>79&&a<83},{reduce:function(t){var r=arguments.length;return o(this,t,r,r>1?arguments[1]:void 0)}})},57021:(t,r,e)=>{"use strict";var n=e(37263),o=e(7386),i=e(54521),a=o([].reverse),u=[1,2];n({target:"Array",proto:!0,forced:String(u)===String(u.reverse())},{reverse:function(){return i(this)&&(this.length=this.length),a(this)}})},20288:(t,r,e)=>{"use strict";var n=e(37263),o=e(54521),i=e(62097),a=e(90794),u=e(96782),s=e(1825),c=e(22977),f=e(65999),l=e(3649),p=e(69269),h=e(46917),v=p("slice"),d=l("species"),y=Array,g=Math.max;n({target:"Array",proto:!0,forced:!v},{slice:function(t,r){var e,n,l,p=c(this),v=s(p),m=u(t,v),b=u(void 0===r?v:r,v);if(o(p)&&(e=p.constructor,(i(e)&&(e===y||o(e.prototype))||a(e)&&null===(e=e[d]))&&(e=void 0),e===y||void 0===e))return h(p,m,b);for(n=new(void 0===e?y:e)(g(b-m,0)),l=0;m<b;m++,l++)m in p&&f(n,l,p[m]);return n.length=l,n}})},7262:(t,r,e)=>{"use strict";var n=e(37263),o=e(24805).some;n({target:"Array",proto:!0,forced:!e(60906)("some")},{some:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},74486:(t,r,e)=>{"use strict";var n=e(37263),o=e(7386),i=e(18257),a=e(61324),u=e(1825),s=e(37774),c=e(28320),f=e(16544),l=e(25744),p=e(60906),h=e(15857),v=e(50924),d=e(24061),y=e(20003),g=[],m=o(g.sort),b=o(g.push),x=f((function(){g.sort(void 0)})),w=f((function(){g.sort(null)})),S=p("sort"),E=!f((function(){if(d)return d<70;if(!(h&&h>3)){if(v)return!0;if(y)return y<603;var t,r,e,n,o="";for(t=65;t<76;t++){switch(r=String.fromCharCode(t),t){case 66:case 69:case 70:case 72:e=3;break;case 68:case 71:e=4;break;default:e=2}for(n=0;n<47;n++)g.push({k:r+n,v:e})}for(g.sort((function(t,r){return r.v-t.v})),n=0;n<g.length;n++)r=g[n].k.charAt(0),o.charAt(o.length-1)!==r&&(o+=r);return"DGBEFHACIJK"!==o}}));n({target:"Array",proto:!0,forced:x||!w||!S||!E},{sort:function(t){void 0!==t&&i(t);var r=a(this);if(E)return void 0===t?m(r):m(r,t);var e,n,o=[],f=u(r);for(n=0;n<f;n++)n in r&&b(o,r[n]);for(l(o,function(t){return function(r,e){return void 0===e?-1:void 0===r?1:void 0!==t?+t(r,e)||0:c(r)>c(e)?1:-1}}(t)),e=u(o),n=0;n<e;)r[n]=o[n++];for(;n<f;)s(r,n++);return r}})},91029:(t,r,e)=>{e(7730)("Array")},6429:(t,r,e)=>{"use strict";var n=e(37263),o=e(61324),i=e(96782),a=e(87486),u=e(1825),s=e(98173),c=e(6768),f=e(44822),l=e(65999),p=e(37774),h=e(69269)("splice"),v=Math.max,d=Math.min;n({target:"Array",proto:!0,forced:!h},{splice:function(t,r){var e,n,h,y,g,m,b=o(this),x=u(b),w=i(t,x),S=arguments.length;for(0===S?e=n=0:1===S?(e=0,n=x-w):(e=S-2,n=d(v(a(r),0),x-w)),c(x+e-n),h=f(b,n),y=0;y<n;y++)(g=w+y)in b&&l(h,y,b[g]);if(h.length=n,e<n){for(y=w;y<x-n;y++)m=y+e,(g=y+n)in b?b[m]=b[g]:p(b,m);for(y=x;y>x-n+e;y--)p(b,y-1)}else if(e>n)for(y=x-n;y>w;y--)m=y+e-1,(g=y+n-1)in b?b[m]=b[g]:p(b,m);for(y=0;y<e;y++)b[y+w]=arguments[y+2];return s(b,x-n+e),h}})},46270:(t,r,e)=>{e(36288)("flatMap")},55892:(t,r,e)=>{e(36288)("flat")},28107:(t,r,e)=>{"use strict";var n=e(37263),o=e(61324),i=e(1825),a=e(98173),u=e(37774),s=e(6768),c=1!==[].unshift(0),f=!function(){try{Object.defineProperty([],"length",{writable:!1}).unshift()}catch(t){return t instanceof TypeError}}();n({target:"Array",proto:!0,arity:1,forced:c||f},{unshift:function(t){var r=o(this),e=i(r),n=arguments.length;if(n){s(e+n);for(var c=e;c--;){var f=c+n;c in r?r[f]=r[c]:u(r,f)}for(var l=0;l<n;l++)r[l]=arguments[l]}return a(r,e+n)}})},63960:(t,r,e)=>{var n=e(37263),o=e(5562);n({global:!0,constructor:!0,forced:!e(48578)},{DataView:o.DataView})},73163:(t,r,e)=>{e(63960)},94975:(t,r,e)=>{"use strict";var n=e(37263),o=e(7386),i=e(16544)((function(){return 120!==new Date(16e11).getYear()})),a=o(Date.prototype.getFullYear);n({target:"Date",proto:!0,forced:i},{getYear:function(){return a(this)-1900}})},72609:(t,r,e)=>{var n=e(37263),o=e(7386),i=Date,a=o(i.prototype.getTime);n({target:"Date",stat:!0},{now:function(){return a(new i)}})},57436:(t,r,e)=>{"use strict";var n=e(37263),o=e(7386),i=e(87486),a=Date.prototype,u=o(a.getTime),s=o(a.setFullYear);n({target:"Date",proto:!0},{setYear:function(t){u(this);var r=i(t);return s(this,0<=r&&r<=99?r+1900:r)}})},25649:(t,r,e)=>{e(37263)({target:"Date",proto:!0},{toGMTString:Date.prototype.toUTCString})},32001:(t,r,e)=>{var n=e(37263),o=e(74095);n({target:"Date",proto:!0,forced:Date.prototype.toISOString!==o},{toISOString:o})},39762:(t,r,e)=>{"use strict";var n=e(37263),o=e(16544),i=e(61324),a=e(22670);n({target:"Date",proto:!0,arity:1,forced:o((function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}))},{toJSON:function(t){var r=i(this),e=a(r,"number");return"number"!=typeof e||isFinite(e)?r.toISOString():null}})},22466:(t,r,e)=>{var n=e(62870),o=e(73746),i=e(40307),a=e(3649)("toPrimitive"),u=Date.prototype;n(u,a)||o(u,a,i)},75298:(t,r,e)=>{var n=e(7386),o=e(73746),i=Date.prototype,a="Invalid Date",u=n(i.toString),s=n(i.getTime);String(new Date(NaN))!=a&&o(i,"toString",(function(){var t=s(this);return t==t?u(this):a}))},38487:(t,r,e)=>{var n=e(37263),o=e(47583),i=e(71611),a=e(27442),u=o.WebAssembly,s=7!==Error("e",{cause:7}).cause,c=function(t,r){var e={};e[t]=a(t,r,s),n({global:!0,constructor:!0,arity:1,forced:s},e)},f=function(t,r){if(u&&u[t]){var e={};e[t]=a("WebAssembly."+t,r,s),n({target:"WebAssembly",stat:!0,constructor:!0,arity:1,forced:s},e)}};c("Error",(function(t){return function(r){return i(t,this,arguments)}})),c("EvalError",(function(t){return function(r){return i(t,this,arguments)}})),c("RangeError",(function(t){return function(r){return i(t,this,arguments)}})),c("ReferenceError",(function(t){return function(r){return i(t,this,arguments)}})),c("SyntaxError",(function(t){return function(r){return i(t,this,arguments)}})),c("TypeError",(function(t){return function(r){return i(t,this,arguments)}})),c("URIError",(function(t){return function(r){return i(t,this,arguments)}})),f("CompileError",(function(t){return function(r){return i(t,this,arguments)}})),f("LinkError",(function(t){return function(r){return i(t,this,arguments)}})),f("RuntimeError",(function(t){return function(r){return i(t,this,arguments)}}))},83759:(t,r,e)=>{var n=e(73746),o=e(88477),i=Error.prototype;i.toString!==o&&n(i,"toString",o)},81526:(t,r,e)=>{"use strict";var n=e(37263),o=e(7386),i=e(28320),a=o("".charAt),u=o("".charCodeAt),s=o(/./.exec),c=o(1..toString),f=o("".toUpperCase),l=/[\w*+\-./@]/,p=function(t,r){for(var e=c(t,16);e.length<r;)e="0"+e;return e};n({global:!0},{escape:function(t){for(var r,e,n=i(t),o="",c=n.length,h=0;h<c;)r=a(n,h++),s(l,r)?o+=r:o+=(e=u(r,0))<256?"%"+p(e,2):"%u"+f(p(e,4));return o}})},67469:(t,r,e)=>{var n=e(37263),o=e(51335);n({target:"Function",proto:!0,forced:Function.bind!==o},{bind:o})},43344:(t,r,e)=>{"use strict";var n=e(9212),o=e(90794),i=e(94615),a=e(80729),u=e(3649),s=e(49594),c=u("hasInstance"),f=Function.prototype;c in f||i.f(f,c,{value:s((function(t){if(!n(this)||!o(t))return!1;var r=this.prototype;if(!o(r))return t instanceof this;for(;t=a(t);)if(r===t)return!0;return!1}),c)})},54458:(t,r,e)=>{var n=e(18494),o=e(14340).EXISTS,i=e(7386),a=e(94615).f,u=Function.prototype,s=i(u.toString),c=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,f=i(c.exec);n&&!o&&a(u,"name",{configurable:!0,get:function(){try{return f(c,s(this))[1]}catch(t){return""}}})},76169:(t,r,e)=>{var n=e(37263),o=e(47583);n({global:!0,forced:o.globalThis!==o},{globalThis:o})},84415:(t,r,e)=>{var n=e(37263),o=e(35897),i=e(71611),a=e(38262),u=e(7386),s=e(16544),c=e(54521),f=e(9212),l=e(90794),p=e(35871),h=e(46917),v=e(4193),d=o("JSON","stringify"),y=u(/./.exec),g=u("".charAt),m=u("".charCodeAt),b=u("".replace),x=u(1..toString),w=/[\uD800-\uDFFF]/g,S=/^[\uD800-\uDBFF]$/,E=/^[\uDC00-\uDFFF]$/,A=!v||s((function(){var t=o("Symbol")();return"[null]"!=d([t])||"{}"!=d({a:t})||"{}"!=d(Object(t))})),I=s((function(){return'"\\udf06\\ud834"'!==d("\udf06\ud834")||'"\\udead"'!==d("\udead")})),_=function(t,r){var e=h(arguments),n=r;if((l(r)||void 0!==t)&&!p(t))return c(r)||(r=function(t,r){if(f(n)&&(r=a(n,this,t,r)),!p(r))return r}),e[1]=r,i(d,null,e)},R=function(t,r,e){var n=g(e,r-1),o=g(e,r+1);return y(S,t)&&!y(E,o)||y(E,t)&&!y(S,n)?"\\u"+x(m(t,0),16):t};d&&n({target:"JSON",stat:!0,arity:3,forced:A||I},{stringify:function(t,r,e){var n=h(arguments),o=i(A?_:d,null,n);return I&&"string"==typeof o?b(o,w,R):o}})},76956:(t,r,e)=>{var n=e(47583);e(98821)(n.JSON,"JSON",!0)},66458:(t,r,e)=>{"use strict";e(24802)("Map",(function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}}),e(26100))},14327:(t,r,e)=>{e(66458)},27680:(t,r,e)=>{var n=e(37263),o=e(40865),i=Math.acosh,a=Math.log,u=Math.sqrt,s=Math.LN2;n({target:"Math",stat:!0,forced:!i||710!=Math.floor(i(Number.MAX_VALUE))||i(1/0)!=1/0},{acosh:function(t){var r=+t;return r<1?NaN:r>94906265.62425156?a(r)+s:o(r-1+u(r-1)*u(r+1))}})},28743:(t,r,e)=>{var n=e(37263),o=Math.asinh,i=Math.log,a=Math.sqrt;n({target:"Math",stat:!0,forced:!(o&&1/o(0)>0)},{asinh:function t(r){var e=+r;return isFinite(e)&&0!=e?e<0?-t(-e):i(e+a(e*e+1)):e}})},59295:(t,r,e)=>{var n=e(37263),o=Math.atanh,i=Math.log;n({target:"Math",stat:!0,forced:!(o&&1/o(-0)<0)},{atanh:function(t){var r=+t;return 0==r?r:i((1+r)/(1-r))/2}})},62794:(t,r,e)=>{var n=e(37263),o=e(87768),i=Math.abs,a=Math.pow;n({target:"Math",stat:!0},{cbrt:function(t){var r=+t;return o(r)*a(i(r),1/3)}})},52340:(t,r,e)=>{var n=e(37263),o=Math.floor,i=Math.log,a=Math.LOG2E;n({target:"Math",stat:!0},{clz32:function(t){var r=t>>>0;return r?31-o(i(r+.5)*a):32}})},74779:(t,r,e)=>{var n=e(37263),o=e(1599),i=Math.cosh,a=Math.abs,u=Math.E;n({target:"Math",stat:!0,forced:!i||i(710)===1/0},{cosh:function(t){var r=o(a(t)-1)+1;return(r+1/(r*u*u))*(u/2)}})},97359:(t,r,e)=>{var n=e(37263),o=e(1599);n({target:"Math",stat:!0,forced:o!=Math.expm1},{expm1:o})},29627:(t,r,e)=>{e(37263)({target:"Math",stat:!0},{fround:e(75661)})},32474:(t,r,e)=>{var n=e(37263),o=Math.hypot,i=Math.abs,a=Math.sqrt;n({target:"Math",stat:!0,arity:2,forced:!!o&&o(1/0,NaN)!==1/0},{hypot:function(t,r){for(var e,n,o=0,u=0,s=arguments.length,c=0;u<s;)c<(e=i(arguments[u++]))?(o=o*(n=c/e)*n+1,c=e):o+=e>0?(n=e/c)*n:e;return c===1/0?1/0:c*a(o)}})},76493:(t,r,e)=>{var n=e(37263),o=e(16544),i=Math.imul;n({target:"Math",stat:!0,forced:o((function(){return-5!=i(4294967295,5)||2!=i.length}))},{imul:function(t,r){var e=65535,n=+t,o=+r,i=e&n,a=e&o;return 0|i*a+((e&n>>>16)*a+i*(e&o>>>16)<<16>>>0)}})},59630:(t,r,e)=>{e(37263)({target:"Math",stat:!0},{log10:e(52789)})},30357:(t,r,e)=>{e(37263)({target:"Math",stat:!0},{log1p:e(40865)})},92374:(t,r,e)=>{var n=e(37263),o=Math.log,i=Math.LN2;n({target:"Math",stat:!0},{log2:function(t){return o(t)/i}})},52079:(t,r,e)=>{e(37263)({target:"Math",stat:!0},{sign:e(87768)})},17388:(t,r,e)=>{var n=e(37263),o=e(16544),i=e(1599),a=Math.abs,u=Math.exp,s=Math.E;n({target:"Math",stat:!0,forced:o((function(){return-2e-17!=Math.sinh(-2e-17)}))},{sinh:function(t){var r=+t;return a(r)<1?(i(r)-i(-r))/2:(u(r-1)-u(-r-1))*(s/2)}})},94593:(t,r,e)=>{var n=e(37263),o=e(1599),i=Math.exp;n({target:"Math",stat:!0},{tanh:function(t){var r=+t,e=o(r),n=o(-r);return e==1/0?1:n==1/0?-1:(e-n)/(i(r)+i(-r))}})},55222:(t,r,e)=>{e(98821)(Math,"Math",!0)},45777:(t,r,e)=>{e(37263)({target:"Math",stat:!0},{trunc:e(19021)})},30717:(t,r,e)=>{"use strict";var n=e(18494),o=e(47583),i=e(7386),a=e(34451),u=e(73746),s=e(62870),c=e(40434),f=e(22447),l=e(35871),p=e(22670),h=e(16544),v=e(9275).f,d=e(46683).f,y=e(94615).f,g=e(38064),m=e(68940).trim,b="Number",x=o.Number,w=x.prototype,S=o.TypeError,E=i("".slice),A=i("".charCodeAt),I=function(t){var r=p(t,"number");return"bigint"==typeof r?r:_(r)},_=function(t){var r,e,n,o,i,a,u,s,c=p(t,"number");if(l(c))throw S("Cannot convert a Symbol value to a number");if("string"==typeof c&&c.length>2)if(c=m(c),43===(r=A(c,0))||45===r){if(88===(e=A(c,2))||120===e)return NaN}else if(48===r){switch(A(c,1)){case 66:case 98:n=2,o=49;break;case 79:case 111:n=8,o=55;break;default:return+c}for(a=(i=E(c,2)).length,u=0;u<a;u++)if((s=A(i,u))<48||s>o)return NaN;return parseInt(i,n)}return+c};if(a(b,!x(" 0o1")||!x("0b1")||x("+0x1"))){for(var R,O=function(t){var r=arguments.length<1?0:x(I(t)),e=this;return f(w,e)&&h((function(){g(e)}))?c(Object(r),e,O):r},T=n?v(x):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(","),k=0;T.length>k;k++)s(x,R=T[k])&&!s(O,R)&&y(O,R,d(x,R));O.prototype=w,w.constructor=O,u(o,b,O,{constructor:!0})}},77483:(t,r,e)=>{e(37263)({target:"Number",stat:!0,nonConfigurable:!0,nonWritable:!0},{EPSILON:Math.pow(2,-52)})},74176:(t,r,e)=>{e(37263)({target:"Number",stat:!0},{isFinite:e(79606)})},12406:(t,r,e)=>{e(37263)({target:"Number",stat:!0},{isInteger:e(69352)})},92437:(t,r,e)=>{e(37263)({target:"Number",stat:!0},{isNaN:function(t){return t!=t}})},23311:(t,r,e)=>{var n=e(37263),o=e(69352),i=Math.abs;n({target:"Number",stat:!0},{isSafeInteger:function(t){return o(t)&&i(t)<=9007199254740991}})},66474:(t,r,e)=>{e(37263)({target:"Number",stat:!0,nonConfigurable:!0,nonWritable:!0},{MAX_SAFE_INTEGER:9007199254740991})},65206:(t,r,e)=>{e(37263)({target:"Number",stat:!0,nonConfigurable:!0,nonWritable:!0},{MIN_SAFE_INTEGER:-9007199254740991})},71579:(t,r,e)=>{var n=e(37263),o=e(17560);n({target:"Number",stat:!0,forced:Number.parseFloat!=o},{parseFloat:o})},66016:(t,r,e)=>{var n=e(37263),o=e(35407);n({target:"Number",stat:!0,forced:Number.parseInt!=o},{parseInt:o})},49294:(t,r,e)=>{"use strict";var n=e(37263),o=e(7386),i=e(87486),a=e(38064),u=e(74061),s=e(52789),c=e(16544),f=RangeError,l=String,p=isFinite,h=Math.abs,v=Math.floor,d=Math.pow,y=Math.round,g=o(1..toExponential),m=o(u),b=o("".slice),x="-6.9000e-11"===g(-69e-12,4)&&"1.25e+0"===g(1.255,2)&&"1.235e+4"===g(12345,3)&&"3e+1"===g(25,0),w=c((function(){g(1,1/0)}))&&c((function(){g(1,-1/0)})),S=!c((function(){g(1/0,1/0)}))&&!c((function(){g(NaN,1/0)}));n({target:"Number",proto:!0,forced:!x||!w||!S},{toExponential:function(t){var r=a(this);if(void 0===t)return g(r);var e=i(t);if(!p(r))return String(r);if(e<0||e>20)throw f("Incorrect fraction digits");if(x)return g(r,e);var n="",o="",u=0,c="",w="";if(r<0&&(n="-",r=-r),0===r)u=0,o=m("0",e+1);else{var S=s(r);u=v(S);var E=0,A=d(10,u-e);2*r>=(2*(E=y(r/A))+1)*A&&(E+=1),E>=d(10,e+1)&&(E/=10,u+=1),o=l(E)}return 0!==e&&(o=b(o,0,1)+"."+b(o,1)),0===u?(c="+",w="0"):(c=u>0?"+":"-",w=l(h(u))),n+(o+"e")+c+w}})},56660:(t,r,e)=>{"use strict";var n=e(37263),o=e(7386),i=e(87486),a=e(38064),u=e(74061),s=e(16544),c=RangeError,f=String,l=Math.floor,p=o(u),h=o("".slice),v=o(1..toFixed),d=function t(r,e,n){return 0===e?n:e%2==1?t(r,e-1,n*r):t(r*r,e/2,n)},y=function(t,r,e){for(var n=-1,o=e;++n<6;)o+=r*t[n],t[n]=o%1e7,o=l(o/1e7)},g=function(t,r){for(var e=6,n=0;--e>=0;)n+=t[e],t[e]=l(n/r),n=n%r*1e7},m=function(t){for(var r=6,e="";--r>=0;)if(""!==e||0===r||0!==t[r]){var n=f(t[r]);e=""===e?n:e+p("0",7-n.length)+n}return e};n({target:"Number",proto:!0,forced:s((function(){return"0.000"!==v(8e-5,3)||"1"!==v(.9,0)||"1.25"!==v(1.255,2)||"1000000000000000128"!==v(0xde0b6b3a7640080,0)}))||!s((function(){v({})}))},{toFixed:function(t){var r,e,n,o,u=a(this),s=i(t),l=[0,0,0,0,0,0],v="",b="0";if(s<0||s>20)throw c("Incorrect fraction digits");if(u!=u)return"NaN";if(u<=-1e21||u>=1e21)return f(u);if(u<0&&(v="-",u=-u),u>1e-21)if(e=(r=function(t){for(var r=0,e=t;e>=4096;)r+=12,e/=4096;for(;e>=2;)r+=1,e/=2;return r}(u*d(2,69,1))-69)<0?u*d(2,-r,1):u/d(2,r,1),e*=4503599627370496,(r=52-r)>0){for(y(l,0,e),n=s;n>=7;)y(l,1e7,0),n-=7;for(y(l,d(10,n,1),0),n=r-1;n>=23;)g(l,1<<23),n-=23;g(l,1<<n),y(l,1,1),g(l,2),b=m(l)}else y(l,0,e),y(l,1<<-r,0),b=m(l)+p("0",s);return s>0?v+((o=b.length)<=s?"0."+p("0",s-o)+b:h(b,0,o-s)+"."+h(b,o-s)):v+b}})},96785:(t,r,e)=>{"use strict";var n=e(37263),o=e(7386),i=e(16544),a=e(38064),u=o(1..toPrecision);n({target:"Number",proto:!0,forced:i((function(){return"1"!==u(1,void 0)}))||!i((function(){u({})}))},{toPrecision:function(t){return void 0===t?u(a(this)):u(a(this),t)}})},74517:(t,r,e)=>{var n=e(37263),o=e(79304);n({target:"Object",stat:!0,arity:2,forced:Object.assign!==o},{assign:o})},4334:(t,r,e)=>{e(37263)({target:"Object",stat:!0,sham:!e(18494)},{create:e(3590)})},89610:(t,r,e)=>{"use strict";var n=e(37263),o=e(18494),i=e(36037),a=e(18257),u=e(61324),s=e(94615);o&&n({target:"Object",proto:!0,forced:i},{__defineGetter__:function(t,r){s.f(u(this),t,{get:a(r),enumerable:!0,configurable:!0})}})},90190:(t,r,e)=>{var n=e(37263),o=e(18494),i=e(28728).f;n({target:"Object",stat:!0,forced:Object.defineProperties!==i,sham:!o},{defineProperties:i})},74649:(t,r,e)=>{var n=e(37263),o=e(18494),i=e(94615).f;n({target:"Object",stat:!0,forced:Object.defineProperty!==i,sham:!o},{defineProperty:i})},77031:(t,r,e)=>{"use strict";var n=e(37263),o=e(18494),i=e(36037),a=e(18257),u=e(61324),s=e(94615);o&&n({target:"Object",proto:!0,forced:i},{__defineSetter__:function(t,r){s.f(u(this),t,{set:a(r),enumerable:!0,configurable:!0})}})},86737:(t,r,e)=>{var n=e(37263),o=e(69953).entries;n({target:"Object",stat:!0},{entries:function(t){return o(t)}})},47561:(t,r,e)=>{var n=e(37263),o=e(39974),i=e(16544),a=e(90794),u=e(51909).onFreeze,s=Object.freeze;n({target:"Object",stat:!0,forced:i((function(){s(1)})),sham:!o},{freeze:function(t){return s&&a(t)?s(u(t)):t}})},5809:(t,r,e)=>{var n=e(37263),o=e(54026),i=e(65999);n({target:"Object",stat:!0},{fromEntries:function(t){var r={};return o(t,(function(t,e){i(r,t,e)}),{AS_ENTRIES:!0}),r}})},10815:(t,r,e)=>{var n=e(37263),o=e(16544),i=e(22977),a=e(46683).f,u=e(18494),s=o((function(){a(1)}));n({target:"Object",stat:!0,forced:!u||s,sham:!u},{getOwnPropertyDescriptor:function(t,r){return a(i(t),r)}})},79174:(t,r,e)=>{var n=e(37263),o=e(18494),i=e(40929),a=e(22977),u=e(46683),s=e(65999);n({target:"Object",stat:!0,sham:!o},{getOwnPropertyDescriptors:function(t){for(var r,e,n=a(t),o=u.f,c=i(n),f={},l=0;c.length>l;)void 0!==(e=o(n,r=c[l++]))&&s(f,r,e);return f}})},5536:(t,r,e)=>{var n=e(37263),o=e(16544),i=e(63130).f;n({target:"Object",stat:!0,forced:o((function(){return!Object.getOwnPropertyNames(1)}))},{getOwnPropertyNames:i})},11626:(t,r,e)=>{var n=e(37263),o=e(4193),i=e(16544),a=e(74012),u=e(61324);n({target:"Object",stat:!0,forced:!o||i((function(){a.f(1)}))},{getOwnPropertySymbols:function(t){var r=a.f;return r?r(u(t)):[]}})},25101:(t,r,e)=>{var n=e(37263),o=e(16544),i=e(61324),a=e(80729),u=e(50926);n({target:"Object",stat:!0,forced:o((function(){a(1)})),sham:!u},{getPrototypeOf:function(t){return a(i(t))}})},70850:(t,r,e)=>{e(37263)({target:"Object",stat:!0},{hasOwn:e(62870)})},22698:(t,r,e)=>{var n=e(37263),o=e(4766);n({target:"Object",stat:!0,forced:Object.isExtensible!==o},{isExtensible:o})},49815:(t,r,e)=>{var n=e(37263),o=e(16544),i=e(90794),a=e(39624),u=e(91537),s=Object.isFrozen;n({target:"Object",stat:!0,forced:o((function(){s(1)}))||u},{isFrozen:function(t){return!i(t)||!(!u||"ArrayBuffer"!=a(t))||!!s&&s(t)}})},55056:(t,r,e)=>{var n=e(37263),o=e(16544),i=e(90794),a=e(39624),u=e(91537),s=Object.isSealed;n({target:"Object",stat:!0,forced:o((function(){s(1)}))||u},{isSealed:function(t){return!i(t)||!(!u||"ArrayBuffer"!=a(t))||!!s&&s(t)}})},45710:(t,r,e)=>{e(37263)({target:"Object",stat:!0},{is:e(8690)})},99751:(t,r,e)=>{var n=e(37263),o=e(61324),i=e(75432);n({target:"Object",stat:!0,forced:e(16544)((function(){i(1)}))},{keys:function(t){return i(o(t))}})},51796:(t,r,e)=>{"use strict";var n=e(37263),o=e(18494),i=e(36037),a=e(61324),u=e(98734),s=e(80729),c=e(46683).f;o&&n({target:"Object",proto:!0,forced:i},{__lookupGetter__:function(t){var r,e=a(this),n=u(t);do{if(r=c(e,n))return r.get}while(e=s(e))}})},61904:(t,r,e)=>{"use strict";var n=e(37263),o=e(18494),i=e(36037),a=e(61324),u=e(98734),s=e(80729),c=e(46683).f;o&&n({target:"Object",proto:!0,forced:i},{__lookupSetter__:function(t){var r,e=a(this),n=u(t);do{if(r=c(e,n))return r.set}while(e=s(e))}})},95738:(t,r,e)=>{var n=e(37263),o=e(90794),i=e(51909).onFreeze,a=e(39974),u=e(16544),s=Object.preventExtensions;n({target:"Object",stat:!0,forced:u((function(){s(1)})),sham:!a},{preventExtensions:function(t){return s&&o(t)?s(i(t)):t}})},46204:(t,r,e)=>{"use strict";var n=e(18494),o=e(92499),i=e(90794),a=e(61324),u=e(63955),s=Object.getPrototypeOf,c=Object.setPrototypeOf,f=Object.prototype,l="__proto__";if(n&&s&&c&&!(l in f))try{o(f,l,{configurable:!0,get:function(){return s(a(this))},set:function(t){var r=u(this);(i(t)||null===t)&&i(r)&&c(r,t)}})}catch(t){}},47595:(t,r,e)=>{var n=e(37263),o=e(90794),i=e(51909).onFreeze,a=e(39974),u=e(16544),s=Object.seal;n({target:"Object",stat:!0,forced:u((function(){s(1)})),sham:!a},{seal:function(t){return s&&o(t)?s(i(t)):t}})},27867:(t,r,e)=>{e(37263)({target:"Object",stat:!0},{setPrototypeOf:e(17496)})},56394:(t,r,e)=>{var n=e(88191),o=e(73746),i=e(43060);n||o(Object.prototype,"toString",i,{unsafe:!0})},49628:(t,r,e)=>{var n=e(37263),o=e(69953).values;n({target:"Object",stat:!0},{values:function(t){return o(t)}})},56718:(t,r,e)=>{var n=e(37263),o=e(17560);n({global:!0,forced:parseFloat!=o},{parseFloat:o})},573:(t,r,e)=>{var n=e(37263),o=e(35407);n({global:!0,forced:parseInt!=o},{parseInt:o})},86969:(t,r,e)=>{"use strict";var n=e(37263),o=e(38262),i=e(18257),a=e(5084),u=e(80544),s=e(54026);n({target:"Promise",stat:!0},{allSettled:function(t){var r=this,e=a.f(r),n=e.resolve,c=e.reject,f=u((function(){var e=i(r.resolve),a=[],u=0,c=1;s(t,(function(t){var i=u++,s=!1;c++,o(e,r,t).then((function(t){s||(s=!0,a[i]={status:"fulfilled",value:t},--c||n(a))}),(function(t){s||(s=!0,a[i]={status:"rejected",reason:t},--c||n(a))}))})),--c||n(a)}));return f.error&&c(f.value),e.promise}})},80580:(t,r,e)=>{"use strict";var n=e(37263),o=e(38262),i=e(18257),a=e(5084),u=e(80544),s=e(54026);n({target:"Promise",stat:!0,forced:e(40409)},{all:function(t){var r=this,e=a.f(r),n=e.resolve,c=e.reject,f=u((function(){var e=i(r.resolve),a=[],u=0,f=1;s(t,(function(t){var i=u++,s=!1;f++,o(e,r,t).then((function(t){s||(s=!0,a[i]=t,--f||n(a))}),c)})),--f||n(a)}));return f.error&&c(f.value),e.promise}})},32021:(t,r,e)=>{"use strict";var n=e(37263),o=e(38262),i=e(18257),a=e(35897),u=e(5084),s=e(80544),c=e(54026),f="No one promise resolved";n({target:"Promise",stat:!0},{any:function(t){var r=this,e=a("AggregateError"),n=u.f(r),l=n.resolve,p=n.reject,h=s((function(){var n=i(r.resolve),a=[],u=0,s=1,h=!1;c(t,(function(t){var i=u++,c=!1;s++,o(n,r,t).then((function(t){c||h||(h=!0,l(t))}),(function(t){c||h||(c=!0,a[i]=t,--s||p(new e(a,f)))}))})),--s||p(new e(a,f))}));return h.error&&p(h.value),n.promise}})},69526:(t,r,e)=>{"use strict";var n=e(37263),o=e(86268),i=e(60190).CONSTRUCTOR,a=e(44282),u=e(35897),s=e(9212),c=e(73746),f=a&&a.prototype;if(n({target:"Promise",proto:!0,forced:i,real:!0},{catch:function(t){return this.then(void 0,t)}}),!o&&s(a)){var l=u("Promise").prototype.catch;f.catch!==l&&c(f,"catch",l,{unsafe:!0})}},72876:(t,r,e)=>{"use strict";var n,o,i,a=e(37263),u=e(86268),s=e(45354),c=e(47583),f=e(38262),l=e(73746),p=e(17496),h=e(98821),v=e(7730),d=e(18257),y=e(9212),g=e(90794),m=e(44761),b=e(40564),x=e(48117).set,w=e(92095),S=e(92716),E=e(80544),A=e(42723),I=e(42743),_=e(44282),R=e(60190),O=e(5084),T="Promise",k=R.CONSTRUCTOR,M=R.REJECTION_EVENT,P=R.SUBCLASSING,j=I.getterFor(T),C=I.set,L=_&&_.prototype,N=_,D=L,U=c.TypeError,F=c.document,B=c.process,q=O.f,z=q,W=!!(F&&F.createEvent&&c.dispatchEvent),V="unhandledrejection",H=function(t){var r;return!(!g(t)||!y(r=t.then))&&r},G=function(t,r){var e,n,o,i=r.value,a=1==r.state,u=a?t.ok:t.fail,s=t.resolve,c=t.reject,l=t.domain;try{u?(a||(2===r.rejection&&X(r),r.rejection=1),!0===u?e=i:(l&&l.enter(),e=u(i),l&&(l.exit(),o=!0)),e===t.promise?c(U("Promise-chain cycle")):(n=H(e))?f(n,e,s,c):s(e)):c(i)}catch(t){l&&!o&&l.exit(),c(t)}},Y=function(t,r){t.notified||(t.notified=!0,w((function(){for(var e,n=t.reactions;e=n.get();)G(e,t);t.notified=!1,r&&!t.rejection&&K(t)})))},$=function(t,r,e){var n,o;W?((n=F.createEvent("Event")).promise=r,n.reason=e,n.initEvent(t,!1,!0),c.dispatchEvent(n)):n={promise:r,reason:e},!M&&(o=c["on"+t])?o(n):t===V&&S("Unhandled promise rejection",e)},K=function(t){f(x,c,(function(){var r,e=t.facade,n=t.value;if(J(t)&&(r=E((function(){s?B.emit("unhandledRejection",n,e):$(V,e,n)})),t.rejection=s||J(t)?2:1,r.error))throw r.value}))},J=function(t){return 1!==t.rejection&&!t.parent},X=function(t){f(x,c,(function(){var r=t.facade;s?B.emit("rejectionHandled",r):$("rejectionhandled",r,t.value)}))},Q=function(t,r,e){return function(n){t(r,n,e)}},Z=function(t,r,e){t.done||(t.done=!0,e&&(t=e),t.value=r,t.state=2,Y(t,!0))},tt=function t(r,e,n){if(!r.done){r.done=!0,n&&(r=n);try{if(r.facade===e)throw U("Promise can't be resolved itself");var o=H(e);o?w((function(){var n={done:!1};try{f(o,e,Q(t,n,r),Q(Z,n,r))}catch(t){Z(n,t,r)}})):(r.value=e,r.state=1,Y(r,!1))}catch(t){Z({done:!1},t,r)}}};if(k&&(D=(N=function(t){m(this,D),d(t),f(n,this);var r=j(this);try{t(Q(tt,r),Q(Z,r))}catch(t){Z(r,t)}}).prototype,(n=function(t){C(this,{type:T,done:!1,notified:!1,parent:!1,reactions:new A,rejection:!1,state:0,value:void 0})}).prototype=l(D,"then",(function(t,r){var e=j(this),n=q(b(this,N));return e.parent=!0,n.ok=!y(t)||t,n.fail=y(r)&&r,n.domain=s?B.domain:void 0,0==e.state?e.reactions.add(n):w((function(){G(n,e)})),n.promise})),o=function(){var t=new n,r=j(t);this.promise=t,this.resolve=Q(tt,r),this.reject=Q(Z,r)},O.f=q=function(t){return t===N||void 0===t?new o(t):z(t)},!u&&y(_)&&L!==Object.prototype)){i=L.then,P||l(L,"then",(function(t,r){var e=this;return new N((function(t,r){f(i,e,t,r)})).then(t,r)}),{unsafe:!0});try{delete L.constructor}catch(t){}p&&p(L,D)}a({global:!0,constructor:!0,wrap:!0,forced:k},{Promise:N}),h(N,T,!1,!0),v(T)},38328:(t,r,e)=>{"use strict";var n=e(37263),o=e(86268),i=e(44282),a=e(16544),u=e(35897),s=e(9212),c=e(40564),f=e(95732),l=e(73746),p=i&&i.prototype;if(n({target:"Promise",proto:!0,real:!0,forced:!!i&&a((function(){p.finally.call({then:function(){}},(function(){}))}))},{finally:function(t){var r=c(this,u("Promise")),e=s(t);return this.then(e?function(e){return f(r,t()).then((function(){return e}))}:t,e?function(e){return f(r,t()).then((function(){throw e}))}:t)}}),!o&&s(i)){var h=u("Promise").prototype.finally;p.finally!==h&&l(p,"finally",h,{unsafe:!0})}},25334:(t,r,e)=>{e(72876),e(80580),e(69526),e(13723),e(75097),e(13741)},13723:(t,r,e)=>{"use strict";var n=e(37263),o=e(38262),i=e(18257),a=e(5084),u=e(80544),s=e(54026);n({target:"Promise",stat:!0,forced:e(40409)},{race:function(t){var r=this,e=a.f(r),n=e.reject,c=u((function(){var a=i(r.resolve);s(t,(function(t){o(a,r,t).then(e.resolve,n)}))}));return c.error&&n(c.value),e.promise}})},75097:(t,r,e)=>{"use strict";var n=e(37263),o=e(38262),i=e(5084);n({target:"Promise",stat:!0,forced:e(60190).CONSTRUCTOR},{reject:function(t){var r=i.f(this);return o(r.reject,void 0,t),r.promise}})},13741:(t,r,e)=>{"use strict";var n=e(37263),o=e(35897),i=e(86268),a=e(44282),u=e(60190).CONSTRUCTOR,s=e(95732),c=o("Promise"),f=i&&!u;n({target:"Promise",stat:!0,forced:i||u},{resolve:function(t){return s(f&&this===c?a:this,t)}})},31678:(t,r,e)=>{var n=e(37263),o=e(71611),i=e(18257),a=e(92569);n({target:"Reflect",stat:!0,forced:!e(16544)((function(){Reflect.apply((function(){}))}))},{apply:function(t,r,e){return o(i(t),r,a(e))}})},13080:(t,r,e)=>{var n=e(37263),o=e(35897),i=e(71611),a=e(51335),u=e(41186),s=e(92569),c=e(90794),f=e(3590),l=e(16544),p=o("Reflect","construct"),h=Object.prototype,v=[].push,d=l((function(){function t(){}return!(p((function(){}),[],t)instanceof t)})),y=!l((function(){p((function(){}))})),g=d||y;n({target:"Reflect",stat:!0,forced:g,sham:g},{construct:function(t,r){u(t),s(r);var e=arguments.length<3?t:u(arguments[2]);if(y&&!d)return p(t,r,e);if(t==e){switch(r.length){case 0:return new t;case 1:return new t(r[0]);case 2:return new t(r[0],r[1]);case 3:return new t(r[0],r[1],r[2]);case 4:return new t(r[0],r[1],r[2],r[3])}var n=[null];return i(v,n,r),new(i(a,t,n))}var o=e.prototype,l=f(c(o)?o:h),g=i(t,l,r);return c(g)?g:l}})},9079:(t,r,e)=>{var n=e(37263),o=e(18494),i=e(92569),a=e(98734),u=e(94615);n({target:"Reflect",stat:!0,forced:e(16544)((function(){Reflect.defineProperty(u.f({},1,{value:1}),1,{value:2})})),sham:!o},{defineProperty:function(t,r,e){i(t);var n=a(r);i(e);try{return u.f(t,n,e),!0}catch(t){return!1}}})},36714:(t,r,e)=>{var n=e(37263),o=e(92569),i=e(46683).f;n({target:"Reflect",stat:!0},{deleteProperty:function(t,r){var e=i(o(t),r);return!(e&&!e.configurable)&&delete t[r]}})},69723:(t,r,e)=>{var n=e(37263),o=e(18494),i=e(92569),a=e(46683);n({target:"Reflect",stat:!0,sham:!o},{getOwnPropertyDescriptor:function(t,r){return a.f(i(t),r)}})},14728:(t,r,e)=>{var n=e(37263),o=e(92569),i=e(80729);n({target:"Reflect",stat:!0,sham:!e(50926)},{getPrototypeOf:function(t){return i(o(t))}})},36582:(t,r,e)=>{var n=e(37263),o=e(38262),i=e(90794),a=e(92569),u=e(78118),s=e(46683),c=e(80729);n({target:"Reflect",stat:!0},{get:function t(r,e){var n,f,l=arguments.length<3?r:arguments[2];return a(r)===l?r[e]:(n=s.f(r,e))?u(n)?n.value:void 0===n.get?void 0:o(n.get,l):i(f=c(r))?t(f,e,l):void 0}})},22704:(t,r,e)=>{e(37263)({target:"Reflect",stat:!0},{has:function(t,r){return r in t}})},76401:(t,r,e)=>{var n=e(37263),o=e(92569),i=e(4766);n({target:"Reflect",stat:!0},{isExtensible:function(t){return o(t),i(t)}})},5274:(t,r,e)=>{e(37263)({target:"Reflect",stat:!0},{ownKeys:e(40929)})},54817:(t,r,e)=>{var n=e(37263),o=e(35897),i=e(92569);n({target:"Reflect",stat:!0,sham:!e(39974)},{preventExtensions:function(t){i(t);try{var r=o("Object","preventExtensions");return r&&r(t),!0}catch(t){return!1}}})},32309:(t,r,e)=>{var n=e(37263),o=e(92569),i=e(79882),a=e(17496);a&&n({target:"Reflect",stat:!0},{setPrototypeOf:function(t,r){o(t),i(r);try{return a(t,r),!0}catch(t){return!1}}})},91183:(t,r,e)=>{var n=e(37263),o=e(38262),i=e(92569),a=e(90794),u=e(78118),s=e(16544),c=e(94615),f=e(46683),l=e(80729),p=e(54677);n({target:"Reflect",stat:!0,forced:s((function(){var t=function(){},r=c.f(new t,"a",{configurable:!0});return!1!==Reflect.set(t.prototype,"a",1,r)}))},{set:function t(r,e,n){var s,h,v,d=arguments.length<4?r:arguments[3],y=f.f(i(r),e);if(!y){if(a(h=l(r)))return t(h,e,n,d);y=p(0)}if(u(y)){if(!1===y.writable||!a(d))return!1;if(s=f.f(d,e)){if(s.get||s.set||!1===s.writable)return!1;s.value=n,c.f(d,e,s)}else c.f(d,e,p(0,n))}else{if(void 0===(v=y.set))return!1;o(v,d,n)}return!0}})},52257:(t,r,e)=>{var n=e(37263),o=e(47583),i=e(98821);n({global:!0},{Reflect:{}}),i(o.Reflect,"Reflect",!0)},7390:(t,r,e)=>{var n=e(18494),o=e(47583),i=e(7386),a=e(34451),u=e(40434),s=e(57),c=e(9275).f,f=e(22447),l=e(17574),p=e(28320),h=e(90640),v=e(35230),d=e(75327),y=e(73746),g=e(16544),m=e(62870),b=e(42743).enforce,x=e(7730),w=e(3649),S=e(74121),E=e(1712),A=w("match"),I=o.RegExp,_=I.prototype,R=o.SyntaxError,O=i(_.exec),T=i("".charAt),k=i("".replace),M=i("".indexOf),P=i("".slice),j=/^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/,C=/a/g,L=/a/g,N=new I(C)!==C,D=v.MISSED_STICKY,U=v.UNSUPPORTED_Y;if(a("RegExp",n&&(!N||D||S||E||g((function(){return L[A]=!1,I(C)!=C||I(L)==L||"/a/i"!=I(C,"i")}))))){for(var F=function(t,r){var e,n,o,i,a,c,v=f(_,this),d=l(t),y=void 0===r,g=[],x=t;if(!v&&d&&y&&t.constructor===F)return t;if((d||f(_,t))&&(t=t.source,y&&(r=h(x))),t=void 0===t?"":p(t),r=void 0===r?"":p(r),x=t,S&&"dotAll"in C&&(n=!!r&&M(r,"s")>-1)&&(r=k(r,/s/g,"")),e=r,D&&"sticky"in C&&(o=!!r&&M(r,"y")>-1)&&U&&(r=k(r,/y/g,"")),E&&(i=function(t){for(var r,e=t.length,n=0,o="",i=[],a={},u=!1,s=!1,c=0,f="";n<=e;n++){if("\\"===(r=T(t,n)))r+=T(t,++n);else if("]"===r)u=!1;else if(!u)switch(!0){case"["===r:u=!0;break;case"("===r:O(j,P(t,n+1))&&(n+=2,s=!0),o+=r,c++;continue;case">"===r&&s:if(""===f||m(a,f))throw new R("Invalid capture group name");a[f]=!0,i[i.length]=[f,c],s=!1,f="";continue}s?f+=r:o+=r}return[o,i]}(t),t=i[0],g=i[1]),a=u(I(t,r),v?this:_,F),(n||o||g.length)&&(c=b(a),n&&(c.dotAll=!0,c.raw=F(function(t){for(var r,e=t.length,n=0,o="",i=!1;n<=e;n++)"\\"!==(r=T(t,n))?i||"."!==r?("["===r?i=!0:"]"===r&&(i=!1),o+=r):o+="[\\s\\S]":o+=r+T(t,++n);return o}(t),e)),o&&(c.sticky=!0),g.length&&(c.groups=g)),t!==x)try{s(a,"source",""===x?"(?:)":x)}catch(t){}return a},B=c(I),q=0;B.length>q;)d(F,I,B[q++]);_.constructor=F,F.prototype=_,y(o,"RegExp",F,{constructor:!0})}x("RegExp")},86956:(t,r,e)=>{var n=e(18494),o=e(74121),i=e(39624),a=e(92499),u=e(42743).get,s=RegExp.prototype,c=TypeError;n&&o&&a(s,"dotAll",{configurable:!0,get:function(){if(this!==s){if("RegExp"===i(this))return!!u(this).dotAll;throw c("Incompatible receiver, RegExp required")}}})},62322:(t,r,e)=>{"use strict";var n=e(37263),o=e(48445);n({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},93710:(t,r,e)=>{var n=e(47583),o=e(18494),i=e(92499),a=e(41118),u=e(16544),s=n.RegExp,c=s.prototype;o&&u((function(){var t=!0;try{s(".","d")}catch(r){t=!1}var r={},e="",n=t?"dgimsy":"gimsy",o=function(t,n){Object.defineProperty(r,t,{get:function(){return e+=n,!0}})},i={dotAll:"s",global:"g",ignoreCase:"i",multiline:"m",sticky:"y"};for(var a in t&&(i.hasIndices="d"),i)o(a,i[a]);return Object.getOwnPropertyDescriptor(c,"flags").get.call(r)!==n||e!==n}))&&i(c,"flags",{configurable:!0,get:a})},514:(t,r,e)=>{var n=e(18494),o=e(35230).MISSED_STICKY,i=e(39624),a=e(92499),u=e(42743).get,s=RegExp.prototype,c=TypeError;n&&o&&a(s,"sticky",{configurable:!0,get:function(){if(this!==s){if("RegExp"===i(this))return!!u(this).sticky;throw c("Incompatible receiver, RegExp required")}}})},19297:(t,r,e)=>{"use strict";e(62322);var n,o,i=e(37263),a=e(38262),u=e(9212),s=e(92569),c=e(28320),f=(n=!1,(o=/[ac]/).exec=function(){return n=!0,/./.exec.apply(this,arguments)},!0===o.test("abc")&&n),l=/./.test;i({target:"RegExp",proto:!0,forced:!f},{test:function(t){var r=s(this),e=c(t),n=r.exec;if(!u(n))return a(l,r,e);var o=a(n,r,e);return null!==o&&(s(o),!0)}})},64669:(t,r,e)=>{"use strict";var n=e(14340).PROPER,o=e(73746),i=e(92569),a=e(28320),u=e(16544),s=e(90640),c="toString",f=RegExp.prototype.toString,l=u((function(){return"/a/b"!=f.call({source:"a",flags:"b"})})),p=n&&f.name!=c;(l||p)&&o(RegExp.prototype,c,(function(){var t=i(this);return"/"+a(t.source)+"/"+a(s(t))}),{unsafe:!0})},55855:(t,r,e)=>{"use strict";e(24802)("Set",(function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}}),e(26100))},26922:(t,r,e)=>{e(55855)},36993:(t,r,e)=>{"use strict";var n=e(37263),o=e(35888);n({target:"String",proto:!0,forced:e(29578)("anchor")},{anchor:function(t){return o(this,"a","name",t)}})},95304:(t,r,e)=>{"use strict";var n=e(37263),o=e(7386),i=e(63955),a=e(87486),u=e(28320),s=e(16544),c=o("".charAt);n({target:"String",proto:!0,forced:s((function(){return"\ud842"!=="𠮷".at(-2)}))},{at:function(t){var r=u(i(this)),e=r.length,n=a(t),o=n>=0?n:e+n;return o<0||o>=e?void 0:c(r,o)}})},76755:(t,r,e)=>{"use strict";var n=e(37263),o=e(35888);n({target:"String",proto:!0,forced:e(29578)("big")},{big:function(){return o(this,"big","","")}})},99138:(t,r,e)=>{"use strict";var n=e(37263),o=e(35888);n({target:"String",proto:!0,forced:e(29578)("blink")},{blink:function(){return o(this,"blink","","")}})},42448:(t,r,e)=>{"use strict";var n=e(37263),o=e(35888);n({target:"String",proto:!0,forced:e(29578)("bold")},{bold:function(){return o(this,"b","","")}})},619:(t,r,e)=>{"use strict";var n=e(37263),o=e(96389).codeAt;n({target:"String",proto:!0},{codePointAt:function(t){return o(this,t)}})},23223:(t,r,e)=>{"use strict";var n,o=e(37263),i=e(7386),a=e(46683).f,u=e(70097),s=e(28320),c=e(59041),f=e(63955),l=e(83989),p=e(86268),h=i("".endsWith),v=i("".slice),d=Math.min,y=l("endsWith");o({target:"String",proto:!0,forced:!(!p&&!y&&(n=a(String.prototype,"endsWith"),n&&!n.writable)||y)},{endsWith:function(t){var r=s(f(this));c(t);var e=arguments.length>1?arguments[1]:void 0,n=r.length,o=void 0===e?n:d(u(e),n),i=s(t);return h?h(r,i,o):v(r,o-i.length,o)===i}})},92378:(t,r,e)=>{"use strict";var n=e(37263),o=e(35888);n({target:"String",proto:!0,forced:e(29578)("fixed")},{fixed:function(){return o(this,"tt","","")}})},61892:(t,r,e)=>{"use strict";var n=e(37263),o=e(35888);n({target:"String",proto:!0,forced:e(29578)("fontcolor")},{fontcolor:function(t){return o(this,"font","color",t)}})},40842:(t,r,e)=>{"use strict";var n=e(37263),o=e(35888);n({target:"String",proto:!0,forced:e(29578)("fontsize")},{fontsize:function(t){return o(this,"font","size",t)}})},40594:(t,r,e)=>{var n=e(37263),o=e(7386),i=e(96782),a=RangeError,u=String.fromCharCode,s=String.fromCodePoint,c=o([].join);n({target:"String",stat:!0,arity:1,forced:!!s&&1!=s.length},{fromCodePoint:function(t){for(var r,e=[],n=arguments.length,o=0;n>o;){if(r=+arguments[o++],i(r,1114111)!==r)throw a(r+" is not a valid code point");e[o]=r<65536?u(r):u(55296+((r-=65536)>>10),r%1024+56320)}return c(e,"")}})},97723:(t,r,e)=>{"use strict";var n=e(37263),o=e(7386),i=e(59041),a=e(63955),u=e(28320),s=e(83989),c=o("".indexOf);n({target:"String",proto:!0,forced:!s("includes")},{includes:function(t){return!!~c(u(a(this)),u(i(t)),arguments.length>1?arguments[1]:void 0)}})},66060:(t,r,e)=>{"use strict";var n=e(37263),o=e(35888);n({target:"String",proto:!0,forced:e(29578)("italics")},{italics:function(){return o(this,"i","","")}})},92129:(t,r,e)=>{"use strict";var n=e(96389).charAt,o=e(28320),i=e(42743),a=e(20059),u=e(71002),s="String Iterator",c=i.set,f=i.getterFor(s);a(String,"String",(function(t){c(this,{type:s,string:o(t),index:0})}),(function(){var t,r=f(this),e=r.string,o=r.index;return o>=e.length?u(void 0,!0):(t=n(e,o),r.index+=t.length,u(t,!1))}))},59808:(t,r,e)=>{"use strict";var n=e(37263),o=e(35888);n({target:"String",proto:!0,forced:e(29578)("link")},{link:function(t){return o(this,"a","href",t)}})},70698:(t,r,e)=>{"use strict";var n=e(37263),o=e(38262),i=e(7386),a=e(73098),u=e(71002),s=e(63955),c=e(70097),f=e(28320),l=e(92569),p=e(88505),h=e(39624),v=e(17574),d=e(90640),y=e(60911),g=e(73746),m=e(16544),b=e(3649),x=e(40564),w=e(96733),S=e(74214),E=e(42743),A=e(86268),I=b("matchAll"),_="RegExp String Iterator",R=E.set,O=E.getterFor(_),T=RegExp.prototype,k=TypeError,M=i("".indexOf),P=i("".matchAll),j=!!P&&!m((function(){P("a",/./)})),C=a((function(t,r,e,n){R(this,{type:_,regexp:t,string:r,global:e,unicode:n,done:!1})}),"RegExp String",(function(){var t=O(this);if(t.done)return u(void 0,!0);var r=t.regexp,e=t.string,n=S(r,e);return null===n?(t.done=!0,u(void 0,!0)):t.global?(""===f(n[0])&&(r.lastIndex=w(e,c(r.lastIndex),t.unicode)),u(n,!1)):(t.done=!0,u(n,!1))})),L=function(t){var r,e,n,o=l(this),i=f(t),a=x(o,RegExp),u=f(d(o));return r=new a(a===RegExp?o.source:o,u),e=!!~M(u,"g"),n=!!~M(u,"u"),r.lastIndex=c(o.lastIndex),new C(r,i,e,n)};n({target:"String",proto:!0,forced:j},{matchAll:function(t){var r,e,n,i,a=s(this);if(p(t)){if(j)return P(a,t)}else{if(v(t)&&(r=f(s(d(t))),!~M(r,"g")))throw k("`.matchAll` does not allow non-global regexes");if(j)return P(a,t);if(void 0===(n=y(t,I))&&A&&"RegExp"==h(t)&&(n=L),n)return o(n,t,a)}return e=f(a),i=new RegExp(t,"g"),A?o(L,i,e):i[I](e)}}),A||I in T||g(T,I,L)},55017:(t,r,e)=>{"use strict";var n=e(38262),o=e(90783),i=e(92569),a=e(88505),u=e(70097),s=e(28320),c=e(63955),f=e(60911),l=e(96733),p=e(74214);o("match",(function(t,r,e){return[function(r){var e=c(this),o=a(r)?void 0:f(r,t);return o?n(o,r,e):new RegExp(r)[t](s(e))},function(t){var n=i(this),o=s(t),a=e(r,n,o);if(a.done)return a.value;if(!n.global)return p(n,o);var c=n.unicode;n.lastIndex=0;for(var f,h=[],v=0;null!==(f=p(n,o));){var d=s(f[0]);h[v]=d,""===d&&(n.lastIndex=l(o,u(n.lastIndex),c)),v++}return 0===v?null:h}]}))},82433:(t,r,e)=>{"use strict";var n=e(37263),o=e(70578).end;n({target:"String",proto:!0,forced:e(98040)},{padEnd:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},11932:(t,r,e)=>{"use strict";var n=e(37263),o=e(70578).start;n({target:"String",proto:!0,forced:e(98040)},{padStart:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},45924:(t,r,e)=>{var n=e(37263),o=e(7386),i=e(22977),a=e(61324),u=e(28320),s=e(1825),c=o([].push),f=o([].join);n({target:"String",stat:!0},{raw:function(t){for(var r=i(a(t).raw),e=s(r),n=arguments.length,o=[],l=0;e>l;){if(c(o,u(r[l++])),l===e)return f(o,"");l<n&&c(o,u(arguments[l]))}}})},51142:(t,r,e)=>{e(37263)({target:"String",proto:!0},{repeat:e(74061)})},66553:(t,r,e)=>{"use strict";var n=e(37263),o=e(38262),i=e(7386),a=e(63955),u=e(9212),s=e(88505),c=e(17574),f=e(28320),l=e(60911),p=e(90640),h=e(4305),v=e(3649),d=e(86268),y=v("replace"),g=TypeError,m=i("".indexOf),b=i("".replace),x=i("".slice),w=Math.max,S=function(t,r,e){return e>t.length?-1:""===r?e:m(t,r,e)};n({target:"String",proto:!0},{replaceAll:function(t,r){var e,n,i,v,E,A,I,_,R,O=a(this),T=0,k=0,M="";if(!s(t)){if((e=c(t))&&(n=f(a(p(t))),!~m(n,"g")))throw g("`.replaceAll` does not allow non-global regexes");if(i=l(t,y))return o(i,t,O,r);if(d&&e)return b(f(O),t,r)}for(v=f(O),E=f(t),(A=u(r))||(r=f(r)),I=E.length,_=w(1,I),T=S(v,E,0);-1!==T;)R=A?f(r(E,T,v)):h(E,v,T,[],void 0,r),M+=x(v,k,T)+R,k=T+I,T=S(v,E,T+_);return k<v.length&&(M+=x(v,k)),M}})},93296:(t,r,e)=>{"use strict";var n=e(71611),o=e(38262),i=e(7386),a=e(90783),u=e(16544),s=e(92569),c=e(9212),f=e(88505),l=e(87486),p=e(70097),h=e(28320),v=e(63955),d=e(96733),y=e(60911),g=e(4305),m=e(74214),b=e(3649)("replace"),x=Math.max,w=Math.min,S=i([].concat),E=i([].push),A=i("".indexOf),I=i("".slice),_="$0"==="a".replace(/./,"$0"),R=!!/./[b]&&""===/./[b]("a","$0");a("replace",(function(t,r,e){var i=R?"$":"$0";return[function(t,e){var n=v(this),i=f(t)?void 0:y(t,b);return i?o(i,t,n,e):o(r,h(n),t,e)},function(t,o){var a=s(this),u=h(t);if("string"==typeof o&&-1===A(o,i)&&-1===A(o,"$<")){var f=e(r,a,u,o);if(f.done)return f.value}var v=c(o);v||(o=h(o));var y=a.global;if(y){var b=a.unicode;a.lastIndex=0}for(var _=[];;){var R=m(a,u);if(null===R)break;if(E(_,R),!y)break;""===h(R[0])&&(a.lastIndex=d(u,p(a.lastIndex),b))}for(var O,T="",k=0,M=0;M<_.length;M++){for(var P=h((R=_[M])[0]),j=x(w(l(R.index),u.length),0),C=[],L=1;L<R.length;L++)E(C,void 0===(O=R[L])?O:String(O));var N=R.groups;if(v){var D=S([P],C,j,u);void 0!==N&&E(D,N);var U=h(n(o,void 0,D))}else U=g(P,u,j,C,N,o);j>=k&&(T+=I(u,k,j)+U,k=j+P.length)}return T+I(u,k)}]}),!!u((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}))||!_||R)},79006:(t,r,e)=>{"use strict";var n=e(38262),o=e(90783),i=e(92569),a=e(88505),u=e(63955),s=e(8690),c=e(28320),f=e(60911),l=e(74214);o("search",(function(t,r,e){return[function(r){var e=u(this),o=a(r)?void 0:f(r,t);return o?n(o,r,e):new RegExp(r)[t](c(e))},function(t){var n=i(this),o=c(t),a=e(r,n,o);if(a.done)return a.value;var u=n.lastIndex;s(u,0)||(n.lastIndex=0);var f=l(n,o);return s(n.lastIndex,u)||(n.lastIndex=u),null===f?-1:f.index}]}))},17590:(t,r,e)=>{"use strict";var n=e(37263),o=e(35888);n({target:"String",proto:!0,forced:e(29578)("small")},{small:function(){return o(this,"small","","")}})},49268:(t,r,e)=>{"use strict";var n=e(71611),o=e(38262),i=e(7386),a=e(90783),u=e(92569),s=e(88505),c=e(17574),f=e(63955),l=e(40564),p=e(96733),h=e(70097),v=e(28320),d=e(60911),y=e(74546),g=e(74214),m=e(48445),b=e(35230),x=e(16544),w=b.UNSUPPORTED_Y,S=4294967295,E=Math.min,A=[].push,I=i(/./.exec),_=i(A),R=i("".slice);a("split",(function(t,r,e){var i;return i="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,e){var i=v(f(this)),a=void 0===e?S:e>>>0;if(0===a)return[];if(void 0===t)return[i];if(!c(t))return o(r,i,t,a);for(var u,s,l,p=[],h=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),d=0,g=new RegExp(t.source,h+"g");(u=o(m,g,i))&&!((s=g.lastIndex)>d&&(_(p,R(i,d,u.index)),u.length>1&&u.index<i.length&&n(A,p,y(u,1)),l=u[0].length,d=s,p.length>=a));)g.lastIndex===u.index&&g.lastIndex++;return d===i.length?!l&&I(g,"")||_(p,""):_(p,R(i,d)),p.length>a?y(p,0,a):p}:"0".split(void 0,0).length?function(t,e){return void 0===t&&0===e?[]:o(r,this,t,e)}:r,[function(r,e){var n=f(this),a=s(r)?void 0:d(r,t);return a?o(a,r,n,e):o(i,v(n),r,e)},function(t,n){var o=u(this),a=v(t),s=e(i,o,a,n,i!==r);if(s.done)return s.value;var c=l(o,RegExp),f=o.unicode,d=(o.ignoreCase?"i":"")+(o.multiline?"m":"")+(o.unicode?"u":"")+(w?"g":"y"),y=new c(w?"^(?:"+o.source+")":o,d),m=void 0===n?S:n>>>0;if(0===m)return[];if(0===a.length)return null===g(y,a)?[a]:[];for(var b=0,x=0,A=[];x<a.length;){y.lastIndex=w?0:x;var I,O=g(y,w?R(a,x):a);if(null===O||(I=E(h(y.lastIndex+(w?x:0)),a.length))===b)x=p(a,x,f);else{if(_(A,R(a,b,x)),A.length===m)return A;for(var T=1;T<=O.length-1;T++)if(_(A,O[T]),A.length===m)return A;x=b=I}}return _(A,R(a,b)),A}]}),!!x((function(){var t=/(?:)/,r=t.exec;t.exec=function(){return r.apply(this,arguments)};var e="ab".split(t);return 2!==e.length||"a"!==e[0]||"b"!==e[1]})),w)},97754:(t,r,e)=>{"use strict";var n,o=e(37263),i=e(7386),a=e(46683).f,u=e(70097),s=e(28320),c=e(59041),f=e(63955),l=e(83989),p=e(86268),h=i("".startsWith),v=i("".slice),d=Math.min,y=l("startsWith");o({target:"String",proto:!0,forced:!(!p&&!y&&(n=a(String.prototype,"startsWith"),n&&!n.writable)||y)},{startsWith:function(t){var r=s(f(this));c(t);var e=u(d(arguments.length>1?arguments[1]:void 0,r.length)),n=s(t);return h?h(r,n,e):v(r,e,e+n.length)===n}})},39353:(t,r,e)=>{"use strict";var n=e(37263),o=e(35888);n({target:"String",proto:!0,forced:e(29578)("strike")},{strike:function(){return o(this,"strike","","")}})},79068:(t,r,e)=>{"use strict";var n=e(37263),o=e(35888);n({target:"String",proto:!0,forced:e(29578)("sub")},{sub:function(){return o(this,"sub","","")}})},52933:(t,r,e)=>{"use strict";var n=e(37263),o=e(7386),i=e(63955),a=e(87486),u=e(28320),s=o("".slice),c=Math.max,f=Math.min;n({target:"String",proto:!0,forced:!"".substr||"b"!=="ab".substr(-1)},{substr:function(t,r){var e,n,o=u(i(this)),l=o.length,p=a(t);return p===1/0&&(p=0),p<0&&(p=c(l+p,0)),(e=void 0===r?l:a(r))<=0||e===1/0||p>=(n=f(p+e,l))?"":s(o,p,n)}})},53631:(t,r,e)=>{"use strict";var n=e(37263),o=e(35888);n({target:"String",proto:!0,forced:e(29578)("sup")},{sup:function(){return o(this,"sup","","")}})},28599:(t,r,e)=>{e(69909);var n=e(37263),o=e(22987);n({target:"String",proto:!0,name:"trimEnd",forced:"".trimEnd!==o},{trimEnd:o})},89404:(t,r,e)=>{var n=e(37263),o=e(37686);n({target:"String",proto:!0,name:"trimStart",forced:"".trimLeft!==o},{trimLeft:o})},69909:(t,r,e)=>{var n=e(37263),o=e(22987);n({target:"String",proto:!0,name:"trimEnd",forced:"".trimRight!==o},{trimRight:o})},20087:(t,r,e)=>{e(89404);var n=e(37263),o=e(37686);n({target:"String",proto:!0,name:"trimStart",forced:"".trimStart!==o},{trimStart:o})},13233:(t,r,e)=>{"use strict";var n=e(37263),o=e(68940).trim;n({target:"String",proto:!0,forced:e(65760)("trim")},{trim:function(){return o(this)}})},70462:(t,r,e)=>{e(71513)("asyncIterator")},57802:(t,r,e)=>{"use strict";var n=e(37263),o=e(47583),i=e(38262),a=e(7386),u=e(86268),s=e(18494),c=e(4193),f=e(16544),l=e(62870),p=e(22447),h=e(92569),v=e(22977),d=e(98734),y=e(28320),g=e(54677),m=e(3590),b=e(75432),x=e(9275),w=e(63130),S=e(74012),E=e(46683),A=e(94615),I=e(28728),_=e(20112),R=e(73746),O=e(17836),T=e(89137),k=e(64639),M=e(98284),P=e(3649),j=e(20491),C=e(71513),L=e(88369),N=e(98821),D=e(42743),U=e(24805).forEach,F=T("hidden"),B="Symbol",q=D.set,z=D.getterFor(B),W=Object.prototype,V=o.Symbol,H=V&&V.prototype,G=o.TypeError,Y=o.QObject,$=E.f,K=A.f,J=w.f,X=_.f,Q=a([].push),Z=O("symbols"),tt=O("op-symbols"),rt=O("wks"),et=!Y||!Y.prototype||!Y.prototype.findChild,nt=s&&f((function(){return 7!=m(K({},"a",{get:function(){return K(this,"a",{value:7}).a}})).a}))?function(t,r,e){var n=$(W,r);n&&delete W[r],K(t,r,e),n&&t!==W&&K(W,r,n)}:K,ot=function(t,r){var e=Z[t]=m(H);return q(e,{type:B,tag:t,description:r}),s||(e.description=r),e},it=function(t,r,e){t===W&&it(tt,r,e),h(t);var n=d(r);return h(e),l(Z,n)?(e.enumerable?(l(t,F)&&t[F][n]&&(t[F][n]=!1),e=m(e,{enumerable:g(0,!1)})):(l(t,F)||K(t,F,g(1,{})),t[F][n]=!0),nt(t,n,e)):K(t,n,e)},at=function(t,r){h(t);var e=v(r),n=b(e).concat(ft(e));return U(n,(function(r){s&&!i(ut,e,r)||it(t,r,e[r])})),t},ut=function(t){var r=d(t),e=i(X,this,r);return!(this===W&&l(Z,r)&&!l(tt,r))&&(!(e||!l(this,r)||!l(Z,r)||l(this,F)&&this[F][r])||e)},st=function(t,r){var e=v(t),n=d(r);if(e!==W||!l(Z,n)||l(tt,n)){var o=$(e,n);return!o||!l(Z,n)||l(e,F)&&e[F][n]||(o.enumerable=!0),o}},ct=function(t){var r=J(v(t)),e=[];return U(r,(function(t){l(Z,t)||l(k,t)||Q(e,t)})),e},ft=function(t){var r=t===W,e=J(r?tt:v(t)),n=[];return U(e,(function(t){!l(Z,t)||r&&!l(W,t)||Q(n,Z[t])})),n};c||(R(H=(V=function(){if(p(H,this))throw G("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?y(arguments[0]):void 0,r=M(t),e=function t(e){this===W&&i(t,tt,e),l(this,F)&&l(this[F],r)&&(this[F][r]=!1),nt(this,r,g(1,e))};return s&&et&&nt(W,r,{configurable:!0,set:e}),ot(r,t)}).prototype,"toString",(function(){return z(this).tag})),R(V,"withoutSetter",(function(t){return ot(M(t),t)})),_.f=ut,A.f=it,I.f=at,E.f=st,x.f=w.f=ct,S.f=ft,j.f=function(t){return ot(P(t),t)},s&&(K(H,"description",{configurable:!0,get:function(){return z(this).description}}),u||R(W,"propertyIsEnumerable",ut,{unsafe:!0}))),n({global:!0,constructor:!0,wrap:!0,forced:!c,sham:!c},{Symbol:V}),U(b(rt),(function(t){C(t)})),n({target:B,stat:!0,forced:!c},{useSetter:function(){et=!0},useSimple:function(){et=!1}}),n({target:"Object",stat:!0,forced:!c,sham:!s},{create:function(t,r){return void 0===r?m(t):at(m(t),r)},defineProperty:it,defineProperties:at,getOwnPropertyDescriptor:st}),n({target:"Object",stat:!0,forced:!c},{getOwnPropertyNames:ct}),L(),N(V,B),k[F]=!0},28407:(t,r,e)=>{"use strict";var n=e(37263),o=e(18494),i=e(47583),a=e(7386),u=e(62870),s=e(9212),c=e(22447),f=e(28320),l=e(94615).f,p=e(83478),h=i.Symbol,v=h&&h.prototype;if(o&&s(h)&&(!("description"in v)||void 0!==h().description)){var d={},y=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:f(arguments[0]),r=c(v,this)?new h(t):void 0===t?h():h(t);return""===t&&(d[r]=!0),r};p(y,h),y.prototype=v,v.constructor=y;var g="Symbol(test)"==String(h("test")),m=a(v.valueOf),b=a(v.toString),x=/^Symbol\((.*)\)[^)]+$/,w=a("".replace),S=a("".slice);l(v,"description",{configurable:!0,get:function(){var t=m(this);if(u(d,t))return"";var r=b(t),e=g?S(r,7,-1):w(r,x,"$1");return""===e?void 0:e}}),n({global:!0,constructor:!0,forced:!0},{Symbol:y})}},70113:(t,r,e)=>{var n=e(37263),o=e(35897),i=e(62870),a=e(28320),u=e(17836),s=e(32471),c=u("string-to-symbol-registry"),f=u("symbol-to-string-registry");n({target:"Symbol",stat:!0,forced:!s},{for:function(t){var r=a(t);if(i(c,r))return c[r];var e=o("Symbol")(r);return c[r]=e,f[e]=r,e}})},22429:(t,r,e)=>{e(71513)("hasInstance")},71172:(t,r,e)=>{e(71513)("isConcatSpreadable")},38288:(t,r,e)=>{e(71513)("iterator")},52004:(t,r,e)=>{e(57802),e(70113),e(33385),e(84415),e(11626)},33385:(t,r,e)=>{var n=e(37263),o=e(62870),i=e(35871),a=e(75637),u=e(17836),s=e(32471),c=u("symbol-to-string-registry");n({target:"Symbol",stat:!0,forced:!s},{keyFor:function(t){if(!i(t))throw TypeError(a(t)+" is not a symbol");if(o(c,t))return c[t]}})},98201:(t,r,e)=>{e(71513)("matchAll")},91274:(t,r,e)=>{e(71513)("match")},56626:(t,r,e)=>{e(71513)("replace")},93211:(t,r,e)=>{e(71513)("search")},79952:(t,r,e)=>{e(71513)("species")},20015:(t,r,e)=>{e(71513)("split")},19831:(t,r,e)=>{var n=e(71513),o=e(88369);n("toPrimitive"),o()},7521:(t,r,e)=>{var n=e(35897),o=e(71513),i=e(98821);o("toStringTag"),i(n("Symbol"),"Symbol")},72972:(t,r,e)=>{e(71513)("unscopables")},97761:(t,r,e)=>{"use strict";var n=e(13977),o=e(1825),i=e(87486),a=n.aTypedArray;(0,n.exportTypedArrayMethod)("at",(function(t){var r=a(this),e=o(r),n=i(t),u=n>=0?n:e+n;return u<0||u>=e?void 0:r[u]}))},53224:(t,r,e)=>{"use strict";var n=e(7386),o=e(13977),i=n(e(68050)),a=o.aTypedArray;(0,o.exportTypedArrayMethod)("copyWithin",(function(t,r){return i(a(this),t,r,arguments.length>2?arguments[2]:void 0)}))},50597:(t,r,e)=>{"use strict";var n=e(13977),o=e(24805).every,i=n.aTypedArray;(0,n.exportTypedArrayMethod)("every",(function(t){return o(i(this),t,arguments.length>1?arguments[1]:void 0)}))},43543:(t,r,e)=>{"use strict";var n=e(13977),o=e(93579),i=e(92178),a=e(33058),u=e(38262),s=e(7386),c=e(16544),f=n.aTypedArray,l=n.exportTypedArrayMethod,p=s("".slice);l("fill",(function(t){var r=arguments.length;f(this);var e="Big"===p(a(this),0,3)?i(t):+t;return u(o,this,e,r>1?arguments[1]:void 0,r>2?arguments[2]:void 0)}),c((function(){var t=0;return new Int8Array(2).fill({valueOf:function(){return t++}}),1!==t})))},35210:(t,r,e)=>{"use strict";var n=e(13977),o=e(24805).filter,i=e(49741),a=n.aTypedArray;(0,n.exportTypedArrayMethod)("filter",(function(t){var r=o(a(this),t,arguments.length>1?arguments[1]:void 0);return i(this,r)}))},30091:(t,r,e)=>{"use strict";var n=e(13977),o=e(24805).findIndex,i=n.aTypedArray;(0,n.exportTypedArrayMethod)("findIndex",(function(t){return o(i(this),t,arguments.length>1?arguments[1]:void 0)}))},57391:(t,r,e)=>{"use strict";var n=e(13977),o=e(32544).findLastIndex,i=n.aTypedArray;(0,n.exportTypedArrayMethod)("findLastIndex",(function(t){return o(i(this),t,arguments.length>1?arguments[1]:void 0)}))},86205:(t,r,e)=>{"use strict";var n=e(13977),o=e(32544).findLast,i=n.aTypedArray;(0,n.exportTypedArrayMethod)("findLast",(function(t){return o(i(this),t,arguments.length>1?arguments[1]:void 0)}))},95785:(t,r,e)=>{"use strict";var n=e(13977),o=e(24805).find,i=n.aTypedArray;(0,n.exportTypedArrayMethod)("find",(function(t){return o(i(this),t,arguments.length>1?arguments[1]:void 0)}))},31351:(t,r,e)=>{e(58073)("Float32",(function(t){return function(r,e,n){return t(this,r,e,n)}}))},1998:(t,r,e)=>{e(58073)("Float64",(function(t){return function(r,e,n){return t(this,r,e,n)}}))},29595:(t,r,e)=>{"use strict";var n=e(13977),o=e(24805).forEach,i=n.aTypedArray;(0,n.exportTypedArrayMethod)("forEach",(function(t){o(i(this),t,arguments.length>1?arguments[1]:void 0)}))},63181:(t,r,e)=>{"use strict";var n=e(40165);(0,e(13977).exportTypedArrayStaticMethod)("from",e(77353),n)},23357:(t,r,e)=>{"use strict";var n=e(13977),o=e(15766).includes,i=n.aTypedArray;(0,n.exportTypedArrayMethod)("includes",(function(t){return o(i(this),t,arguments.length>1?arguments[1]:void 0)}))},91816:(t,r,e)=>{"use strict";var n=e(13977),o=e(15766).indexOf,i=n.aTypedArray;(0,n.exportTypedArrayMethod)("indexOf",(function(t){return o(i(this),t,arguments.length>1?arguments[1]:void 0)}))},29151:(t,r,e)=>{e(58073)("Int16",(function(t){return function(r,e,n){return t(this,r,e,n)}}))},23330:(t,r,e)=>{e(58073)("Int32",(function(t){return function(r,e,n){return t(this,r,e,n)}}))},28729:(t,r,e)=>{e(58073)("Int8",(function(t){return function(r,e,n){return t(this,r,e,n)}}))},2161:(t,r,e)=>{"use strict";var n=e(47583),o=e(16544),i=e(7386),a=e(13977),u=e(55677),s=e(3649)("iterator"),c=n.Uint8Array,f=i(u.values),l=i(u.keys),p=i(u.entries),h=a.aTypedArray,v=a.exportTypedArrayMethod,d=c&&c.prototype,y=!o((function(){d[s].call([1])})),g=!!d&&d.values&&d[s]===d.values&&"values"===d.values.name,m=function(){return f(h(this))};v("entries",(function(){return p(h(this))}),y),v("keys",(function(){return l(h(this))}),y),v("values",m,y||!g,{name:"values"}),v(s,m,y||!g,{name:"values"})},47445:(t,r,e)=>{"use strict";var n=e(13977),o=e(7386),i=n.aTypedArray,a=n.exportTypedArrayMethod,u=o([].join);a("join",(function(t){return u(i(this),t)}))},84875:(t,r,e)=>{"use strict";var n=e(13977),o=e(71611),i=e(73161),a=n.aTypedArray;(0,n.exportTypedArrayMethod)("lastIndexOf",(function(t){var r=arguments.length;return o(i,a(this),r>1?[t,arguments[1]]:[t])}))},71608:(t,r,e)=>{"use strict";var n=e(13977),o=e(24805).map,i=e(50992),a=n.aTypedArray;(0,n.exportTypedArrayMethod)("map",(function(t){return o(a(this),t,arguments.length>1?arguments[1]:void 0,(function(t,r){return new(i(t))(r)}))}))},24283:(t,r,e)=>{"use strict";var n=e(13977),o=e(40165),i=n.aTypedArrayConstructor;(0,n.exportTypedArrayStaticMethod)("of",(function(){for(var t=0,r=arguments.length,e=new(i(this))(r);r>t;)e[t]=arguments[t++];return e}),o)},284:(t,r,e)=>{"use strict";var n=e(13977),o=e(64325).right,i=n.aTypedArray;(0,n.exportTypedArrayMethod)("reduceRight",(function(t){var r=arguments.length;return o(i(this),t,r,r>1?arguments[1]:void 0)}))},72994:(t,r,e)=>{"use strict";var n=e(13977),o=e(64325).left,i=n.aTypedArray;(0,n.exportTypedArrayMethod)("reduce",(function(t){var r=arguments.length;return o(i(this),t,r,r>1?arguments[1]:void 0)}))},30601:(t,r,e)=>{"use strict";var n=e(13977),o=n.aTypedArray,i=n.exportTypedArrayMethod,a=Math.floor;i("reverse",(function(){for(var t,r=this,e=o(r).length,n=a(e/2),i=0;i<n;)t=r[i],r[i++]=r[--e],r[e]=t;return r}))},39494:(t,r,e)=>{"use strict";var n=e(47583),o=e(38262),i=e(13977),a=e(1825),u=e(33248),s=e(61324),c=e(16544),f=n.RangeError,l=n.Int8Array,p=l&&l.prototype,h=p&&p.set,v=i.aTypedArray,d=i.exportTypedArrayMethod,y=!c((function(){var t=new Uint8ClampedArray(2);return o(h,t,{length:1,0:3},1),3!==t[1]})),g=y&&i.NATIVE_ARRAY_BUFFER_VIEWS&&c((function(){var t=new l(2);return t.set(1),t.set("2",1),0!==t[0]||2!==t[1]}));d("set",(function(t){v(this);var r=u(arguments.length>1?arguments[1]:void 0,1),e=s(t);if(y)return o(h,this,e,r);var n=this.length,i=a(e),c=0;if(i+r>n)throw f("Wrong length");for(;c<i;)this[r+c]=e[c++]}),!y||g)},66229:(t,r,e)=>{"use strict";var n=e(13977),o=e(50992),i=e(16544),a=e(46917),u=n.aTypedArray;(0,n.exportTypedArrayMethod)("slice",(function(t,r){for(var e=a(u(this),t,r),n=o(this),i=0,s=e.length,c=new n(s);s>i;)c[i]=e[i++];return c}),i((function(){new Int8Array(1).slice()})))},19149:(t,r,e)=>{"use strict";var n=e(13977),o=e(24805).some,i=n.aTypedArray;(0,n.exportTypedArrayMethod)("some",(function(t){return o(i(this),t,arguments.length>1?arguments[1]:void 0)}))},79503:(t,r,e)=>{"use strict";var n=e(47583),o=e(7386),i=e(16544),a=e(18257),u=e(25744),s=e(13977),c=e(15857),f=e(50924),l=e(24061),p=e(20003),h=s.aTypedArray,v=s.exportTypedArrayMethod,d=n.Uint16Array,y=d&&o(d.prototype.sort),g=!(!y||i((function(){y(new d(2),null)}))&&i((function(){y(new d(2),{})}))),m=!!y&&!i((function(){if(l)return l<74;if(c)return c<67;if(f)return!0;if(p)return p<602;var t,r,e=new d(516),n=Array(516);for(t=0;t<516;t++)r=t%4,e[t]=515-t,n[t]=t-2*r+3;for(y(e,(function(t,r){return(t/4|0)-(r/4|0)})),t=0;t<516;t++)if(e[t]!==n[t])return!0}));v("sort",(function(t){return void 0!==t&&a(t),m?y(this,t):u(h(this),function(t){return function(r,e){return void 0!==t?+t(r,e)||0:e!=e?-1:r!=r?1:0===r&&0===e?1/r>0&&1/e<0?1:-1:r>e}}(t))}),!m||g)},9617:(t,r,e)=>{"use strict";var n=e(13977),o=e(70097),i=e(96782),a=e(50992),u=n.aTypedArray;(0,n.exportTypedArrayMethod)("subarray",(function(t,r){var e=u(this),n=e.length,s=i(t,n);return new(a(e))(e.buffer,e.byteOffset+s*e.BYTES_PER_ELEMENT,o((void 0===r?n:i(r,n))-s))}))},91962:(t,r,e)=>{"use strict";var n=e(47583),o=e(71611),i=e(13977),a=e(16544),u=e(46917),s=n.Int8Array,c=i.aTypedArray,f=i.exportTypedArrayMethod,l=[].toLocaleString,p=!!s&&a((function(){l.call(new s(1))}));f("toLocaleString",(function(){return o(l,p?u(c(this)):c(this),u(arguments))}),a((function(){return[1,2].toLocaleString()!=new s([1,2]).toLocaleString()}))||!a((function(){s.prototype.toLocaleString.call([1,2])})))},8097:(t,r,e)=>{"use strict";var n=e(13977).exportTypedArrayMethod,o=e(16544),i=e(47583),a=e(7386),u=i.Uint8Array,s=u&&u.prototype||{},c=[].toString,f=a([].join);o((function(){c.call({})}))&&(c=function(){return f(this)});var l=s.toString!=c;n("toString",c,l)},30337:(t,r,e)=>{e(58073)("Uint16",(function(t){return function(r,e,n){return t(this,r,e,n)}}))},60506:(t,r,e)=>{e(58073)("Uint32",(function(t){return function(r,e,n){return t(this,r,e,n)}}))},73594:(t,r,e)=>{e(58073)("Uint8",(function(t){return function(r,e,n){return t(this,r,e,n)}}))},93525:(t,r,e)=>{e(58073)("Uint8",(function(t){return function(r,e,n){return t(this,r,e,n)}}),!0)},7878:(t,r,e)=>{"use strict";var n=e(37263),o=e(7386),i=e(28320),a=String.fromCharCode,u=o("".charAt),s=o(/./.exec),c=o("".slice),f=/^[\da-f]{2}$/i,l=/^[\da-f]{4}$/i;n({global:!0},{unescape:function(t){for(var r,e,n=i(t),o="",p=n.length,h=0;h<p;){if("%"===(r=u(n,h++)))if("u"===u(n,h)){if(e=c(n,h+1,h+5),s(l,e)){o+=a(parseInt(e,16)),h+=5;continue}}else if(e=c(n,h,h+2),s(f,e)){o+=a(parseInt(e,16)),h+=2;continue}o+=r}return o}})},14543:(t,r,e)=>{"use strict";var n,o=e(47583),i=e(7386),a=e(23705),u=e(51909),s=e(24802),c=e(57012),f=e(90794),l=e(4766),p=e(42743).enforce,h=e(75307),v=!o.ActiveXObject&&"ActiveXObject"in o,d=function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}},y=s("WeakMap",d,c);if(h&&v){n=c.getConstructor(d,"WeakMap",!0),u.enable();var g=y.prototype,m=i(g.delete),b=i(g.has),x=i(g.get),w=i(g.set);a(g,{delete:function(t){if(f(t)&&!l(t)){var r=p(this);return r.frozen||(r.frozen=new n),m(this,t)||r.frozen.delete(t)}return m(this,t)},has:function(t){if(f(t)&&!l(t)){var r=p(this);return r.frozen||(r.frozen=new n),b(this,t)||r.frozen.has(t)}return b(this,t)},get:function(t){if(f(t)&&!l(t)){var r=p(this);return r.frozen||(r.frozen=new n),b(this,t)?x(this,t):r.frozen.get(t)}return x(this,t)},set:function(t,r){if(f(t)&&!l(t)){var e=p(this);e.frozen||(e.frozen=new n),b(this,t)?w(this,t,r):e.frozen.set(t,r)}else w(this,t,r);return this}})}},31770:(t,r,e)=>{e(14543)},93896:(t,r,e)=>{"use strict";e(24802)("WeakSet",(function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}}),e(57012))},70435:(t,r,e)=>{e(93896)},98974:(t,r,e)=>{e(21719)},7715:(t,r,e)=>{e(75293)},93876:(t,r,e)=>{"use strict";var n=e(37263),o=e(24805).filterReject,i=e(36288);n({target:"Array",proto:!0,forced:!0},{filterOut:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),i("filterOut")},50633:(t,r,e)=>{"use strict";var n=e(37263),o=e(24805).filterReject,i=e(36288);n({target:"Array",proto:!0,forced:!0},{filterReject:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),i("filterReject")},71977:(t,r,e)=>{e(84367)},15167:(t,r,e)=>{e(3712)},87167:(t,r,e)=>{e(37263)({target:"Array",stat:!0,forced:!0},{fromAsync:e(48160)})},15141:(t,r,e)=>{var n=e(37263),o=e(60906),i=e(36288),a=e(62661);n({target:"Array",proto:!0,name:"groupToMap",forced:!o("groupByToMap")},{groupByToMap:a}),i("groupByToMap")},34223:(t,r,e)=>{"use strict";var n=e(37263),o=e(3151),i=e(60906),a=e(36288);n({target:"Array",proto:!0,forced:!i("groupBy")},{groupBy:function(t){var r=arguments.length>1?arguments[1]:void 0;return o(this,t,r)}}),a("groupBy")},52581:(t,r,e)=>{var n=e(37263),o=e(36288);n({target:"Array",proto:!0},{groupToMap:e(62661)}),o("groupToMap")},59239:(t,r,e)=>{"use strict";var n=e(37263),o=e(3151),i=e(36288);n({target:"Array",proto:!0},{group:function(t){var r=arguments.length>1?arguments[1]:void 0;return o(this,t,r)}}),i("group")},43726:(t,r,e)=>{var n=e(37263),o=e(54521),i=Object.isFrozen,a=function(t,r){if(!i||!o(t)||!i(t))return!1;for(var e,n=0,a=t.length;n<a;)if(!("string"==typeof(e=t[n++])||r&&void 0===e))return!1;return 0!==a};n({target:"Array",stat:!0,sham:!0,forced:!0},{isTemplateObject:function(t){if(!a(t,!0))return!1;var r=t.raw;return r.length===t.length&&a(r,!1)}})},56335:(t,r,e)=>{"use strict";var n=e(18494),o=e(36288),i=e(61324),a=e(1825),u=e(92499);n&&(u(Array.prototype,"lastIndex",{configurable:!0,get:function(){var t=i(this),r=a(t);return 0==r?0:r-1}}),o("lastIndex"))},29658:(t,r,e)=>{"use strict";var n=e(18494),o=e(36288),i=e(61324),a=e(1825),u=e(92499);n&&(u(Array.prototype,"lastItem",{configurable:!0,get:function(){var t=i(this),r=a(t);return 0==r?void 0:t[r-1]},set:function(t){var r=i(this),e=a(r);return r[0==e?0:e-1]=t}}),o("lastItem"))},11224:(t,r,e)=>{"use strict";var n=e(37263),o=e(48976),i=e(22977),a=e(36288),u=Array;n({target:"Array",proto:!0},{toReversed:function(){return o(i(this),u)}}),a("toReversed")},83076:(t,r,e)=>{"use strict";var n=e(37263),o=e(7386),i=e(18257),a=e(22977),u=e(4114),s=e(12176),c=e(36288),f=Array,l=o(s("Array").sort);n({target:"Array",proto:!0},{toSorted:function(t){void 0!==t&&i(t);var r=a(this),e=u(f,r);return l(e,t)}}),c("toSorted")},7692:(t,r,e)=>{"use strict";var n=e(37263),o=e(36288),i=e(6768),a=e(1825),u=e(96782),s=e(22977),c=e(87486),f=Array,l=Math.max,p=Math.min;n({target:"Array",proto:!0},{toSpliced:function(t,r){var e,n,o,h,v=s(this),d=a(v),y=u(t,d),g=arguments.length,m=0;for(0===g?e=n=0:1===g?(e=0,n=d-y):(e=g-2,n=p(l(c(r),0),d-y)),o=i(d+e-n),h=f(o);m<y;m++)h[m]=v[m];for(;m<y+e;m++)h[m]=arguments[m-y+2];for(;m<o;m++)h[m]=v[m+n-e];return h}}),o("toSpliced")},70733:(t,r,e)=>{"use strict";var n=e(37263),o=e(36288);n({target:"Array",proto:!0,forced:!0},{uniqueBy:e(33878)}),o("uniqueBy")},72983:(t,r,e)=>{"use strict";var n=e(37263),o=e(41030),i=e(22977),a=Array;n({target:"Array",proto:!0},{with:function(t,r){return o(i(this),a,t,r)}})},7270:(t,r,e)=>{e(37263)({target:"AsyncIterator",name:"indexed",proto:!0,real:!0,forced:!0},{asIndexedPairs:e(72278)})},25981:(t,r,e)=>{"use strict";var n=e(37263),o=e(44761),i=e(57),a=e(62870),u=e(3649),s=e(46578),c=e(86268),f=u("toStringTag"),l=function(){o(this,s)};l.prototype=s,a(s,f)||i(s,f,"AsyncIterator"),!c&&a(s,"constructor")&&s.constructor!==Object||i(s,"constructor",l),n({global:!0,constructor:!0,forced:c},{AsyncIterator:l})},4056:(t,r,e)=>{"use strict";var n=e(37263),o=e(38262),i=e(92569),a=e(7388),u=e(52183),s=e(42955),c=e(17562),f=e(71002),l=c((function(t){var r=this;return new t((function(e,n){var a=function(t){r.done=!0,n(t)};!function n(){try{t.resolve(i(o(r.next,r.iterator))).then((function(t){try{i(t).done?(r.done=!0,e(f(void 0,!0))):r.remaining?(r.remaining--,n()):e(f(t.value,!1))}catch(t){a(t)}}),a)}catch(t){a(t)}}()}))}));n({target:"AsyncIterator",proto:!0,real:!0,forced:!0},{drop:function(t){return new l(a(this),{remaining:s(u(+t))})}})},22421:(t,r,e)=>{"use strict";var n=e(37263),o=e(60316).every;n({target:"AsyncIterator",proto:!0,real:!0,forced:!0},{every:function(t){return o(this,t)}})},55879:(t,r,e)=>{"use strict";var n=e(37263),o=e(38262),i=e(18257),a=e(92569),u=e(7388),s=e(17562),c=e(71002),f=e(59498),l=s((function(t){var r=this,e=r.iterator,n=r.filterer;return new t((function(i,u){var s=function(t){r.done=!0,u(t)},l=function(t){f(e,s,t,s)};!function u(){try{t.resolve(a(o(r.next,e))).then((function(e){try{if(a(e).done)r.done=!0,i(c(void 0,!0));else{var o=e.value;try{t.resolve(n(o)).then((function(t){t?i(c(o,!1)):u()}),l)}catch(t){l(t)}}}catch(t){s(t)}}),s)}catch(t){s(t)}}()}))}));n({target:"AsyncIterator",proto:!0,real:!0,forced:!0},{filter:function(t){return new l(u(this),{filterer:i(t)})}})},93302:(t,r,e)=>{"use strict";var n=e(37263),o=e(60316).find;n({target:"AsyncIterator",proto:!0,real:!0,forced:!0},{find:function(t){return o(this,t)}})},3124:(t,r,e)=>{"use strict";var n=e(37263),o=e(38262),i=e(18257),a=e(92569),u=e(7388),s=e(17562),c=e(71002),f=e(10862),l=e(59498),p=s((function(t){var r,e=this,n=e.iterator,u=e.mapper;return new t((function(s,p){var h=function(t){e.done=!0,p(t)},v=function(t){l(n,h,t,h)},d=function(){try{t.resolve(a(o(e.next,n))).then((function(n){try{if(a(n).done)e.done=!0,s(c(void 0,!0));else{var o=n.value;try{t.resolve(u(o)).then((function(t){try{e.innerIterator=r=f(t),e.innerNext=i(r.next),y()}catch(t){v(t)}}),v)}catch(t){v(t)}}}catch(t){h(t)}}),h)}catch(t){h(t)}},y=function(){if(r=e.innerIterator)try{t.resolve(a(o(e.innerNext,r))).then((function(t){try{a(t).done?(e.innerIterator=e.innerNext=null,d()):s(c(t.value,!1))}catch(t){v(t)}}),v)}catch(t){v(t)}else d()};y()}))}));n({target:"AsyncIterator",proto:!0,real:!0,forced:!0},{flatMap:function(t){return new p(u(this),{mapper:i(t),innerIterator:null,innerNext:null})}})},46419:(t,r,e)=>{"use strict";var n=e(37263),o=e(60316).forEach;n({target:"AsyncIterator",proto:!0,real:!0,forced:!0},{forEach:function(t){return o(this,t)}})},45097:(t,r,e)=>{var n=e(37263),o=e(61324),i=e(22447),a=e(46578),u=e(10862),s=e(36307),c=e(7388),f=e(38272),l=e(60911),p=e(3649),h=e(33670),v=e(81530),d=p("asyncIterator");n({target:"AsyncIterator",stat:!0,forced:!0},{from:function(t){var r,e=o(t),n=l(e,d);return n&&(r=u(e,n),i(a,r))?r:(void 0===r&&(n=f(e))&&(r=new h(s(e,n))),new v(c(void 0!==r?r:e)))}})},40261:(t,r,e)=>{e(37263)({target:"AsyncIterator",proto:!0,real:!0,forced:!0},{indexed:e(72278)})},32855:(t,r,e)=>{"use strict";var n=e(37263),o=e(38262),i=e(18257),a=e(92569),u=e(7388),s=e(17562),c=e(71002),f=e(59498),l=s((function(t){var r=this,e=r.iterator,n=r.mapper;return new t((function(i,u){var s=function(t){r.done=!0,u(t)},l=function(t){f(e,s,t,s)};t.resolve(a(o(r.next,e))).then((function(e){try{if(a(e).done)r.done=!0,i(c(void 0,!0));else{var o=e.value;try{t.resolve(n(o)).then((function(t){i(c(t,!1))}),l)}catch(t){l(t)}}}catch(t){s(t)}}),s)}))}));n({target:"AsyncIterator",proto:!0,real:!0,forced:!0},{map:function(t){return new l(u(this),{mapper:i(t)})}})},88304:(t,r,e)=>{"use strict";var n=e(37263),o=e(38262),i=e(18257),a=e(92569),u=e(35897),s=e(7388),c=e(59498),f=u("Promise"),l=TypeError;n({target:"AsyncIterator",proto:!0,real:!0,forced:!0},{reduce:function(t){var r=s(this),e=r.iterator,n=r.next,u=arguments.length<2,p=u?void 0:arguments[1];return i(t),new f((function(r,i){var s=function(t){c(e,i,t,i)};!function c(){try{f.resolve(a(o(n,e))).then((function(e){try{if(a(e).done)u?i(l("Reduce of empty iterator with no initial value")):r(p);else{var n=e.value;if(u)u=!1,p=n,c();else try{f.resolve(t(p,n)).then((function(t){p=t,c()}),s)}catch(t){s(t)}}}catch(t){i(t)}}),i)}catch(t){i(t)}}()}))}})},97246:(t,r,e)=>{"use strict";var n=e(37263),o=e(60316).some;n({target:"AsyncIterator",proto:!0,real:!0,forced:!0},{some:function(t){return o(this,t)}})},32865:(t,r,e)=>{"use strict";var n=e(37263),o=e(38262),i=e(92569),a=e(7388),u=e(52183),s=e(42955),c=e(17562),f=e(71002),l=c((function(t){var r,e=this,n=e.iterator;if(!e.remaining--){var a=f(void 0,!0);return e.done=!0,void 0!==(r=n.return)?t.resolve(o(r,n,void 0)).then((function(){return a})):a}return t.resolve(o(e.next,n)).then((function(t){return i(t).done?(e.done=!0,f(void 0,!0)):f(t.value,!1)})).then(null,(function(t){throw e.done=!0,t}))}));n({target:"AsyncIterator",proto:!0,real:!0,forced:!0},{take:function(t){return new l(a(this),{remaining:s(u(+t))})}})},49866:(t,r,e)=>{"use strict";var n=e(37263),o=e(60316).toArray;n({target:"AsyncIterator",proto:!0,real:!0,forced:!0},{toArray:function(){return o(this,void 0,[])}})},79548:(t,r,e)=>{"use strict";var n=e(37263),o=e(94106);"function"==typeof BigInt&&n({target:"BigInt",stat:!0,forced:!0},{range:function(t,r,e){return new o(t,r,e,"bigint",BigInt(0),BigInt(1))}})},69527:(t,r,e)=>{var n=e(37263),o=e(71611),i=e(3246),a=e(35897),u=e(3590),s=Object,c=function(){var t=a("Object","freeze");return t?t(u(null)):u(null)};n({global:!0,forced:!0},{compositeKey:function(){return o(i,s,arguments).get("object",c)}})},85835:(t,r,e)=>{var n=e(37263),o=e(3246),i=e(35897),a=e(71611);n({global:!0,forced:!0},{compositeSymbol:function(){return 1==arguments.length&&"string"==typeof arguments[0]?i("Symbol").for(arguments[0]):a(o,null,arguments).get("symbol",i("Symbol"))}})},10779:(t,r,e)=>{var n=e(37263),o=e(7386),i=e(9212),a=e(69734),u=e(62870),s=e(18494),c=Object.getOwnPropertyDescriptor,f=/^\s*class\b/,l=o(f.exec);n({target:"Function",stat:!0,sham:!0,forced:!0},{isCallable:function(t){return i(t)&&!function(t){try{if(!s||!l(f,a(t)))return!1}catch(t){}var r=c(t,"prototype");return!!r&&u(r,"writable")&&!r.writable}(t)}})},82756:(t,r,e)=>{e(37263)({target:"Function",stat:!0,forced:!0},{isConstructor:e(62097)})},25871:(t,r,e)=>{var n=e(37263),o=e(7386),i=e(18257);n({target:"Function",proto:!0,forced:!0},{unThis:function(){return o(i(this))}})},96691:(t,r,e)=>{e(76169)},3949:(t,r,e)=>{e(37263)({target:"Iterator",name:"indexed",proto:!0,real:!0,forced:!0},{asIndexedPairs:e(88747)})},97420:(t,r,e)=>{"use strict";var n=e(37263),o=e(47583),i=e(44761),a=e(9212),u=e(57),s=e(16544),c=e(62870),f=e(3649),l=e(72365).IteratorPrototype,p=e(86268),h=f("toStringTag"),v=o.Iterator,d=p||!a(v)||v.prototype!==l||!s((function(){v({})})),y=function(){i(this,l)};c(l,h)||u(l,h,"Iterator"),!d&&c(l,"constructor")&&l.constructor!==Object||u(l,"constructor",y),y.prototype=l,n({global:!0,constructor:!0,forced:d},{Iterator:y})},26921:(t,r,e)=>{"use strict";var n=e(37263),o=e(38262),i=e(92569),a=e(7388),u=e(52183),s=e(42955),c=e(72471)((function(){for(var t,r=this.iterator,e=this.next;this.remaining;)if(this.remaining--,t=i(o(e,r)),this.done=!!t.done)return;if(t=i(o(e,r)),!(this.done=!!t.done))return t.value}));n({target:"Iterator",proto:!0,real:!0,forced:!0},{drop:function(t){return new c(a(this),{remaining:s(u(+t))})}})},21594:(t,r,e)=>{"use strict";var n=e(37263),o=e(54026),i=e(18257),a=e(7388);n({target:"Iterator",proto:!0,real:!0,forced:!0},{every:function(t){var r=a(this);return i(t),!o(r,(function(r,e){if(!t(r))return e()}),{IS_RECORD:!0,INTERRUPTED:!0}).stopped}})},72311:(t,r,e)=>{"use strict";var n=e(37263),o=e(38262),i=e(18257),a=e(92569),u=e(7388),s=e(72471),c=e(65294),f=s((function(){for(var t,r,e=this.iterator,n=this.filterer,i=this.next;;){if(t=a(o(i,e)),this.done=!!t.done)return;if(r=t.value,c(e,n,r))return r}}));n({target:"Iterator",proto:!0,real:!0,forced:!0},{filter:function(t){return new f(u(this),{filterer:i(t)})}})},63917:(t,r,e)=>{"use strict";var n=e(37263),o=e(54026),i=e(18257),a=e(7388);n({target:"Iterator",proto:!0,real:!0,forced:!0},{find:function(t){var r=a(this);return i(t),o(r,(function(r,e){if(t(r))return e(r)}),{IS_RECORD:!0,INTERRUPTED:!0}).result}})},23406:(t,r,e)=>{"use strict";var n=e(37263),o=e(38262),i=e(18257),a=e(92569),u=e(7388),s=e(38272),c=e(72471),f=e(47093),l=TypeError,p=c((function(){for(var t,r,e,n,u=this.iterator,c=this.mapper;;){if(n=this.innerIterator)try{if(!(t=a(o(this.innerNext,n))).done)return t.value;this.innerIterator=this.innerNext=null}catch(t){f(u,"throw",t)}if(t=a(o(this.next,u)),this.done=!!t.done)return;try{if(r=c(t.value),!(e=s(r)))throw l(".flatMap callback should return an iterable object");this.innerIterator=n=a(o(e,r)),this.innerNext=i(n.next)}catch(t){f(u,"throw",t)}}}));n({target:"Iterator",proto:!0,real:!0,forced:!0},{flatMap:function(t){return new p(u(this),{mapper:i(t),innerIterator:null,innerNext:null})}})},10581:(t,r,e)=>{"use strict";var n=e(37263),o=e(54026),i=e(7388);n({target:"Iterator",proto:!0,real:!0,forced:!0},{forEach:function(t){o(i(this),t,{IS_RECORD:!0})}})},14912:(t,r,e)=>{var n=e(37263),o=e(38262),i=e(61324),a=e(22447),u=e(72365).IteratorPrototype,s=e(72471),c=e(36307),f=e(7388),l=e(38272),p=s((function(){return o(this.next,this.iterator)}),!0);n({target:"Iterator",stat:!0,forced:!0},{from:function(t){var r,e=i(t),n=l(e);if(n){if(r=c(e,n),a(u,r))return r}else r=e;return new p(f(r))}})},8855:(t,r,e)=>{e(37263)({target:"Iterator",proto:!0,real:!0,forced:!0},{indexed:e(88747)})},15544:(t,r,e)=>{"use strict";var n=e(37263),o=e(38262),i=e(18257),a=e(92569),u=e(7388),s=e(72471),c=e(65294),f=s((function(){var t=this.iterator,r=a(o(this.next,t));if(!(this.done=!!r.done))return c(t,this.mapper,r.value)}));n({target:"Iterator",proto:!0,real:!0,forced:!0},{map:function(t){return new f(u(this),{mapper:i(t)})}})},39271:(t,r,e)=>{"use strict";var n=e(37263),o=e(54026),i=e(18257),a=e(7388),u=TypeError;n({target:"Iterator",proto:!0,real:!0,forced:!0},{reduce:function(t){var r=a(this);i(t);var e=arguments.length<2,n=e?void 0:arguments[1];if(o(r,(function(r){e?(e=!1,n=r):n=t(n,r)}),{IS_RECORD:!0}),e)throw u("Reduce of empty iterator with no initial value");return n}})},60943:(t,r,e)=>{"use strict";var n=e(37263),o=e(54026),i=e(18257),a=e(7388);n({target:"Iterator",proto:!0,real:!0,forced:!0},{some:function(t){var r=a(this);return i(t),o(r,(function(r,e){if(t(r))return e()}),{IS_RECORD:!0,INTERRUPTED:!0}).stopped}})},15765:(t,r,e)=>{"use strict";var n=e(37263),o=e(38262),i=e(92569),a=e(7388),u=e(52183),s=e(42955),c=e(72471),f=e(47093),l=c((function(){var t=this.iterator;if(!this.remaining--)return this.done=!0,f(t,"normal",void 0);var r=i(o(this.next,t));return(this.done=!!r.done)?void 0:r.value}));n({target:"Iterator",proto:!0,real:!0,forced:!0},{take:function(t){return new l(a(this),{remaining:s(u(+t))})}})},21292:(t,r,e)=>{"use strict";var n=e(37263),o=e(54026),i=e(7388),a=[].push;n({target:"Iterator",proto:!0,real:!0,forced:!0},{toArray:function(){var t=[];return o(i(this),a,{that:t,IS_RECORD:!0}),t}})},10241:(t,r,e)=>{"use strict";var n=e(37263),o=e(33670),i=e(81530),a=e(7388);n({target:"Iterator",proto:!0,real:!0,forced:!0},{toAsync:function(){return new i(a(new o(this)))}})},8068:(t,r,e)=>{"use strict";e(37263)({target:"Map",proto:!0,real:!0,forced:!0},{deleteAll:e(85337)})},1310:(t,r,e)=>{"use strict";e(37263)({target:"Map",proto:!0,real:!0,forced:!0},{emplace:e(53069)})},29913:(t,r,e)=>{"use strict";var n=e(37263),o=e(92569),i=e(12938),a=e(53780),u=e(54026);n({target:"Map",proto:!0,real:!0,forced:!0},{every:function(t){var r=o(this),e=a(r),n=i(t,arguments.length>1?arguments[1]:void 0);return!u(e,(function(t,e,o){if(!n(e,t,r))return o()}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},96003:(t,r,e)=>{"use strict";var n=e(37263),o=e(35897),i=e(12938),a=e(38262),u=e(18257),s=e(92569),c=e(40564),f=e(53780),l=e(54026);n({target:"Map",proto:!0,real:!0,forced:!0},{filter:function(t){var r=s(this),e=f(r),n=i(t,arguments.length>1?arguments[1]:void 0),p=new(c(r,o("Map"))),h=u(p.set);return l(e,(function(t,e){n(e,t,r)&&a(h,p,t,e)}),{AS_ENTRIES:!0,IS_ITERATOR:!0}),p}})},73826:(t,r,e)=>{"use strict";var n=e(37263),o=e(92569),i=e(12938),a=e(53780),u=e(54026);n({target:"Map",proto:!0,real:!0,forced:!0},{findKey:function(t){var r=o(this),e=a(r),n=i(t,arguments.length>1?arguments[1]:void 0);return u(e,(function(t,e,o){if(n(e,t,r))return o(t)}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).result}})},37709:(t,r,e)=>{"use strict";var n=e(37263),o=e(92569),i=e(12938),a=e(53780),u=e(54026);n({target:"Map",proto:!0,real:!0,forced:!0},{find:function(t){var r=o(this),e=a(r),n=i(t,arguments.length>1?arguments[1]:void 0);return u(e,(function(t,e,o){if(n(e,t,r))return o(e)}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).result}})},52510:(t,r,e)=>{e(37263)({target:"Map",stat:!0,forced:!0},{from:e(46123)})},43092:(t,r,e)=>{"use strict";var n=e(37263),o=e(38262),i=e(7386),a=e(18257),u=e(36307),s=e(54026),c=i([].push);n({target:"Map",stat:!0,forced:!0},{groupBy:function(t,r){a(r);var e=u(t),n=new this,i=a(n.has),f=a(n.get),l=a(n.set);return s(e,(function(t){var e=r(t);o(i,n,e)?c(o(f,n,e),t):o(l,n,e,[t])}),{IS_ITERATOR:!0}),n}})},39960:(t,r,e)=>{"use strict";var n=e(37263),o=e(92569),i=e(53780),a=e(40994),u=e(54026);n({target:"Map",proto:!0,real:!0,forced:!0},{includes:function(t){return u(i(o(this)),(function(r,e,n){if(a(e,t))return n()}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},98536:(t,r,e)=>{"use strict";var n=e(37263),o=e(38262),i=e(54026),a=e(18257);n({target:"Map",stat:!0,forced:!0},{keyBy:function(t,r){var e=new this;a(r);var n=a(e.set);return i(t,(function(t){o(n,e,r(t),t)})),e}})},94061:(t,r,e)=>{"use strict";var n=e(37263),o=e(92569),i=e(53780),a=e(54026);n({target:"Map",proto:!0,real:!0,forced:!0},{keyOf:function(t){return a(i(o(this)),(function(r,e,n){if(e===t)return n(r)}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).result}})},84173:(t,r,e)=>{"use strict";var n=e(37263),o=e(35897),i=e(12938),a=e(38262),u=e(18257),s=e(92569),c=e(40564),f=e(53780),l=e(54026);n({target:"Map",proto:!0,real:!0,forced:!0},{mapKeys:function(t){var r=s(this),e=f(r),n=i(t,arguments.length>1?arguments[1]:void 0),p=new(c(r,o("Map"))),h=u(p.set);return l(e,(function(t,e){a(h,p,n(e,t,r),e)}),{AS_ENTRIES:!0,IS_ITERATOR:!0}),p}})},32787:(t,r,e)=>{"use strict";var n=e(37263),o=e(35897),i=e(12938),a=e(38262),u=e(18257),s=e(92569),c=e(40564),f=e(53780),l=e(54026);n({target:"Map",proto:!0,real:!0,forced:!0},{mapValues:function(t){var r=s(this),e=f(r),n=i(t,arguments.length>1?arguments[1]:void 0),p=new(c(r,o("Map"))),h=u(p.set);return l(e,(function(t,e){a(h,p,t,n(e,t,r))}),{AS_ENTRIES:!0,IS_ITERATOR:!0}),p}})},99151:(t,r,e)=>{"use strict";var n=e(37263),o=e(18257),i=e(92569),a=e(54026);n({target:"Map",proto:!0,real:!0,arity:1,forced:!0},{merge:function(t){for(var r=i(this),e=o(r.set),n=arguments.length,u=0;u<n;)a(arguments[u++],e,{that:r,AS_ENTRIES:!0});return r}})},95664:(t,r,e)=>{e(37263)({target:"Map",stat:!0,forced:!0},{of:e(59284)})},63502:(t,r,e)=>{"use strict";var n=e(37263),o=e(92569),i=e(18257),a=e(53780),u=e(54026),s=TypeError;n({target:"Map",proto:!0,real:!0,forced:!0},{reduce:function(t){var r=o(this),e=a(r),n=arguments.length<2,c=n?void 0:arguments[1];if(i(t),u(e,(function(e,o){n?(n=!1,c=o):c=t(c,o,e,r)}),{AS_ENTRIES:!0,IS_ITERATOR:!0}),n)throw s("Reduce of empty map with no initial value");return c}})},30924:(t,r,e)=>{"use strict";var n=e(37263),o=e(92569),i=e(12938),a=e(53780),u=e(54026);n({target:"Map",proto:!0,real:!0,forced:!0},{some:function(t){var r=o(this),e=a(r),n=i(t,arguments.length>1?arguments[1]:void 0);return u(e,(function(t,e,o){if(n(e,t,r))return o()}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},63053:(t,r,e)=>{"use strict";e(37263)({target:"Map",proto:!0,real:!0,name:"upsert",forced:!0},{updateOrInsert:e(48080)})},8990:(t,r,e)=>{"use strict";var n=e(37263),o=e(38262),i=e(92569),a=e(18257),u=TypeError;n({target:"Map",proto:!0,real:!0,forced:!0},{update:function(t,r){var e=i(this),n=a(e.get),s=a(e.has),c=a(e.set),f=arguments.length;a(r);var l=o(s,e,t);if(!l&&f<3)throw u("Updating absent value");var p=l?o(n,e,t):a(f>2?arguments[2]:void 0)(t,e);return o(c,e,t,r(p,t,e)),e}})},16705:(t,r,e)=>{"use strict";e(37263)({target:"Map",proto:!0,real:!0,forced:!0},{upsert:e(48080)})},97146:(t,r,e)=>{var n=e(37263),o=Math.min,i=Math.max;n({target:"Math",stat:!0,forced:!0},{clamp:function(t,r,e){return o(e,i(r,t))}})},22503:(t,r,e)=>{e(37263)({target:"Math",stat:!0,nonConfigurable:!0,nonWritable:!0},{DEG_PER_RAD:Math.PI/180})},92414:(t,r,e)=>{var n=e(37263),o=180/Math.PI;n({target:"Math",stat:!0,forced:!0},{degrees:function(t){return t*o}})},84890:(t,r,e)=>{var n=e(37263),o=e(86617),i=e(75661);n({target:"Math",stat:!0,forced:!0},{fscale:function(t,r,e,n,a){return i(o(t,r,e,n,a))}})},88023:(t,r,e)=>{e(37263)({target:"Math",stat:!0,forced:!0},{iaddh:function(t,r,e,n){var o=t>>>0,i=e>>>0;return(r>>>0)+(n>>>0)+((o&i|(o|i)&~(o+i>>>0))>>>31)|0}})},93278:(t,r,e)=>{e(37263)({target:"Math",stat:!0,forced:!0},{imulh:function(t,r){var e=65535,n=+t,o=+r,i=n&e,a=o&e,u=n>>16,s=o>>16,c=(u*a>>>0)+(i*a>>>16);return u*s+(c>>16)+((i*s>>>0)+(c&e)>>16)}})},24951:(t,r,e)=>{e(37263)({target:"Math",stat:!0,forced:!0},{isubh:function(t,r,e,n){var o=t>>>0,i=e>>>0;return(r>>>0)-(n>>>0)-((~o&i|~(o^i)&o-i>>>0)>>>31)|0}})},40374:(t,r,e)=>{e(37263)({target:"Math",stat:!0,nonConfigurable:!0,nonWritable:!0},{RAD_PER_DEG:180/Math.PI})},37770:(t,r,e)=>{var n=e(37263),o=Math.PI/180;n({target:"Math",stat:!0,forced:!0},{radians:function(t){return t*o}})},94305:(t,r,e)=>{e(37263)({target:"Math",stat:!0,forced:!0},{scale:e(86617)})},64251:(t,r,e)=>{var n=e(37263),o=e(92569),i=e(79606),a=e(73098),u=e(71002),s=e(42743),c="Seeded Random Generator",f=s.set,l=s.getterFor(c),p=TypeError,h=a((function(t){f(this,{type:c,seed:t%2147483647})}),"Seeded Random",(function(){var t=l(this),r=t.seed=(1103515245*t.seed+12345)%2147483647;return u((1073741823&r)/1073741823,!1)}));n({target:"Math",stat:!0,forced:!0},{seededPRNG:function(t){var r=o(t).seed;if(!i(r))throw p('Math.seededPRNG() argument should have a "seed" field with a finite value.');return new h(r)}})},99175:(t,r,e)=>{e(37263)({target:"Math",stat:!0,forced:!0},{signbit:function(t){var r=+t;return r==r&&0==r?1/r==-1/0:r<0}})},86945:(t,r,e)=>{e(37263)({target:"Math",stat:!0,forced:!0},{umulh:function(t,r){var e=65535,n=+t,o=+r,i=n&e,a=o&e,u=n>>>16,s=o>>>16,c=(u*a>>>0)+(i*a>>>16);return u*s+(c>>>16)+((i*s>>>0)+(c&e)>>>16)}})},64114:(t,r,e)=>{"use strict";var n=e(37263),o=e(7386),i=e(87486),a=e(35407),u="Invalid number representation",s=RangeError,c=SyntaxError,f=TypeError,l=/^[\da-z]+$/,p=o("".charAt),h=o(l.exec),v=o(1..toString),d=o("".slice);n({target:"Number",stat:!0,forced:!0},{fromString:function(t,r){var e,n,o=1;if("string"!=typeof t)throw f(u);if(!t.length)throw c(u);if("-"==p(t,0)&&(o=-1,!(t=d(t,1)).length))throw c(u);if((e=void 0===r?10:i(r))<2||e>36)throw s("Invalid radix");if(!h(l,t)||v(n=a(t,e),e)!==t)throw c(u);return o*n}})},14960:(t,r,e)=>{"use strict";var n=e(37263),o=e(94106);n({target:"Number",stat:!0,forced:!0},{range:function(t,r,e){return new o(t,r,e,"number",0,1)}})},15306:(t,r,e)=>{e(70850)},31183:(t,r,e)=>{"use strict";var n=e(37263),o=e(40927);n({target:"Object",stat:!0,forced:!0},{iterateEntries:function(t){return new o(t,"entries")}})},42106:(t,r,e)=>{"use strict";var n=e(37263),o=e(40927);n({target:"Object",stat:!0,forced:!0},{iterateKeys:function(t){return new o(t,"keys")}})},53261:(t,r,e)=>{"use strict";var n=e(37263),o=e(40927);n({target:"Object",stat:!0,forced:!0},{iterateValues:function(t){return new o(t,"values")}})},35463:(t,r,e)=>{"use strict";var n=e(37263),o=e(38262),i=e(18494),a=e(7730),u=e(18257),s=e(92569),c=e(44761),f=e(9212),l=e(88505),p=e(90794),h=e(60911),v=e(73746),d=e(23705),y=e(92499),g=e(92716),m=e(3649),b=e(42743),x=e(28773),w=m("observable"),S="Observable",E="Subscription",A="SubscriptionObserver",I=b.getterFor,_=b.set,R=I(S),O=I(E),T=I(A),k=function(t){this.observer=s(t),this.cleanup=void 0,this.subscriptionObserver=void 0};k.prototype={type:E,clean:function(){var t=this.cleanup;if(t){this.cleanup=void 0;try{t()}catch(t){g(t)}}},close:function(){if(!i){var t=this.facade,r=this.subscriptionObserver;t.closed=!0,r&&(r.closed=!0)}this.observer=void 0},isClosed:function(){return void 0===this.observer}};var M=function(t,r){var e,n=_(this,new k(t));i||(this.closed=!1);try{(e=h(t,"start"))&&o(e,t,this)}catch(t){g(t)}if(!n.isClosed()){var a=n.subscriptionObserver=new P(n);try{var s=r(a),c=s;l(s)||(n.cleanup=f(s.unsubscribe)?function(){c.unsubscribe()}:u(s))}catch(t){return void a.error(t)}n.isClosed()&&n.clean()}};M.prototype=d({},{unsubscribe:function(){var t=O(this);t.isClosed()||(t.close(),t.clean())}}),i&&y(M.prototype,"closed",{configurable:!0,get:function(){return O(this).isClosed()}});var P=function(t){_(this,{type:A,subscriptionState:t}),i||(this.closed=!1)};P.prototype=d({},{next:function(t){var r=T(this).subscriptionState;if(!r.isClosed()){var e=r.observer;try{var n=h(e,"next");n&&o(n,e,t)}catch(t){g(t)}}},error:function(t){var r=T(this).subscriptionState;if(!r.isClosed()){var e=r.observer;r.close();try{var n=h(e,"error");n?o(n,e,t):g(t)}catch(t){g(t)}r.clean()}},complete:function(){var t=T(this).subscriptionState;if(!t.isClosed()){var r=t.observer;t.close();try{var e=h(r,"complete");e&&o(e,r)}catch(t){g(t)}t.clean()}}}),i&&y(P.prototype,"closed",{configurable:!0,get:function(){return T(this).subscriptionState.isClosed()}});var j=function(t){c(this,C),_(this,{type:S,subscriber:u(t)})},C=j.prototype;d(C,{subscribe:function(t){var r=arguments.length;return new M(f(t)?{next:t,error:r>1?arguments[1]:void 0,complete:r>2?arguments[2]:void 0}:p(t)?t:{},R(this).subscriber)}}),v(C,w,(function(){return this})),n({global:!0,constructor:!0,forced:x},{Observable:j}),a(S)},77219:(t,r,e)=>{"use strict";var n=e(37263),o=e(35897),i=e(38262),a=e(92569),u=e(62097),s=e(36307),c=e(60911),f=e(54026),l=e(3649),p=e(28773),h=l("observable");n({target:"Observable",stat:!0,forced:p},{from:function(t){var r=u(this)?this:o("Observable"),e=c(a(t),h);if(e){var n=a(i(e,t));return n.constructor===r?n:new r((function(t){return n.subscribe(t)}))}var l=s(t);return new r((function(t){f(l,(function(r,e){if(t.next(r),t.closed)return e()}),{IS_ITERATOR:!0,INTERRUPTED:!0}),t.complete()}))}})},43637:(t,r,e)=>{e(35463),e(77219),e(42315)},42315:(t,r,e)=>{"use strict";var n=e(37263),o=e(35897),i=e(62097),a=e(28773),u=o("Array");n({target:"Observable",stat:!0,forced:a},{of:function(){for(var t=i(this)?this:o("Observable"),r=arguments.length,e=u(r),n=0;n<r;)e[n]=arguments[n++];return new t((function(t){for(var n=0;n<r;n++)if(t.next(e[n]),t.closed)return;t.complete()}))}})},75045:(t,r,e)=>{e(86969)},51092:(t,r,e)=>{e(32021)},58936:(t,r,e)=>{"use strict";var n=e(37263),o=e(5084),i=e(80544);n({target:"Promise",stat:!0,forced:!0},{try:function(t){var r=o.f(this),e=i(t);return(e.error?r.reject:r.resolve)(e.value),r.promise}})},28041:(t,r,e)=>{var n=e(37263),o=e(67802),i=e(92569),a=o.toKey,u=o.set;n({target:"Reflect",stat:!0},{defineMetadata:function(t,r,e){var n=arguments.length<4?void 0:a(arguments[3]);u(t,r,i(e),n)}})},85748:(t,r,e)=>{var n=e(37263),o=e(67802),i=e(92569),a=o.toKey,u=o.getMap,s=o.store;n({target:"Reflect",stat:!0},{deleteMetadata:function(t,r){var e=arguments.length<3?void 0:a(arguments[2]),n=u(i(r),e,!1);if(void 0===n||!n.delete(t))return!1;if(n.size)return!0;var o=s.get(r);return o.delete(e),!!o.size||s.delete(r)}})},5646:(t,r,e)=>{var n=e(37263),o=e(7386),i=e(67802),a=e(92569),u=e(80729),s=o(e(33878)),c=o([].concat),f=i.keys,l=i.toKey,p=function t(r,e){var n=f(r,e),o=u(r);if(null===o)return n;var i=t(o,e);return i.length?n.length?s(c(n,i)):i:n};n({target:"Reflect",stat:!0},{getMetadataKeys:function(t){var r=arguments.length<2?void 0:l(arguments[1]);return p(a(t),r)}})},78193:(t,r,e)=>{var n=e(37263),o=e(67802),i=e(92569),a=e(80729),u=o.has,s=o.get,c=o.toKey,f=function t(r,e,n){if(u(r,e,n))return s(r,e,n);var o=a(e);return null!==o?t(r,o,n):void 0};n({target:"Reflect",stat:!0},{getMetadata:function(t,r){var e=arguments.length<3?void 0:c(arguments[2]);return f(t,i(r),e)}})},17525:(t,r,e)=>{var n=e(37263),o=e(67802),i=e(92569),a=o.keys,u=o.toKey;n({target:"Reflect",stat:!0},{getOwnMetadataKeys:function(t){var r=arguments.length<2?void 0:u(arguments[1]);return a(i(t),r)}})},9250:(t,r,e)=>{var n=e(37263),o=e(67802),i=e(92569),a=o.get,u=o.toKey;n({target:"Reflect",stat:!0},{getOwnMetadata:function(t,r){var e=arguments.length<3?void 0:u(arguments[2]);return a(t,i(r),e)}})},50519:(t,r,e)=>{var n=e(37263),o=e(67802),i=e(92569),a=e(80729),u=o.has,s=o.toKey,c=function t(r,e,n){if(u(r,e,n))return!0;var o=a(e);return null!==o&&t(r,o,n)};n({target:"Reflect",stat:!0},{hasMetadata:function(t,r){var e=arguments.length<3?void 0:s(arguments[2]);return c(t,i(r),e)}})},20613:(t,r,e)=>{var n=e(37263),o=e(67802),i=e(92569),a=o.has,u=o.toKey;n({target:"Reflect",stat:!0},{hasOwnMetadata:function(t,r){var e=arguments.length<3?void 0:u(arguments[2]);return a(t,i(r),e)}})},6905:(t,r,e)=>{var n=e(37263),o=e(67802),i=e(92569),a=o.toKey,u=o.set;n({target:"Reflect",stat:!0},{metadata:function(t,r){return function(e,n){u(t,r,i(e),a(n))}}})},83868:(t,r,e)=>{"use strict";e(37263)({target:"Set",proto:!0,real:!0,forced:!0},{addAll:e(99390)})},54651:(t,r,e)=>{"use strict";e(37263)({target:"Set",proto:!0,real:!0,forced:!0},{deleteAll:e(85337)})},14846:(t,r,e)=>{"use strict";var n=e(37263),o=e(35897),i=e(38262),a=e(18257),u=e(92569),s=e(40564),c=e(54026);n({target:"Set",proto:!0,real:!0,forced:!0},{difference:function(t){var r=u(this),e=new(s(r,o("Set")))(r),n=a(e.delete);return c(t,(function(t){i(n,e,t)})),e}})},14488:(t,r,e)=>{"use strict";var n=e(37263),o=e(92569),i=e(12938),a=e(91206),u=e(54026);n({target:"Set",proto:!0,real:!0,forced:!0},{every:function(t){var r=o(this),e=a(r),n=i(t,arguments.length>1?arguments[1]:void 0);return!u(e,(function(t,e){if(!n(t,t,r))return e()}),{IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},91327:(t,r,e)=>{"use strict";var n=e(37263),o=e(35897),i=e(38262),a=e(18257),u=e(92569),s=e(12938),c=e(40564),f=e(91206),l=e(54026);n({target:"Set",proto:!0,real:!0,forced:!0},{filter:function(t){var r=u(this),e=f(r),n=s(t,arguments.length>1?arguments[1]:void 0),p=new(c(r,o("Set"))),h=a(p.add);return l(e,(function(t){n(t,t,r)&&i(h,p,t)}),{IS_ITERATOR:!0}),p}})},43970:(t,r,e)=>{"use strict";var n=e(37263),o=e(92569),i=e(12938),a=e(91206),u=e(54026);n({target:"Set",proto:!0,real:!0,forced:!0},{find:function(t){var r=o(this),e=a(r),n=i(t,arguments.length>1?arguments[1]:void 0);return u(e,(function(t,e){if(n(t,t,r))return e(t)}),{IS_ITERATOR:!0,INTERRUPTED:!0}).result}})},65030:(t,r,e)=>{e(37263)({target:"Set",stat:!0,forced:!0},{from:e(46123)})},48698:(t,r,e)=>{"use strict";var n=e(37263),o=e(35897),i=e(38262),a=e(18257),u=e(92569),s=e(40564),c=e(54026);n({target:"Set",proto:!0,real:!0,forced:!0},{intersection:function(t){var r=u(this),e=new(s(r,o("Set"))),n=a(r.has),f=a(e.add);return c(t,(function(t){i(n,r,t)&&i(f,e,t)})),e}})},73123:(t,r,e)=>{"use strict";var n=e(37263),o=e(38262),i=e(18257),a=e(92569),u=e(54026);n({target:"Set",proto:!0,real:!0,forced:!0},{isDisjointFrom:function(t){var r=a(this),e=i(r.has);return!u(t,(function(t,n){if(!0===o(e,r,t))return n()}),{INTERRUPTED:!0}).stopped}})},90634:(t,r,e)=>{"use strict";var n=e(37263),o=e(35897),i=e(38262),a=e(18257),u=e(9212),s=e(92569),c=e(36307),f=e(54026);n({target:"Set",proto:!0,real:!0,forced:!0},{isSubsetOf:function(t){var r=c(this),e=s(t),n=e.has;return u(n)||(e=new(o("Set"))(t),n=a(e.has)),!f(r,(function(t,r){if(!1===i(n,e,t))return r()}),{IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},7820:(t,r,e)=>{"use strict";var n=e(37263),o=e(38262),i=e(18257),a=e(92569),u=e(54026);n({target:"Set",proto:!0,real:!0,forced:!0},{isSupersetOf:function(t){var r=a(this),e=i(r.has);return!u(t,(function(t,n){if(!1===o(e,r,t))return n()}),{INTERRUPTED:!0}).stopped}})},93022:(t,r,e)=>{"use strict";var n=e(37263),o=e(7386),i=e(92569),a=e(28320),u=e(91206),s=e(54026),c=o([].join),f=[].push;n({target:"Set",proto:!0,real:!0,forced:!0},{join:function(t){var r=i(this),e=u(r),n=void 0===t?",":a(t),o=[];return s(e,f,{that:o,IS_ITERATOR:!0}),c(o,n)}})},85927:(t,r,e)=>{"use strict";var n=e(37263),o=e(35897),i=e(12938),a=e(38262),u=e(18257),s=e(92569),c=e(40564),f=e(91206),l=e(54026);n({target:"Set",proto:!0,real:!0,forced:!0},{map:function(t){var r=s(this),e=f(r),n=i(t,arguments.length>1?arguments[1]:void 0),p=new(c(r,o("Set"))),h=u(p.add);return l(e,(function(t){a(h,p,n(t,t,r))}),{IS_ITERATOR:!0}),p}})},13163:(t,r,e)=>{e(37263)({target:"Set",stat:!0,forced:!0},{of:e(59284)})},39027:(t,r,e)=>{"use strict";var n=e(37263),o=e(18257),i=e(92569),a=e(91206),u=e(54026),s=TypeError;n({target:"Set",proto:!0,real:!0,forced:!0},{reduce:function(t){var r=i(this),e=a(r),n=arguments.length<2,c=n?void 0:arguments[1];if(o(t),u(e,(function(e){n?(n=!1,c=e):c=t(c,e,e,r)}),{IS_ITERATOR:!0}),n)throw s("Reduce of empty set with no initial value");return c}})},33299:(t,r,e)=>{"use strict";var n=e(37263),o=e(92569),i=e(12938),a=e(91206),u=e(54026);n({target:"Set",proto:!0,real:!0,forced:!0},{some:function(t){var r=o(this),e=a(r),n=i(t,arguments.length>1?arguments[1]:void 0);return u(e,(function(t,e){if(n(t,t,r))return e()}),{IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},44644:(t,r,e)=>{"use strict";var n=e(37263),o=e(35897),i=e(38262),a=e(18257),u=e(92569),s=e(40564),c=e(54026);n({target:"Set",proto:!0,real:!0,forced:!0},{symmetricDifference:function(t){var r=u(this),e=new(s(r,o("Set")))(r),n=a(e.delete),f=a(e.add);return c(t,(function(t){i(n,e,t)||i(f,e,t)})),e}})},85942:(t,r,e)=>{"use strict";var n=e(37263),o=e(35897),i=e(18257),a=e(92569),u=e(40564),s=e(54026);n({target:"Set",proto:!0,real:!0,forced:!0},{union:function(t){var r=a(this),e=new(u(r,o("Set")))(r);return s(t,i(e.add),{that:e}),e}})},9063:(t,r,e)=>{"use strict";var n=e(37263),o=e(96389).charAt,i=e(63955),a=e(87486),u=e(28320);n({target:"String",proto:!0,forced:!0},{at:function(t){var r=u(i(this)),e=r.length,n=a(t),s=n>=0?n:e+n;return s<0||s>=e?void 0:o(r,s)}})},91437:(t,r,e)=>{"use strict";var n=e(37263),o=e(73098),i=e(71002),a=e(63955),u=e(28320),s=e(42743),c=e(96389),f=c.codeAt,l=c.charAt,p="String Iterator",h=s.set,v=s.getterFor(p),d=o((function(t){h(this,{type:p,string:t,index:0})}),"String",(function(){var t,r=v(this),e=r.string,n=r.index;return n>=e.length?i(void 0,!0):(t=l(e,n),r.index+=t.length,i({codePoint:f(t,0),position:n},!1))}));n({target:"String",proto:!0,forced:!0},{codePoints:function(){return new d(u(a(this)))}})},17012:(t,r,e)=>{var n=e(37263),o=e(7386),i=e(22977),a=e(28320),u=e(1825),s=TypeError,c=Array.prototype,f=o(c.push),l=o(c.join);n({target:"String",stat:!0,forced:!0},{cooked:function(t){for(var r=i(t),e=u(r),n=arguments.length,o=[],c=0;e>c;){var p=r[c++];if(void 0===p)throw s("Incorrect template");if(f(o,a(p)),c===e)return l(o,"");c<n&&f(o,a(arguments[c]))}}})},63278:(t,r,e)=>{e(70698)},13607:(t,r,e)=>{e(66553)},95685:(t,r,e)=>{e(71513)("asyncDispose")},92034:(t,r,e)=>{e(71513)("dispose")},4365:(t,r,e)=>{e(71513)("matcher")},28579:(t,r,e)=>{e(71513)("metadataKey")},52826:(t,r,e)=>{e(71513)("metadata")},59371:(t,r,e)=>{e(71513)("observable")},48132:(t,r,e)=>{e(71513)("patternMatch")},985:(t,r,e)=>{e(71513)("replaceAll")},10377:(t,r,e)=>{e(97761)},31086:(t,r,e)=>{"use strict";var n=e(13977),o=e(24805).filterReject,i=e(49741),a=n.aTypedArray;(0,n.exportTypedArrayMethod)("filterOut",(function(t){var r=o(a(this),t,arguments.length>1?arguments[1]:void 0);return i(this,r)}),!0)},20091:(t,r,e)=>{"use strict";var n=e(13977),o=e(24805).filterReject,i=e(49741),a=n.aTypedArray;(0,n.exportTypedArrayMethod)("filterReject",(function(t){var r=o(a(this),t,arguments.length>1?arguments[1]:void 0);return i(this,r)}),!0)},6316:(t,r,e)=>{e(57391)},68694:(t,r,e)=>{e(86205)},60146:(t,r,e)=>{"use strict";var n=e(35897),o=e(41186),i=e(48160),a=e(13977),u=e(4114),s=a.aTypedArrayConstructor;(0,a.exportTypedArrayStaticMethod)("fromAsync",(function(t){var r=this,e=arguments.length,a=e>1?arguments[1]:void 0,c=e>2?arguments[2]:void 0;return new(n("Promise"))((function(e){o(r),e(i(t,a,c))})).then((function(t){return u(s(r),t)}))}),!0)},9029:(t,r,e)=>{"use strict";var n=e(13977),o=e(3151),i=e(50992),a=n.aTypedArray;(0,n.exportTypedArrayMethod)("groupBy",(function(t){var r=arguments.length>1?arguments[1]:void 0;return o(a(this),t,r,i)}),!0)},25298:(t,r,e)=>{"use strict";var n=e(48976),o=e(13977),i=o.aTypedArray,a=o.exportTypedArrayMethod,u=o.getTypedArrayConstructor;a("toReversed",(function(){return n(i(this),u(this))}))},18971:(t,r,e)=>{"use strict";var n=e(13977),o=e(7386),i=e(18257),a=e(4114),u=n.aTypedArray,s=n.getTypedArrayConstructor,c=n.exportTypedArrayMethod,f=o(n.TypedArrayPrototype.sort);c("toSorted",(function(t){void 0!==t&&i(t);var r=u(this),e=a(s(r),r);return f(e,t)}))},90531:(t,r,e)=>{"use strict";var n=e(13977),o=e(1825),i=e(19022),a=e(96782),u=e(92178),s=e(87486),c=e(16544),f=n.aTypedArray,l=n.getTypedArrayConstructor,p=n.exportTypedArrayMethod,h=Math.max,v=Math.min;p("toSpliced",(function(t,r){var e,n,c,p,d,y,g,m=f(this),b=l(m),x=o(m),w=a(t,x),S=arguments.length,E=0;if(0===S)e=n=0;else if(1===S)e=0,n=x-w;else if(n=v(h(s(r),0),x-w),e=S-2){p=new b(e),c=i(p);for(var A=2;A<S;A++)d=arguments[A],p[A-2]=c?u(d):+d}for(g=new b(y=x+e-n);E<w;E++)g[E]=m[E];for(;E<w+e;E++)g[E]=p[E-w];for(;E<y;E++)g[E]=m[E+n-e];return g}),!!c((function(){var t=new Int8Array([1]),r=t.toSpliced(1,0,{valueOf:function(){return t[0]=2,3}});return 2!==r[0]||3!==r[1]})))},24192:(t,r,e)=>{"use strict";var n=e(7386),o=e(13977),i=e(33878),a=e(49741),u=o.aTypedArray,s=o.exportTypedArrayMethod,c=n(i);s("uniqueBy",(function(t){return a(this,c(u(this),t))}),!0)},95589:(t,r,e)=>{"use strict";var n=e(41030),o=e(13977),i=e(19022),a=e(87486),u=e(92178),s=o.aTypedArray,c=o.getTypedArrayConstructor,f=o.exportTypedArrayMethod,l=!!function(){try{new Int8Array(1).with(2,{valueOf:function(){throw 8}})}catch(t){return 8===t}}();f("with",{with:function(t,r){var e=s(this),o=a(t),f=i(e)?u(r):+r;return n(e,c(e),o,f)}}.with,!l)},73884:(t,r,e)=>{"use strict";e(37263)({target:"WeakMap",proto:!0,real:!0,forced:!0},{deleteAll:e(85337)})},3020:(t,r,e)=>{"use strict";e(37263)({target:"WeakMap",proto:!0,real:!0,forced:!0},{emplace:e(53069)})},11649:(t,r,e)=>{e(37263)({target:"WeakMap",stat:!0,forced:!0},{from:e(46123)})},90925:(t,r,e)=>{e(37263)({target:"WeakMap",stat:!0,forced:!0},{of:e(59284)})},48462:(t,r,e)=>{"use strict";e(37263)({target:"WeakMap",proto:!0,real:!0,forced:!0},{upsert:e(48080)})},98501:(t,r,e)=>{"use strict";e(37263)({target:"WeakSet",proto:!0,real:!0,forced:!0},{addAll:e(99390)})},95869:(t,r,e)=>{"use strict";e(37263)({target:"WeakSet",proto:!0,real:!0,forced:!0},{deleteAll:e(85337)})},59686:(t,r,e)=>{e(37263)({target:"WeakSet",stat:!0,forced:!0},{from:e(46123)})},95175:(t,r,e)=>{e(37263)({target:"WeakSet",stat:!0,forced:!0},{of:e(59284)})},21806:(t,r,e)=>{var n=e(37263),o=e(35897),i=e(7386),a=e(16544),u=e(28320),s=e(62870),c=e(57520),f=e(42990).ctoi,l=/[^\d+/a-z]/i,p=/[\t\n\f\r ]+/g,h=/[=]+$/,v=o("atob"),d=String.fromCharCode,y=i("".charAt),g=i("".replace),m=i(l.exec),b=a((function(){return""!==v(" ")})),x=!a((function(){v("a")})),w=!b&&!x&&!a((function(){v()})),S=!b&&!x&&1!==v.length;n({global:!0,enumerable:!0,forced:b||x||w||S},{atob:function(t){if(c(arguments.length,1),w||S)return v(t);var r,e,n=g(u(t),p,""),i="",a=0,b=0;if(n.length%4==0&&(n=g(n,h,"")),n.length%4==1||m(l,n))throw new(o("DOMException"))("The string is not correctly encoded","InvalidCharacterError");for(;r=y(n,a++);)s(f,r)&&(e=b%4?64*e+f[r]:f[r],b++%4&&(i+=d(255&e>>(-2*b&6))));return i}})},71710:(t,r,e)=>{var n=e(37263),o=e(35897),i=e(7386),a=e(16544),u=e(28320),s=e(57520),c=e(42990).itoc,f=o("btoa"),l=i("".charAt),p=i("".charCodeAt),h=!!f&&!a((function(){f()})),v=!!f&&a((function(){return"bnVsbA=="!==f(null)})),d=!!f&&1!==f.length;n({global:!0,enumerable:!0,forced:h||v||d},{btoa:function(t){if(s(arguments.length,1),h||v||d)return f(u(t));for(var r,e,n=u(t),i="",a=0,y=c;l(n,a)||(y="=",a%1);){if((e=p(n,a+=3/4))>255)throw new(o("DOMException"))("The string contains characters outside of the Latin1 range","InvalidCharacterError");i+=l(y,63&(r=r<<8|e)>>8-a%1*8)}return i}})},34229:(t,r,e)=>{var n=e(37263),o=e(47583),i=e(48117).clear;n({global:!0,bind:!0,enumerable:!0,forced:o.clearImmediate!==i},{clearImmediate:i})},55090:(t,r,e)=>{var n=e(47583),o=e(86778),i=e(49307),a=e(63200),u=e(57),s=function(t){if(t&&t.forEach!==a)try{u(t,"forEach",a)}catch(r){t.forEach=a}};for(var c in o)o[c]&&s(n[c]&&n[c].prototype);s(i)},24655:(t,r,e)=>{var n=e(47583),o=e(86778),i=e(49307),a=e(55677),u=e(57),s=e(3649),c=s("iterator"),f=s("toStringTag"),l=a.values,p=function(t,r){if(t){if(t[c]!==l)try{u(t,c,l)}catch(r){t[c]=l}if(t[f]||u(t,f,r),o[r])for(var e in a)if(t[e]!==a[e])try{u(t,e,a[e])}catch(r){t[e]=a[e]}}};for(var h in o)p(n[h]&&n[h].prototype,h);p(i,"DOMTokenList")},99508:(t,r,e)=>{"use strict";var n=e(37263),o=e(39676),i=e(35897),a=e(16544),u=e(3590),s=e(54677),c=e(94615).f,f=e(73746),l=e(92499),p=e(62870),h=e(44761),v=e(92569),d=e(88477),y=e(22764),g=e(5331),m=e(80668),b=e(42743),x=e(18494),w=e(86268),S="DOMException",E=i("Error"),A=i(S)||function(){try{(new(i("MessageChannel")||o("worker_threads").MessageChannel)).port1.postMessage(new WeakMap)}catch(t){if("DATA_CLONE_ERR"==t.name&&25==t.code)return t.constructor}}(),I=A&&A.prototype,_=E.prototype,R=b.set,O=b.getterFor(S),T="stack"in E(S),k=function(t){return p(g,t)&&g[t].m?g[t].c:0},M=function(){h(this,P);var t=arguments.length,r=y(t<1?void 0:arguments[0]),e=y(t<2?void 0:arguments[1],"Error"),n=k(e);if(R(this,{type:S,name:e,message:r,code:n}),x||(this.name=e,this.message=r,this.code=n),T){var o=E(r);o.name=S,c(this,"stack",s(1,m(o.stack,1)))}},P=M.prototype=u(_),j=function(t){return{enumerable:!0,configurable:!0,get:t}},C=function(t){return j((function(){return O(this)[t]}))};x&&(l(P,"code",C("code")),l(P,"message",C("message")),l(P,"name",C("name"))),c(P,"constructor",s(1,M));var L=a((function(){return!(new A instanceof E)})),N=L||a((function(){return _.toString!==d||"2: 1"!==String(new A(1,2))})),D=L||a((function(){return 25!==new A(1,"DataCloneError").code})),U=L||25!==A.DATA_CLONE_ERR||25!==I.DATA_CLONE_ERR,F=w?N||D||U:L;n({global:!0,constructor:!0,forced:F},{DOMException:F?M:A});var B=i(S),q=B.prototype;for(var z in N&&(w||A===B)&&f(q,"toString",d),D&&x&&A===B&&l(q,"code",j((function(){return k(v(this).name)}))),g)if(p(g,z)){var W=g[z],V=W.s,H=s(6,W.c);p(B,V)||c(B,V,H),p(q,V)||c(q,V,H)}},2241:(t,r,e)=>{"use strict";var n=e(37263),o=e(47583),i=e(35897),a=e(54677),u=e(94615).f,s=e(62870),c=e(44761),f=e(40434),l=e(22764),p=e(5331),h=e(80668),v=e(18494),d=e(86268),y="DOMException",g=i("Error"),m=i(y),b=function(){c(this,x);var t=arguments.length,r=l(t<1?void 0:arguments[0]),e=l(t<2?void 0:arguments[1],"Error"),n=new m(r,e),o=g(r);return o.name=y,u(n,"stack",a(1,h(o.stack,1))),f(n,this,b),n},x=b.prototype=m.prototype,w="stack"in g(y),S="stack"in new m(1,2),E=m&&v&&Object.getOwnPropertyDescriptor(o,y),A=!(!E||E.writable&&E.configurable),I=w&&!A&&!S;n({global:!0,constructor:!0,forced:d||I},{DOMException:I?b:m});var _=i(y),R=_.prototype;if(R.constructor!==_)for(var O in d||u(R,"constructor",a(1,_)),p)if(s(p,O)){var T=p[O],k=T.s;s(_,k)||u(_,k,a(6,T.c))}},11079:(t,r,e)=>{var n=e(35897),o="DOMException";e(98821)(n(o),o)},68192:(t,r,e)=>{e(34229),e(65373)},39201:(t,r,e)=>{var n=e(37263),o=e(47583),i=e(92095),a=e(18257),u=e(57520),s=e(45354),c=o.process;n({global:!0,enumerable:!0,dontCallGetSet:!0},{queueMicrotask:function(t){u(arguments.length,1),a(t);var r=s&&c.domain;i(r?r.bind(t):t)}})},65373:(t,r,e)=>{var n=e(37263),o=e(47583),i=e(48117).set;n({global:!0,bind:!0,enumerable:!0,forced:o.setImmediate!==i},{setImmediate:i})},60952:(t,r,e)=>{var n=e(37263),o=e(47583),i=e(51328).setInterval;n({global:!0,bind:!0,forced:o.setInterval!==i},{setInterval:i})},40294:(t,r,e)=>{var n=e(37263),o=e(47583),i=e(51328).setTimeout;n({global:!0,bind:!0,forced:o.setTimeout!==i},{setTimeout:i})},98043:(t,r,e)=>{function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}var o,i=e(86268),a=e(37263),u=e(47583),s=e(35897),c=e(7386),f=e(16544),l=e(98284),p=e(9212),h=e(62097),v=e(88505),d=e(90794),y=e(35871),g=e(54026),m=e(92569),b=e(33058),x=e(62870),w=e(65999),S=e(57),E=e(1825),A=e(57520),I=e(90640),_=e(51178),R=e(24061),O=e(12274),T=e(733),k=e(45354),M=u.Object,P=u.Date,j=u.Error,C=u.EvalError,L=u.RangeError,N=u.ReferenceError,D=u.SyntaxError,U=u.TypeError,F=u.URIError,B=u.PerformanceMark,q=u.WebAssembly,z=q&&q.CompileError||j,W=q&&q.LinkError||j,V=q&&q.RuntimeError||j,H=s("DOMException"),G=s("Set"),Y=s("Map"),$=Y.prototype,K=c($.has),J=c($.get),X=c($.set),Q=c(G.prototype.add),Z=s("Object","keys"),tt=c([].push),rt=c((!0).valueOf),et=c(1..valueOf),nt=c("".valueOf),ot=c(P.prototype.getTime),it=l("structuredClone"),at="DataCloneError",ut="Transferring",st=function(t){return!f((function(){var r=new u.Set([7]),e=t(r),o=t(M(7));return e==r||!e.has(7)||"object"!=n(o)||7!=o}))&&t},ct=function(t,r){return!f((function(){var e=new r,n=t({a:e,b:e});return!(n&&n.a===n.b&&n.a instanceof r&&n.a.stack===e.stack)}))},ft=u.structuredClone,lt=i||!ct(ft,j)||!ct(ft,H)||(o=ft,!!f((function(){var t=o(new u.AggregateError([1],it,{cause:3}));return"AggregateError"!=t.name||1!=t.errors[0]||t.message!=it||3!=t.cause}))),pt=!ft&&st((function(t){return new B(it,{detail:t}).detail})),ht=st(ft)||pt,vt=function(t){throw new H("Uncloneable type: "+t,at)},dt=function(t,r){throw new H((r||"Cloning")+" of "+t+" cannot be properly polyfilled in this engine",at)},yt=function t(r,e){if(y(r)&&vt("Symbol"),!d(r))return r;if(e){if(K(e,r))return J(e,r)}else e=new Y;var n,o,i,a,c,f,l,h,v,g,m=b(r),A=!1;switch(m){case"Array":i=[],A=!0;break;case"Object":i={},A=!0;break;case"Map":i=new Y,A=!0;break;case"Set":i=new G,A=!0;break;case"RegExp":i=new RegExp(r.source,I(r));break;case"Error":switch(o=r.name){case"AggregateError":i=s("AggregateError")([]);break;case"EvalError":i=C();break;case"RangeError":i=L();break;case"ReferenceError":i=N();break;case"SyntaxError":i=D();break;case"TypeError":i=U();break;case"URIError":i=F();break;case"CompileError":i=z();break;case"LinkError":i=W();break;case"RuntimeError":i=V();break;default:i=j()}A=!0;break;case"DOMException":i=new H(r.message,r.name),A=!0;break;case"DataView":case"Int8Array":case"Uint8Array":case"Uint8ClampedArray":case"Int16Array":case"Uint16Array":case"Int32Array":case"Uint32Array":case"Float32Array":case"Float64Array":case"BigInt64Array":case"BigUint64Array":n=u[m],d(n)||dt(m),i=new n(t(r.buffer,e),r.byteOffset,"DataView"===m?r.byteLength:r.length);break;case"DOMQuad":try{i=new DOMQuad(t(r.p1,e),t(r.p2,e),t(r.p3,e),t(r.p4,e))}catch(t){ht?i=ht(r):dt(m)}break;case"FileList":if(a=function(){var t;try{t=new u.DataTransfer}catch(r){try{t=new u.ClipboardEvent("").clipboardData}catch(t){}}return t&&t.items&&t.files?t:null}()){for(c=0,f=E(r);c<f;c++)a.items.add(t(r[c],e));i=a.files}else ht?i=ht(r):dt(m);break;case"ImageData":try{i=new ImageData(t(r.data,e),r.width,r.height,{colorSpace:r.colorSpace})}catch(t){ht?i=ht(r):dt(m)}break;default:if(ht)i=ht(r);else switch(m){case"BigInt":i=M(r.valueOf());break;case"Boolean":i=M(rt(r));break;case"Number":i=M(et(r));break;case"String":i=M(nt(r));break;case"Date":i=new P(ot(r));break;case"ArrayBuffer":(n=u.DataView)||"function"==typeof r.slice||dt(m);try{if("function"==typeof r.slice)i=r.slice(0);else for(f=r.byteLength,i=new ArrayBuffer(f),v=new n(r),g=new n(i),c=0;c<f;c++)g.setUint8(c,v.getUint8(c))}catch(t){throw new H("ArrayBuffer is detached",at)}break;case"SharedArrayBuffer":i=r;break;case"Blob":try{i=r.slice(0,r.size,r.type)}catch(t){dt(m)}break;case"DOMPoint":case"DOMPointReadOnly":n=u[m];try{i=n.fromPoint?n.fromPoint(r):new n(r.x,r.y,r.z,r.w)}catch(t){dt(m)}break;case"DOMRect":case"DOMRectReadOnly":n=u[m];try{i=n.fromRect?n.fromRect(r):new n(r.x,r.y,r.width,r.height)}catch(t){dt(m)}break;case"DOMMatrix":case"DOMMatrixReadOnly":n=u[m];try{i=n.fromMatrix?n.fromMatrix(r):new n(r)}catch(t){dt(m)}break;case"AudioData":case"VideoFrame":p(r.clone)||dt(m);try{i=r.clone()}catch(t){vt(m)}break;case"File":try{i=new File([r],r.name,r)}catch(t){dt(m)}break;case"CryptoKey":case"GPUCompilationMessage":case"GPUCompilationInfo":case"ImageBitmap":case"RTCCertificate":case"WebAssembly.Module":dt(m);default:vt(m)}}if(X(e,r,i),A)switch(m){case"Array":case"Object":for(l=Z(r),c=0,f=E(l);c<f;c++)h=l[c],w(i,h,t(r[h],e));break;case"Map":r.forEach((function(r,n){X(i,t(n,e),t(r,e))}));break;case"Set":r.forEach((function(r){Q(i,t(r,e))}));break;case"Error":S(i,"message",t(r.message,e)),x(r,"cause")&&S(i,"cause",t(r.cause,e)),"AggregateError"==o&&(i.errors=t(r.errors,e));case"DOMException":_&&S(i,"stack",t(r.stack,e))}return i},gt=ft&&!f((function(){if(T&&R>92||k&&R>94||O&&R>97)return!1;var t=new ArrayBuffer(8),r=ft(t,{transfer:[t]});return 0!=t.byteLength||8!=r.byteLength})),mt=function(t,r){if(!d(t))throw U("Transfer option cannot be converted to a sequence");var e=[];g(t,(function(t){tt(e,m(t))}));var n,o,i,a,s,c,f=0,l=E(e);if(gt)for(a=ft(e,{transfer:e});f<l;)X(r,e[f],a[f++]);else for(;f<l;){if(n=e[f++],K(r,n))throw new H("Duplicate transferable",at);switch(o=b(n)){case"ImageBitmap":i=u.OffscreenCanvas,h(i)||dt(o,ut);try{(c=new i(n.width,n.height)).getContext("bitmaprenderer").transferFromImageBitmap(n),s=c.transferToImageBitmap()}catch(t){}break;case"AudioData":case"VideoFrame":p(n.clone)&&p(n.close)||dt(o,ut);try{s=n.clone(),n.close()}catch(t){}break;case"ArrayBuffer":case"MessagePort":case"OffscreenCanvas":case"ReadableStream":case"TransformStream":case"WritableStream":dt(o,ut)}if(void 0===s)throw new H("This object cannot be transferred: "+o,at);X(r,n,s)}};a({global:!0,enumerable:!0,sham:!gt,forced:lt},{structuredClone:function(t){var r,e=A(arguments.length,1)>1&&!v(arguments[1])?m(arguments[1]):void 0,n=e?e.transfer:void 0;return void 0!==n&&(r=new Y,mt(n,r)),yt(t,r)}})},60151:(t,r,e)=>{e(60952),e(40294)},83369:(t,r,e)=>{"use strict";e(55677);var n=e(37263),o=e(47583),i=e(38262),a=e(7386),u=e(18494),s=e(8047),c=e(73746),f=e(23705),l=e(98821),p=e(73098),h=e(42743),v=e(44761),d=e(9212),y=e(62870),g=e(12938),m=e(33058),b=e(92569),x=e(90794),w=e(28320),S=e(3590),E=e(54677),A=e(36307),I=e(38272),_=e(57520),R=e(3649),O=e(25744),T=R("iterator"),k="URLSearchParams",M="URLSearchParamsIterator",P=h.set,j=h.getterFor(k),C=h.getterFor(M),L=Object.getOwnPropertyDescriptor,N=function(t){if(!u)return o[t];var r=L(o,t);return r&&r.value},D=N("fetch"),U=N("Request"),F=N("Headers"),B=U&&U.prototype,q=F&&F.prototype,z=o.RegExp,W=o.TypeError,V=o.decodeURIComponent,H=o.encodeURIComponent,G=a("".charAt),Y=a([].join),$=a([].push),K=a("".replace),J=a([].shift),X=a([].splice),Q=a("".split),Z=a("".slice),tt=/\+/g,rt=Array(4),et=function(t){return rt[t-1]||(rt[t-1]=z("((?:%[\\da-f]{2}){"+t+"})","gi"))},nt=function(t){try{return V(t)}catch(r){return t}},ot=function(t){var r=K(t,tt," "),e=4;try{return V(r)}catch(t){for(;e;)r=K(r,et(e--),nt);return r}},it=/[!'()~]|%20/g,at={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+"},ut=function(t){return at[t]},st=function(t){return K(H(t),it,ut)},ct=p((function(t,r){P(this,{type:M,iterator:A(j(t).entries),kind:r})}),"Iterator",(function(){var t=C(this),r=t.kind,e=t.iterator.next(),n=e.value;return e.done||(e.value="keys"===r?n.key:"values"===r?n.value:[n.key,n.value]),e}),!0),ft=function(t){this.entries=[],this.url=null,void 0!==t&&(x(t)?this.parseObject(t):this.parseQuery("string"==typeof t?"?"===G(t,0)?Z(t,1):t:w(t)))};ft.prototype={type:k,bindURL:function(t){this.url=t,this.update()},parseObject:function(t){var r,e,n,o,a,u,s,c=I(t);if(c)for(e=(r=A(t,c)).next;!(n=i(e,r)).done;){if(a=(o=A(b(n.value))).next,(u=i(a,o)).done||(s=i(a,o)).done||!i(a,o).done)throw W("Expected sequence with length 2");$(this.entries,{key:w(u.value),value:w(s.value)})}else for(var f in t)y(t,f)&&$(this.entries,{key:f,value:w(t[f])})},parseQuery:function(t){if(t)for(var r,e,n=Q(t,"&"),o=0;o<n.length;)(r=n[o++]).length&&(e=Q(r,"="),$(this.entries,{key:ot(J(e)),value:ot(Y(e,"="))}))},serialize:function(){for(var t,r=this.entries,e=[],n=0;n<r.length;)t=r[n++],$(e,st(t.key)+"="+st(t.value));return Y(e,"&")},update:function(){this.entries.length=0,this.parseQuery(this.url.query)},updateURL:function(){this.url&&this.url.update()}};var lt=function(){v(this,pt);var t=arguments.length>0?arguments[0]:void 0;P(this,new ft(t))},pt=lt.prototype;if(f(pt,{append:function(t,r){_(arguments.length,2);var e=j(this);$(e.entries,{key:w(t),value:w(r)}),e.updateURL()},delete:function(t){_(arguments.length,1);for(var r=j(this),e=r.entries,n=w(t),o=0;o<e.length;)e[o].key===n?X(e,o,1):o++;r.updateURL()},get:function(t){_(arguments.length,1);for(var r=j(this).entries,e=w(t),n=0;n<r.length;n++)if(r[n].key===e)return r[n].value;return null},getAll:function(t){_(arguments.length,1);for(var r=j(this).entries,e=w(t),n=[],o=0;o<r.length;o++)r[o].key===e&&$(n,r[o].value);return n},has:function(t){_(arguments.length,1);for(var r=j(this).entries,e=w(t),n=0;n<r.length;)if(r[n++].key===e)return!0;return!1},set:function(t,r){_(arguments.length,1);for(var e,n=j(this),o=n.entries,i=!1,a=w(t),u=w(r),s=0;s<o.length;s++)(e=o[s]).key===a&&(i?X(o,s--,1):(i=!0,e.value=u));i||$(o,{key:a,value:u}),n.updateURL()},sort:function(){var t=j(this);O(t.entries,(function(t,r){return t.key>r.key?1:-1})),t.updateURL()},forEach:function(t){for(var r,e=j(this).entries,n=g(t,arguments.length>1?arguments[1]:void 0),o=0;o<e.length;)n((r=e[o++]).value,r.key,this)},keys:function(){return new ct(this,"keys")},values:function(){return new ct(this,"values")},entries:function(){return new ct(this,"entries")}},{enumerable:!0}),c(pt,T,pt.entries,{name:"entries"}),c(pt,"toString",(function(){return j(this).serialize()}),{enumerable:!0}),l(lt,k),n({global:!0,constructor:!0,forced:!s},{URLSearchParams:lt}),!s&&d(F)){var ht=a(q.has),vt=a(q.set),dt=function(t){if(x(t)){var r,e=t.body;if(m(e)===k)return r=t.headers?new F(t.headers):new F,ht(r,"content-type")||vt(r,"content-type","application/x-www-form-urlencoded;charset=UTF-8"),S(t,{body:E(0,w(e)),headers:E(0,r)})}return t};if(d(D)&&n({global:!0,enumerable:!0,dontCallGetSet:!0,forced:!0},{fetch:function(t){return D(t,arguments.length>1?dt(arguments[1]):{})}}),d(U)){var yt=function(t){return v(this,B),new U(t,arguments.length>1?dt(arguments[1]):{})};B.constructor=yt,yt.prototype=B,n({global:!0,constructor:!0,dontCallGetSet:!0,forced:!0},{Request:yt})}}t.exports={URLSearchParams:lt,getState:j}},46549:(t,r,e)=>{e(83369)},93589:(t,r,e)=>{"use strict";function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}e(92129);var o,i=e(37263),a=e(18494),u=e(8047),s=e(47583),c=e(12938),f=e(7386),l=e(73746),p=e(92499),h=e(44761),v=e(62870),d=e(79304),y=e(35513),g=e(74546),m=e(96389).codeAt,b=e(58304),x=e(28320),w=e(98821),S=e(57520),E=e(83369),A=e(42743),I=A.set,_=A.getterFor("URL"),R=E.URLSearchParams,O=E.getState,T=s.URL,k=s.TypeError,M=s.parseInt,P=Math.floor,j=Math.pow,C=f("".charAt),L=f(/./.exec),N=f([].join),D=f(1..toString),U=f([].pop),F=f([].push),B=f("".replace),q=f([].shift),z=f("".split),W=f("".slice),V=f("".toLowerCase),H=f([].unshift),G="Invalid scheme",Y="Invalid host",$="Invalid port",K=/[a-z]/i,J=/[\d+-.a-z]/i,X=/\d/,Q=/^0x/i,Z=/^[0-7]+$/,tt=/^\d+$/,rt=/^[\da-f]+$/i,et=/[\0\t\n\r #%/:<>?@[\\\]^|]/,nt=/[\0\t\n\r #/:<>?@[\\\]^|]/,ot=/^[\u0000-\u0020]+|[\u0000-\u0020]+$/g,it=/[\t\n\r]/g,at=function(t){var r,e,o,i;if("number"==typeof t){for(r=[],e=0;e<4;e++)H(r,t%256),t=P(t/256);return N(r,".")}if("object"==n(t)){for(r="",o=function(t){for(var r=null,e=1,n=null,o=0,i=0;i<8;i++)0!==t[i]?(o>e&&(r=n,e=o),n=null,o=0):(null===n&&(n=i),++o);return o>e&&(r=n,e=o),r}(t),e=0;e<8;e++)i&&0===t[e]||(i&&(i=!1),o===e?(r+=e?":":"::",i=!0):(r+=D(t[e],16),e<7&&(r+=":")));return"["+r+"]"}return t},ut={},st=d({},ut,{" ":1,'"':1,"<":1,">":1,"`":1}),ct=d({},st,{"#":1,"?":1,"{":1,"}":1}),ft=d({},ct,{"/":1,":":1,";":1,"=":1,"@":1,"[":1,"\\":1,"]":1,"^":1,"|":1}),lt=function(t,r){var e=m(t,0);return e>32&&e<127&&!v(r,t)?t:encodeURIComponent(t)},pt={ftp:21,file:null,http:80,https:443,ws:80,wss:443},ht=function(t,r){var e;return 2==t.length&&L(K,C(t,0))&&(":"==(e=C(t,1))||!r&&"|"==e)},vt=function(t){var r;return t.length>1&&ht(W(t,0,2))&&(2==t.length||"/"===(r=C(t,2))||"\\"===r||"?"===r||"#"===r)},dt=function(t){return"."===t||"%2e"===V(t)},yt={},gt={},mt={},bt={},xt={},wt={},St={},Et={},At={},It={},_t={},Rt={},Ot={},Tt={},kt={},Mt={},Pt={},jt={},Ct={},Lt={},Nt={},Dt=function t(r,e,n){var o,i,a,u=x(r);if(e){if(i=this.parse(u))throw k(i);this.searchParams=null}else{if(void 0!==n&&(o=new t(n,!0)),i=this.parse(u,null,o))throw k(i);(a=O(new R)).bindURL(this),this.searchParams=a}};Dt.prototype={type:"URL",parse:function(t,r,e){var n,i,a,u,s,c=this,f=r||yt,l=0,p="",h=!1,d=!1,m=!1;for(t=x(t),r||(c.scheme="",c.username="",c.password="",c.host=null,c.port=null,c.path=[],c.query=null,c.fragment=null,c.cannotBeABaseURL=!1,t=B(t,ot,"")),t=B(t,it,""),n=y(t);l<=n.length;){switch(i=n[l],f){case yt:if(!i||!L(K,i)){if(r)return G;f=mt;continue}p+=V(i),f=gt;break;case gt:if(i&&(L(J,i)||"+"==i||"-"==i||"."==i))p+=V(i);else{if(":"!=i){if(r)return G;p="",f=mt,l=0;continue}if(r&&(c.isSpecial()!=v(pt,p)||"file"==p&&(c.includesCredentials()||null!==c.port)||"file"==c.scheme&&!c.host))return;if(c.scheme=p,r)return void(c.isSpecial()&&pt[c.scheme]==c.port&&(c.port=null));p="","file"==c.scheme?f=Tt:c.isSpecial()&&e&&e.scheme==c.scheme?f=bt:c.isSpecial()?f=Et:"/"==n[l+1]?(f=xt,l++):(c.cannotBeABaseURL=!0,F(c.path,""),f=Ct)}break;case mt:if(!e||e.cannotBeABaseURL&&"#"!=i)return G;if(e.cannotBeABaseURL&&"#"==i){c.scheme=e.scheme,c.path=g(e.path),c.query=e.query,c.fragment="",c.cannotBeABaseURL=!0,f=Nt;break}f="file"==e.scheme?Tt:wt;continue;case bt:if("/"!=i||"/"!=n[l+1]){f=wt;continue}f=At,l++;break;case xt:if("/"==i){f=It;break}f=jt;continue;case wt:if(c.scheme=e.scheme,i==o)c.username=e.username,c.password=e.password,c.host=e.host,c.port=e.port,c.path=g(e.path),c.query=e.query;else if("/"==i||"\\"==i&&c.isSpecial())f=St;else if("?"==i)c.username=e.username,c.password=e.password,c.host=e.host,c.port=e.port,c.path=g(e.path),c.query="",f=Lt;else{if("#"!=i){c.username=e.username,c.password=e.password,c.host=e.host,c.port=e.port,c.path=g(e.path),c.path.length--,f=jt;continue}c.username=e.username,c.password=e.password,c.host=e.host,c.port=e.port,c.path=g(e.path),c.query=e.query,c.fragment="",f=Nt}break;case St:if(!c.isSpecial()||"/"!=i&&"\\"!=i){if("/"!=i){c.username=e.username,c.password=e.password,c.host=e.host,c.port=e.port,f=jt;continue}f=It}else f=At;break;case Et:if(f=At,"/"!=i||"/"!=C(p,l+1))continue;l++;break;case At:if("/"!=i&&"\\"!=i){f=It;continue}break;case It:if("@"==i){h&&(p="%40"+p),h=!0,a=y(p);for(var b=0;b<a.length;b++){var w=a[b];if(":"!=w||m){var S=lt(w,ft);m?c.password+=S:c.username+=S}else m=!0}p=""}else if(i==o||"/"==i||"?"==i||"#"==i||"\\"==i&&c.isSpecial()){if(h&&""==p)return"Invalid authority";l-=y(p).length+1,p="",f=_t}else p+=i;break;case _t:case Rt:if(r&&"file"==c.scheme){f=Mt;continue}if(":"!=i||d){if(i==o||"/"==i||"?"==i||"#"==i||"\\"==i&&c.isSpecial()){if(c.isSpecial()&&""==p)return Y;if(r&&""==p&&(c.includesCredentials()||null!==c.port))return;if(u=c.parseHost(p))return u;if(p="",f=Pt,r)return;continue}"["==i?d=!0:"]"==i&&(d=!1),p+=i}else{if(""==p)return Y;if(u=c.parseHost(p))return u;if(p="",f=Ot,r==Rt)return}break;case Ot:if(!L(X,i)){if(i==o||"/"==i||"?"==i||"#"==i||"\\"==i&&c.isSpecial()||r){if(""!=p){var E=M(p,10);if(E>65535)return $;c.port=c.isSpecial()&&E===pt[c.scheme]?null:E,p=""}if(r)return;f=Pt;continue}return $}p+=i;break;case Tt:if(c.scheme="file","/"==i||"\\"==i)f=kt;else{if(!e||"file"!=e.scheme){f=jt;continue}if(i==o)c.host=e.host,c.path=g(e.path),c.query=e.query;else if("?"==i)c.host=e.host,c.path=g(e.path),c.query="",f=Lt;else{if("#"!=i){vt(N(g(n,l),""))||(c.host=e.host,c.path=g(e.path),c.shortenPath()),f=jt;continue}c.host=e.host,c.path=g(e.path),c.query=e.query,c.fragment="",f=Nt}}break;case kt:if("/"==i||"\\"==i){f=Mt;break}e&&"file"==e.scheme&&!vt(N(g(n,l),""))&&(ht(e.path[0],!0)?F(c.path,e.path[0]):c.host=e.host),f=jt;continue;case Mt:if(i==o||"/"==i||"\\"==i||"?"==i||"#"==i){if(!r&&ht(p))f=jt;else if(""==p){if(c.host="",r)return;f=Pt}else{if(u=c.parseHost(p))return u;if("localhost"==c.host&&(c.host=""),r)return;p="",f=Pt}continue}p+=i;break;case Pt:if(c.isSpecial()){if(f=jt,"/"!=i&&"\\"!=i)continue}else if(r||"?"!=i)if(r||"#"!=i){if(i!=o&&(f=jt,"/"!=i))continue}else c.fragment="",f=Nt;else c.query="",f=Lt;break;case jt:if(i==o||"/"==i||"\\"==i&&c.isSpecial()||!r&&("?"==i||"#"==i)){if(".."===(s=V(s=p))||"%2e."===s||".%2e"===s||"%2e%2e"===s?(c.shortenPath(),"/"==i||"\\"==i&&c.isSpecial()||F(c.path,"")):dt(p)?"/"==i||"\\"==i&&c.isSpecial()||F(c.path,""):("file"==c.scheme&&!c.path.length&&ht(p)&&(c.host&&(c.host=""),p=C(p,0)+":"),F(c.path,p)),p="","file"==c.scheme&&(i==o||"?"==i||"#"==i))for(;c.path.length>1&&""===c.path[0];)q(c.path);"?"==i?(c.query="",f=Lt):"#"==i&&(c.fragment="",f=Nt)}else p+=lt(i,ct);break;case Ct:"?"==i?(c.query="",f=Lt):"#"==i?(c.fragment="",f=Nt):i!=o&&(c.path[0]+=lt(i,ut));break;case Lt:r||"#"!=i?i!=o&&("'"==i&&c.isSpecial()?c.query+="%27":c.query+="#"==i?"%23":lt(i,ut)):(c.fragment="",f=Nt);break;case Nt:i!=o&&(c.fragment+=lt(i,st))}l++}},parseHost:function(t){var r,e,n;if("["==C(t,0)){if("]"!=C(t,t.length-1))return Y;if(r=function(t){var r,e,n,o,i,a,u,s=[0,0,0,0,0,0,0,0],c=0,f=null,l=0,p=function(){return C(t,l)};if(":"==p()){if(":"!=C(t,1))return;l+=2,f=++c}for(;p();){if(8==c)return;if(":"!=p()){for(r=e=0;e<4&&L(rt,p());)r=16*r+M(p(),16),l++,e++;if("."==p()){if(0==e)return;if(l-=e,c>6)return;for(n=0;p();){if(o=null,n>0){if(!("."==p()&&n<4))return;l++}if(!L(X,p()))return;for(;L(X,p());){if(i=M(p(),10),null===o)o=i;else{if(0==o)return;o=10*o+i}if(o>255)return;l++}s[c]=256*s[c]+o,2!=++n&&4!=n||c++}if(4!=n)return;break}if(":"==p()){if(l++,!p())return}else if(p())return;s[c++]=r}else{if(null!==f)return;l++,f=++c}}if(null!==f)for(a=c-f,c=7;0!=c&&a>0;)u=s[c],s[c--]=s[f+a-1],s[f+--a]=u;else if(8!=c)return;return s}(W(t,1,-1)),!r)return Y;this.host=r}else if(this.isSpecial()){if(t=b(t),L(et,t))return Y;if(r=function(t){var r,e,n,o,i,a,u,s=z(t,".");if(s.length&&""==s[s.length-1]&&s.length--,(r=s.length)>4)return t;for(e=[],n=0;n<r;n++){if(""==(o=s[n]))return t;if(i=10,o.length>1&&"0"==C(o,0)&&(i=L(Q,o)?16:8,o=W(o,8==i?1:2)),""===o)a=0;else{if(!L(10==i?tt:8==i?Z:rt,o))return t;a=M(o,i)}F(e,a)}for(n=0;n<r;n++)if(a=e[n],n==r-1){if(a>=j(256,5-r))return null}else if(a>255)return null;for(u=U(e),n=0;n<e.length;n++)u+=e[n]*j(256,3-n);return u}(t),null===r)return Y;this.host=r}else{if(L(nt,t))return Y;for(r="",e=y(t),n=0;n<e.length;n++)r+=lt(e[n],ut);this.host=r}},cannotHaveUsernamePasswordPort:function(){return!this.host||this.cannotBeABaseURL||"file"==this.scheme},includesCredentials:function(){return""!=this.username||""!=this.password},isSpecial:function(){return v(pt,this.scheme)},shortenPath:function(){var t=this.path,r=t.length;!r||"file"==this.scheme&&1==r&&ht(t[0],!0)||t.length--},serialize:function(){var t=this,r=t.scheme,e=t.username,n=t.password,o=t.host,i=t.port,a=t.path,u=t.query,s=t.fragment,c=r+":";return null!==o?(c+="//",t.includesCredentials()&&(c+=e+(n?":"+n:"")+"@"),c+=at(o),null!==i&&(c+=":"+i)):"file"==r&&(c+="//"),c+=t.cannotBeABaseURL?a[0]:a.length?"/"+N(a,"/"):"",null!==u&&(c+="?"+u),null!==s&&(c+="#"+s),c},setHref:function(t){var r=this.parse(t);if(r)throw k(r);this.searchParams.update()},getOrigin:function(){var t=this.scheme,r=this.port;if("blob"==t)try{return new Ut(t.path[0]).origin}catch(t){return"null"}return"file"!=t&&this.isSpecial()?t+"://"+at(this.host)+(null!==r?":"+r:""):"null"},getProtocol:function(){return this.scheme+":"},setProtocol:function(t){this.parse(x(t)+":",yt)},getUsername:function(){return this.username},setUsername:function(t){var r=y(x(t));if(!this.cannotHaveUsernamePasswordPort()){this.username="";for(var e=0;e<r.length;e++)this.username+=lt(r[e],ft)}},getPassword:function(){return this.password},setPassword:function(t){var r=y(x(t));if(!this.cannotHaveUsernamePasswordPort()){this.password="";for(var e=0;e<r.length;e++)this.password+=lt(r[e],ft)}},getHost:function(){var t=this.host,r=this.port;return null===t?"":null===r?at(t):at(t)+":"+r},setHost:function(t){this.cannotBeABaseURL||this.parse(t,_t)},getHostname:function(){var t=this.host;return null===t?"":at(t)},setHostname:function(t){this.cannotBeABaseURL||this.parse(t,Rt)},getPort:function(){var t=this.port;return null===t?"":x(t)},setPort:function(t){this.cannotHaveUsernamePasswordPort()||(""==(t=x(t))?this.port=null:this.parse(t,Ot))},getPathname:function(){var t=this.path;return this.cannotBeABaseURL?t[0]:t.length?"/"+N(t,"/"):""},setPathname:function(t){this.cannotBeABaseURL||(this.path=[],this.parse(t,Pt))},getSearch:function(){var t=this.query;return t?"?"+t:""},setSearch:function(t){""==(t=x(t))?this.query=null:("?"==C(t,0)&&(t=W(t,1)),this.query="",this.parse(t,Lt)),this.searchParams.update()},getSearchParams:function(){return this.searchParams.facade},getHash:function(){var t=this.fragment;return t?"#"+t:""},setHash:function(t){""!=(t=x(t))?("#"==C(t,0)&&(t=W(t,1)),this.fragment="",this.parse(t,Nt)):this.fragment=null},update:function(){this.query=this.searchParams.serialize()||null}};var Ut=function(t){var r=h(this,Ft),e=S(arguments.length,1)>1?arguments[1]:void 0,n=I(r,new Dt(t,!1,e));a||(r.href=n.serialize(),r.origin=n.getOrigin(),r.protocol=n.getProtocol(),r.username=n.getUsername(),r.password=n.getPassword(),r.host=n.getHost(),r.hostname=n.getHostname(),r.port=n.getPort(),r.pathname=n.getPathname(),r.search=n.getSearch(),r.searchParams=n.getSearchParams(),r.hash=n.getHash())},Ft=Ut.prototype,Bt=function(t,r){return{get:function(){return _(this)[t]()},set:r&&function(t){return _(this)[r](t)},configurable:!0,enumerable:!0}};if(a&&(p(Ft,"href",Bt("serialize","setHref")),p(Ft,"origin",Bt("getOrigin")),p(Ft,"protocol",Bt("getProtocol","setProtocol")),p(Ft,"username",Bt("getUsername","setUsername")),p(Ft,"password",Bt("getPassword","setPassword")),p(Ft,"host",Bt("getHost","setHost")),p(Ft,"hostname",Bt("getHostname","setHostname")),p(Ft,"port",Bt("getPort","setPort")),p(Ft,"pathname",Bt("getPathname","setPathname")),p(Ft,"search",Bt("getSearch","setSearch")),p(Ft,"searchParams",Bt("getSearchParams")),p(Ft,"hash",Bt("getHash","setHash"))),l(Ft,"toJSON",(function(){return _(this).serialize()}),{enumerable:!0}),l(Ft,"toString",(function(){return _(this).serialize()}),{enumerable:!0}),T){var qt=T.createObjectURL,zt=T.revokeObjectURL;qt&&l(Ut,"createObjectURL",c(qt,T)),zt&&l(Ut,"revokeObjectURL",c(zt,T))}w(Ut,"URL"),i({global:!0,constructor:!0,forced:!u,sham:!a},{URL:Ut})},76453:(t,r,e)=>{e(93589)},58138:(t,r,e)=>{"use strict";var n=e(37263),o=e(38262);n({target:"URL",proto:!0,enumerable:!0},{toJSON:function(){return o(URL.prototype.toString,this)}})}},r={};function e(n){var o=r[n];if(void 0!==o)return o.exports;var i=r[n]={exports:{}};return t[n](i,i.exports,e),i.exports}e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var r=e.g.document;if(!t&&r&&(r.currentScript&&(t=r.currentScript.src),!t)){var n=r.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})(),(()=>{"use strict";const t=e.p+"ce7ddc11e4f52594fa5b.jpg";function r(t,r){for(var e=0;e<r.length;e++){var n=r[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var n=function(){function e(t,r){var n=t.data,o=t.handleImageOpenPopup,i=t.handleRemoveClick,a=t.userId,u=t.putLikeCard;!function(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,e),this._data=n,this._cardSelector=r,this._handleImageOpenPopup=o,this._handleRemoveClick=i,this._userId=a,this._putLikeCard=u}var n,o;return n=e,(o=[{key:"generateCard",value:function(){var t,r,e;return this._element=this._getTemplate(),this._cardImage=this._element.querySelector(".element__image"),this._likeButton=this._element.querySelector(".element__like"),this._countersLikes=this._element.querySelector(".element__counters-likes"),this._countingLike(),this._deleteСard=this._element.querySelector(".element__baskets"),this._removeBacked(),this._setEventListenersAll(),this._element.querySelector(".element__title").textContent=null===(t=this._data)||void 0===t?void 0:t.name,this._cardImage.src=null===(r=this._data)||void 0===r?void 0:r.link,this._cardImage.alt=null===(e=this._data)||void 0===e?void 0:e.link,this._element}},{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".element").cloneNode(!0)}},{key:"isLiked",value:function(){var t=this;return this._data.likes.some((function(r){return r._id===t._userId}))}},{key:"_countingLike",value:function(){this._countersLikes.textContent=this._data.likes.length,this.isLiked()?this._likeButton.classList.add("element__like_active"):this._likeButton.classList.remove("element__like_active")}},{key:"resetLikeData",value:function(t){this._data.likes=t.likes,this._countingLike()}},{key:"_removeBacked",value:function(){this._data.owner._id===this._userId?this._deleteСard.classList.add("element__baskets_active"):this._deleteСard.classList.remove(".element__baskets_active")}},{key:"remove",value:function(){this._element.remove(".element"),this._element=null}},{key:"_setEventListenersAll",value:function(){var r=this;this._likeButton.addEventListener("click",(function(){r._countingLike()})),this._likeButton.addEventListener("click",(function(){r._putLikeCard(r)})),this._deleteСard.addEventListener("click",(function(){return r._handleRemoveClick(r)})),this._cardImage.addEventListener("click",(function(){r._handleImageOpenPopup(r._data)})),this._cardImage.addEventListener("error",(function(){r._data.link=t,r._cardImage.src=t,r._element.querySelector(".element__title").textContent="Картинка впути"}))}},{key:"getId",value:function(){return this._data._id}}])&&r(n.prototype,o),Object.defineProperty(n,"prototype",{writable:!1}),e}();function o(t,r){for(var e=0;e<r.length;e++){var n=r[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var i=function(){function t(r,e){!function(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t),this._config=r,this._formElement=e,this._buttonElement=this._formElement.querySelector(this._config.buttonElement)}var r,e;return r=t,(e=[{key:"_setEventListeners",value:function(){var t=this;this._inputList=Array.from(this._formElement.querySelectorAll(this._config.inputPopup)),this._inputList.forEach((function(r){r.addEventListener("input",(function(){t._inputElement=r,t._isValid(),t._toggleButtonState()}))}))}},{key:"_isValid",value:function(){this._inputElement.validity.valid?this._hideInputError():this._showInputError()}},{key:"_showInputError",value:function(){var t=this._inputElement.validationMessage;this._errorElement=this._formElement.querySelector("#error-".concat(this._inputElement.id)),this._conteinerElement=this._errorElement.closest(this._config.conteinerInput),this._conteinerElement.classList.add(this._config.inputConteinerInvalid),this._errorElement.textContent=t}},{key:"_hideInputError",value:function(){this._errorElement=this._formElement.querySelector("#error-".concat(this._inputElement.id)),this._conteinerElement=this._errorElement.closest(this._config.conteinerInput),this._conteinerElement.classList.remove(this._config.inputConteinerInvalid),this._errorElement.textContent=" "}},{key:"disabledButton",value:function(){this._buttonElement.classList.add(this._config.inactiveButton),this._buttonElement.setAttribute("disabled","disabled")}},{key:"disabledButtonActiv",value:function(){this._buttonElement.classList.remove(this._config.inactiveButton),this._buttonElement.removeAttribute("disabled")}},{key:"_toggleButtonState",value:function(){this._hasInvalidInput()?this.disabledButton():this.disabledButtonActiv()}},{key:"_hasInvalidInput",value:function(){return Array.from(this._inputList).some((function(t){return!t.validity.valid}))}},{key:"enableValidation",value:function(){this._formElement.addEventListener("submit",(function(t){t.preventDefault()})),this._setEventListeners()}}])&&o(r.prototype,e),Object.defineProperty(r,"prototype",{writable:!1}),t}();function a(t,r){for(var e=0;e<r.length;e++){var n=r[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var u=function(){function t(r,e){!function(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t),this._renderer=e,this._conteiner=document.querySelector(r)}var r,e;return r=t,(e=[{key:"addItem",value:function(t){this._conteiner.prepend(t)}},{key:"rendererItem",value:function(t){var r=this;t.forEach((function(t){r._renderer(t)}))}}])&&a(r.prototype,e),Object.defineProperty(r,"prototype",{writable:!1}),t}();function s(t,r){for(var e=0;e<r.length;e++){var n=r[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var c=function(){function t(r){var e,n,o=this;!function(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t),n=function(t){"Escape"===t.key&&o.close()},(e="_handleEscClose")in this?Object.defineProperty(this,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):this[e]=n,this._popup=document.querySelector(r)}var r,e;return r=t,(e=[{key:"open",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"setEventListeners",value:function(){var t=this;this._popup.addEventListener("mousedown",(function(r){(r.target.classList.contains("popup")||r.target.classList.contains("popup__close"))&&t.close()}))}}])&&s(r.prototype,e),Object.defineProperty(r,"prototype",{writable:!1}),t}();function f(t){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},f(t)}function l(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function p(t,r){for(var e=0;e<r.length;e++){var n=r[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function h(){return h="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,r,e){var n=v(t,r);if(n){var o=Object.getOwnPropertyDescriptor(n,r);return o.get?o.get.call(arguments.length<3?t:e):o.value}},h.apply(this,arguments)}function v(t,r){for(;!Object.prototype.hasOwnProperty.call(t,r)&&null!==(t=g(t)););return t}function d(t,r){return d=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,r){return t.__proto__=r,t},d(t,r)}function y(t,r){if(r&&("object"===f(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function g(t){return g=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},g(t)}var m=function(t){!function(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&d(t,r)}(a,t);var r,e,n,o,i=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=g(n);if(o){var e=g(this).constructor;t=Reflect.construct(r,arguments,e)}else t=r.apply(this,arguments);return y(this,t)});function a(t,r){var e,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;return l(this,a),(e=i.call(this,t))._form=e._popup.querySelector(r),e._submitHandler=n,e}return r=a,(e=[{key:"_getInputValues",value:function(){var t={};return this._form.querySelectorAll(".popup__input").forEach((function(r){t[r.name]=r.value})),t}},{key:"changeSubmitHandler",value:function(t){this._submitHandler=t}},{key:"setEventListeners",value:function(){var t=this;this._form.addEventListener("submit",(function(r){r.preventDefault(),t._submitHandler(t._getInputValues()),t.close(),r.target.reset()})),h(g(a.prototype),"setEventListeners",this).call(this)}}])&&p(r.prototype,e),Object.defineProperty(r,"prototype",{writable:!1}),a}(c);function b(t){return b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},b(t)}function x(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function w(t,r){for(var e=0;e<r.length;e++){var n=r[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function S(){return S="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,r,e){var n=E(t,r);if(n){var o=Object.getOwnPropertyDescriptor(n,r);return o.get?o.get.call(arguments.length<3?t:e):o.value}},S.apply(this,arguments)}function E(t,r){for(;!Object.prototype.hasOwnProperty.call(t,r)&&null!==(t=_(t)););return t}function A(t,r){return A=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,r){return t.__proto__=r,t},A(t,r)}function I(t,r){if(r&&("object"===b(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function _(t){return _=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},_(t)}var R=function(t){!function(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&A(t,r)}(a,t);var r,e,n,o,i=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=_(n);if(o){var e=_(this).constructor;t=Reflect.construct(r,arguments,e)}else t=r.apply(this,arguments);return I(this,t)});function a(){return x(this,a),i.apply(this,arguments)}return r=a,(e=[{key:"open",value:function(t){var r=t.name,e=t.link;this._popup.querySelector(".popup__image").src=e,this._popup.querySelector(".popup__image").alt=r,this._popup.querySelector(".popup__heading").textContent=r,S(_(a.prototype),"open",this).call(this)}}])&&w(r.prototype,e),Object.defineProperty(r,"prototype",{writable:!1}),a}(c);function O(t,r){for(var e=0;e<r.length;e++){var n=r[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var T=function(){function t(r){var e=r.data,n=r.profileText,o=r.profileTitle,i=r.pofileAvatar,a=r.handleAvatarClick;!function(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t),this._data=e,this._name=n,this._about=o,this._avatar=i,this._handleAvatarClick=a}var r,e;return r=t,(e=[{key:"getUserInfo",value:function(){return{name:this._name.textContent,about:this._about.textContent,avatar:this._avatar.src}}},{key:"setUserInfo",value:function(t){this._name.textContent=t.name,this._about.textContent=t.about,this._avatar.src=t.avatar}}])&&O(r.prototype,e),Object.defineProperty(r,"prototype",{writable:!1}),t}(),k={formElement:".popup__form",inputPopup:".popup__input",buttonElement:".popup__button",inactiveButton:"button_inactive",inputErrorClass:"popup__input_error",errorClass:"popup__error_visible",inputConteinerInvalid:"input-conteiner__invalid",conteinerInput:".input-conteiner"},M=document.querySelector(".profile__title"),P=document.querySelector(".profile__text"),j=document.querySelector(".profile__avatar"),C=e(99365);function L(t,r){for(var e=0;e<r.length;e++){var n=r[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function N(t,r,e){if(!r.has(t))throw new TypeError("attempted to get private field on non-instance");return e}var D=new WeakSet;function U(t){return t.ok?t.json():C.Promise.reject({message:"Ошибка отправки картинки на стороне сервера",response:t})}function F(t,r){(null==r||r>t.length)&&(r=t.length);for(var e=0,n=new Array(r);e<r;e++)n[e]=t[e];return n}var B=new(function(){function t(r){var e,n;!function(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t),function(t,r){if(r.has(t))throw new TypeError("Cannot initialize the same private elements twice on an object")}(e=this,n=D),n.add(e),this._url=r.url,this._headers=r.headers}var r,e;return r=t,(e=[{key:"getAllTasks",value:function(){var t=this;return fetch("".concat(this._url,"/cards"),{method:"GET",headers:this._headers}).then((function(r){return N(t,D,U).call(t,r)}))}},{key:"getAllInfo",value:function(){return C.Promise.all([this.getAllProfile(),this.getAllTasks()])}},{key:"addNewTasks",value:function(t){var r=this;return fetch("".concat(this._url,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify(t)}).then((function(t){return N(r,D,U).call(r,t)}))}},{key:"removeCard",value:function(t){var r=this;return fetch("".concat(this._url,"/cards/").concat(t),{method:"DELETE",headers:this._headers}).then((function(t){return N(r,D,U).call(r,t)}))}},{key:"getAllProfile",value:function(){var t=this;return fetch("".concat(this._url,"/users/me"),{method:"GET",headers:this._headers}).then((function(r){return N(t,D,U).call(t,r)}))}},{key:"addNewProfile",value:function(t){var r=this;return fetch("".concat(this._url,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify(t)}).then((function(t){return N(r,D,U).call(r,t)}))}},{key:"changeLike",value:function(t,r){var e=this;return fetch("".concat(this._url,"/cards/").concat(t,"/likes"),{method:r?"DELETE":"PUT",headers:this._headers}).then((function(t){return N(e,D,U).call(e,t)}))}},{key:"addNewAvatar",value:function(t){var r=this;return fetch("".concat(this._url,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t})}).then((function(t){return N(r,D,U).call(r,t)}))}}])&&L(r.prototype,e),Object.defineProperty(r,"prototype",{writable:!1}),t}())({url:"https://mesto.nomoreparties.co/v1/cohort-54",headers:{"content-type":"application/json",authorization:" b84c7223-66c7-4859-b33f-9b1c192b5f07"}}),q=document.querySelector(".profile__edit-button"),z=document.querySelector(".popup__form_edit-button"),W=new T({profileText:P,profileTitle:M,pofileAvatar:j});B.getAllProfile().then((function(t){W.setUserInfo(t)})).catch((function(t){console.log("Ошибка",t)}));var V=new i(k,z);V.enableValidation();var H=new m(".popup_edit-button",".popup__form_edit-button",(function(t){B.addNewProfile(t).then((function(t){W.setUserInfo(t)})).catch((function(t){console.log("Ошибка",t)}))}));H.setEventListeners(),q.addEventListener("click",(function(){H.open(),V.disabledButton(),W.getUserInfo()}));var G=document.querySelector(".profile__avatar"),Y=new i(k,document.querySelector(".popup__form_changing-avatar"));Y.enableValidation();var $=new m(".popup_changing-avatar",".popup__form_changing-avatar",(function(t){B.addNewAvatar(t.avatar).then((function(t){W.setUserInfo(t)})).catch((function(t){console.log("Ошибка",t)}))}));function K(t){Z.open(t)}$.setEventListeners(),G.addEventListener("click",(function(){$.open(),Y.disabledButton(),W.getUserInfo()}));var J=new m(".popup_remove",".popup__form_remove");function X(t){J.open(),J.changeSubmitHandler((function(){B.removeCard(t.getId()).then((function(){t.remove()}))}))}function Q(t){B.changeLike(t.getId(),t.isLiked()).then((function(r){t.resetLikeData(r)}))}J.setEventListeners();var Z=new R(".popup_zoom");function tt(t){return new n({data:t,handleImageOpenPopup:K,handleRemoveClick:X,userId:nt,putLikeCard:Q},".elements-template").generateCard()}Z.setEventListeners();var rt=document.querySelector(".popup__form_add-button"),et=document.querySelector(".profile__add-button"),nt=null,ot=new u(".elements",(function(t){ot.addItem(tt(t))}));B.getAllInfo().then((function(t){var r,e,n=(e=2,function(t){if(Array.isArray(t))return t}(r=t)||function(t,r){var e=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=e){var n,o,i=[],a=!0,u=!1;try{for(e=e.call(t);!(a=(n=e.next()).done)&&(i.push(n.value),!r||i.length!==r);a=!0);}catch(t){u=!0,o=t}finally{try{a||null==e.return||e.return()}finally{if(u)throw o}}return i}}(r,e)||function(t,r){if(t){if("string"==typeof t)return F(t,r);var e=Object.prototype.toString.call(t).slice(8,-1);return"Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e?Array.from(t):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?F(t,r):void 0}}(r,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=n[0],i=n[1];nt=o._id,ot.rendererItem(i)})).catch((function(t){console.log("Ошибка",t)}));var it=new i(k,rt);it.enableValidation();var at=new m(".popup_add-button",".popup__form_add-button",(function(t){B.addNewTasks(t).then((function(t){ot.addItem(tt(t))})).catch((function(t){console.log("Ошибка",t)}))}));at.setEventListeners(),et.addEventListener("click",(function(){at.open(),it.disabledButton()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5mM2IxY2I0OTZjMzRkMzY3Y2QwNC5qcyIsIm1hcHBpbmdzIjoiNkJBQUFBLEVBQU9DLFFBQVUsRUFBakJELE0sa0JDQUFFLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxNQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsTUFDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsTUFDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxNQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxNQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsTUFDUkEsRUFBUSxNQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsTUFDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxNQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxNQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsS0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxNQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE1BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxNQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLEtBQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxLQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE1BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE1BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLEtBQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE1BQ1JBLEVBQVEsT0FDUkEsRUFBUSxNQUNSQSxFQUFRLE1BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxNQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsTUFDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxNQUNSQSxFQUFRLE1BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsTUFDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE1BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxNQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE1BQ1JBLEVBQVEsTUFDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxNQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsTUFDUkEsRUFBUSxNQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE1BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxNQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsTUFDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxNQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsS0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsTUFDUkEsRUFBUSxNQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxNQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsT0FDUkEsRUFBUSxPQUNSQSxFQUFRLE9BQ1JBLEVBQVEsTUFDUkEsRUFB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T0FBQUEsR0FBUUMsWUFBQUEsR0FDL0Usc0JBRVdvSSxjQUNiLENBUkRWLEVBQWVOLG9CQVdmLElBQU1pQixHQUFjMXNELFNBQVMra0QsY0FBYywyQkFDckM0SCxHQUFnQjNzRCxTQUFTK2tELGNBQWMsd0JBSXpDWCxHQUFTLEtBR1B3SSxHQUFVLElBQUk1RSxFQUFRLGFBQWEsU0FBQ08sR0FDeENxRSxHQUFRQyxRQUFRTCxHQUFXakUsR0FDNUIsSUFJRGdDLEVBQUl1QyxhQUNIcjVELE1BQUssWUFBNEIsSSxJQUFBLEcsRUFBQSxFLDRDQUFBLEksZ3hCQUExQnM1RCxFQUEwQixLQUFiQyxFQUFhLEtBQ2hDNUksR0FBUzJJLEVBQVlySCxJQUNyQmtILEdBQVFLLGFBQWFELEVBQ3RCLElBQ0E1QixPQUFNLFNBQVMxakIsR0FDZHA5QixRQUFRRSxJQUFJLFNBQVVrOUIsRUFDdkIsSUFPRCxJQUFNd2xCLEdBQW1CLElBQUluSCxFQUFjQyxFQUFRMEcsSUFDbkRRLEdBQWlCNUIsbUJBYWpCLElBQU02QixHQUFlLElBQUlyRSxFQUFjLG9CQUFxQiwyQkFWNUQsU0FBOEJLLEdBQzVCb0IsRUFBSTZDLFlBQVlqRSxHQUNmMTFELE1BQUssU0FBQ29HLEdBQ0wreUQsR0FBUUMsUUFBUUwsR0FBVzN5RCxHQUM1QixJQUNBdXhELE9BQU0sU0FBUzFqQixHQUNkcDlCLFFBQVFFLElBQUksU0FBVWs5QixFQUN2QixHQUNGLElBR0R5bEIsR0FBYTFCLG9CQUVia0IsR0FBY2pwQyxpQkFBaUIsU0FBUyxXQUN0Q3lwQyxHQUFhdjFDLE9BQ2JzMUMsR0FBaUJ2RixnQkFDbEIsRyIsInNvdXJjZXMiOlsid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZmVhdHVyZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mdWxsL2luZGV4LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1jYWxsYWJsZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hZHZhbmNlLXN0cmluZy1pbmRleC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLWJhc2ljLWRldGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1idWZmZXItbm9uLWV4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktZmlsbC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1mcm9tLWFzeW5jLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWZyb20tY29uc3RydWN0b3ItYW5kLWxpc3QuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktZnJvbS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1ncm91cC10by1tYXAuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktZ3JvdXAuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uLWZyb20tbGFzdC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbGFzdC1pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXJlZHVjZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zZXQtbGVuZ3RoLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNsaWNlLXNpbXBsZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zbGljZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zb3J0LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktdG8tcmV2ZXJzZWQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktdW5pcXVlLWJ5LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXdpdGguanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXN5bmMtZnJvbS1zeW5jLWl0ZXJhdG9yLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FzeW5jLWl0ZXJhdG9yLWNsb3NlLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FzeW5jLWl0ZXJhdG9yLWNyZWF0ZS1wcm94eS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hc3luYy1pdGVyYXRvci1pbmRleGVkLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FzeW5jLWl0ZXJhdG9yLWl0ZXJhdGlvbi5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hc3luYy1pdGVyYXRvci1wcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXN5bmMtaXRlcmF0b3Itd3JhcC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9iYXNlNjQtbWFwLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NhbGwtd2l0aC1zYWZlLWl0ZXJhdGlvbi1jbG9zaW5nLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbi5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLXJhdy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvbGxlY3Rpb24tYWRkLWFsbC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb2xsZWN0aW9uLWRlbGV0ZS1hbGwuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29sbGVjdGlvbi1mcm9tLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvbGxlY3Rpb24tb2YuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29sbGVjdGlvbi1zdHJvbmcuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29sbGVjdGlvbi13ZWFrLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29tcG9zaXRlLWtleS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29ycmVjdC1pcy1yZWdleHAtbG9naWMuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1odG1sLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1pdGVyLXJlc3VsdC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kYXRlLXRvLWlzby1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGF0ZS10by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluLWFjY2Vzc29yLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbi5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW5zLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS1nbG9iYWwtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVsZXRlLXByb3BlcnR5LW9yLXRocm93LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvY3VtZW50LWFsbC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb2VzLW5vdC1leGNlZWQtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvbS1leGNlcHRpb24tY29uc3RhbnRzLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9tLXRva2VuLWxpc3QtcHJvdG90eXBlLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1mZi12ZXJzaW9uLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy1icm93c2VyLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy1kZW5vLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy1pZS1vci1lZGdlLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MtcGViYmxlLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLXdlYm9zLXdlYmtpdC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtd2Via2l0LXZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW50cnktdmlydHVhbC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Vycm9yLXN0YWNrLWNsZWFyLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Vycm9yLXN0YWNrLWluc3RhbGxhYmxlLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Vycm9yLXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9leHBvcnQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZmFpbHMuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mbGF0dGVuLWludG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnJlZXppbmcuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHkuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1uYW1lLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1pdGVyYXRvci1kaXJlY3QuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LW1hcC1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtbWV0aG9kLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1zZXQtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LXN1YnN0aXR1dGlvbi5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oaWRkZW4ta2V5cy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9ob3N0LXJlcG9ydC1lcnJvcnMuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaHRtbC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pZWVlNzU0LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luaGVyaXQtaWYtcmVxdWlyZWQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5zdGFsbC1lcnJvci1jYXVzZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYmlnLWludC1hcnJheS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1jYWxsYWJsZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1kYXRhLWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtZm9yY2VkLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWludGVncmFsLW51bWJlci5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1udWxsLW9yLXVuZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtcHVyZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtc3ltYm9sLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdGUuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3ItY2xvc2UuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3ItY3JlYXRlLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9yLWNyZWF0ZS1wcm94eS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvci1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3ItaW5kZXhlZC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvcnMtY29yZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbWFrZS1idWlsdC1pbi5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9tYXAtZW1wbGFjZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9tYXAtdXBzZXJ0LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21hdGgtZXhwbTEuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbWF0aC1mcm91bmQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbWF0aC1sb2cxMC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9tYXRoLWxvZzFwLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21hdGgtc2NhbGUuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbWF0aC1zaWduLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21hdGgtdHJ1bmMuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbWljcm90YXNrLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHkuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbm9ybWFsaXplLXN0cmluZy1hcmd1bWVudC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9ub3QtYS1uYW4uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbm90LWEtcmVnZXhwLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL251bWJlci1pcy1maW5pdGUuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbnVtYmVyLXBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL251bWJlci1wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbnVtZXJpYy1yYW5nZS1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtYXNzaWduLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWl0ZXJhdG9yLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1wcm90b3R5cGUtYWNjZXNzb3JzLWZvcmNlZC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtdG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYnNlcnZhYmxlLWZvcmNlZC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vcmRpbmFyeS10by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGF0aC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wZXJmb3JtLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Byb21pc2UtY29uc3RydWN0b3ItZGV0ZWN0aW9uLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Byb21pc2UtbmF0aXZlLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wcm9taXNlLXN0YXRpY3MtaW5jb3JyZWN0LWl0ZXJhdGlvbi5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wcm94eS1hY2Nlc3Nvci5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9xdWV1ZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWZsZWN0LW1ldGFkYXRhLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1leGVjLWFic3RyYWN0LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1leGVjLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1mbGFncy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZ2V0LWZsYWdzLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1zdGlja3ktaGVscGVycy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtdW5zdXBwb3J0ZWQtZG90LWFsbC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtdW5zdXBwb3J0ZWQtbmNnLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zYW1lLXZhbHVlLXplcm8uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2FtZS12YWx1ZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zY2hlZHVsZXJzLWZpeC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtc3BlY2llcy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQta2V5LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1zdG9yZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctcGFkLXdlYmtpdC1idWcuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLXBhZC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctcHVueWNvZGUtdG8tYXNjaWkuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLXJlcGVhdC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctdHJpbS1lbmQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLXRyaW0tZm9yY2VkLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy10cmltLXN0YXJ0LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy10cmltLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N5bWJvbC1jb25zdHJ1Y3Rvci1kZXRlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3ltYm9sLWRlZmluZS10by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3ltYm9sLXJlZ2lzdHJ5LWRldGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90YXNrLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RoaXMtbnVtYmVyLXZhbHVlLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWJpZy1pbnQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW5kZXguanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tb2JqZWN0LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLW9mZnNldC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wb3NpdGl2ZS1pbnRlZ2VyLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXkuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90cnktbm9kZS1yZXF1aXJlLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RyeS10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3JzLXJlcXVpcmUtd3JhcHBlcnMuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdHlwZWQtYXJyYXktZnJvbS1zcGVjaWVzLWFuZC1saXN0LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3R5cGVkLWFycmF5LWZyb20uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdHlwZWQtYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91aWQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdXJsLWNvbnN0cnVjdG9yLWRldGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy92OC1wcm90b3R5cGUtZGVmaW5lLWJ1Zy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy92YWxpZGF0ZS1hcmd1bWVudHMtbGVuZ3RoLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlYWstbWFwLWJhc2ljLWRldGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtd3JhcHBlZC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93aGl0ZXNwYWNlcy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93cmFwLWVycm9yLWNvbnN0cnVjdG9yLXdpdGgtY2F1c2UuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFnZ3JlZ2F0ZS1lcnJvci5jYXVzZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYWdncmVnYXRlLWVycm9yLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hZ2dyZWdhdGUtZXJyb3IuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LWJ1ZmZlci5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXktYnVmZmVyLmlzLXZpZXcuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LWJ1ZmZlci5zbGljZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuYXQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmV2ZXJ5LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWxsLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQtaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQtbGFzdC1pbmRleC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC1sYXN0LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maW5kLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mbGF0LW1hcC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmxhdC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5qb2luLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5sYXN0LWluZGV4LW9mLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm9mLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5wdXNoLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5yZWR1Y2UtcmlnaHQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnJlZHVjZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucmV2ZXJzZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNvbWUuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNvcnQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkudW5zY29wYWJsZXMuZmxhdC1tYXAuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnVuc2NvcGFibGVzLmZsYXQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnVuc2hpZnQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmRhdGEtdmlldy5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZGF0YS12aWV3LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5kYXRlLmdldC15ZWFyLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5kYXRlLm5vdy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS5zZXQteWVhci5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS50by1nbXQtc3RyaW5nLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5kYXRlLnRvLWlzby1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmRhdGUudG8tanNvbi5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS50by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmRhdGUudG8tc3RyaW5nLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5lcnJvci5jYXVzZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZXJyb3IudG8tc3RyaW5nLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5lc2NhcGUuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLmJpbmQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLmhhcy1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZ2xvYmFsLXRoaXMuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmpzb24uc3RyaW5naWZ5LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5qc29uLnRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hcC5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWFwLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmFjb3NoLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmFzaW5oLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmF0YW5oLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmNicnQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguY2x6MzIuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguY29zaC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5leHBtMS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5mcm91bmQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguaHlwb3QuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguaW11bC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5sb2cxMC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5sb2cxcC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5sb2cyLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLnNpZ24uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguc2luaC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC50YW5oLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLnRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGgudHJ1bmMuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmVwc2lsb24uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5pcy1maW5pdGUuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5pcy1pbnRlZ2VyLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuaXMtbmFuLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIubWF4LXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLm1pbi1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLnBhcnNlLWludC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLnRvLWV4cG9uZW50aWFsLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIudG8tZml4ZWQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci50by1wcmVjaXNpb24uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtZ2V0dGVyLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtc2V0dGVyLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZW50cmllcy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmZyZWV6ZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmZyb20tZW50cmllcy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0Lmhhcy1vd24uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuaXMtZnJvemVuLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuaXMtc2VhbGVkLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuaXMuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5rZXlzLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QubG9va3VwLWdldHRlci5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0Lmxvb2t1cC1zZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5wcm90by5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnNlYWwuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudmFsdWVzLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucGFyc2UtaW50LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wcm9taXNlLmFsbC1zZXR0bGVkLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wcm9taXNlLmFsbC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5hbnkuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UuY2F0Y2guanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UuZmluYWxseS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5yYWNlLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wcm9taXNlLnJlamVjdC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5yZXNvbHZlLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LmFwcGx5LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LmNvbnN0cnVjdC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LmdldC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5oYXMuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5zZXQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QudG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZG90LWFsbC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5mbGFncy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLnN0aWNreS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLnRlc3QuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnNldC5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc2V0LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuYW5jaG9yLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuYXQtYWx0ZXJuYXRpdmUuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5iaWcuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5ibGluay5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmJvbGQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5jb2RlLXBvaW50LWF0LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuZW5kcy13aXRoLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuZml4ZWQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5mb250Y29sb3IuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5mb250c2l6ZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmZyb20tY29kZS1wb2ludC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRhbGljcy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcubGluay5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLm1hdGNoLWFsbC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLm1hdGNoLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucGFkLWVuZC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnBhZC1zdGFydC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJhdy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGVhdC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UtYWxsLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNlYXJjaC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNtYWxsLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zdGFydHMtd2l0aC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnN0cmlrZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnN1Yi5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnN1YnN0ci5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnN1cC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0tZW5kLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcudHJpbS1sZWZ0LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcudHJpbS1yaWdodC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0tc3RhcnQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuZm9yLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuaGFzLWluc3RhbmNlLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuaXMtY29uY2F0LXNwcmVhZGFibGUuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wua2V5LWZvci5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLm1hdGNoLWFsbC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLm1hdGNoLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wucmVwbGFjZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLnNlYXJjaC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLnNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5zcGxpdC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLnRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLnRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC51bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuYXQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmNvcHktd2l0aGluLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5ldmVyeS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmlsbC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmlsdGVyLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maW5kLWluZGV4LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maW5kLWxhc3QtaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbmQtbGFzdC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmluZC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmxvYXQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmxvYXQ2NC1hcnJheS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmluY2x1ZGVzLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmludDMyLWFycmF5LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbnQ4LWFycmF5LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuam9pbi5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkubGFzdC1pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkubWFwLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5vZi5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmVkdWNlLXJpZ2h0LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnJldmVyc2UuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNldC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc2xpY2UuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNvbWUuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNvcnQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnN1YmFycmF5LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS50by1sb2NhbGUtc3RyaW5nLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnVpbnQxNi1hcnJheS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDMyLWFycmF5LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS51aW50OC1hcnJheS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDgtY2xhbXBlZC1hcnJheS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudW5lc2NhcGUuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLndlYWstbWFwLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy53ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMud2Vhay1zZXQuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLndlYWstc2V0LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuYWdncmVnYXRlLWVycm9yLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuYXJyYXkuYXQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5hcnJheS5maWx0ZXItb3V0LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuYXJyYXkuZmlsdGVyLXJlamVjdC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LmFycmF5LmZpbmQtbGFzdC1pbmRleC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LmFycmF5LmZpbmQtbGFzdC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LmFycmF5LmZyb20tYXN5bmMuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5hcnJheS5ncm91cC1ieS10by1tYXAuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5hcnJheS5ncm91cC1ieS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LmFycmF5Lmdyb3VwLXRvLW1hcC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LmFycmF5Lmdyb3VwLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuYXJyYXkuaXMtdGVtcGxhdGUtb2JqZWN0LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuYXJyYXkubGFzdC1pbmRleC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LmFycmF5Lmxhc3QtaXRlbS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LmFycmF5LnRvLXJldmVyc2VkLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuYXJyYXkudG8tc29ydGVkLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuYXJyYXkudG8tc3BsaWNlZC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LmFycmF5LnVuaXF1ZS1ieS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LmFycmF5LndpdGguanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5hc3luYy1pdGVyYXRvci5hcy1pbmRleGVkLXBhaXJzLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuYXN5bmMtaXRlcmF0b3IuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5hc3luYy1pdGVyYXRvci5kcm9wLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuYXN5bmMtaXRlcmF0b3IuZXZlcnkuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5hc3luYy1pdGVyYXRvci5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5hc3luYy1pdGVyYXRvci5maW5kLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuYXN5bmMtaXRlcmF0b3IuZmxhdC1tYXAuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5hc3luYy1pdGVyYXRvci5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LmFzeW5jLWl0ZXJhdG9yLmZyb20uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5hc3luYy1pdGVyYXRvci5pbmRleGVkLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuYXN5bmMtaXRlcmF0b3IubWFwLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuYXN5bmMtaXRlcmF0b3IucmVkdWNlLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuYXN5bmMtaXRlcmF0b3Iuc29tZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LmFzeW5jLWl0ZXJhdG9yLnRha2UuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5hc3luYy1pdGVyYXRvci50by1hcnJheS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LmJpZ2ludC5yYW5nZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LmNvbXBvc2l0ZS1rZXkuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5jb21wb3NpdGUtc3ltYm9sLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuZnVuY3Rpb24uaXMtY2FsbGFibGUuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5mdW5jdGlvbi5pcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LmZ1bmN0aW9uLnVuLXRoaXMuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5nbG9iYWwtdGhpcy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lml0ZXJhdG9yLmFzLWluZGV4ZWQtcGFpcnMuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5pdGVyYXRvci5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lml0ZXJhdG9yLmRyb3AuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5pdGVyYXRvci5ldmVyeS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lml0ZXJhdG9yLmZpbHRlci5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lml0ZXJhdG9yLmZpbmQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5pdGVyYXRvci5mbGF0LW1hcC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lml0ZXJhdG9yLmZvci1lYWNoLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuaXRlcmF0b3IuZnJvbS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lml0ZXJhdG9yLmluZGV4ZWQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5pdGVyYXRvci5tYXAuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5pdGVyYXRvci5yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5pdGVyYXRvci5zb21lLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuaXRlcmF0b3IudGFrZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lml0ZXJhdG9yLnRvLWFycmF5LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuaXRlcmF0b3IudG8tYXN5bmMuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5tYXAuZGVsZXRlLWFsbC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lm1hcC5lbXBsYWNlLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWFwLmV2ZXJ5LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWFwLmZpbHRlci5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lm1hcC5maW5kLWtleS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lm1hcC5maW5kLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWFwLmZyb20uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5tYXAuZ3JvdXAtYnkuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5tYXAuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5tYXAua2V5LWJ5LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWFwLmtleS1vZi5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lm1hcC5tYXAta2V5cy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lm1hcC5tYXAtdmFsdWVzLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWFwLm1lcmdlLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWFwLm9mLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWFwLnJlZHVjZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lm1hcC5zb21lLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWFwLnVwZGF0ZS1vci1pbnNlcnQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5tYXAudXBkYXRlLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWFwLnVwc2VydC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lm1hdGguY2xhbXAuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5tYXRoLmRlZy1wZXItcmFkLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWF0aC5kZWdyZWVzLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWF0aC5mc2NhbGUuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5tYXRoLmlhZGRoLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWF0aC5pbXVsaC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lm1hdGguaXN1YmguanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5tYXRoLnJhZC1wZXItZGVnLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWF0aC5yYWRpYW5zLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWF0aC5zY2FsZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lm1hdGguc2VlZGVkLXBybmcuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5tYXRoLnNpZ25iaXQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5tYXRoLnVtdWxoLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubnVtYmVyLmZyb20tc3RyaW5nLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubnVtYmVyLnJhbmdlLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQub2JqZWN0Lmhhcy1vd24uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5vYmplY3QuaXRlcmF0ZS1lbnRyaWVzLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQub2JqZWN0Lml0ZXJhdGUta2V5cy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lm9iamVjdC5pdGVyYXRlLXZhbHVlcy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lm9ic2VydmFibGUuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5vYnNlcnZhYmxlLmZyb20uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5vYnNlcnZhYmxlLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQub2JzZXJ2YWJsZS5vZi5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnByb21pc2UuYWxsLXNldHRsZWQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5wcm9taXNlLmFueS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnByb21pc2UudHJ5LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQucmVmbGVjdC5kZWZpbmUtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5yZWZsZWN0LmRlbGV0ZS1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLWtleXMuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5yZWZsZWN0LmdldC1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQucmVmbGVjdC5oYXMtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5yZWZsZWN0Lmhhcy1vd24tbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5yZWZsZWN0Lm1ldGFkYXRhLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc2V0LmFkZC1hbGwuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zZXQuZGVsZXRlLWFsbC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnNldC5kaWZmZXJlbmNlLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc2V0LmV2ZXJ5LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc2V0LmZpbHRlci5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnNldC5maW5kLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc2V0LmZyb20uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zZXQuaW50ZXJzZWN0aW9uLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc2V0LmlzLWRpc2pvaW50LWZyb20uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zZXQuaXMtc3Vic2V0LW9mLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc2V0LmlzLXN1cGVyc2V0LW9mLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc2V0LmpvaW4uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zZXQubWFwLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc2V0Lm9mLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc2V0LnJlZHVjZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnNldC5zb21lLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc2V0LnN5bW1ldHJpYy1kaWZmZXJlbmNlLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc2V0LnVuaW9uLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc3RyaW5nLmF0LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc3RyaW5nLmNvZGUtcG9pbnRzLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc3RyaW5nLmNvb2tlZC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnN0cmluZy5tYXRjaC1hbGwuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zdHJpbmcucmVwbGFjZS1hbGwuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zeW1ib2wuYXN5bmMtZGlzcG9zZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnN5bWJvbC5kaXNwb3NlLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc3ltYm9sLm1hdGNoZXIuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zeW1ib2wubWV0YWRhdGEta2V5LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc3ltYm9sLm1ldGFkYXRhLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc3ltYm9sLm9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zeW1ib2wucGF0dGVybi1tYXRjaC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnN5bWJvbC5yZXBsYWNlLWFsbC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnR5cGVkLWFycmF5LmF0LmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQudHlwZWQtYXJyYXkuZmlsdGVyLW91dC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnR5cGVkLWFycmF5LmZpbHRlci1yZWplY3QuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC50eXBlZC1hcnJheS5maW5kLWxhc3QtaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC50eXBlZC1hcnJheS5maW5kLWxhc3QuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC50eXBlZC1hcnJheS5mcm9tLWFzeW5jLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQudHlwZWQtYXJyYXkuZ3JvdXAtYnkuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC50eXBlZC1hcnJheS50by1yZXZlcnNlZC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnR5cGVkLWFycmF5LnRvLXNvcnRlZC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnR5cGVkLWFycmF5LnRvLXNwbGljZWQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC50eXBlZC1hcnJheS51bmlxdWUtYnkuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC50eXBlZC1hcnJheS53aXRoLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQud2Vhay1tYXAuZGVsZXRlLWFsbC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LndlYWstbWFwLmVtcGxhY2UuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC53ZWFrLW1hcC5mcm9tLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQud2Vhay1tYXAub2YuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC53ZWFrLW1hcC51cHNlcnQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC53ZWFrLXNldC5hZGQtYWxsLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQud2Vhay1zZXQuZGVsZXRlLWFsbC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LndlYWstc2V0LmZyb20uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC53ZWFrLXNldC5vZi5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmF0b2IuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5idG9hLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuY2xlYXItaW1tZWRpYXRlLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWV4Y2VwdGlvbi5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1leGNlcHRpb24uc3RhY2suanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tZXhjZXB0aW9uLnRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5pbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5xdWV1ZS1taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5zZXQtaW1tZWRpYXRlLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuc2V0LWludGVydmFsLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuc2V0LXRpbWVvdXQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5zdHJ1Y3R1cmVkLWNsb25lLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzLmpzIiwid2VicGFjazovL21lc3RvLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudXJsLXNlYXJjaC1wYXJhbXMuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi51cmwtc2VhcmNoLXBhcmFtcy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLnVybC5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLnVybC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLnVybC50by1qc29uLmpzIiwid2VicGFjazovL21lc3RvL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL21lc3RvL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vbWVzdG8vd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9DYXJkLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9Qb3B1cC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL1VzZXJJbmZvLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL3V0aWxzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL2FwaS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL2Z1bGwnKTtcbiIsInJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5kZXNjcmlwdGlvbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wuYXN5bmMtaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLmhhcy1pbnN0YW5jZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wuaXMtY29uY2F0LXNwcmVhZGFibGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5tYXRjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wubWF0Y2gtYWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5yZXBsYWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5zZWFyY2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLnNwZWNpZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLnNwbGl0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC50by1wcmltaXRpdmUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLnRvLXN0cmluZy10YWcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLnVuc2NvcGFibGVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmVycm9yLmNhdXNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmVycm9yLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hZ2dyZWdhdGUtZXJyb3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYWdncmVnYXRlLWVycm9yLmNhdXNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmF0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5jb3B5LXdpdGhpbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5ldmVyeScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5maWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmZpbHRlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5maW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmZpbmQtaW5kZXgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuZmluZC1sYXN0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmZpbmQtbGFzdC1pbmRleCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5mbGF0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmZsYXQtbWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmZvci1lYWNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmZyb20nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuaXMtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuam9pbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5sYXN0LWluZGV4LW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lm1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5wdXNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LnJlZHVjZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5yZWR1Y2UtcmlnaHQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkucmV2ZXJzZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5zbGljZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5zb21lJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LnNvcnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuc3BlY2llcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5zcGxpY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkudW5zY29wYWJsZXMuZmxhdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS51bnNjb3BhYmxlcy5mbGF0LW1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS51bnNoaWZ0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LWJ1ZmZlci5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS1idWZmZXIuaXMtdmlldycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS1idWZmZXIuc2xpY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZGF0YS12aWV3Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmRhdGUuZ2V0LXllYXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZGF0ZS5ub3cnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZGF0ZS5zZXQteWVhcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5kYXRlLnRvLWdtdC1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZGF0ZS50by1pc28tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmRhdGUudG8tanNvbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5kYXRlLnRvLXByaW1pdGl2ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5kYXRlLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5lc2NhcGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZnVuY3Rpb24uYmluZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5mdW5jdGlvbi5oYXMtaW5zdGFuY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5nbG9iYWwtdGhpcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5qc29uLnN0cmluZ2lmeScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5qc29uLnRvLXN0cmluZy10YWcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGguYWNvc2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5hc2luaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmF0YW5oJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGguY2JydCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmNsejMyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGguY29zaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmV4cG0xJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGguZnJvdW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGguaHlwb3QnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5pbXVsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGgubG9nMTAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5sb2cxcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmxvZzInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5zaWduJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGguc2luaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLnRhbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC50by1zdHJpbmctdGFnJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGgudHJ1bmMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm51bWJlci5lcHNpbG9uJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm51bWJlci5pcy1maW5pdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubnVtYmVyLmlzLWludGVnZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubnVtYmVyLmlzLW5hbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm51bWJlci5taW4tc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm51bWJlci5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5udW1iZXIucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm51bWJlci50by1leHBvbmVudGlhbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5udW1iZXIudG8tZml4ZWQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubnVtYmVyLnRvLXByZWNpc2lvbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuYXNzaWduJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5jcmVhdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1nZXR0ZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1zZXR0ZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmVudHJpZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmZyZWV6ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuZnJvbS1lbnRyaWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0Lmhhcy1vd24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmlzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5pcy1mcm96ZW4nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmlzLXNlYWxlZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3Qua2V5cycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QubG9va3VwLWdldHRlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QubG9va3VwLXNldHRlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QucHJldmVudC1leHRlbnNpb25zJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5wcm90bycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3Quc2VhbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3Quc2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC52YWx1ZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnByb21pc2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucHJvbWlzZS5hbGwtc2V0dGxlZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5wcm9taXNlLmFueScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5wcm9taXNlLmZpbmFsbHknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5hcHBseScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmNvbnN0cnVjdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmdldCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5oYXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZmxlY3Qub3duLWtleXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZmxlY3QudG8tc3RyaW5nLXRhZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWdleHAuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLmRvdC1hbGwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLmZsYWdzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZ2V4cC5zdGlja3knKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLnRlc3QnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLmF0LWFsdGVybmF0aXZlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5jb2RlLXBvaW50LWF0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5lbmRzLXdpdGgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLmZyb20tY29kZS1wb2ludCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5tYXRjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcubWF0Y2gtYWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5wYWQtZW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5wYWQtc3RhcnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnJhdycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcucmVwZWF0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5yZXBsYWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5yZXBsYWNlLWFsbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuc2VhcmNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuc3RhcnRzLXdpdGgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnN1YnN0cicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcudHJpbScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcudHJpbS1lbmQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0tc3RhcnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLmFuY2hvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuYmlnJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5ibGluaycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuYm9sZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuZml4ZWQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLmZvbnRjb2xvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuZm9udHNpemUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLml0YWxpY3MnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLmxpbmsnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnNtYWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5zdHJpa2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnN1YicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuc3VwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZsb2F0MzItYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmxvYXQ2NC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbnQ4LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmludDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnVpbnQ4LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnVpbnQ4LWNsYW1wZWQtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnVpbnQzMi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5hdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5jb3B5LXdpdGhpbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5ldmVyeScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbHRlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbmQtaW5kZXgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmluZC1sYXN0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbmQtbGFzdC1pbmRleCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5mb3ItZWFjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5mcm9tJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmluY2x1ZGVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmluZGV4LW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5Lml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmpvaW4nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkubGFzdC1pbmRleC1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkub2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmVkdWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnJlZHVjZS1yaWdodCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5yZXZlcnNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNldCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zbGljZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zb21lJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNvcnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc3ViYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudG8tbG9jYWxlLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudW5lc2NhcGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMud2Vhay1tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMud2Vhay1zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0LmFnZ3JlZ2F0ZS1lcnJvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuYXJyYXkuZnJvbS1hc3luYycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuYXJyYXkuYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0LmFycmF5LmZpbHRlci1vdXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0LmFycmF5LmZpbHRlci1yZWplY3QnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0LmFycmF5LmZpbmQtbGFzdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuYXJyYXkuZmluZC1sYXN0LWluZGV4Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5hcnJheS5ncm91cCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuYXJyYXkuZ3JvdXAtYnknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0LmFycmF5Lmdyb3VwLWJ5LXRvLW1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuYXJyYXkuZ3JvdXAtdG8tbWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5hcnJheS5pcy10ZW1wbGF0ZS1vYmplY3QnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0LmFycmF5Lmxhc3QtaW5kZXgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0LmFycmF5Lmxhc3QtaXRlbScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuYXJyYXkudG8tcmV2ZXJzZWQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0LmFycmF5LnRvLXNvcnRlZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuYXJyYXkudG8tc3BsaWNlZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuYXJyYXkudW5pcXVlLWJ5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5hcnJheS53aXRoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5hc3luYy1pdGVyYXRvci5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuYXN5bmMtaXRlcmF0b3IuYXMtaW5kZXhlZC1wYWlycycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuYXN5bmMtaXRlcmF0b3IuZHJvcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuYXN5bmMtaXRlcmF0b3IuZXZlcnknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0LmFzeW5jLWl0ZXJhdG9yLmZpbHRlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuYXN5bmMtaXRlcmF0b3IuZmluZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuYXN5bmMtaXRlcmF0b3IuZmxhdC1tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0LmFzeW5jLWl0ZXJhdG9yLmZvci1lYWNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5hc3luYy1pdGVyYXRvci5mcm9tJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5hc3luYy1pdGVyYXRvci5pbmRleGVkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5hc3luYy1pdGVyYXRvci5tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0LmFzeW5jLWl0ZXJhdG9yLnJlZHVjZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuYXN5bmMtaXRlcmF0b3Iuc29tZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuYXN5bmMtaXRlcmF0b3IudGFrZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuYXN5bmMtaXRlcmF0b3IudG8tYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0LmJpZ2ludC5yYW5nZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuY29tcG9zaXRlLWtleScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuY29tcG9zaXRlLXN5bWJvbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuZnVuY3Rpb24uaXMtY2FsbGFibGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0LmZ1bmN0aW9uLmlzLWNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5mdW5jdGlvbi51bi10aGlzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5nbG9iYWwtdGhpcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuaXRlcmF0b3IuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0Lml0ZXJhdG9yLmFzLWluZGV4ZWQtcGFpcnMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0Lml0ZXJhdG9yLmRyb3AnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0Lml0ZXJhdG9yLmV2ZXJ5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5pdGVyYXRvci5maWx0ZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0Lml0ZXJhdG9yLmZpbmQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0Lml0ZXJhdG9yLmZsYXQtbWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5pdGVyYXRvci5mb3ItZWFjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuaXRlcmF0b3IuZnJvbScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuaXRlcmF0b3IuaW5kZXhlZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuaXRlcmF0b3IubWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5pdGVyYXRvci5yZWR1Y2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0Lml0ZXJhdG9yLnNvbWUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0Lml0ZXJhdG9yLnRha2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0Lml0ZXJhdG9yLnRvLWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5pdGVyYXRvci50by1hc3luYycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQubWFwLmRlbGV0ZS1hbGwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0Lm1hcC5lbXBsYWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5tYXAuZXZlcnknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0Lm1hcC5maWx0ZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0Lm1hcC5maW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5tYXAuZmluZC1rZXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0Lm1hcC5mcm9tJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5tYXAuZ3JvdXAtYnknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0Lm1hcC5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQubWFwLmtleS1ieScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQubWFwLmtleS1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQubWFwLm1hcC1rZXlzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5tYXAubWFwLXZhbHVlcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQubWFwLm1lcmdlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5tYXAub2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0Lm1hcC5yZWR1Y2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0Lm1hcC5zb21lJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5tYXAudXBkYXRlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5tYXAudXBkYXRlLW9yLWluc2VydCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQubWFwLnVwc2VydCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQubWF0aC5jbGFtcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQubWF0aC5kZWctcGVyLXJhZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQubWF0aC5kZWdyZWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5tYXRoLmZzY2FsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQubWF0aC5pYWRkaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQubWF0aC5pbXVsaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQubWF0aC5pc3ViaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQubWF0aC5yYWQtcGVyLWRlZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQubWF0aC5yYWRpYW5zJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5tYXRoLnNjYWxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5tYXRoLnNlZWRlZC1wcm5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5tYXRoLnNpZ25iaXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0Lm1hdGgudW11bGgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0Lm51bWJlci5mcm9tLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQubnVtYmVyLnJhbmdlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5vYmplY3QuaGFzLW93bicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQub2JqZWN0Lml0ZXJhdGUtZW50cmllcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQub2JqZWN0Lml0ZXJhdGUta2V5cycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQub2JqZWN0Lml0ZXJhdGUtdmFsdWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5vYnNlcnZhYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5wcm9taXNlLmFsbC1zZXR0bGVkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5wcm9taXNlLmFueScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQucHJvbWlzZS50cnknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0LnJlZmxlY3QuZGVmaW5lLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5yZWZsZWN0LmRlbGV0ZS1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQucmVmbGVjdC5nZXQtbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLWtleXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLWtleXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0LnJlZmxlY3QuaGFzLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5yZWZsZWN0Lmhhcy1vd24tbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0LnJlZmxlY3QubWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0LnNldC5hZGQtYWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5zZXQuZGVsZXRlLWFsbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuc2V0LmRpZmZlcmVuY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0LnNldC5ldmVyeScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuc2V0LmZpbHRlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuc2V0LmZpbmQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0LnNldC5mcm9tJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5zZXQuaW50ZXJzZWN0aW9uJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5zZXQuaXMtZGlzam9pbnQtZnJvbScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuc2V0LmlzLXN1YnNldC1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuc2V0LmlzLXN1cGVyc2V0LW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5zZXQuam9pbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuc2V0Lm1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuc2V0Lm9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5zZXQucmVkdWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5zZXQuc29tZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuc2V0LnN5bW1ldHJpYy1kaWZmZXJlbmNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5zZXQudW5pb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0LnN0cmluZy5hdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuc3RyaW5nLmNvb2tlZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuc3RyaW5nLmNvZGUtcG9pbnRzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5zdHJpbmcubWF0Y2gtYWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5zdHJpbmcucmVwbGFjZS1hbGwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0LnN5bWJvbC5hc3luYy1kaXNwb3NlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5zeW1ib2wuZGlzcG9zZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuc3ltYm9sLm1hdGNoZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0LnN5bWJvbC5tZXRhZGF0YScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuc3ltYm9sLm1ldGFkYXRhLWtleScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQuc3ltYm9sLm9ic2VydmFibGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0LnN5bWJvbC5wYXR0ZXJuLW1hdGNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5zeW1ib2wucmVwbGFjZS1hbGwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0LnR5cGVkLWFycmF5LmZyb20tYXN5bmMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0LnR5cGVkLWFycmF5LmF0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC50eXBlZC1hcnJheS5maWx0ZXItb3V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC50eXBlZC1hcnJheS5maWx0ZXItcmVqZWN0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC50eXBlZC1hcnJheS5maW5kLWxhc3QnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0LnR5cGVkLWFycmF5LmZpbmQtbGFzdC1pbmRleCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQudHlwZWQtYXJyYXkuZ3JvdXAtYnknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0LnR5cGVkLWFycmF5LnRvLXJldmVyc2VkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC50eXBlZC1hcnJheS50by1zb3J0ZWQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0LnR5cGVkLWFycmF5LnRvLXNwbGljZWQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0LnR5cGVkLWFycmF5LnVuaXF1ZS1ieScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQudHlwZWQtYXJyYXkud2l0aCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQud2Vhay1tYXAuZGVsZXRlLWFsbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQud2Vhay1tYXAuZnJvbScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQud2Vhay1tYXAub2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0LndlYWstbWFwLmVtcGxhY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0LndlYWstbWFwLnVwc2VydCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQud2Vhay1zZXQuYWRkLWFsbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQud2Vhay1zZXQuZGVsZXRlLWFsbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQud2Vhay1zZXQuZnJvbScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lc25leHQud2Vhay1zZXQub2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmF0b2InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmJ0b2EnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20tZXhjZXB0aW9uLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20tZXhjZXB0aW9uLnN0YWNrJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20tZXhjZXB0aW9uLnRvLXN0cmluZy10YWcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmltbWVkaWF0ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIucXVldWUtbWljcm90YXNrJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5zdHJ1Y3R1cmVkLWNsb25lJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi50aW1lcnMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLnVybCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIudXJsLnRvLWpzb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLnVybC1zZWFyY2gtcGFyYW1zJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BhdGgnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mZWF0dXJlcycpO1xuIiwidmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciB0cnlUb1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90cnktdG8tc3RyaW5nJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBgQXNzZXJ0OiBJc0NhbGxhYmxlKGFyZ3VtZW50KSBpcyB0cnVlYFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgaWYgKGlzQ2FsbGFibGUoYXJndW1lbnQpKSByZXR1cm4gYXJndW1lbnQ7XG4gIHRocm93ICRUeXBlRXJyb3IodHJ5VG9TdHJpbmcoYXJndW1lbnQpICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xufTtcbiIsInZhciBpc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNvbnN0cnVjdG9yJyk7XG52YXIgdHJ5VG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHJ5LXRvLXN0cmluZycpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuLy8gYEFzc2VydDogSXNDb25zdHJ1Y3Rvcihhcmd1bWVudCkgaXMgdHJ1ZWBcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIGlmIChpc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSkgcmV0dXJuIGFyZ3VtZW50O1xuICB0aHJvdyAkVHlwZUVycm9yKHRyeVRvU3RyaW5nKGFyZ3VtZW50KSArICcgaXMgbm90IGEgY29uc3RydWN0b3InKTtcbn07XG4iLCJ2YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xuXG52YXIgJFN0cmluZyA9IFN0cmluZztcbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAodHlwZW9mIGFyZ3VtZW50ID09ICdvYmplY3QnIHx8IGlzQ2FsbGFibGUoYXJndW1lbnQpKSByZXR1cm4gYXJndW1lbnQ7XG4gIHRocm93ICRUeXBlRXJyb3IoXCJDYW4ndCBzZXQgXCIgKyAkU3RyaW5nKGFyZ3VtZW50KSArICcgYXMgYSBwcm90b3R5cGUnKTtcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxudmFyIFVOU0NPUEFCTEVTID0gd2VsbEtub3duU3ltYm9sKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmlmIChBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSB7XG4gIGRlZmluZVByb3BlcnR5KEFycmF5UHJvdG90eXBlLCBVTlNDT1BBQkxFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogY3JlYXRlKG51bGwpXG4gIH0pO1xufVxuXG4vLyBhZGQgYSBrZXkgdG8gQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b3R5cGVbVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjaGFyQXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZScpLmNoYXJBdDtcblxuLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFkdmFuY2VzdHJpbmdpbmRleFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUywgaW5kZXgsIHVuaWNvZGUpIHtcbiAgcmV0dXJuIGluZGV4ICsgKHVuaWNvZGUgPyBjaGFyQXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcbiIsInZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBQcm90b3R5cGUpIHtcbiAgaWYgKGlzUHJvdG90eXBlT2YoUHJvdG90eXBlLCBpdCkpIHJldHVybiBpdDtcbiAgdGhyb3cgJFR5cGVFcnJvcignSW5jb3JyZWN0IGludm9jYXRpb24nKTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciAkU3RyaW5nID0gU3RyaW5nO1xudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbi8vIGBBc3NlcnQ6IFR5cGUoYXJndW1lbnQpIGlzIE9iamVjdGBcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIGlmIChpc09iamVjdChhcmd1bWVudCkpIHJldHVybiBhcmd1bWVudDtcbiAgdGhyb3cgJFR5cGVFcnJvcigkU3RyaW5nKGFyZ3VtZW50KSArICcgaXMgbm90IGFuIG9iamVjdCcpO1xufTtcbiIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLXR5cGVkLWFycmF5cyAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBBcnJheUJ1ZmZlciAhPSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgRGF0YVZpZXcgIT0gJ3VuZGVmaW5lZCc7XG4iLCIvLyBGRjI2LSBidWc6IEFycmF5QnVmZmVycyBhcmUgbm9uLWV4dGVuc2libGUsIGJ1dCBPYmplY3QuaXNFeHRlbnNpYmxlIGRvZXMgbm90IHJlcG9ydCBpdFxudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyID09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKDgpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW9iamVjdC1pc2V4dGVuc2libGUsIGVzLXgvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbiAgICBpZiAoT2JqZWN0LmlzRXh0ZW5zaWJsZShidWZmZXIpKSBPYmplY3QuZGVmaW5lUHJvcGVydHkoYnVmZmVyLCAnYScsIHsgdmFsdWU6IDggfSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIE5BVElWRV9BUlJBWV9CVUZGRVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLWJhc2ljLWRldGVjdGlvbicpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIHRyeVRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RyeS10by1zdHJpbmcnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIGVuZm9yY2VJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5lbmZvcmNlO1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBJbnQ4QXJyYXkgPSBnbG9iYWwuSW50OEFycmF5O1xudmFyIEludDhBcnJheVByb3RvdHlwZSA9IEludDhBcnJheSAmJiBJbnQ4QXJyYXkucHJvdG90eXBlO1xudmFyIFVpbnQ4Q2xhbXBlZEFycmF5ID0gZ2xvYmFsLlVpbnQ4Q2xhbXBlZEFycmF5O1xudmFyIFVpbnQ4Q2xhbXBlZEFycmF5UHJvdG90eXBlID0gVWludDhDbGFtcGVkQXJyYXkgJiYgVWludDhDbGFtcGVkQXJyYXkucHJvdG90eXBlO1xudmFyIFR5cGVkQXJyYXkgPSBJbnQ4QXJyYXkgJiYgZ2V0UHJvdG90eXBlT2YoSW50OEFycmF5KTtcbnZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gSW50OEFycmF5UHJvdG90eXBlICYmIGdldFByb3RvdHlwZU9mKEludDhBcnJheVByb3RvdHlwZSk7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciBUWVBFRF9BUlJBWV9UQUcgPSB1aWQoJ1RZUEVEX0FSUkFZX1RBRycpO1xudmFyIFRZUEVEX0FSUkFZX0NPTlNUUlVDVE9SID0gJ1R5cGVkQXJyYXlDb25zdHJ1Y3Rvcic7XG4vLyBGaXhpbmcgbmF0aXZlIHR5cGVkIGFycmF5cyBpbiBPcGVyYSBQcmVzdG8gY3Jhc2hlcyB0aGUgYnJvd3Nlciwgc2VlICM1OTVcbnZhciBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTID0gTkFUSVZFX0FSUkFZX0JVRkZFUiAmJiAhIXNldFByb3RvdHlwZU9mICYmIGNsYXNzb2YoZ2xvYmFsLm9wZXJhKSAhPT0gJ09wZXJhJztcbnZhciBUWVBFRF9BUlJBWV9UQUdfUkVRVUlSRUQgPSBmYWxzZTtcbnZhciBOQU1FLCBDb25zdHJ1Y3RvciwgUHJvdG90eXBlO1xuXG52YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QgPSB7XG4gIEludDhBcnJheTogMSxcbiAgVWludDhBcnJheTogMSxcbiAgVWludDhDbGFtcGVkQXJyYXk6IDEsXG4gIEludDE2QXJyYXk6IDIsXG4gIFVpbnQxNkFycmF5OiAyLFxuICBJbnQzMkFycmF5OiA0LFxuICBVaW50MzJBcnJheTogNCxcbiAgRmxvYXQzMkFycmF5OiA0LFxuICBGbG9hdDY0QXJyYXk6IDhcbn07XG5cbnZhciBCaWdJbnRBcnJheUNvbnN0cnVjdG9yc0xpc3QgPSB7XG4gIEJpZ0ludDY0QXJyYXk6IDgsXG4gIEJpZ1VpbnQ2NEFycmF5OiA4XG59O1xuXG52YXIgaXNWaWV3ID0gZnVuY3Rpb24gaXNWaWV3KGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gZmFsc2U7XG4gIHZhciBrbGFzcyA9IGNsYXNzb2YoaXQpO1xuICByZXR1cm4ga2xhc3MgPT09ICdEYXRhVmlldydcbiAgICB8fCBoYXNPd24oVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QsIGtsYXNzKVxuICAgIHx8IGhhc093bihCaWdJbnRBcnJheUNvbnN0cnVjdG9yc0xpc3QsIGtsYXNzKTtcbn07XG5cbnZhciBnZXRUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHByb3RvID0gZ2V0UHJvdG90eXBlT2YoaXQpO1xuICBpZiAoIWlzT2JqZWN0KHByb3RvKSkgcmV0dXJuO1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHByb3RvKTtcbiAgcmV0dXJuIChzdGF0ZSAmJiBoYXNPd24oc3RhdGUsIFRZUEVEX0FSUkFZX0NPTlNUUlVDVE9SKSkgPyBzdGF0ZVtUWVBFRF9BUlJBWV9DT05TVFJVQ1RPUl0gOiBnZXRUeXBlZEFycmF5Q29uc3RydWN0b3IocHJvdG8pO1xufTtcblxudmFyIGlzVHlwZWRBcnJheSA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGZhbHNlO1xuICB2YXIga2xhc3MgPSBjbGFzc29mKGl0KTtcbiAgcmV0dXJuIGhhc093bihUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCwga2xhc3MpXG4gICAgfHwgaGFzT3duKEJpZ0ludEFycmF5Q29uc3RydWN0b3JzTGlzdCwga2xhc3MpO1xufTtcblxudmFyIGFUeXBlZEFycmF5ID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpc1R5cGVkQXJyYXkoaXQpKSByZXR1cm4gaXQ7XG4gIHRocm93IFR5cGVFcnJvcignVGFyZ2V0IGlzIG5vdCBhIHR5cGVkIGFycmF5Jyk7XG59O1xuXG52YXIgYVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIChDKSB7XG4gIGlmIChpc0NhbGxhYmxlKEMpICYmICghc2V0UHJvdG90eXBlT2YgfHwgaXNQcm90b3R5cGVPZihUeXBlZEFycmF5LCBDKSkpIHJldHVybiBDO1xuICB0aHJvdyBUeXBlRXJyb3IodHJ5VG9TdHJpbmcoQykgKyAnIGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yJyk7XG59O1xuXG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IGZ1bmN0aW9uIChLRVksIHByb3BlcnR5LCBmb3JjZWQsIG9wdGlvbnMpIHtcbiAgaWYgKCFERVNDUklQVE9SUykgcmV0dXJuO1xuICBpZiAoZm9yY2VkKSBmb3IgKHZhciBBUlJBWSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCkge1xuICAgIHZhciBUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBnbG9iYWxbQVJSQVldO1xuICAgIGlmIChUeXBlZEFycmF5Q29uc3RydWN0b3IgJiYgaGFzT3duKFR5cGVkQXJyYXlDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIEtFWSkpIHRyeSB7XG4gICAgICBkZWxldGUgVHlwZWRBcnJheUNvbnN0cnVjdG9yLnByb3RvdHlwZVtLRVldO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBvbGQgV2ViS2l0IGJ1ZyAtIHNvbWUgbWV0aG9kcyBhcmUgbm9uLWNvbmZpZ3VyYWJsZVxuICAgICAgdHJ5IHtcbiAgICAgICAgVHlwZWRBcnJheUNvbnN0cnVjdG9yLnByb3RvdHlwZVtLRVldID0gcHJvcGVydHk7XG4gICAgICB9IGNhdGNoIChlcnJvcjIpIHsgLyogZW1wdHkgKi8gfVxuICAgIH1cbiAgfVxuICBpZiAoIVR5cGVkQXJyYXlQcm90b3R5cGVbS0VZXSB8fCBmb3JjZWQpIHtcbiAgICBkZWZpbmVCdWlsdEluKFR5cGVkQXJyYXlQcm90b3R5cGUsIEtFWSwgZm9yY2VkID8gcHJvcGVydHlcbiAgICAgIDogTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyAmJiBJbnQ4QXJyYXlQcm90b3R5cGVbS0VZXSB8fCBwcm9wZXJ0eSwgb3B0aW9ucyk7XG4gIH1cbn07XG5cbnZhciBleHBvcnRUeXBlZEFycmF5U3RhdGljTWV0aG9kID0gZnVuY3Rpb24gKEtFWSwgcHJvcGVydHksIGZvcmNlZCkge1xuICB2YXIgQVJSQVksIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcbiAgaWYgKCFERVNDUklQVE9SUykgcmV0dXJuO1xuICBpZiAoc2V0UHJvdG90eXBlT2YpIHtcbiAgICBpZiAoZm9yY2VkKSBmb3IgKEFSUkFZIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7XG4gICAgICBUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBnbG9iYWxbQVJSQVldO1xuICAgICAgaWYgKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciAmJiBoYXNPd24oVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBLRVkpKSB0cnkge1xuICAgICAgICBkZWxldGUgVHlwZWRBcnJheUNvbnN0cnVjdG9yW0tFWV07XG4gICAgICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gICAgfVxuICAgIGlmICghVHlwZWRBcnJheVtLRVldIHx8IGZvcmNlZCkge1xuICAgICAgLy8gVjggfiBDaHJvbWUgNDktNTAgYCVUeXBlZEFycmF5JWAgbWV0aG9kcyBhcmUgbm9uLXdyaXRhYmxlIG5vbi1jb25maWd1cmFibGVcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBkZWZpbmVCdWlsdEluKFR5cGVkQXJyYXksIEtFWSwgZm9yY2VkID8gcHJvcGVydHkgOiBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTICYmIFR5cGVkQXJyYXlbS0VZXSB8fCBwcm9wZXJ0eSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gICAgfSBlbHNlIHJldHVybjtcbiAgfVxuICBmb3IgKEFSUkFZIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7XG4gICAgVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gZ2xvYmFsW0FSUkFZXTtcbiAgICBpZiAoVHlwZWRBcnJheUNvbnN0cnVjdG9yICYmICghVHlwZWRBcnJheUNvbnN0cnVjdG9yW0tFWV0gfHwgZm9yY2VkKSkge1xuICAgICAgZGVmaW5lQnVpbHRJbihUeXBlZEFycmF5Q29uc3RydWN0b3IsIEtFWSwgcHJvcGVydHkpO1xuICAgIH1cbiAgfVxufTtcblxuZm9yIChOQU1FIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7XG4gIENvbnN0cnVjdG9yID0gZ2xvYmFsW05BTUVdO1xuICBQcm90b3R5cGUgPSBDb25zdHJ1Y3RvciAmJiBDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIGlmIChQcm90b3R5cGUpIGVuZm9yY2VJbnRlcm5hbFN0YXRlKFByb3RvdHlwZSlbVFlQRURfQVJSQVlfQ09OU1RSVUNUT1JdID0gQ29uc3RydWN0b3I7XG4gIGVsc2UgTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyA9IGZhbHNlO1xufVxuXG5mb3IgKE5BTUUgaW4gQmlnSW50QXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7XG4gIENvbnN0cnVjdG9yID0gZ2xvYmFsW05BTUVdO1xuICBQcm90b3R5cGUgPSBDb25zdHJ1Y3RvciAmJiBDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIGlmIChQcm90b3R5cGUpIGVuZm9yY2VJbnRlcm5hbFN0YXRlKFByb3RvdHlwZSlbVFlQRURfQVJSQVlfQ09OU1RSVUNUT1JdID0gQ29uc3RydWN0b3I7XG59XG5cbi8vIFdlYktpdCBidWcgLSB0eXBlZCBhcnJheXMgY29uc3RydWN0b3JzIHByb3RvdHlwZSBpcyBPYmplY3QucHJvdG90eXBlXG5pZiAoIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgfHwgIWlzQ2FsbGFibGUoVHlwZWRBcnJheSkgfHwgVHlwZWRBcnJheSA9PT0gRnVuY3Rpb24ucHJvdG90eXBlKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3cgLS0gc2FmZVxuICBUeXBlZEFycmF5ID0gZnVuY3Rpb24gVHlwZWRBcnJheSgpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCBpbnZvY2F0aW9uJyk7XG4gIH07XG4gIGlmIChOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTKSBmb3IgKE5BTUUgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHtcbiAgICBpZiAoZ2xvYmFsW05BTUVdKSBzZXRQcm90b3R5cGVPZihnbG9iYWxbTkFNRV0sIFR5cGVkQXJyYXkpO1xuICB9XG59XG5cbmlmICghTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyB8fCAhVHlwZWRBcnJheVByb3RvdHlwZSB8fCBUeXBlZEFycmF5UHJvdG90eXBlID09PSBPYmplY3RQcm90b3R5cGUpIHtcbiAgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXkucHJvdG90eXBlO1xuICBpZiAoTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUykgZm9yIChOQU1FIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7XG4gICAgaWYgKGdsb2JhbFtOQU1FXSkgc2V0UHJvdG90eXBlT2YoZ2xvYmFsW05BTUVdLnByb3RvdHlwZSwgVHlwZWRBcnJheVByb3RvdHlwZSk7XG4gIH1cbn1cblxuLy8gV2ViS2l0IGJ1ZyAtIG9uZSBtb3JlIG9iamVjdCBpbiBVaW50OENsYW1wZWRBcnJheSBwcm90b3R5cGUgY2hhaW5cbmlmIChOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTICYmIGdldFByb3RvdHlwZU9mKFVpbnQ4Q2xhbXBlZEFycmF5UHJvdG90eXBlKSAhPT0gVHlwZWRBcnJheVByb3RvdHlwZSkge1xuICBzZXRQcm90b3R5cGVPZihVaW50OENsYW1wZWRBcnJheVByb3RvdHlwZSwgVHlwZWRBcnJheVByb3RvdHlwZSk7XG59XG5cbmlmIChERVNDUklQVE9SUyAmJiAhaGFzT3duKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRPX1NUUklOR19UQUcpKSB7XG4gIFRZUEVEX0FSUkFZX1RBR19SRVFVSVJFRCA9IHRydWU7XG4gIGRlZmluZVByb3BlcnR5KFR5cGVkQXJyYXlQcm90b3R5cGUsIFRPX1NUUklOR19UQUcsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHRoaXMpID8gdGhpc1tUWVBFRF9BUlJBWV9UQUddIDogdW5kZWZpbmVkO1xuICB9IH0pO1xuICBmb3IgKE5BTUUgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIGlmIChnbG9iYWxbTkFNRV0pIHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoZ2xvYmFsW05BTUVdLCBUWVBFRF9BUlJBWV9UQUcsIE5BTUUpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTOiBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTLFxuICBUWVBFRF9BUlJBWV9UQUc6IFRZUEVEX0FSUkFZX1RBR19SRVFVSVJFRCAmJiBUWVBFRF9BUlJBWV9UQUcsXG4gIGFUeXBlZEFycmF5OiBhVHlwZWRBcnJheSxcbiAgYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcjogYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcixcbiAgZXhwb3J0VHlwZWRBcnJheU1ldGhvZDogZXhwb3J0VHlwZWRBcnJheU1ldGhvZCxcbiAgZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZDogZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZCxcbiAgZ2V0VHlwZWRBcnJheUNvbnN0cnVjdG9yOiBnZXRUeXBlZEFycmF5Q29uc3RydWN0b3IsXG4gIGlzVmlldzogaXNWaWV3LFxuICBpc1R5cGVkQXJyYXk6IGlzVHlwZWRBcnJheSxcbiAgVHlwZWRBcnJheTogVHlwZWRBcnJheSxcbiAgVHlwZWRBcnJheVByb3RvdHlwZTogVHlwZWRBcnJheVByb3RvdHlwZVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBOQVRJVkVfQVJSQVlfQlVGRkVSID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci1iYXNpYy1kZXRlY3Rpb24nKTtcbnZhciBGdW5jdGlvbk5hbWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBkZWZpbmVCdWlsdElucyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW5zJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9JbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleCcpO1xudmFyIElFRUU3NTQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWVlZTc1NCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJykuZjtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZmlsbCcpO1xudmFyIGFycmF5U2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2Utc2ltcGxlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBQUk9QRVJfRlVOQ1RJT05fTkFNRSA9IEZ1bmN0aW9uTmFtZS5QUk9QRVI7XG52YXIgQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUgPSBGdW5jdGlvbk5hbWUuQ09ORklHVVJBQkxFO1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbnZhciBEQVRBX1ZJRVcgPSAnRGF0YVZpZXcnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGgnO1xudmFyIFdST05HX0lOREVYID0gJ1dyb25nIGluZGV4JztcbnZhciBOYXRpdmVBcnJheUJ1ZmZlciA9IGdsb2JhbFtBUlJBWV9CVUZGRVJdO1xudmFyICRBcnJheUJ1ZmZlciA9IE5hdGl2ZUFycmF5QnVmZmVyO1xudmFyIEFycmF5QnVmZmVyUHJvdG90eXBlID0gJEFycmF5QnVmZmVyICYmICRBcnJheUJ1ZmZlcltQUk9UT1RZUEVdO1xudmFyICREYXRhVmlldyA9IGdsb2JhbFtEQVRBX1ZJRVddO1xudmFyIERhdGFWaWV3UHJvdG90eXBlID0gJERhdGFWaWV3ICYmICREYXRhVmlld1tQUk9UT1RZUEVdO1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG52YXIgQXJyYXkgPSBnbG9iYWwuQXJyYXk7XG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xudmFyIGZpbGwgPSB1bmN1cnJ5VGhpcyhhcnJheUZpbGwpO1xudmFyIHJldmVyc2UgPSB1bmN1cnJ5VGhpcyhbXS5yZXZlcnNlKTtcblxudmFyIHBhY2tJRUVFNzU0ID0gSUVFRTc1NC5wYWNrO1xudmFyIHVucGFja0lFRUU3NTQgPSBJRUVFNzU0LnVucGFjaztcblxudmFyIHBhY2tJbnQ4ID0gZnVuY3Rpb24gKG51bWJlcikge1xuICByZXR1cm4gW251bWJlciAmIDB4RkZdO1xufTtcblxudmFyIHBhY2tJbnQxNiA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgcmV0dXJuIFtudW1iZXIgJiAweEZGLCBudW1iZXIgPj4gOCAmIDB4RkZdO1xufTtcblxudmFyIHBhY2tJbnQzMiA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgcmV0dXJuIFtudW1iZXIgJiAweEZGLCBudW1iZXIgPj4gOCAmIDB4RkYsIG51bWJlciA+PiAxNiAmIDB4RkYsIG51bWJlciA+PiAyNCAmIDB4RkZdO1xufTtcblxudmFyIHVucGFja0ludDMyID0gZnVuY3Rpb24gKGJ1ZmZlcikge1xuICByZXR1cm4gYnVmZmVyWzNdIDw8IDI0IHwgYnVmZmVyWzJdIDw8IDE2IHwgYnVmZmVyWzFdIDw8IDggfCBidWZmZXJbMF07XG59O1xuXG52YXIgcGFja0Zsb2F0MzIgPSBmdW5jdGlvbiAobnVtYmVyKSB7XG4gIHJldHVybiBwYWNrSUVFRTc1NChudW1iZXIsIDIzLCA0KTtcbn07XG5cbnZhciBwYWNrRmxvYXQ2NCA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KG51bWJlciwgNTIsIDgpO1xufTtcblxudmFyIGFkZEdldHRlciA9IGZ1bmN0aW9uIChDb25zdHJ1Y3Rvciwga2V5KSB7XG4gIGRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yW1BST1RPVFlQRV0sIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcylba2V5XTsgfSB9KTtcbn07XG5cbnZhciBnZXQgPSBmdW5jdGlvbiAodmlldywgY291bnQsIGluZGV4LCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KGluZGV4KTtcbiAgdmFyIHN0b3JlID0gZ2V0SW50ZXJuYWxTdGF0ZSh2aWV3KTtcbiAgaWYgKGludEluZGV4ICsgY291bnQgPiBzdG9yZS5ieXRlTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIGJ5dGVzID0gZ2V0SW50ZXJuYWxTdGF0ZShzdG9yZS5idWZmZXIpLmJ5dGVzO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHN0b3JlLmJ5dGVPZmZzZXQ7XG4gIHZhciBwYWNrID0gYXJyYXlTbGljZShieXRlcywgc3RhcnQsIHN0YXJ0ICsgY291bnQpO1xuICByZXR1cm4gaXNMaXR0bGVFbmRpYW4gPyBwYWNrIDogcmV2ZXJzZShwYWNrKTtcbn07XG5cbnZhciBzZXQgPSBmdW5jdGlvbiAodmlldywgY291bnQsIGluZGV4LCBjb252ZXJzaW9uLCB2YWx1ZSwgaXNMaXR0bGVFbmRpYW4pIHtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChpbmRleCk7XG4gIHZhciBzdG9yZSA9IGdldEludGVybmFsU3RhdGUodmlldyk7XG4gIGlmIChpbnRJbmRleCArIGNvdW50ID4gc3RvcmUuYnl0ZUxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBieXRlcyA9IGdldEludGVybmFsU3RhdGUoc3RvcmUuYnVmZmVyKS5ieXRlcztcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyBzdG9yZS5ieXRlT2Zmc2V0O1xuICB2YXIgcGFjayA9IGNvbnZlcnNpb24oK3ZhbHVlKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSBieXRlc1tzdGFydCArIGldID0gcGFja1tpc0xpdHRsZUVuZGlhbiA/IGkgOiBjb3VudCAtIGkgLSAxXTtcbn07XG5cbmlmICghTkFUSVZFX0FSUkFZX0JVRkZFUikge1xuICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsIEFycmF5QnVmZmVyUHJvdG90eXBlKTtcbiAgICB2YXIgYnl0ZUxlbmd0aCA9IHRvSW5kZXgobGVuZ3RoKTtcbiAgICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICAgIGJ5dGVzOiBmaWxsKEFycmF5KGJ5dGVMZW5ndGgpLCAwKSxcbiAgICAgIGJ5dGVMZW5ndGg6IGJ5dGVMZW5ndGhcbiAgICB9KTtcbiAgICBpZiAoIURFU0NSSVBUT1JTKSB0aGlzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gIEFycmF5QnVmZmVyUHJvdG90eXBlID0gJEFycmF5QnVmZmVyW1BST1RPVFlQRV07XG5cbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCBEYXRhVmlld1Byb3RvdHlwZSk7XG4gICAgYW5JbnN0YW5jZShidWZmZXIsIEFycmF5QnVmZmVyUHJvdG90eXBlKTtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gZ2V0SW50ZXJuYWxTdGF0ZShidWZmZXIpLmJ5dGVMZW5ndGg7XG4gICAgdmFyIG9mZnNldCA9IHRvSW50ZWdlck9ySW5maW5pdHkoYnl0ZU9mZnNldCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQnKTtcbiAgICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gYnVmZmVyTGVuZ3RoIC0gb2Zmc2V0IDogdG9MZW5ndGgoYnl0ZUxlbmd0aCk7XG4gICAgaWYgKG9mZnNldCArIGJ5dGVMZW5ndGggPiBidWZmZXJMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICAgIGJ1ZmZlcjogYnVmZmVyLFxuICAgICAgYnl0ZUxlbmd0aDogYnl0ZUxlbmd0aCxcbiAgICAgIGJ5dGVPZmZzZXQ6IG9mZnNldFxuICAgIH0pO1xuICAgIGlmICghREVTQ1JJUFRPUlMpIHtcbiAgICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyO1xuICAgICAgdGhpcy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aDtcbiAgICAgIHRoaXMuYnl0ZU9mZnNldCA9IG9mZnNldDtcbiAgICB9XG4gIH07XG5cbiAgRGF0YVZpZXdQcm90b3R5cGUgPSAkRGF0YVZpZXdbUFJPVE9UWVBFXTtcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICBhZGRHZXR0ZXIoJEFycmF5QnVmZmVyLCAnYnl0ZUxlbmd0aCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsICdidWZmZXInKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCAnYnl0ZUxlbmd0aCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsICdieXRlT2Zmc2V0Jyk7XG4gIH1cblxuICBkZWZpbmVCdWlsdElucyhEYXRhVmlld1Byb3RvdHlwZSwge1xuICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXSA8PCAyNCA+PiAyNDtcbiAgICB9LFxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgICByZXR1cm4gKGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXSkgPDwgMTYgPj4gMTY7XG4gICAgfSxcbiAgICBnZXRVaW50MTY6IGZ1bmN0aW9uIGdldFVpbnQxNihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgICAgcmV0dXJuIGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbiAgICB9LFxuICAgIGdldEludDMyOiBmdW5jdGlvbiBnZXRJbnQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSW50MzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSk7XG4gICAgfSxcbiAgICBnZXRVaW50MzI6IGZ1bmN0aW9uIGdldFVpbnQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSW50MzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCksIDIzKTtcbiAgICB9LFxuICAgIGdldEZsb2F0NjQ6IGZ1bmN0aW9uIGdldEZsb2F0NjQoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSwgNTIpO1xuICAgIH0sXG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJbnQ4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSW50OCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0SW50MTY6IGZ1bmN0aW9uIHNldEludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0ludDE2LCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc2V0VWludDE2OiBmdW5jdGlvbiBzZXRVaW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSW50MTYsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzZXRJbnQzMjogZnVuY3Rpb24gc2V0SW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSW50MzIsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzZXRVaW50MzI6IGZ1bmN0aW9uIHNldFVpbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJbnQzMiwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNldEZsb2F0MzI6IGZ1bmN0aW9uIHNldEZsb2F0MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRmxvYXQzMiwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRmxvYXQ2NCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgdmFyIElOQ09SUkVDVF9BUlJBWV9CVUZGRVJfTkFNRSA9IFBST1BFUl9GVU5DVElPTl9OQU1FICYmIE5hdGl2ZUFycmF5QnVmZmVyLm5hbWUgIT09IEFSUkFZX0JVRkZFUjtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tbmV3IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nICovXG4gIGlmICghZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIE5hdGl2ZUFycmF5QnVmZmVyKDEpO1xuICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBOYXRpdmVBcnJheUJ1ZmZlcigtMSk7XG4gIH0pIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgTmF0aXZlQXJyYXlCdWZmZXIoKTtcbiAgICBuZXcgTmF0aXZlQXJyYXlCdWZmZXIoMS41KTtcbiAgICBuZXcgTmF0aXZlQXJyYXlCdWZmZXIoTmFOKTtcbiAgICByZXR1cm4gTmF0aXZlQXJyYXlCdWZmZXIubGVuZ3RoICE9IDEgfHwgSU5DT1JSRUNUX0FSUkFZX0JVRkZFUl9OQU1FICYmICFDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRTtcbiAgfSkpIHtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLW5ldyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xuICAgICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgICAgYW5JbnN0YW5jZSh0aGlzLCBBcnJheUJ1ZmZlclByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gbmV3IE5hdGl2ZUFycmF5QnVmZmVyKHRvSW5kZXgobGVuZ3RoKSk7XG4gICAgfTtcblxuICAgICRBcnJheUJ1ZmZlcltQUk9UT1RZUEVdID0gQXJyYXlCdWZmZXJQcm90b3R5cGU7XG5cbiAgICBmb3IgKHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhOYXRpdmVBcnJheUJ1ZmZlciksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajspIHtcbiAgICAgIGlmICghKChrZXkgPSBrZXlzW2orK10pIGluICRBcnJheUJ1ZmZlcikpIHtcbiAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KCRBcnJheUJ1ZmZlciwga2V5LCBOYXRpdmVBcnJheUJ1ZmZlcltrZXldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBBcnJheUJ1ZmZlclByb3RvdHlwZS5jb25zdHJ1Y3RvciA9ICRBcnJheUJ1ZmZlcjtcbiAgfSBlbHNlIGlmIChJTkNPUlJFQ1RfQVJSQVlfQlVGRkVSX05BTUUgJiYgQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUpIHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoTmF0aXZlQXJyYXlCdWZmZXIsICduYW1lJywgQVJSQVlfQlVGRkVSKTtcbiAgfVxuXG4gIC8vIFdlYktpdCBidWcgLSB0aGUgc2FtZSBwYXJlbnQgcHJvdG90eXBlIGZvciB0eXBlZCBhcnJheXMgYW5kIGRhdGEgdmlld1xuICBpZiAoc2V0UHJvdG90eXBlT2YgJiYgZ2V0UHJvdG90eXBlT2YoRGF0YVZpZXdQcm90b3R5cGUpICE9PSBPYmplY3RQcm90b3R5cGUpIHtcbiAgICBzZXRQcm90b3R5cGVPZihEYXRhVmlld1Byb3RvdHlwZSwgT2JqZWN0UHJvdG90eXBlKTtcbiAgfVxuXG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xuICB2YXIgdGVzdFZpZXcgPSBuZXcgJERhdGFWaWV3KG5ldyAkQXJyYXlCdWZmZXIoMikpO1xuICB2YXIgJHNldEludDggPSB1bmN1cnJ5VGhpcyhEYXRhVmlld1Byb3RvdHlwZS5zZXRJbnQ4KTtcbiAgdGVzdFZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTtcbiAgdGVzdFZpZXcuc2V0SW50OCgxLCAyMTQ3NDgzNjQ5KTtcbiAgaWYgKHRlc3RWaWV3LmdldEludDgoMCkgfHwgIXRlc3RWaWV3LmdldEludDgoMSkpIGRlZmluZUJ1aWx0SW5zKERhdGFWaWV3UHJvdG90eXBlLCB7XG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDgodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICAkc2V0SW50OCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfVxuICB9LCB7IHVuc2FmZTogdHJ1ZSB9KTtcbn1cblxuc2V0VG9TdHJpbmdUYWcoJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuc2V0VG9TdHJpbmdUYWcoJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQXJyYXlCdWZmZXI6ICRBcnJheUJ1ZmZlcixcbiAgRGF0YVZpZXc6ICREYXRhVmlld1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGRlbGV0ZVByb3BlcnR5T3JUaHJvdyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWxldGUtcHJvcGVydHktb3ItdGhyb3cnKTtcblxudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW5gIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuY29weXdpdGhpblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tYXJyYXktcHJvdG90eXBlLWNvcHl3aXRoaW4gLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBbXS5jb3B5V2l0aGluIHx8IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0IC8qID0gMCAqLywgc3RhcnQgLyogPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW4gPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgdmFyIHRvID0gdG9BYnNvbHV0ZUluZGV4KHRhcmdldCwgbGVuKTtcbiAgdmFyIGZyb20gPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gIHZhciBlbmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGNvdW50ID0gbWluKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbikpIC0gZnJvbSwgbGVuIC0gdG8pO1xuICB2YXIgaW5jID0gMTtcbiAgaWYgKGZyb20gPCB0byAmJiB0byA8IGZyb20gKyBjb3VudCkge1xuICAgIGluYyA9IC0xO1xuICAgIGZyb20gKz0gY291bnQgLSAxO1xuICAgIHRvICs9IGNvdW50IC0gMTtcbiAgfVxuICB3aGlsZSAoY291bnQtLSA+IDApIHtcbiAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgZWxzZSBkZWxldGVQcm9wZXJ0eU9yVGhyb3coTywgdG8pO1xuICAgIHRvICs9IGluYztcbiAgICBmcm9tICs9IGluYztcbiAgfSByZXR1cm4gTztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maWxsYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbGxcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoYXJndW1lbnRzTGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoKTtcbiAgdmFyIGVuZCA9IGFyZ3VtZW50c0xlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBlbmRQb3MgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCk7XG4gIHdoaWxlIChlbmRQb3MgPiBpbmRleCkgT1tpbmRleCsrXSA9IHZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZm9yRWFjaDtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcblxudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdmb3JFYWNoJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG5tb2R1bGUuZXhwb3J0cyA9ICFTVFJJQ1RfTUVUSE9EID8gZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICByZXR1cm4gJGZvckVhY2godGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tYXJyYXktcHJvdG90eXBlLWZvcmVhY2ggLS0gc2FmZVxufSA6IFtdLmZvckVhY2g7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBpc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNvbnN0cnVjdG9yJyk7XG52YXIgZ2V0QXN5bmNJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYXN5bmMtaXRlcmF0b3InKTtcbnZhciBnZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3InKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcbnZhciBnZXRWaXJ0dWFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudHJ5LXZpcnR1YWwnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEFzeW5jRnJvbVN5bmNJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hc3luYy1mcm9tLXN5bmMtaXRlcmF0b3InKTtcbnZhciB0b0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FzeW5jLWl0ZXJhdG9yLWl0ZXJhdGlvbicpLnRvQXJyYXk7XG5cbnZhciBBU1lOQ19JVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnYXN5bmNJdGVyYXRvcicpO1xudmFyIGFycmF5SXRlcmF0b3IgPSBnZXRWaXJ0dWFsKCdBcnJheScpLnZhbHVlcztcblxuLy8gYEFycmF5LmZyb21Bc3luY2AgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1hcnJheS1mcm9tLWFzeW5jXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZyb21Bc3luYyhhc3luY0l0ZW1zIC8qICwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQgKi8pIHtcbiAgdmFyIEMgPSB0aGlzO1xuICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIG1hcGZuID0gYXJndW1lbnRzTGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgdmFyIHRoaXNBcmcgPSBhcmd1bWVudHNMZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICByZXR1cm4gbmV3IChnZXRCdWlsdEluKCdQcm9taXNlJykpKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdChhc3luY0l0ZW1zKTtcbiAgICBpZiAobWFwZm4gIT09IHVuZGVmaW5lZCkgbWFwZm4gPSBiaW5kKG1hcGZuLCB0aGlzQXJnKTtcbiAgICB2YXIgdXNpbmdBc3luY0l0ZXJhdG9yID0gZ2V0TWV0aG9kKE8sIEFTWU5DX0lURVJBVE9SKTtcbiAgICB2YXIgdXNpbmdTeW5jSXRlcmF0b3IgPSB1c2luZ0FzeW5jSXRlcmF0b3IgPyB1bmRlZmluZWQgOiBnZXRJdGVyYXRvck1ldGhvZChPKSB8fCBhcnJheUl0ZXJhdG9yO1xuICAgIHZhciBBID0gaXNDb25zdHJ1Y3RvcihDKSA/IG5ldyBDKCkgOiBbXTtcbiAgICB2YXIgaXRlcmF0b3IgPSB1c2luZ0FzeW5jSXRlcmF0b3JcbiAgICAgID8gZ2V0QXN5bmNJdGVyYXRvcihPLCB1c2luZ0FzeW5jSXRlcmF0b3IpXG4gICAgICA6IG5ldyBBc3luY0Zyb21TeW5jSXRlcmF0b3IoZ2V0SXRlcmF0b3IoTywgdXNpbmdTeW5jSXRlcmF0b3IpKTtcbiAgICByZXNvbHZlKHRvQXJyYXkoaXRlcmF0b3IsIG1hcGZuLCBBKSk7XG4gIH0pO1xufTtcbiIsInZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgbGlzdCkge1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UobGlzdCk7XG4gIHZhciByZXN1bHQgPSBuZXcgQ29uc3RydWN0b3IobGVuZ3RoKTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gbGlzdFtpbmRleCsrXTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NhbGwtd2l0aC1zYWZlLWl0ZXJhdGlvbi1jbG9zaW5nJyk7XG52YXIgaXNBcnJheUl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIGlzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY29uc3RydWN0b3InKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGdldEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvcicpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcblxudmFyICRBcnJheSA9IEFycmF5O1xuXG4vLyBgQXJyYXkuZnJvbWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LmZyb21cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gIHZhciBJU19DT05TVFJVQ1RPUiA9IGlzQ29uc3RydWN0b3IodGhpcyk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgbWFwZm4gPSBhcmd1bWVudHNMZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gIGlmIChtYXBwaW5nKSBtYXBmbiA9IGJpbmQobWFwZm4sIGFyZ3VtZW50c0xlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICB2YXIgaXRlcmF0b3JNZXRob2QgPSBnZXRJdGVyYXRvck1ldGhvZChPKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvciwgbmV4dCwgdmFsdWU7XG4gIC8vIGlmIHRoZSB0YXJnZXQgaXMgbm90IGl0ZXJhYmxlIG9yIGl0J3MgYW4gYXJyYXkgd2l0aCB0aGUgZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBhIHNpbXBsZSBjYXNlXG4gIGlmIChpdGVyYXRvck1ldGhvZCAmJiAhKHRoaXMgPT09ICRBcnJheSAmJiBpc0FycmF5SXRlcmF0b3JNZXRob2QoaXRlcmF0b3JNZXRob2QpKSkge1xuICAgIGl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoTywgaXRlcmF0b3JNZXRob2QpO1xuICAgIG5leHQgPSBpdGVyYXRvci5uZXh0O1xuICAgIHJlc3VsdCA9IElTX0NPTlNUUlVDVE9SID8gbmV3IHRoaXMoKSA6IFtdO1xuICAgIGZvciAoOyEoc3RlcCA9IGNhbGwobmV4dCwgaXRlcmF0b3IpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICB2YWx1ZSA9IG1hcHBpbmcgPyBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlO1xuICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgICByZXN1bHQgPSBJU19DT05TVFJVQ1RPUiA/IG5ldyB0aGlzKGxlbmd0aCkgOiAkQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgdmFsdWUgPSBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdO1xuICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgdmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcblxudmFyIE1hcCA9IGdldEJ1aWx0SW4oJ01hcCcpO1xudmFyIE1hcFByb3RvdHlwZSA9IE1hcC5wcm90b3R5cGU7XG52YXIgbWFwR2V0ID0gdW5jdXJyeVRoaXMoTWFwUHJvdG90eXBlLmdldCk7XG52YXIgbWFwSGFzID0gdW5jdXJyeVRoaXMoTWFwUHJvdG90eXBlLmhhcyk7XG52YXIgbWFwU2V0ID0gdW5jdXJyeVRoaXMoTWFwUHJvdG90eXBlLnNldCk7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmdyb3VwVG9NYXBgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtYXJyYXktZ3JvdXBpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ3JvdXBUb01hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgc2VsZiA9IEluZGV4ZWRPYmplY3QoTyk7XG4gIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIHZhciBtYXAgPSBuZXcgTWFwKCk7XG4gIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShzZWxmKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGtleSwgdmFsdWU7XG4gIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgdmFsdWUgPSBzZWxmW2luZGV4XTtcbiAgICBrZXkgPSBib3VuZEZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgTyk7XG4gICAgaWYgKG1hcEhhcyhtYXAsIGtleSkpIHB1c2gobWFwR2V0KG1hcCwga2V5KSwgdmFsdWUpO1xuICAgIGVsc2UgbWFwU2V0KG1hcCwga2V5LCBbdmFsdWVdKTtcbiAgfSByZXR1cm4gbWFwO1xufTtcbiIsInZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgb2JqZWN0Q3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBhcnJheUZyb21Db25zdHJ1Y3RvckFuZExpc3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZnJvbS1jb25zdHJ1Y3Rvci1hbmQtbGlzdCcpO1xuXG52YXIgJEFycmF5ID0gQXJyYXk7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCwgc3BlY2lmaWNDb25zdHJ1Y3Rvcikge1xuICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgdmFyIHNlbGYgPSBJbmRleGVkT2JqZWN0KE8pO1xuICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2tmbiwgdGhhdCk7XG4gIHZhciB0YXJnZXQgPSBvYmplY3RDcmVhdGUobnVsbCk7XG4gIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShzZWxmKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIENvbnN0cnVjdG9yLCBrZXksIHZhbHVlO1xuICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgIHZhbHVlID0gc2VsZltpbmRleF07XG4gICAga2V5ID0gdG9Qcm9wZXJ0eUtleShib3VuZEZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgTykpO1xuICAgIC8vIGluIHNvbWUgSUUxMCBidWlsZHMsIGBoYXNPd25Qcm9wZXJ0eWAgcmV0dXJucyBpbmNvcnJlY3QgcmVzdWx0IG9uIGludGVnZXIga2V5c1xuICAgIC8vIGJ1dCBzaW5jZSBpdCdzIGEgYG51bGxgIHByb3RvdHlwZSBvYmplY3QsIHdlIGNhbiBzYWZlbHkgdXNlIGBpbmBcbiAgICBpZiAoa2V5IGluIHRhcmdldCkgcHVzaCh0YXJnZXRba2V5XSwgdmFsdWUpO1xuICAgIGVsc2UgdGFyZ2V0W2tleV0gPSBbdmFsdWVdO1xuICB9XG4gIC8vIFRPRE86IFJlbW92ZSB0aGlzIGJsb2NrIGZyb20gYGNvcmUtanNANGBcbiAgaWYgKHNwZWNpZmljQ29uc3RydWN0b3IpIHtcbiAgICBDb25zdHJ1Y3RvciA9IHNwZWNpZmljQ29uc3RydWN0b3IoTyk7XG4gICAgaWYgKENvbnN0cnVjdG9yICE9PSAkQXJyYXkpIHtcbiAgICAgIGZvciAoa2V5IGluIHRhcmdldCkgdGFyZ2V0W2tleV0gPSBhcnJheUZyb21Db25zdHJ1Y3RvckFuZExpc3QoQ29uc3RydWN0b3IsIHRhcmdldFtrZXldKTtcbiAgICB9XG4gIH0gcmV0dXJuIHRhcmdldDtcbn07XG4iLCJ2YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGluZGV4T2YsIGluY2x1ZGVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgIGlmICgoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykgJiYgT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4gIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiAgaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsInZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgZmluZExhc3QsIGZpbmRMYXN0SW5kZXggfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHZhciBJU19GSU5EX0xBU1RfSU5ERVggPSBUWVBFID09IDE7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IEluZGV4ZWRPYmplY3QoTyk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIHRoYXQpO1xuICAgIHZhciBpbmRleCA9IGxlbmd0aE9mQXJyYXlMaWtlKHNlbGYpO1xuICAgIHZhciB2YWx1ZSwgcmVzdWx0O1xuICAgIHdoaWxlIChpbmRleC0tID4gMCkge1xuICAgICAgdmFsdWUgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlc3VsdCA9IGJvdW5kRnVuY3Rpb24odmFsdWUsIGluZGV4LCBPKTtcbiAgICAgIGlmIChyZXN1bHQpIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICBjYXNlIDA6IHJldHVybiB2YWx1ZTsgLy8gZmluZExhc3RcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gaW5kZXg7IC8vIGZpbmRMYXN0SW5kZXhcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfTEFTVF9JTkRFWCA/IC0xIDogdW5kZWZpbmVkO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZExhc3RgIG1ldGhvZFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1hcnJheS1maW5kLWZyb20tbGFzdFxuICBmaW5kTGFzdDogY3JlYXRlTWV0aG9kKDApLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRMYXN0SW5kZXhgIG1ldGhvZFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1hcnJheS1maW5kLWZyb20tbGFzdFxuICBmaW5kTGFzdEluZGV4OiBjcmVhdGVNZXRob2QoMSlcbn07XG4iLCJ2YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGZvckVhY2gsIG1hcCwgZmlsdGVyLCBzb21lLCBldmVyeSwgZmluZCwgZmluZEluZGV4LCBmaWx0ZXJSZWplY3QgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgSVNfRklMVEVSX1JFSkVDVCA9IFRZUEUgPT0gNztcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQsIHNwZWNpZmljQ3JlYXRlKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XG4gICAgdmFyIHNlbGYgPSBJbmRleGVkT2JqZWN0KE8pO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCB0aGF0KTtcbiAgICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2Uoc2VsZik7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgY3JlYXRlID0gc3BlY2lmaWNDcmVhdGUgfHwgYXJyYXlTcGVjaWVzQ3JlYXRlO1xuICAgIHZhciB0YXJnZXQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgfHwgSVNfRklMVEVSX1JFSkVDVCA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbHVlLCByZXN1bHQ7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICB2YWx1ZSA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzdWx0ID0gYm91bmRGdW5jdGlvbih2YWx1ZSwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgdGFyZ2V0W2luZGV4XSA9IHJlc3VsdDsgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlc3VsdCkgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWx1ZTsgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHB1c2godGFyZ2V0LCB2YWx1ZSk7ICAgICAgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDQ6IHJldHVybiBmYWxzZTsgICAgICAgICAgICAgLy8gZXZlcnlcbiAgICAgICAgICBjYXNlIDc6IHB1c2godGFyZ2V0LCB2YWx1ZSk7ICAgICAgLy8gZmlsdGVyUmVqZWN0XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHRhcmdldDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG4gIGZvckVhY2g6IGNyZWF0ZU1ldGhvZCgwKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5tYXBcbiAgbWFwOiBjcmVhdGVNZXRob2QoMSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsdGVyXG4gIGZpbHRlcjogY3JlYXRlTWV0aG9kKDIpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLnNvbWVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb21lXG4gIHNvbWU6IGNyZWF0ZU1ldGhvZCgzKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5ldmVyeWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmV2ZXJ5XG4gIGV2ZXJ5OiBjcmVhdGVNZXRob2QoNCksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRcbiAgZmluZDogY3JlYXRlTWV0aG9kKDUpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRJbmRleFxuICBmaW5kSW5kZXg6IGNyZWF0ZU1ldGhvZCg2KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJSZWplY3RgIG1ldGhvZFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1hcnJheS1maWx0ZXJpbmdcbiAgZmlsdGVyUmVqZWN0OiBjcmVhdGVNZXRob2QoNylcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBlcy14L25vLWFycmF5LXByb3RvdHlwZS1sYXN0aW5kZXhvZiAtLSBzYWZlICovXG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG52YXIgJGxhc3RJbmRleE9mID0gW10ubGFzdEluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJGxhc3RJbmRleE9mICYmIDEgLyBbMV0ubGFzdEluZGV4T2YoMSwgLTApIDwgMDtcbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnbGFzdEluZGV4T2YnKTtcbnZhciBGT1JDRUQgPSBORUdBVElWRV9aRVJPIHx8ICFTVFJJQ1RfTUVUSE9EO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmxhc3RpbmRleG9mXG5tb2R1bGUuZXhwb3J0cyA9IEZPUkNFRCA/IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSBAWyotMV0gKi8pIHtcbiAgLy8gY29udmVydCAtMCB0byArMFxuICBpZiAoTkVHQVRJVkVfWkVSTykgcmV0dXJuIGFwcGx5KCRsYXN0SW5kZXhPZiwgdGhpcywgYXJndW1lbnRzKSB8fCAwO1xuICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCh0aGlzKTtcbiAgdmFyIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIGluZGV4ID0gbWluKGluZGV4LCB0b0ludGVnZXJPckluZmluaXR5KGFyZ3VtZW50c1sxXSkpO1xuICBpZiAoaW5kZXggPCAwKSBpbmRleCA9IGxlbmd0aCArIGluZGV4O1xuICBmb3IgKDtpbmRleCA+PSAwOyBpbmRleC0tKSBpZiAoaW5kZXggaW4gTyAmJiBPW2luZGV4XSA9PT0gc2VhcmNoRWxlbWVudCkgcmV0dXJuIGluZGV4IHx8IDA7XG4gIHJldHVybiAtMTtcbn0gOiAkbGFzdEluZGV4T2Y7XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB0aGlzIGZlYXR1cmUgZGV0ZWN0aW9uIGluIFY4IHNpbmNlIGl0IGNhdXNlc1xuICAvLyBkZW9wdGltaXphdGlvbiBhbmQgc2VyaW91cyBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc3XG4gIHJldHVybiBWOF9WRVJTSU9OID49IDUxIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFycmF5ID0gW107XG4gICAgdmFyIGNvbnN0cnVjdG9yID0gYXJyYXkuY29uc3RydWN0b3IgPSB7fTtcbiAgICBjb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7IGZvbzogMSB9O1xuICAgIH07XG4gICAgcmV0dXJuIGFycmF5W01FVEhPRF9OQU1FXShCb29sZWFuKS5mb28gIT09IDE7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSwgYXJndW1lbnQpIHtcbiAgdmFyIG1ldGhvZCA9IFtdW01FVEhPRF9OQU1FXTtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gICAgbWV0aG9kLmNhbGwobnVsbCwgYXJndW1lbnQgfHwgZnVuY3Rpb24gKCkgeyByZXR1cm4gMTsgfSwgMSk7XG4gIH0pO1xufTtcbiIsInZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IHJlZHVjZSwgcmVkdWNlUmlnaHQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChJU19SSUdIVCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c0xlbmd0aCwgbWVtbykge1xuICAgIGFDYWxsYWJsZShjYWxsYmFja2ZuKTtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoYXQpO1xuICAgIHZhciBzZWxmID0gSW5kZXhlZE9iamVjdChPKTtcbiAgICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgdmFyIGluZGV4ID0gSVNfUklHSFQgPyBsZW5ndGggLSAxIDogMDtcbiAgICB2YXIgaSA9IElTX1JJR0hUID8gLTEgOiAxO1xuICAgIGlmIChhcmd1bWVudHNMZW5ndGggPCAyKSB3aGlsZSAodHJ1ZSkge1xuICAgICAgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICAgICAgbWVtbyA9IHNlbGZbaW5kZXhdO1xuICAgICAgICBpbmRleCArPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGluZGV4ICs9IGk7XG4gICAgICBpZiAoSVNfUklHSFQgPyBpbmRleCA8IDAgOiBsZW5ndGggPD0gaW5kZXgpIHtcbiAgICAgICAgdGhyb3cgJFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKDtJU19SSUdIVCA/IGluZGV4ID49IDAgOiBsZW5ndGggPiBpbmRleDsgaW5kZXggKz0gaSkgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICAgIG1lbW8gPSBjYWxsYmFja2ZuKG1lbW8sIHNlbGZbaW5kZXhdLCBpbmRleCwgTyk7XG4gICAgfVxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUucmVkdWNlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUucmVkdWNlXG4gIGxlZnQ6IGNyZWF0ZU1ldGhvZChmYWxzZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5yZWR1Y2VyaWdodFxuICByaWdodDogY3JlYXRlTWV0aG9kKHRydWUpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIFNhZmFyaSA8IDEzIGRvZXMgbm90IHRocm93IGFuIGVycm9yIGluIHRoaXMgY2FzZVxudmFyIFNJTEVOVF9PTl9OT05fV1JJVEFCTEVfTEVOR1RIX1NFVCA9IERFU0NSSVBUT1JTICYmICFmdW5jdGlvbiAoKSB7XG4gIC8vIG1ha2VzIG5vIHNlbnNlIHdpdGhvdXQgcHJvcGVyIHN0cmljdCBtb2RlIHN1cHBvcnRcbiAgaWYgKHRoaXMgIT09IHVuZGVmaW5lZCkgcmV0dXJuIHRydWU7XG4gIHRyeSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoW10sICdsZW5ndGgnLCB7IHdyaXRhYmxlOiBmYWxzZSB9KS5sZW5ndGggPSAxO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBlcnJvciBpbnN0YW5jZW9mIFR5cGVFcnJvcjtcbiAgfVxufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNJTEVOVF9PTl9OT05fV1JJVEFCTEVfTEVOR1RIX1NFVCA/IGZ1bmN0aW9uIChPLCBsZW5ndGgpIHtcbiAgaWYgKGlzQXJyYXkoTykgJiYgIWdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCAnbGVuZ3RoJykud3JpdGFibGUpIHtcbiAgICB0aHJvdyAkVHlwZUVycm9yKCdDYW5ub3Qgc2V0IHJlYWQgb25seSAubGVuZ3RoJyk7XG4gIH0gcmV0dXJuIE8ubGVuZ3RoID0gbGVuZ3RoO1xufSA6IGZ1bmN0aW9uIChPLCBsZW5ndGgpIHtcbiAgcmV0dXJuIE8ubGVuZ3RoID0gbGVuZ3RoO1xufTtcbiIsInZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG52YXIgJEFycmF5ID0gQXJyYXk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICB2YXIgayA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuZ3RoKTtcbiAgdmFyIGZpbiA9IHRvQWJzb2x1dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZCwgbGVuZ3RoKTtcbiAgdmFyIHJlc3VsdCA9ICRBcnJheShtYXgoZmluIC0gaywgMCkpO1xuICBmb3IgKHZhciBuID0gMDsgayA8IGZpbjsgaysrLCBuKyspIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgbiwgT1trXSk7XG4gIHJlc3VsdC5sZW5ndGggPSBuO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB1bmN1cnJ5VGhpcyhbXS5zbGljZSk7XG4iLCJ2YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZS1zaW1wbGUnKTtcblxudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxudmFyIG1lcmdlU29ydCA9IGZ1bmN0aW9uIChhcnJheSwgY29tcGFyZWZuKSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHZhciBtaWRkbGUgPSBmbG9vcihsZW5ndGggLyAyKTtcbiAgcmV0dXJuIGxlbmd0aCA8IDggPyBpbnNlcnRpb25Tb3J0KGFycmF5LCBjb21wYXJlZm4pIDogbWVyZ2UoXG4gICAgYXJyYXksXG4gICAgbWVyZ2VTb3J0KGFycmF5U2xpY2UoYXJyYXksIDAsIG1pZGRsZSksIGNvbXBhcmVmbiksXG4gICAgbWVyZ2VTb3J0KGFycmF5U2xpY2UoYXJyYXksIG1pZGRsZSksIGNvbXBhcmVmbiksXG4gICAgY29tcGFyZWZuXG4gICk7XG59O1xuXG52YXIgaW5zZXJ0aW9uU29ydCA9IGZ1bmN0aW9uIChhcnJheSwgY29tcGFyZWZuKSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHZhciBpID0gMTtcbiAgdmFyIGVsZW1lbnQsIGo7XG5cbiAgd2hpbGUgKGkgPCBsZW5ndGgpIHtcbiAgICBqID0gaTtcbiAgICBlbGVtZW50ID0gYXJyYXlbaV07XG4gICAgd2hpbGUgKGogJiYgY29tcGFyZWZuKGFycmF5W2ogLSAxXSwgZWxlbWVudCkgPiAwKSB7XG4gICAgICBhcnJheVtqXSA9IGFycmF5Wy0tal07XG4gICAgfVxuICAgIGlmIChqICE9PSBpKyspIGFycmF5W2pdID0gZWxlbWVudDtcbiAgfSByZXR1cm4gYXJyYXk7XG59O1xuXG52YXIgbWVyZ2UgPSBmdW5jdGlvbiAoYXJyYXksIGxlZnQsIHJpZ2h0LCBjb21wYXJlZm4pIHtcbiAgdmFyIGxsZW5ndGggPSBsZWZ0Lmxlbmd0aDtcbiAgdmFyIHJsZW5ndGggPSByaWdodC5sZW5ndGg7XG4gIHZhciBsaW5kZXggPSAwO1xuICB2YXIgcmluZGV4ID0gMDtcblxuICB3aGlsZSAobGluZGV4IDwgbGxlbmd0aCB8fCByaW5kZXggPCBybGVuZ3RoKSB7XG4gICAgYXJyYXlbbGluZGV4ICsgcmluZGV4XSA9IChsaW5kZXggPCBsbGVuZ3RoICYmIHJpbmRleCA8IHJsZW5ndGgpXG4gICAgICA/IGNvbXBhcmVmbihsZWZ0W2xpbmRleF0sIHJpZ2h0W3JpbmRleF0pIDw9IDAgPyBsZWZ0W2xpbmRleCsrXSA6IHJpZ2h0W3JpbmRleCsrXVxuICAgICAgOiBsaW5kZXggPCBsbGVuZ3RoID8gbGVmdFtsaW5kZXgrK10gOiByaWdodFtyaW5kZXgrK107XG4gIH0gcmV0dXJuIGFycmF5O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBtZXJnZVNvcnQ7XG4iLCJ2YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIGlzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY29uc3RydWN0b3InKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcbnZhciAkQXJyYXkgPSBBcnJheTtcblxuLy8gYSBwYXJ0IG9mIGBBcnJheVNwZWNpZXNDcmVhdGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheXNwZWNpZXNjcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsQXJyYXkpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsQXJyYXkpKSB7XG4gICAgQyA9IG9yaWdpbmFsQXJyYXkuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAoaXNDb25zdHJ1Y3RvcihDKSAmJiAoQyA9PT0gJEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBlbHNlIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIEMgPT09IHVuZGVmaW5lZCA/ICRBcnJheSA6IEM7XG59O1xuIiwidmFyIGFycmF5U3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTtcblxuLy8gYEFycmF5U3BlY2llc0NyZWF0ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5c3BlY2llc2NyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWxBcnJheSwgbGVuZ3RoKSB7XG4gIHJldHVybiBuZXcgKGFycmF5U3BlY2llc0NvbnN0cnVjdG9yKG9yaWdpbmFsQXJyYXkpKShsZW5ndGggPT09IDAgPyAwIDogbGVuZ3RoKTtcbn07XG4iLCJ2YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL3Byb3Bvc2FsLWNoYW5nZS1hcnJheS1ieS1jb3B5LyNzZWMtYXJyYXkucHJvdG90eXBlLnRvUmV2ZXJzZWRcbi8vIGh0dHBzOi8vdGMzOS5lcy9wcm9wb3NhbC1jaGFuZ2UtYXJyYXktYnktY29weS8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUudG9SZXZlcnNlZFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgQykge1xuICB2YXIgbGVuID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gIHZhciBBID0gbmV3IEMobGVuKTtcbiAgdmFyIGsgPSAwO1xuICBmb3IgKDsgayA8IGxlbjsgaysrKSBBW2tdID0gT1tsZW4gLSBrIC0gMV07XG4gIHJldHVybiBBO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgaXNOdWxsT3JVbmRlZmluZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG52YXIgTWFwID0gZ2V0QnVpbHRJbignTWFwJyk7XG52YXIgTWFwUHJvdG90eXBlID0gTWFwLnByb3RvdHlwZTtcbnZhciBtYXBGb3JFYWNoID0gdW5jdXJyeVRoaXMoTWFwUHJvdG90eXBlLmZvckVhY2gpO1xudmFyIG1hcEhhcyA9IHVuY3VycnlUaGlzKE1hcFByb3RvdHlwZS5oYXMpO1xudmFyIG1hcFNldCA9IHVuY3VycnlUaGlzKE1hcFByb3RvdHlwZS5zZXQpO1xudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS51bmlxdWVCeWAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1hcnJheS11bmlxdWVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdW5pcXVlQnkocmVzb2x2ZXIpIHtcbiAgdmFyIHRoYXQgPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKHRoYXQpO1xuICB2YXIgcmVzdWx0ID0gYXJyYXlTcGVjaWVzQ3JlYXRlKHRoYXQsIDApO1xuICB2YXIgbWFwID0gbmV3IE1hcCgpO1xuICB2YXIgcmVzb2x2ZXJGdW5jdGlvbiA9ICFpc051bGxPclVuZGVmaW5lZChyZXNvbHZlcikgPyBhQ2FsbGFibGUocmVzb2x2ZXIpIDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xuICB2YXIgaW5kZXgsIGl0ZW0sIGtleTtcbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgaXRlbSA9IHRoYXRbaW5kZXhdO1xuICAgIGtleSA9IHJlc29sdmVyRnVuY3Rpb24oaXRlbSk7XG4gICAgaWYgKCFtYXBIYXMobWFwLCBrZXkpKSBtYXBTZXQobWFwLCBrZXksIGl0ZW0pO1xuICB9XG4gIG1hcEZvckVhY2gobWFwLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBwdXNoKHJlc3VsdCwgdmFsdWUpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcblxudmFyICRSYW5nZUVycm9yID0gUmFuZ2VFcnJvcjtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL3Byb3Bvc2FsLWNoYW5nZS1hcnJheS1ieS1jb3B5LyNzZWMtYXJyYXkucHJvdG90eXBlLndpdGhcbi8vIGh0dHBzOi8vdGMzOS5lcy9wcm9wb3NhbC1jaGFuZ2UtYXJyYXktYnktY29weS8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUud2l0aFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgQywgaW5kZXgsIHZhbHVlKSB7XG4gIHZhciBsZW4gPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgdmFyIHJlbGF0aXZlSW5kZXggPSB0b0ludGVnZXJPckluZmluaXR5KGluZGV4KTtcbiAgdmFyIGFjdHVhbEluZGV4ID0gcmVsYXRpdmVJbmRleCA8IDAgPyBsZW4gKyByZWxhdGl2ZUluZGV4IDogcmVsYXRpdmVJbmRleDtcbiAgaWYgKGFjdHVhbEluZGV4ID49IGxlbiB8fCBhY3R1YWxJbmRleCA8IDApIHRocm93ICRSYW5nZUVycm9yKCdJbmNvcnJlY3QgaW5kZXgnKTtcbiAgdmFyIEEgPSBuZXcgQyhsZW4pO1xuICB2YXIgayA9IDA7XG4gIGZvciAoOyBrIDwgbGVuOyBrKyspIEFba10gPSBrID09PSBhY3R1YWxJbmRleCA/IHZhbHVlIDogT1trXTtcbiAgcmV0dXJuIEE7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcbnZhciBkZWZpbmVCdWlsdElucyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW5zJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgQXN5bmNJdGVyYXRvclByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hc3luYy1pdGVyYXRvci1wcm90b3R5cGUnKTtcbnZhciBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyLXJlc3VsdC1vYmplY3QnKTtcblxudmFyIFByb21pc2UgPSBnZXRCdWlsdEluKCdQcm9taXNlJyk7XG5cbnZhciBBU1lOQ19GUk9NX1NZTkNfSVRFUkFUT1IgPSAnQXN5bmNGcm9tU3luY0l0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKEFTWU5DX0ZST01fU1lOQ19JVEVSQVRPUik7XG5cbnZhciBhc3luY0Zyb21TeW5jSXRlcmF0b3JDb250aW51YXRpb24gPSBmdW5jdGlvbiAocmVzdWx0LCByZXNvbHZlLCByZWplY3QpIHtcbiAgdmFyIGRvbmUgPSByZXN1bHQuZG9uZTtcbiAgUHJvbWlzZS5yZXNvbHZlKHJlc3VsdC52YWx1ZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXNvbHZlKGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QodmFsdWUsIGRvbmUpKTtcbiAgfSwgcmVqZWN0KTtcbn07XG5cbnZhciBBc3luY0Zyb21TeW5jSXRlcmF0b3IgPSBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGl0ZXJhdG9yKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IEFTWU5DX0ZST01fU1lOQ19JVEVSQVRPUixcbiAgICBpdGVyYXRvcjogYW5PYmplY3QoaXRlcmF0b3IpLFxuICAgIG5leHQ6IGl0ZXJhdG9yLm5leHRcbiAgfSk7XG59O1xuXG5Bc3luY0Zyb21TeW5jSXRlcmF0b3IucHJvdG90eXBlID0gZGVmaW5lQnVpbHRJbnMoY3JlYXRlKEFzeW5jSXRlcmF0b3JQcm90b3R5cGUpLCB7XG4gIG5leHQ6IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGFuT2JqZWN0KGNhbGwoc3RhdGUubmV4dCwgc3RhdGUuaXRlcmF0b3IpKTtcbiAgICAgIGFzeW5jRnJvbVN5bmNJdGVyYXRvckNvbnRpbnVhdGlvbihyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgfSk7XG4gIH0sXG4gICdyZXR1cm4nOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGl0ZXJhdG9yID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5pdGVyYXRvcjtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyICRyZXR1cm4gPSBnZXRNZXRob2QoaXRlcmF0b3IsICdyZXR1cm4nKTtcbiAgICAgIGlmICgkcmV0dXJuID09PSB1bmRlZmluZWQpIHJldHVybiByZXNvbHZlKGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QodW5kZWZpbmVkLCB0cnVlKSk7XG4gICAgICB2YXIgcmVzdWx0ID0gYW5PYmplY3QoY2FsbCgkcmV0dXJuLCBpdGVyYXRvcikpO1xuICAgICAgYXN5bmNGcm9tU3luY0l0ZXJhdG9yQ29udGludWF0aW9uKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXN5bmNGcm9tU3luY0l0ZXJhdG9yO1xuIiwidmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIG1ldGhvZCwgYXJndW1lbnQsIHJlamVjdCkge1xuICB0cnkge1xuICAgIHZhciByZXR1cm5NZXRob2QgPSBnZXRNZXRob2QoaXRlcmF0b3IsICdyZXR1cm4nKTtcbiAgICBpZiAocmV0dXJuTWV0aG9kKSB7XG4gICAgICByZXR1cm4gZ2V0QnVpbHRJbignUHJvbWlzZScpLnJlc29sdmUoY2FsbChyZXR1cm5NZXRob2QsIGl0ZXJhdG9yKSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIG1ldGhvZChhcmd1bWVudCk7XG4gICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IyKSB7XG4gICAgcmV0dXJuIHJlamVjdChlcnJvcjIpO1xuICB9IG1ldGhvZChhcmd1bWVudCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGVyZm9ybScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGRlZmluZUJ1aWx0SW5zID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbnMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBnZXRNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1ldGhvZCcpO1xudmFyIEFzeW5jSXRlcmF0b3JQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXN5bmMtaXRlcmF0b3ItcHJvdG90eXBlJyk7XG52YXIgY3JlYXRlSXRlclJlc3VsdE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaXRlci1yZXN1bHQtb2JqZWN0Jyk7XG52YXIgaXRlcmF0b3JDbG9zZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1jbG9zZScpO1xuXG52YXIgUHJvbWlzZSA9IGdldEJ1aWx0SW4oJ1Byb21pc2UnKTtcblxudmFyIEFTWU5DX0lURVJBVE9SX0hFTFBFUiA9ICdBc3luY0l0ZXJhdG9ySGVscGVyJztcbnZhciBXUkFQX0ZPUl9WQUxJRF9BU1lOQ19JVEVSQVRPUiA9ICdXcmFwRm9yVmFsaWRBc3luY0l0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xuXG52YXIgY3JlYXRlQXN5bmNJdGVyYXRvclByb3h5UHJvdG90eXBlID0gZnVuY3Rpb24gKElTX0lURVJBVE9SKSB7XG4gIHZhciBJU19HRU5FUkFUT1IgPSAhSVNfSVRFUkFUT1I7XG4gIHZhciBBU1lOQ19JVEVSQVRPUl9QUk9YWSA9IElTX0lURVJBVE9SID8gV1JBUF9GT1JfVkFMSURfQVNZTkNfSVRFUkFUT1IgOiBBU1lOQ19JVEVSQVRPUl9IRUxQRVI7XG5cbiAgdmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihBU1lOQ19JVEVSQVRPUl9QUk9YWSk7XG5cbiAgdmFyIGdldFN0YXRlT3JFYXJseUV4aXQgPSBmdW5jdGlvbiAodGhhdCkge1xuICAgIHZhciBzdGF0ZUNvbXBsZXRpb24gPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpO1xuICAgIH0pO1xuXG4gICAgdmFyIHN0YXRlRXJyb3IgPSBzdGF0ZUNvbXBsZXRpb24uZXJyb3I7XG4gICAgdmFyIHN0YXRlID0gc3RhdGVDb21wbGV0aW9uLnZhbHVlO1xuXG4gICAgaWYgKHN0YXRlRXJyb3IgfHwgKElTX0dFTkVSQVRPUiAmJiBzdGF0ZS5kb25lKSkge1xuICAgICAgcmV0dXJuIHsgZXhpdDogdHJ1ZSwgdmFsdWU6IHN0YXRlRXJyb3IgPyBQcm9taXNlLnJlamVjdChzdGF0ZSkgOiBQcm9taXNlLnJlc29sdmUoY3JlYXRlSXRlclJlc3VsdE9iamVjdCh1bmRlZmluZWQsIHRydWUpKSB9O1xuICAgIH0gcmV0dXJuIHsgZXhpdDogZmFsc2UsIHZhbHVlOiBzdGF0ZSB9O1xuICB9O1xuXG4gIHZhciBlbnF1ZXVlID0gZnVuY3Rpb24gKHN0YXRlLCBoYW5kbGVyKSB7XG4gICAgdmFyIHRhc2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcHJvbWlzZSA9IGhhbmRsZXIoKTtcbiAgICAgIGlmIChJU19HRU5FUkFUT1IpIHtcbiAgICAgICAgc3RhdGUuYXdhaXRpbmcgPSBwcm9taXNlO1xuICAgICAgICB2YXIgY2xlYW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKHN0YXRlLmF3YWl0aW5nID09PSBwcm9taXNlKSBzdGF0ZS5hd2FpdGluZyA9IG51bGw7XG4gICAgICAgIH07XG4gICAgICAgIHByb21pc2UudGhlbihjbGVhbiwgY2xlYW4pO1xuICAgICAgfSByZXR1cm4gcHJvbWlzZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHN0YXRlLmF3YWl0aW5nID8gc3RhdGUuYXdhaXRpbmcgPSBzdGF0ZS5hd2FpdGluZy50aGVuKHRhc2ssIHRhc2spIDogdGFzaygpO1xuICB9O1xuXG4gIHZhciBBc3luY0l0ZXJhdG9yUHJveHlQcm90b3R5cGUgPSBkZWZpbmVCdWlsdElucyhjcmVhdGUoQXN5bmNJdGVyYXRvclByb3RvdHlwZSksIHtcbiAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgdmFyIHN0YXRlQ29tcGxldGlvbiA9IGdldFN0YXRlT3JFYXJseUV4aXQodGhpcyk7XG4gICAgICB2YXIgZXhpdCA9IHN0YXRlQ29tcGxldGlvbi5leGl0O1xuICAgICAgdmFyIHN0YXRlID0gc3RhdGVDb21wbGV0aW9uLnZhbHVlO1xuXG4gICAgICByZXR1cm4gZXhpdCA/IHN0YXRlIDogZW5xdWV1ZShzdGF0ZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaGFuZGxlckNvbXBsZXRpb24gPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gYW5PYmplY3Qoc3RhdGUubmV4dEhhbmRsZXIoUHJvbWlzZSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGhhbmRsZXJFcnJvciA9IGhhbmRsZXJDb21wbGV0aW9uLmVycm9yO1xuICAgICAgICB2YXIgdmFsdWUgPSBoYW5kbGVyQ29tcGxldGlvbi52YWx1ZTtcbiAgICAgICAgaWYgKGhhbmRsZXJFcnJvcikgc3RhdGUuZG9uZSA9IHRydWU7XG4gICAgICAgIHJldHVybiBoYW5kbGVyRXJyb3IgPyBQcm9taXNlLnJlamVjdCh2YWx1ZSkgOiBQcm9taXNlLnJlc29sdmUodmFsdWUpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICAncmV0dXJuJzogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0YXRlQ29tcGxldGlvbiA9IGdldFN0YXRlT3JFYXJseUV4aXQodGhpcyk7XG4gICAgICB2YXIgZXhpdCA9IHN0YXRlQ29tcGxldGlvbi5leGl0O1xuICAgICAgdmFyIHN0YXRlID0gc3RhdGVDb21wbGV0aW9uLnZhbHVlO1xuXG4gICAgICByZXR1cm4gZXhpdCA/IHN0YXRlIDogZW5xdWV1ZShzdGF0ZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgICAgICAgdmFyIGl0ZXJhdG9yID0gc3RhdGUuaXRlcmF0b3I7XG4gICAgICAgIHZhciBpbm5lckl0ZXJhdG9yID0gc3RhdGUuaW5uZXJJdGVyYXRvcjtcbiAgICAgICAgdmFyIHJldHVybk1ldGhvZCwgcmVzdWx0O1xuICAgICAgICB2YXIgY29tcGxldGlvbiA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChpbm5lckl0ZXJhdG9yKSB0cnkge1xuICAgICAgICAgICAgaXRlcmF0b3JDbG9zZShpbm5lckl0ZXJhdG9yLCAncmV0dXJuJyk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCAndGhyb3cnLCBlcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBnZXRNZXRob2QoaXRlcmF0b3IsICdyZXR1cm4nKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybk1ldGhvZCA9IHJlc3VsdCA9IGNvbXBsZXRpb24udmFsdWU7XG4gICAgICAgIGlmIChjb21wbGV0aW9uLmVycm9yKSByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVzdWx0KTtcbiAgICAgICAgaWYgKHJldHVybk1ldGhvZCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QodW5kZWZpbmVkLCB0cnVlKSk7XG4gICAgICAgIGNvbXBsZXRpb24gPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gY2FsbChyZXR1cm5NZXRob2QsIGl0ZXJhdG9yKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJlc3VsdCA9IGNvbXBsZXRpb24udmFsdWU7XG4gICAgICAgIGlmIChjb21wbGV0aW9uLmVycm9yKSByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIElTX0lURVJBVE9SID8gUHJvbWlzZS5yZXNvbHZlKHJlc3VsdCkgOiBQcm9taXNlLnJlc29sdmUocmVzdWx0KS50aGVuKGZ1bmN0aW9uIChyZXNvbHZlZCkge1xuICAgICAgICAgIGFuT2JqZWN0KHJlc29sdmVkKTtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdCh1bmRlZmluZWQsIHRydWUpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgaWYgKElTX0dFTkVSQVRPUikge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShBc3luY0l0ZXJhdG9yUHJveHlQcm90b3R5cGUsIFRPX1NUUklOR19UQUcsICdBc3luYyBJdGVyYXRvciBIZWxwZXInKTtcbiAgfVxuXG4gIHJldHVybiBBc3luY0l0ZXJhdG9yUHJveHlQcm90b3R5cGU7XG59O1xuXG52YXIgQXN5bmNJdGVyYXRvckhlbHBlclByb3RvdHlwZSA9IGNyZWF0ZUFzeW5jSXRlcmF0b3JQcm94eVByb3RvdHlwZShmYWxzZSk7XG52YXIgV3JhcEZvclZhbGlkQXN5bmNJdGVyYXRvclByb3RvdHlwZSA9IGNyZWF0ZUFzeW5jSXRlcmF0b3JQcm94eVByb3RvdHlwZSh0cnVlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmV4dEhhbmRsZXIsIElTX0lURVJBVE9SKSB7XG4gIHZhciBBU1lOQ19JVEVSQVRPUl9QUk9YWSA9IElTX0lURVJBVE9SID8gV1JBUF9GT1JfVkFMSURfQVNZTkNfSVRFUkFUT1IgOiBBU1lOQ19JVEVSQVRPUl9IRUxQRVI7XG5cbiAgdmFyIEFzeW5jSXRlcmF0b3JQcm94eSA9IGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IocmVjb3JkLCBzdGF0ZSkge1xuICAgIGlmIChzdGF0ZSkge1xuICAgICAgc3RhdGUuaXRlcmF0b3IgPSByZWNvcmQuaXRlcmF0b3I7XG4gICAgICBzdGF0ZS5uZXh0ID0gcmVjb3JkLm5leHQ7XG4gICAgfSBlbHNlIHN0YXRlID0gcmVjb3JkO1xuICAgIHN0YXRlLnR5cGUgPSBBU1lOQ19JVEVSQVRPUl9QUk9YWTtcbiAgICBzdGF0ZS5uZXh0SGFuZGxlciA9IG5leHRIYW5kbGVyO1xuICAgIHN0YXRlLmRvbmUgPSBmYWxzZTtcbiAgICBzdGF0ZS5hd2FpdGluZyA9IG51bGw7XG4gICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCBzdGF0ZSk7XG4gIH07XG5cbiAgQXN5bmNJdGVyYXRvclByb3h5LnByb3RvdHlwZSA9IElTX0lURVJBVE9SID8gV3JhcEZvclZhbGlkQXN5bmNJdGVyYXRvclByb3RvdHlwZSA6IEFzeW5jSXRlcmF0b3JIZWxwZXJQcm90b3R5cGU7XG5cbiAgcmV0dXJuIEFzeW5jSXRlcmF0b3JQcm94eTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1pdGVyYXRvci1oZWxwZXJzXG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZ2V0SXRlcmF0b3JEaXJlY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLWRpcmVjdCcpO1xudmFyIGNyZWF0ZUFzeW5jSXRlcmF0b3JQcm94eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hc3luYy1pdGVyYXRvci1jcmVhdGUtcHJveHknKTtcbnZhciBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyLXJlc3VsdC1vYmplY3QnKTtcblxudmFyIEFzeW5jSXRlcmF0b3JQcm94eSA9IGNyZWF0ZUFzeW5jSXRlcmF0b3JQcm94eShmdW5jdGlvbiAoUHJvbWlzZSkge1xuICB2YXIgc3RhdGUgPSB0aGlzO1xuICB2YXIgaXRlcmF0b3IgPSBzdGF0ZS5pdGVyYXRvcjtcblxuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGFuT2JqZWN0KGNhbGwoc3RhdGUubmV4dCwgaXRlcmF0b3IpKSkudGhlbihmdW5jdGlvbiAoc3RlcCkge1xuICAgIGlmIChhbk9iamVjdChzdGVwKS5kb25lKSB7XG4gICAgICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KFtzdGF0ZS5pbmRleCsrLCBzdGVwLnZhbHVlXSwgZmFsc2UpO1xuICB9KS50aGVuKG51bGwsIGZ1bmN0aW9uIChlcnJvcikge1xuICAgIHN0YXRlLmRvbmUgPSB0cnVlO1xuICAgIHRocm93IGVycm9yO1xuICB9KTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluZGV4ZWQoKSB7XG4gIHJldHVybiBuZXcgQXN5bmNJdGVyYXRvclByb3h5KGdldEl0ZXJhdG9yRGlyZWN0KHRoaXMpLCB7XG4gICAgaW5kZXg6IDBcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtaXRlcmF0b3ItaGVscGVyc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtYXJyYXktZnJvbS1hc3luY1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZG9lc05vdEV4Y2VlZFNhZmVJbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvZXMtbm90LWV4Y2VlZC1zYWZlLWludGVnZXInKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGdldEl0ZXJhdG9yRGlyZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1kaXJlY3QnKTtcbnZhciBjbG9zZUFzeW5jSXRlcmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FzeW5jLWl0ZXJhdG9yLWNsb3NlJyk7XG5cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoVFlQRSkge1xuICB2YXIgSVNfVE9fQVJSQVkgPSBUWVBFID09IDA7XG4gIHZhciBJU19GT1JfRUFDSCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0VWRVJZID0gVFlQRSA9PSAyO1xuICB2YXIgSVNfU09NRSA9IFRZUEUgPT0gMztcbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmplY3QsIGZuLCB0YXJnZXQpIHtcbiAgICB2YXIgcmVjb3JkID0gZ2V0SXRlcmF0b3JEaXJlY3Qob2JqZWN0KTtcbiAgICB2YXIgUHJvbWlzZSA9IGdldEJ1aWx0SW4oJ1Byb21pc2UnKTtcbiAgICB2YXIgaXRlcmF0b3IgPSByZWNvcmQuaXRlcmF0b3I7XG4gICAgdmFyIG5leHQgPSByZWNvcmQubmV4dDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBNQVBQSU5HID0gZm4gIT09IHVuZGVmaW5lZDtcbiAgICBpZiAoTUFQUElORyB8fCAhSVNfVE9fQVJSQVkpIGFDYWxsYWJsZShmbik7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGlmQWJydXB0Q2xvc2VBc3luY0l0ZXJhdG9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIGNsb3NlQXN5bmNJdGVyYXRpb24oaXRlcmF0b3IsIHJlamVjdCwgZXJyb3IsIHJlamVjdCk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoSVNfVE9fQVJSQVkgJiYgTUFQUElORykgdHJ5IHtcbiAgICAgICAgICAgIGRvZXNOb3RFeGNlZWRTYWZlSW50ZWdlcihpbmRleCk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3I1KSB7IGlmQWJydXB0Q2xvc2VBc3luY0l0ZXJhdG9yKGVycm9yNSk7IH1cbiAgICAgICAgICBQcm9taXNlLnJlc29sdmUoYW5PYmplY3QoY2FsbChuZXh0LCBpdGVyYXRvcikpKS50aGVuKGZ1bmN0aW9uIChzdGVwKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBpZiAoYW5PYmplY3Qoc3RlcCkuZG9uZSkge1xuICAgICAgICAgICAgICAgIGlmIChJU19UT19BUlJBWSkge1xuICAgICAgICAgICAgICAgICAgdGFyZ2V0Lmxlbmd0aCA9IGluZGV4O1xuICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0YXJnZXQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSByZXNvbHZlKElTX1NPTUUgPyBmYWxzZSA6IElTX0VWRVJZIHx8IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgaWYgKE1BUFBJTkcpIHtcbiAgICAgICAgICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKElTX1RPX0FSUkFZID8gZm4odmFsdWUsIGluZGV4KSA6IGZuKHZhbHVlKSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKElTX0ZPUl9FQUNIKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb29wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID8gbG9vcCgpIDogY2xvc2VBc3luY0l0ZXJhdGlvbihpdGVyYXRvciwgcmVzb2x2ZSwgZmFsc2UsIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChJU19UT19BUlJBWSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W2luZGV4KytdID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICBsb29wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcjQpIHsgaWZBYnJ1cHRDbG9zZUFzeW5jSXRlcmF0b3IoZXJyb3I0KTsgfVxuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPyBjbG9zZUFzeW5jSXRlcmF0aW9uKGl0ZXJhdG9yLCByZXNvbHZlLCBJU19TT01FIHx8IHZhbHVlLCByZWplY3QpIDogbG9vcCgpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgaWZBYnJ1cHRDbG9zZUFzeW5jSXRlcmF0b3IpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W2luZGV4KytdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGxvb3AoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcjMpIHsgaWZBYnJ1cHRDbG9zZUFzeW5jSXRlcmF0b3IoZXJyb3IzKTsgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcjIpIHsgcmVqZWN0KGVycm9yMik7IH1cbiAgICAgICAgICB9LCByZWplY3QpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikgeyByZWplY3QoZXJyb3IpOyB9XG4gICAgICB9O1xuXG4gICAgICBsb29wKCk7XG4gICAgfSk7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdG9BcnJheTogY3JlYXRlTWV0aG9kKDApLFxuICBmb3JFYWNoOiBjcmVhdGVNZXRob2QoMSksXG4gIGV2ZXJ5OiBjcmVhdGVNZXRob2QoMiksXG4gIHNvbWU6IGNyZWF0ZU1ldGhvZCgzKSxcbiAgZmluZDogY3JlYXRlTWV0aG9kKDQpXG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgVVNFX0ZVTkNUSU9OX0NPTlNUUlVDVE9SID0gJ1VTRV9GVU5DVElPTl9DT05TVFJVQ1RPUic7XG52YXIgQVNZTkNfSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2FzeW5jSXRlcmF0b3InKTtcbnZhciBBc3luY0l0ZXJhdG9yID0gZ2xvYmFsLkFzeW5jSXRlcmF0b3I7XG52YXIgUGFzc2VkQXN5bmNJdGVyYXRvclByb3RvdHlwZSA9IHNoYXJlZC5Bc3luY0l0ZXJhdG9yUHJvdG90eXBlO1xudmFyIEFzeW5jSXRlcmF0b3JQcm90b3R5cGUsIHByb3RvdHlwZTtcblxuaWYgKFBhc3NlZEFzeW5jSXRlcmF0b3JQcm90b3R5cGUpIHtcbiAgQXN5bmNJdGVyYXRvclByb3RvdHlwZSA9IFBhc3NlZEFzeW5jSXRlcmF0b3JQcm90b3R5cGU7XG59IGVsc2UgaWYgKGlzQ2FsbGFibGUoQXN5bmNJdGVyYXRvcikpIHtcbiAgQXN5bmNJdGVyYXRvclByb3RvdHlwZSA9IEFzeW5jSXRlcmF0b3IucHJvdG90eXBlO1xufSBlbHNlIGlmIChzaGFyZWRbVVNFX0ZVTkNUSU9OX0NPTlNUUlVDVE9SXSB8fCBnbG9iYWxbVVNFX0ZVTkNUSU9OX0NPTlNUUlVDVE9SXSkge1xuICB0cnkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuYyAtLSB3ZSBoYXZlIG5vIGFsdGVybmF0aXZlcyB3aXRob3V0IHVzYWdlIG9mIG1vZGVybiBzeW50YXhcbiAgICBwcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihnZXRQcm90b3R5cGVPZihnZXRQcm90b3R5cGVPZihGdW5jdGlvbigncmV0dXJuIGFzeW5jIGZ1bmN0aW9uKigpe30oKScpKCkpKSk7XG4gICAgaWYgKGdldFByb3RvdHlwZU9mKHByb3RvdHlwZSkgPT09IE9iamVjdC5wcm90b3R5cGUpIEFzeW5jSXRlcmF0b3JQcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbn1cblxuaWYgKCFBc3luY0l0ZXJhdG9yUHJvdG90eXBlKSBBc3luY0l0ZXJhdG9yUHJvdG90eXBlID0ge307XG5lbHNlIGlmIChJU19QVVJFKSBBc3luY0l0ZXJhdG9yUHJvdG90eXBlID0gY3JlYXRlKEFzeW5jSXRlcmF0b3JQcm90b3R5cGUpO1xuXG5pZiAoIWlzQ2FsbGFibGUoQXN5bmNJdGVyYXRvclByb3RvdHlwZVtBU1lOQ19JVEVSQVRPUl0pKSB7XG4gIGRlZmluZUJ1aWx0SW4oQXN5bmNJdGVyYXRvclByb3RvdHlwZSwgQVNZTkNfSVRFUkFUT1IsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXN5bmNJdGVyYXRvclByb3RvdHlwZTtcbiIsInZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBjcmVhdGVBc3luY0l0ZXJhdG9yUHJveHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXN5bmMtaXRlcmF0b3ItY3JlYXRlLXByb3h5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQXN5bmNJdGVyYXRvclByb3h5KGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGNhbGwodGhpcy5uZXh0LCB0aGlzLml0ZXJhdG9yKTtcbn0sIHRydWUpO1xuIiwidmFyIGl0b2MgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz0nO1xudmFyIGN0b2kgPSB7fTtcblxuZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IDY2OyBpbmRleCsrKSBjdG9pW2l0b2MuY2hhckF0KGluZGV4KV0gPSBpbmRleDtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGl0b2M6IGl0b2MsXG4gIGN0b2k6IGN0b2lcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXRlcmF0b3JDbG9zZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1jbG9zZScpO1xuXG4vLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBFTlRSSUVTKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEVOVFJJRVMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCAndGhyb3cnLCBlcnJvcik7XG4gIH1cbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIGNhbGxlZCA9IDA7XG4gIHZhciBpdGVyYXRvcldpdGhSZXR1cm4gPSB7XG4gICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHsgZG9uZTogISFjYWxsZWQrKyB9O1xuICAgIH0sXG4gICAgJ3JldHVybic6IGZ1bmN0aW9uICgpIHtcbiAgICAgIFNBRkVfQ0xPU0lORyA9IHRydWU7XG4gICAgfVxuICB9O1xuICBpdGVyYXRvcldpdGhSZXR1cm5bSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1hcnJheS1mcm9tLCBuby10aHJvdy1saXRlcmFsIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIEFycmF5LmZyb20oaXRlcmF0b3JXaXRoUmV0dXJuLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBTS0lQX0NMT1NJTkcpIHtcbiAgaWYgKCFTS0lQX0NMT1NJTkcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgSVRFUkFUSU9OX1NVUFBPUlQgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgb2JqZWN0ID0ge307XG4gICAgb2JqZWN0W0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4geyBkb25lOiBJVEVSQVRJT05fU1VQUE9SVCA9IHRydWUgfTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICAgIGV4ZWMob2JqZWN0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gSVRFUkFUSU9OX1NVUFBPUlQ7XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG52YXIgdG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyh7fS50b1N0cmluZyk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBzdHJpbmdTbGljZSh0b1N0cmluZyhpdCksIDgsIC0xKTtcbn07XG4iLCJ2YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjbGFzc29mUmF3ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyICRPYmplY3QgPSBPYmplY3Q7XG5cbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQ09SUkVDVF9BUkdVTUVOVFMgPSBjbGFzc29mUmF3KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG4vLyBnZXR0aW5nIHRhZyBmcm9tIEVTNisgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgXG5tb2R1bGUuZXhwb3J0cyA9IFRPX1NUUklOR19UQUdfU1VQUE9SVCA/IGNsYXNzb2ZSYXcgOiBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIHRhZywgcmVzdWx0O1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAodGFnID0gdHJ5R2V0KE8gPSAkT2JqZWN0KGl0KSwgVE9fU1RSSU5HX1RBRykpID09ICdzdHJpbmcnID8gdGFnXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBDT1JSRUNUX0FSR1VNRU5UUyA/IGNsYXNzb2ZSYXcoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAocmVzdWx0ID0gY2xhc3NvZlJhdyhPKSkgPT0gJ09iamVjdCcgJiYgaXNDYWxsYWJsZShPLmNhbGxlZSkgPyAnQXJndW1lbnRzJyA6IHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvY29sbGVjdGlvbi1tZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGFkZEFsbCgvKiAuLi5lbGVtZW50cyAqLykge1xuICB2YXIgc2V0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciBhZGRlciA9IGFDYWxsYWJsZShzZXQuYWRkKTtcbiAgZm9yICh2YXIgayA9IDAsIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGsgPCBsZW47IGsrKykge1xuICAgIGNhbGwoYWRkZXIsIHNldCwgYXJndW1lbnRzW2tdKTtcbiAgfVxuICByZXR1cm4gc2V0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9jb2xsZWN0aW9uLW1ldGhvZHNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVsZXRlQWxsKC8qIC4uLmVsZW1lbnRzICovKSB7XG4gIHZhciBjb2xsZWN0aW9uID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZW1vdmVyID0gYUNhbGxhYmxlKGNvbGxlY3Rpb25bJ2RlbGV0ZSddKTtcbiAgdmFyIGFsbERlbGV0ZWQgPSB0cnVlO1xuICB2YXIgd2FzRGVsZXRlZDtcbiAgZm9yICh2YXIgayA9IDAsIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGsgPCBsZW47IGsrKykge1xuICAgIHdhc0RlbGV0ZWQgPSBjYWxsKHJlbW92ZXIsIGNvbGxlY3Rpb24sIGFyZ3VtZW50c1trXSk7XG4gICAgYWxsRGVsZXRlZCA9IGFsbERlbGV0ZWQgJiYgd2FzRGVsZXRlZDtcbiAgfVxuICByZXR1cm4gISFhbGxEZWxldGVkO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS9cbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgYUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY29uc3RydWN0b3InKTtcbnZhciBpc051bGxPclVuZGVmaW5lZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1udWxsLW9yLXVuZGVmaW5lZCcpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xuXG52YXIgcHVzaCA9IFtdLnB1c2g7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZnJvbShzb3VyY2UgLyogLCBtYXBGbiwgdGhpc0FyZyAqLykge1xuICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIG1hcEZuID0gbGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgdmFyIG1hcHBpbmcsIGFycmF5LCBuLCBib3VuZEZ1bmN0aW9uO1xuICBhQ29uc3RydWN0b3IodGhpcyk7XG4gIG1hcHBpbmcgPSBtYXBGbiAhPT0gdW5kZWZpbmVkO1xuICBpZiAobWFwcGluZykgYUNhbGxhYmxlKG1hcEZuKTtcbiAgaWYgKGlzTnVsbE9yVW5kZWZpbmVkKHNvdXJjZSkpIHJldHVybiBuZXcgdGhpcygpO1xuICBhcnJheSA9IFtdO1xuICBpZiAobWFwcGluZykge1xuICAgIG4gPSAwO1xuICAgIGJvdW5kRnVuY3Rpb24gPSBiaW5kKG1hcEZuLCBsZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICBpdGVyYXRlKHNvdXJjZSwgZnVuY3Rpb24gKG5leHRJdGVtKSB7XG4gICAgICBjYWxsKHB1c2gsIGFycmF5LCBib3VuZEZ1bmN0aW9uKG5leHRJdGVtLCBuKyspKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBpdGVyYXRlKHNvdXJjZSwgcHVzaCwgeyB0aGF0OiBhcnJheSB9KTtcbiAgfVxuICByZXR1cm4gbmV3IHRoaXMoYXJyYXkpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlJyk7XG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gb2YoKSB7XG4gIHJldHVybiBuZXcgdGhpcyhhcnJheVNsaWNlKGFyZ3VtZW50cykpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlZmluZUJ1aWx0SW5zID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbnMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBpc051bGxPclVuZGVmaW5lZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1udWxsLW9yLXVuZGVmaW5lZCcpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWRlZmluZScpO1xudmFyIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWl0ZXItcmVzdWx0LW9iamVjdCcpO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhc3RLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEnKS5mYXN0S2V5O1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBpbnRlcm5hbFN0YXRlR2V0dGVyRm9yID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3I7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIENPTlNUUlVDVE9SX05BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQ29uc3RydWN0b3IgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBQcm90b3R5cGUpO1xuICAgICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGF0LCB7XG4gICAgICAgIHR5cGU6IENPTlNUUlVDVE9SX05BTUUsXG4gICAgICAgIGluZGV4OiBjcmVhdGUobnVsbCksXG4gICAgICAgIGZpcnN0OiB1bmRlZmluZWQsXG4gICAgICAgIGxhc3Q6IHVuZGVmaW5lZCxcbiAgICAgICAgc2l6ZTogMFxuICAgICAgfSk7XG4gICAgICBpZiAoIURFU0NSSVBUT1JTKSB0aGF0LnNpemUgPSAwO1xuICAgICAgaWYgKCFpc051bGxPclVuZGVmaW5lZChpdGVyYWJsZSkpIGl0ZXJhdGUoaXRlcmFibGUsIHRoYXRbQURERVJdLCB7IHRoYXQ6IHRoYXQsIEFTX0VOVFJJRVM6IElTX01BUCB9KTtcbiAgICB9KTtcblxuICAgIHZhciBQcm90b3R5cGUgPSBDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cbiAgICB2YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IGludGVybmFsU3RhdGVHZXR0ZXJGb3IoQ09OU1RSVUNUT1JfTkFNRSk7XG5cbiAgICB2YXIgZGVmaW5lID0gZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgdmFyIHByZXZpb3VzLCBpbmRleDtcbiAgICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgIGVudHJ5LnZhbHVlID0gdmFsdWU7XG4gICAgICAvLyBjcmVhdGUgbmV3IGVudHJ5XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5sYXN0ID0gZW50cnkgPSB7XG4gICAgICAgICAgaW5kZXg6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLFxuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICBwcmV2aW91czogcHJldmlvdXMgPSBzdGF0ZS5sYXN0LFxuICAgICAgICAgIG5leHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICByZW1vdmVkOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgICBpZiAoIXN0YXRlLmZpcnN0KSBzdGF0ZS5maXJzdCA9IGVudHJ5O1xuICAgICAgICBpZiAocHJldmlvdXMpIHByZXZpb3VzLm5leHQgPSBlbnRyeTtcbiAgICAgICAgaWYgKERFU0NSSVBUT1JTKSBzdGF0ZS5zaXplKys7XG4gICAgICAgIGVsc2UgdGhhdC5zaXplKys7XG4gICAgICAgIC8vIGFkZCB0byBpbmRleFxuICAgICAgICBpZiAoaW5kZXggIT09ICdGJykgc3RhdGUuaW5kZXhbaW5kZXhdID0gZW50cnk7XG4gICAgICB9IHJldHVybiB0aGF0O1xuICAgIH07XG5cbiAgICB2YXIgZ2V0RW50cnkgPSBmdW5jdGlvbiAodGhhdCwga2V5KSB7XG4gICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpO1xuICAgICAgLy8gZmFzdCBjYXNlXG4gICAgICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSk7XG4gICAgICB2YXIgZW50cnk7XG4gICAgICBpZiAoaW5kZXggIT09ICdGJykgcmV0dXJuIHN0YXRlLmluZGV4W2luZGV4XTtcbiAgICAgIC8vIGZyb3plbiBvYmplY3QgY2FzZVxuICAgICAgZm9yIChlbnRyeSA9IHN0YXRlLmZpcnN0OyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uZXh0KSB7XG4gICAgICAgIGlmIChlbnRyeS5rZXkgPT0ga2V5KSByZXR1cm4gZW50cnk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGRlZmluZUJ1aWx0SW5zKFByb3RvdHlwZSwge1xuICAgICAgLy8gYHsgTWFwLCBTZXQgfS5wcm90b3R5cGUuY2xlYXIoKWAgbWV0aG9kc1xuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLmNsZWFyXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUuY2xlYXJcbiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpO1xuICAgICAgICB2YXIgZGF0YSA9IHN0YXRlLmluZGV4O1xuICAgICAgICB2YXIgZW50cnkgPSBzdGF0ZS5maXJzdDtcbiAgICAgICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICAgICAgZW50cnkucmVtb3ZlZCA9IHRydWU7XG4gICAgICAgICAgaWYgKGVudHJ5LnByZXZpb3VzKSBlbnRyeS5wcmV2aW91cyA9IGVudHJ5LnByZXZpb3VzLm5leHQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgZGVsZXRlIGRhdGFbZW50cnkuaW5kZXhdO1xuICAgICAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5maXJzdCA9IHN0YXRlLmxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChERVNDUklQVE9SUykgc3RhdGUuc2l6ZSA9IDA7XG4gICAgICAgIGVsc2UgdGhhdC5zaXplID0gMDtcbiAgICAgIH0sXG4gICAgICAvLyBgeyBNYXAsIFNldCB9LnByb3RvdHlwZS5kZWxldGUoa2V5KWAgbWV0aG9kc1xuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLmRlbGV0ZVxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmRlbGV0ZVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpO1xuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm5leHQ7XG4gICAgICAgICAgdmFyIHByZXYgPSBlbnRyeS5wcmV2aW91cztcbiAgICAgICAgICBkZWxldGUgc3RhdGUuaW5kZXhbZW50cnkuaW5kZXhdO1xuICAgICAgICAgIGVudHJ5LnJlbW92ZWQgPSB0cnVlO1xuICAgICAgICAgIGlmIChwcmV2KSBwcmV2Lm5leHQgPSBuZXh0O1xuICAgICAgICAgIGlmIChuZXh0KSBuZXh0LnByZXZpb3VzID0gcHJldjtcbiAgICAgICAgICBpZiAoc3RhdGUuZmlyc3QgPT0gZW50cnkpIHN0YXRlLmZpcnN0ID0gbmV4dDtcbiAgICAgICAgICBpZiAoc3RhdGUubGFzdCA9PSBlbnRyeSkgc3RhdGUubGFzdCA9IHByZXY7XG4gICAgICAgICAgaWYgKERFU0NSSVBUT1JTKSBzdGF0ZS5zaXplLS07XG4gICAgICAgICAgZWxzZSB0aGF0LnNpemUtLTtcbiAgICAgICAgfSByZXR1cm4gISFlbnRyeTtcbiAgICAgIH0sXG4gICAgICAvLyBgeyBNYXAsIFNldCB9LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpYCBtZXRob2RzXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC5wcm90b3R5cGUuZm9yZWFjaFxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmZvcmVhY2hcbiAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICAgICAgdmFyIGVudHJ5O1xuICAgICAgICB3aGlsZSAoZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm5leHQgOiBzdGF0ZS5maXJzdCkge1xuICAgICAgICAgIGJvdW5kRnVuY3Rpb24oZW50cnkudmFsdWUsIGVudHJ5LmtleSwgdGhpcyk7XG4gICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnJlbW92ZWQpIGVudHJ5ID0gZW50cnkucHJldmlvdXM7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyBgeyBNYXAsIFNldH0ucHJvdG90eXBlLmhhcyhrZXkpYCBtZXRob2RzXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC5wcm90b3R5cGUuaGFzXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUuaGFzXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodGhpcywga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGRlZmluZUJ1aWx0SW5zKFByb3RvdHlwZSwgSVNfTUFQID8ge1xuICAgICAgLy8gYE1hcC5wcm90b3R5cGUuZ2V0KGtleSlgIG1ldGhvZFxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLmdldFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoaXMsIGtleSk7XG4gICAgICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52YWx1ZTtcbiAgICAgIH0sXG4gICAgICAvLyBgTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlgIG1ldGhvZFxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLnNldFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZGVmaW5lKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IDoge1xuICAgICAgLy8gYFNldC5wcm90b3R5cGUuYWRkKHZhbHVlKWAgbWV0aG9kXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUuYWRkXG4gICAgICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZGVmaW5lKHRoaXMsIHZhbHVlID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWUsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoREVTQ1JJUFRPUlMpIGRlZmluZVByb3BlcnR5KFByb3RvdHlwZSwgJ3NpemUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcykuc2l6ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH0sXG4gIHNldFN0cm9uZzogZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBDT05TVFJVQ1RPUl9OQU1FLCBJU19NQVApIHtcbiAgICB2YXIgSVRFUkFUT1JfTkFNRSA9IENPTlNUUlVDVE9SX05BTUUgKyAnIEl0ZXJhdG9yJztcbiAgICB2YXIgZ2V0SW50ZXJuYWxDb2xsZWN0aW9uU3RhdGUgPSBpbnRlcm5hbFN0YXRlR2V0dGVyRm9yKENPTlNUUlVDVE9SX05BTUUpO1xuICAgIHZhciBnZXRJbnRlcm5hbEl0ZXJhdG9yU3RhdGUgPSBpbnRlcm5hbFN0YXRlR2V0dGVyRm9yKElURVJBVE9SX05BTUUpO1xuICAgIC8vIGB7IE1hcCwgU2V0IH0ucHJvdG90eXBlLnsga2V5cywgdmFsdWVzLCBlbnRyaWVzLCBAQGl0ZXJhdG9yIH0oKWAgbWV0aG9kc1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5lbnRyaWVzXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLmtleXNcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC5wcm90b3R5cGUudmFsdWVzXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLUBAaXRlcmF0b3JcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUuZW50cmllc1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS5rZXlzXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLnZhbHVlc1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS1AQGl0ZXJhdG9yXG4gICAgZGVmaW5lSXRlcmF0b3IoQ29uc3RydWN0b3IsIENPTlNUUlVDVE9SX05BTUUsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICAgICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgICAgIHR5cGU6IElURVJBVE9SX05BTUUsXG4gICAgICAgIHRhcmdldDogaXRlcmF0ZWQsXG4gICAgICAgIHN0YXRlOiBnZXRJbnRlcm5hbENvbGxlY3Rpb25TdGF0ZShpdGVyYXRlZCksXG4gICAgICAgIGtpbmQ6IGtpbmQsXG4gICAgICAgIGxhc3Q6IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxJdGVyYXRvclN0YXRlKHRoaXMpO1xuICAgICAgdmFyIGtpbmQgPSBzdGF0ZS5raW5kO1xuICAgICAgdmFyIGVudHJ5ID0gc3RhdGUubGFzdDtcbiAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnJlbW92ZWQpIGVudHJ5ID0gZW50cnkucHJldmlvdXM7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYgKCFzdGF0ZS50YXJnZXQgfHwgIShzdGF0ZS5sYXN0ID0gZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm5leHQgOiBzdGF0ZS5zdGF0ZS5maXJzdCkpIHtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgc3RhdGUudGFyZ2V0ID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdCh1bmRlZmluZWQsIHRydWUpO1xuICAgICAgfVxuICAgICAgLy8gcmV0dXJuIHN0ZXAgYnkga2luZFxuICAgICAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdChlbnRyeS5rZXksIGZhbHNlKTtcbiAgICAgIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdChlbnRyeS52YWx1ZSwgZmFsc2UpO1xuICAgICAgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QoW2VudHJ5LmtleSwgZW50cnkudmFsdWVdLCBmYWxzZSk7XG4gICAgfSwgSVNfTUFQID8gJ2VudHJpZXMnIDogJ3ZhbHVlcycsICFJU19NQVAsIHRydWUpO1xuXG4gICAgLy8gYHsgTWFwLCBTZXQgfS5wcm90b3R5cGVbQEBzcGVjaWVzXWAgYWNjZXNzb3JzXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtbWFwLUBAc3BlY2llc1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0LXNldC1AQHNwZWNpZXNcbiAgICBzZXRTcGVjaWVzKENPTlNUUlVDVE9SX05BTUUpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGRlZmluZUJ1aWx0SW5zID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbnMnKTtcbnZhciBnZXRXZWFrRGF0YSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YScpLmdldFdlYWtEYXRhO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc051bGxPclVuZGVmaW5lZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1udWxsLW9yLXVuZGVmaW5lZCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIEFycmF5SXRlcmF0aW9uTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGludGVybmFsU3RhdGVHZXR0ZXJGb3IgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcjtcbnZhciBmaW5kID0gQXJyYXlJdGVyYXRpb25Nb2R1bGUuZmluZDtcbnZhciBmaW5kSW5kZXggPSBBcnJheUl0ZXJhdGlvbk1vZHVsZS5maW5kSW5kZXg7XG52YXIgc3BsaWNlID0gdW5jdXJyeVRoaXMoW10uc3BsaWNlKTtcbnZhciBpZCA9IDA7XG5cbi8vIGZhbGxiYWNrIGZvciB1bmNhdWdodCBmcm96ZW4ga2V5c1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAoc3RvcmUpIHtcbiAgcmV0dXJuIHN0b3JlLmZyb3plbiB8fCAoc3RvcmUuZnJvemVuID0gbmV3IFVuY2F1Z2h0RnJvemVuU3RvcmUoKSk7XG59O1xuXG52YXIgVW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbnRyaWVzID0gW107XG59O1xuXG52YXIgZmluZFVuY2F1Z2h0RnJvemVuID0gZnVuY3Rpb24gKHN0b3JlLCBrZXkpIHtcbiAgcmV0dXJuIGZpbmQoc3RvcmUuZW50cmllcywgZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gIH0pO1xufTtcblxuVW5jYXVnaHRGcm96ZW5TdG9yZS5wcm90b3R5cGUgPSB7XG4gIGdldDogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmIChlbnRyeSkgcmV0dXJuIGVudHJ5WzFdO1xuICB9LFxuICBoYXM6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gISFmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmIChlbnRyeSkgZW50cnlbMV0gPSB2YWx1ZTtcbiAgICBlbHNlIHRoaXMuZW50cmllcy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0sXG4gICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGluZGV4ID0gZmluZEluZGV4KHRoaXMuZW50cmllcywgZnVuY3Rpb24gKGl0KSB7XG4gICAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgICB9KTtcbiAgICBpZiAofmluZGV4KSBzcGxpY2UodGhpcy5lbnRyaWVzLCBpbmRleCwgMSk7XG4gICAgcmV0dXJuICEhfmluZGV4O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBDT05TVFJVQ1RPUl9OQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIENvbnN0cnVjdG9yID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgUHJvdG90eXBlKTtcbiAgICAgIHNldEludGVybmFsU3RhdGUodGhhdCwge1xuICAgICAgICB0eXBlOiBDT05TVFJVQ1RPUl9OQU1FLFxuICAgICAgICBpZDogaWQrKyxcbiAgICAgICAgZnJvemVuOiB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgICAgaWYgKCFpc051bGxPclVuZGVmaW5lZChpdGVyYWJsZSkpIGl0ZXJhdGUoaXRlcmFibGUsIHRoYXRbQURERVJdLCB7IHRoYXQ6IHRoYXQsIEFTX0VOVFJJRVM6IElTX01BUCB9KTtcbiAgICB9KTtcblxuICAgIHZhciBQcm90b3R5cGUgPSBDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cbiAgICB2YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IGludGVybmFsU3RhdGVHZXR0ZXJGb3IoQ09OU1RSVUNUT1JfTkFNRSk7XG5cbiAgICB2YXIgZGVmaW5lID0gZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICB2YXIgZGF0YSA9IGdldFdlYWtEYXRhKGFuT2JqZWN0KGtleSksIHRydWUpO1xuICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHVuY2F1Z2h0RnJvemVuU3RvcmUoc3RhdGUpLnNldChrZXksIHZhbHVlKTtcbiAgICAgIGVsc2UgZGF0YVtzdGF0ZS5pZF0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGF0O1xuICAgIH07XG5cbiAgICBkZWZpbmVCdWlsdElucyhQcm90b3R5cGUsIHtcbiAgICAgIC8vIGB7IFdlYWtNYXAsIFdlYWtTZXQgfS5wcm90b3R5cGUuZGVsZXRlKGtleSlgIG1ldGhvZHNcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtd2Vha21hcC5wcm90b3R5cGUuZGVsZXRlXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXdlYWtzZXQucHJvdG90eXBlLmRlbGV0ZVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2Vha0RhdGEoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHN0YXRlKVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgaGFzT3duKGRhdGEsIHN0YXRlLmlkKSAmJiBkZWxldGUgZGF0YVtzdGF0ZS5pZF07XG4gICAgICB9LFxuICAgICAgLy8gYHsgV2Vha01hcCwgV2Vha1NldCB9LnByb3RvdHlwZS5oYXMoa2V5KWAgbWV0aG9kc1xuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy13ZWFrbWFwLnByb3RvdHlwZS5oYXNcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtd2Vha3NldC5wcm90b3R5cGUuaGFzXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2Vha0RhdGEoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHN0YXRlKS5oYXMoa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgaGFzT3duKGRhdGEsIHN0YXRlLmlkKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGRlZmluZUJ1aWx0SW5zKFByb3RvdHlwZSwgSVNfTUFQID8ge1xuICAgICAgLy8gYFdlYWtNYXAucHJvdG90eXBlLmdldChrZXkpYCBtZXRob2RcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtd2Vha21hcC5wcm90b3R5cGUuZ2V0XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgICAgaWYgKGlzT2JqZWN0KGtleSkpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWtEYXRhKGtleSk7XG4gICAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHN0YXRlKS5nZXQoa2V5KTtcbiAgICAgICAgICByZXR1cm4gZGF0YSA/IGRhdGFbc3RhdGUuaWRdIDogdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gYFdlYWtNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKWAgbWV0aG9kXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXdlYWttYXAucHJvdG90eXBlLnNldFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZGVmaW5lKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0gOiB7XG4gICAgICAvLyBgV2Vha1NldC5wcm90b3R5cGUuYWRkKHZhbHVlKWAgbWV0aG9kXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXdlYWtzZXQucHJvdG90eXBlLmFkZFxuICAgICAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluZSh0aGlzLCB2YWx1ZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciBJbnRlcm5hbE1ldGFkYXRhTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLW1ldGFkYXRhJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc051bGxPclVuZGVmaW5lZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1udWxsLW9yLXVuZGVmaW5lZCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT05TVFJVQ1RPUl9OQU1FLCB3cmFwcGVyLCBjb21tb24pIHtcbiAgdmFyIElTX01BUCA9IENPTlNUUlVDVE9SX05BTUUuaW5kZXhPZignTWFwJykgIT09IC0xO1xuICB2YXIgSVNfV0VBSyA9IENPTlNUUlVDVE9SX05BTUUuaW5kZXhPZignV2VhaycpICE9PSAtMTtcbiAgdmFyIEFEREVSID0gSVNfTUFQID8gJ3NldCcgOiAnYWRkJztcbiAgdmFyIE5hdGl2ZUNvbnN0cnVjdG9yID0gZ2xvYmFsW0NPTlNUUlVDVE9SX05BTUVdO1xuICB2YXIgTmF0aXZlUHJvdG90eXBlID0gTmF0aXZlQ29uc3RydWN0b3IgJiYgTmF0aXZlQ29uc3RydWN0b3IucHJvdG90eXBlO1xuICB2YXIgQ29uc3RydWN0b3IgPSBOYXRpdmVDb25zdHJ1Y3RvcjtcbiAgdmFyIGV4cG9ydGVkID0ge307XG5cbiAgdmFyIGZpeE1ldGhvZCA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgICB2YXIgdW5jdXJyaWVkTmF0aXZlTWV0aG9kID0gdW5jdXJyeVRoaXMoTmF0aXZlUHJvdG90eXBlW0tFWV0pO1xuICAgIGRlZmluZUJ1aWx0SW4oTmF0aXZlUHJvdG90eXBlLCBLRVksXG4gICAgICBLRVkgPT0gJ2FkZCcgPyBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICAgICAgdW5jdXJyaWVkTmF0aXZlTWV0aG9kKHRoaXMsIHZhbHVlID09PSAwID8gMCA6IHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9IDogS0VZID09ICdkZWxldGUnID8gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3Qoa2V5KSA/IGZhbHNlIDogdW5jdXJyaWVkTmF0aXZlTWV0aG9kKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXkpO1xuICAgICAgfSA6IEtFWSA9PSAnZ2V0JyA/IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGtleSkgPyB1bmRlZmluZWQgOiB1bmN1cnJpZWROYXRpdmVNZXRob2QodGhpcywga2V5ID09PSAwID8gMCA6IGtleSk7XG4gICAgICB9IDogS0VZID09ICdoYXMnID8gZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3Qoa2V5KSA/IGZhbHNlIDogdW5jdXJyaWVkTmF0aXZlTWV0aG9kKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXkpO1xuICAgICAgfSA6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIHVuY3VycmllZE5hdGl2ZU1ldGhvZCh0aGlzLCBrZXkgPT09IDAgPyAwIDoga2V5LCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICk7XG4gIH07XG5cbiAgdmFyIFJFUExBQ0UgPSBpc0ZvcmNlZChcbiAgICBDT05TVFJVQ1RPUl9OQU1FLFxuICAgICFpc0NhbGxhYmxlKE5hdGl2ZUNvbnN0cnVjdG9yKSB8fCAhKElTX1dFQUsgfHwgTmF0aXZlUHJvdG90eXBlLmZvckVhY2ggJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBOYXRpdmVDb25zdHJ1Y3RvcigpLmVudHJpZXMoKS5uZXh0KCk7XG4gICAgfSkpXG4gICk7XG5cbiAgaWYgKFJFUExBQ0UpIHtcbiAgICAvLyBjcmVhdGUgY29sbGVjdGlvbiBjb25zdHJ1Y3RvclxuICAgIENvbnN0cnVjdG9yID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIENPTlNUUlVDVE9SX05BTUUsIElTX01BUCwgQURERVIpO1xuICAgIEludGVybmFsTWV0YWRhdGFNb2R1bGUuZW5hYmxlKCk7XG4gIH0gZWxzZSBpZiAoaXNGb3JjZWQoQ09OU1RSVUNUT1JfTkFNRSwgdHJ1ZSkpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQ29uc3RydWN0b3IoKTtcbiAgICAvLyBlYXJseSBpbXBsZW1lbnRhdGlvbnMgbm90IHN1cHBvcnRzIGNoYWluaW5nXG4gICAgdmFyIEhBU05UX0NIQUlOSU5HID0gaW5zdGFuY2VbQURERVJdKElTX1dFQUsgPyB7fSA6IC0wLCAxKSAhPSBpbnN0YW5jZTtcbiAgICAvLyBWOCB+IENocm9taXVtIDQwLSB3ZWFrLWNvbGxlY3Rpb25zIHRocm93cyBvbiBwcmltaXRpdmVzLCBidXQgc2hvdWxkIHJldHVybiBmYWxzZVxuICAgIHZhciBUSFJPV1NfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgaW5zdGFuY2UuaGFzKDEpOyB9KTtcbiAgICAvLyBtb3N0IGVhcmx5IGltcGxlbWVudGF0aW9ucyBkb2Vzbid0IHN1cHBvcnRzIGl0ZXJhYmxlcywgbW9zdCBtb2Rlcm4gLSBub3QgY2xvc2UgaXQgY29ycmVjdGx5XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICAgIHZhciBBQ0NFUFRfSVRFUkFCTEVTID0gY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uKGZ1bmN0aW9uIChpdGVyYWJsZSkgeyBuZXcgTmF0aXZlQ29uc3RydWN0b3IoaXRlcmFibGUpOyB9KTtcbiAgICAvLyBmb3IgZWFybHkgaW1wbGVtZW50YXRpb25zIC0wIGFuZCArMCBub3QgdGhlIHNhbWVcbiAgICB2YXIgQlVHR1lfWkVSTyA9ICFJU19XRUFLICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFY4IH4gQ2hyb21pdW0gNDItIGZhaWxzIG9ubHkgd2l0aCA1KyBlbGVtZW50c1xuICAgICAgdmFyICRpbnN0YW5jZSA9IG5ldyBOYXRpdmVDb25zdHJ1Y3RvcigpO1xuICAgICAgdmFyIGluZGV4ID0gNTtcbiAgICAgIHdoaWxlIChpbmRleC0tKSAkaW5zdGFuY2VbQURERVJdKGluZGV4LCBpbmRleCk7XG4gICAgICByZXR1cm4gISRpbnN0YW5jZS5oYXMoLTApO1xuICAgIH0pO1xuXG4gICAgaWYgKCFBQ0NFUFRfSVRFUkFCTEVTKSB7XG4gICAgICBDb25zdHJ1Y3RvciA9IHdyYXBwZXIoZnVuY3Rpb24gKGR1bW15LCBpdGVyYWJsZSkge1xuICAgICAgICBhbkluc3RhbmNlKGR1bW15LCBOYXRpdmVQcm90b3R5cGUpO1xuICAgICAgICB2YXIgdGhhdCA9IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBOYXRpdmVDb25zdHJ1Y3RvcigpLCBkdW1teSwgQ29uc3RydWN0b3IpO1xuICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWZpbmVkKGl0ZXJhYmxlKSkgaXRlcmF0ZShpdGVyYWJsZSwgdGhhdFtBRERFUl0sIHsgdGhhdDogdGhhdCwgQVNfRU5UUklFUzogSVNfTUFQIH0pO1xuICAgICAgICByZXR1cm4gdGhhdDtcbiAgICAgIH0pO1xuICAgICAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gTmF0aXZlUHJvdG90eXBlO1xuICAgICAgTmF0aXZlUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ29uc3RydWN0b3I7XG4gICAgfVxuXG4gICAgaWYgKFRIUk9XU19PTl9QUklNSVRJVkVTIHx8IEJVR0dZX1pFUk8pIHtcbiAgICAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7XG4gICAgICBmaXhNZXRob2QoJ2hhcycpO1xuICAgICAgSVNfTUFQICYmIGZpeE1ldGhvZCgnZ2V0Jyk7XG4gICAgfVxuXG4gICAgaWYgKEJVR0dZX1pFUk8gfHwgSEFTTlRfQ0hBSU5JTkcpIGZpeE1ldGhvZChBRERFUik7XG5cbiAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIHNob3VsZCBub3QgY29udGFpbnMgLmNsZWFyIG1ldGhvZFxuICAgIGlmIChJU19XRUFLICYmIE5hdGl2ZVByb3RvdHlwZS5jbGVhcikgZGVsZXRlIE5hdGl2ZVByb3RvdHlwZS5jbGVhcjtcbiAgfVxuXG4gIGV4cG9ydGVkW0NPTlNUUlVDVE9SX05BTUVdID0gQ29uc3RydWN0b3I7XG4gICQoeyBnbG9iYWw6IHRydWUsIGNvbnN0cnVjdG9yOiB0cnVlLCBmb3JjZWQ6IENvbnN0cnVjdG9yICE9IE5hdGl2ZUNvbnN0cnVjdG9yIH0sIGV4cG9ydGVkKTtcblxuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgQ09OU1RSVUNUT1JfTkFNRSk7XG5cbiAgaWYgKCFJU19XRUFLKSBjb21tb24uc2V0U3Ryb25nKENvbnN0cnVjdG9yLCBDT05TVFJVQ1RPUl9OQU1FLCBJU19NQVApO1xuXG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn07XG4iLCIvLyBUT0RPOiBpbiBjb3JlLWpzQDQsIG1vdmUgL21vZHVsZXMvIGRlcGVuZGVuY2llcyB0byBwdWJsaWMgZW50cmllcyBmb3IgYmV0dGVyIG9wdGltaXphdGlvbiBieSB0b29scyBsaWtlIGBwcmVzZXQtZW52YFxucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMud2Vhay1tYXAnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciAkT2JqZWN0ID0gT2JqZWN0O1xudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG52YXIgTWFwID0gZ2V0QnVpbHRJbignTWFwJyk7XG52YXIgV2Vha01hcCA9IGdldEJ1aWx0SW4oJ1dlYWtNYXAnKTtcblxudmFyIE5vZGUgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIGtleXNcbiAgdGhpcy5vYmplY3QgPSBudWxsO1xuICB0aGlzLnN5bWJvbCA9IG51bGw7XG4gIC8vIGNoaWxkIG5vZGVzXG4gIHRoaXMucHJpbWl0aXZlcyA9IG51bGw7XG4gIHRoaXMub2JqZWN0c0J5SW5kZXggPSBjcmVhdGUobnVsbCk7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5LCBpbml0aWFsaXplcikge1xuICByZXR1cm4gdGhpc1trZXldIHx8ICh0aGlzW2tleV0gPSBpbml0aWFsaXplcigpKTtcbn07XG5cbk5vZGUucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoaSwgaXQsIElTX09CSkVDVCkge1xuICB2YXIgc3RvcmUgPSBJU19PQkpFQ1RcbiAgICA/IHRoaXMub2JqZWN0c0J5SW5kZXhbaV0gfHwgKHRoaXMub2JqZWN0c0J5SW5kZXhbaV0gPSBuZXcgV2Vha01hcCgpKVxuICAgIDogdGhpcy5wcmltaXRpdmVzIHx8ICh0aGlzLnByaW1pdGl2ZXMgPSBuZXcgTWFwKCkpO1xuICB2YXIgZW50cnkgPSBzdG9yZS5nZXQoaXQpO1xuICBpZiAoIWVudHJ5KSBzdG9yZS5zZXQoaXQsIGVudHJ5ID0gbmV3IE5vZGUoKSk7XG4gIHJldHVybiBlbnRyeTtcbn07XG5cbnZhciByb290ID0gbmV3IE5vZGUoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBhY3RpdmUgPSByb290O1xuICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGksIGl0O1xuICAvLyBmb3IgcHJldmVudCBsZWFraW5nLCBzdGFydCBmcm9tIG9iamVjdHNcbiAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGlzT2JqZWN0KGl0ID0gYXJndW1lbnRzW2ldKSkgYWN0aXZlID0gYWN0aXZlLm5leHQoaSwgaXQsIHRydWUpO1xuICB9XG4gIGlmICh0aGlzID09PSAkT2JqZWN0ICYmIGFjdGl2ZSA9PT0gcm9vdCkgdGhyb3cgJFR5cGVFcnJvcignQ29tcG9zaXRlIGtleXMgbXVzdCBjb250YWluIGEgbm9uLXByaW1pdGl2ZSBjb21wb25lbnQnKTtcbiAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFpc09iamVjdChpdCA9IGFyZ3VtZW50c1tpXSkpIGFjdGl2ZSA9IGFjdGl2ZS5uZXh0KGksIGl0LCBmYWxzZSk7XG4gIH0gcmV0dXJuIGFjdGl2ZTtcbn07XG4iLCJ2YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc291cmNlLCBleGNlcHRpb25zKSB7XG4gIHZhciBrZXlzID0gb3duS2V5cyhzb3VyY2UpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmICghaGFzT3duKHRhcmdldCwga2V5KSAmJiAhKGV4Y2VwdGlvbnMgJiYgaGFzT3duKGV4Y2VwdGlvbnMsIGtleSkpKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgfVxuICB9XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgTUFUQ0ggPSB3ZWxsS25vd25TeW1ib2woJ21hdGNoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gIHZhciByZWdleHAgPSAvLi87XG4gIHRyeSB7XG4gICAgJy8uLydbTUVUSE9EX05BTUVdKHJlZ2V4cCk7XG4gIH0gY2F0Y2ggKGVycm9yMSkge1xuICAgIHRyeSB7XG4gICAgICByZWdleHBbTUFUQ0hdID0gZmFsc2U7XG4gICAgICByZXR1cm4gJy8uLydbTUVUSE9EX05BTUVdKHJlZ2V4cCk7XG4gICAgfSBjYXRjaCAoZXJyb3IyKSB7IC8qIGVtcHR5ICovIH1cbiAgfSByZXR1cm4gZmFsc2U7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICBGLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IG51bGw7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW9iamVjdC1nZXRwcm90b3R5cGVvZiAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG5ldyBGKCkpICE9PSBGLnByb3RvdHlwZTtcbn0pO1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG5cbnZhciBxdW90ID0gL1wiL2c7XG52YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xuXG4vLyBgQ3JlYXRlSFRNTGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWNyZWF0ZWh0bWxcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gIHZhciBTID0gdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZShzdHJpbmcpKTtcbiAgdmFyIHAxID0gJzwnICsgdGFnO1xuICBpZiAoYXR0cmlidXRlICE9PSAnJykgcDEgKz0gJyAnICsgYXR0cmlidXRlICsgJz1cIicgKyByZXBsYWNlKHRvU3RyaW5nKHZhbHVlKSwgcXVvdCwgJyZxdW90OycpICsgJ1wiJztcbiAgcmV0dXJuIHAxICsgJz4nICsgUyArICc8LycgKyB0YWcgKyAnPic7XG59O1xuIiwiLy8gYENyZWF0ZUl0ZXJSZXN1bHRPYmplY3RgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1jcmVhdGVpdGVycmVzdWx0b2JqZWN0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWx1ZSwgZG9uZSkge1xuICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6IGRvbmUgfTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwga2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHZhciBwcm9wZXJ0eUtleSA9IHRvUHJvcGVydHlLZXkoa2V5KTtcbiAgaWYgKHByb3BlcnR5S2V5IGluIG9iamVjdCkgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIHByb3BlcnR5S2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbcHJvcGVydHlLZXldID0gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgcGFkU3RhcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXBhZCcpLnN0YXJ0O1xuXG52YXIgJFJhbmdlRXJyb3IgPSBSYW5nZUVycm9yO1xudmFyICRpc0Zpbml0ZSA9IGlzRmluaXRlO1xudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIERhdGVQcm90b3R5cGUgPSBEYXRlLnByb3RvdHlwZTtcbnZhciBuYXRpdmVEYXRlVG9JU09TdHJpbmcgPSBEYXRlUHJvdG90eXBlLnRvSVNPU3RyaW5nO1xudmFyIHRoaXNUaW1lVmFsdWUgPSB1bmN1cnJ5VGhpcyhEYXRlUHJvdG90eXBlLmdldFRpbWUpO1xudmFyIGdldFVUQ0RhdGUgPSB1bmN1cnJ5VGhpcyhEYXRlUHJvdG90eXBlLmdldFVUQ0RhdGUpO1xudmFyIGdldFVUQ0Z1bGxZZWFyID0gdW5jdXJyeVRoaXMoRGF0ZVByb3RvdHlwZS5nZXRVVENGdWxsWWVhcik7XG52YXIgZ2V0VVRDSG91cnMgPSB1bmN1cnJ5VGhpcyhEYXRlUHJvdG90eXBlLmdldFVUQ0hvdXJzKTtcbnZhciBnZXRVVENNaWxsaXNlY29uZHMgPSB1bmN1cnJ5VGhpcyhEYXRlUHJvdG90eXBlLmdldFVUQ01pbGxpc2Vjb25kcyk7XG52YXIgZ2V0VVRDTWludXRlcyA9IHVuY3VycnlUaGlzKERhdGVQcm90b3R5cGUuZ2V0VVRDTWludXRlcyk7XG52YXIgZ2V0VVRDTW9udGggPSB1bmN1cnJ5VGhpcyhEYXRlUHJvdG90eXBlLmdldFVUQ01vbnRoKTtcbnZhciBnZXRVVENTZWNvbmRzID0gdW5jdXJyeVRoaXMoRGF0ZVByb3RvdHlwZS5nZXRVVENTZWNvbmRzKTtcblxuLy8gYERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0ZS5wcm90b3R5cGUudG9pc29zdHJpbmdcbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgZmFpbHMgaGVyZTpcbm1vZHVsZS5leHBvcnRzID0gKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5hdGl2ZURhdGVUb0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKC01ZTEzIC0gMSkpICE9ICcwMzg1LTA3LTI1VDA3OjA2OjM5Ljk5OVonO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgbmF0aXZlRGF0ZVRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoTmFOKSk7XG59KSkgPyBmdW5jdGlvbiB0b0lTT1N0cmluZygpIHtcbiAgaWYgKCEkaXNGaW5pdGUodGhpc1RpbWVWYWx1ZSh0aGlzKSkpIHRocm93ICRSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcbiAgdmFyIGRhdGUgPSB0aGlzO1xuICB2YXIgeWVhciA9IGdldFVUQ0Z1bGxZZWFyKGRhdGUpO1xuICB2YXIgbWlsbGlzZWNvbmRzID0gZ2V0VVRDTWlsbGlzZWNvbmRzKGRhdGUpO1xuICB2YXIgc2lnbiA9IHllYXIgPCAwID8gJy0nIDogeWVhciA+IDk5OTkgPyAnKycgOiAnJztcbiAgcmV0dXJuIHNpZ24gKyBwYWRTdGFydChhYnMoeWVhciksIHNpZ24gPyA2IDogNCwgMCkgK1xuICAgICctJyArIHBhZFN0YXJ0KGdldFVUQ01vbnRoKGRhdGUpICsgMSwgMiwgMCkgK1xuICAgICctJyArIHBhZFN0YXJ0KGdldFVUQ0RhdGUoZGF0ZSksIDIsIDApICtcbiAgICAnVCcgKyBwYWRTdGFydChnZXRVVENIb3VycyhkYXRlKSwgMiwgMCkgK1xuICAgICc6JyArIHBhZFN0YXJ0KGdldFVUQ01pbnV0ZXMoZGF0ZSksIDIsIDApICtcbiAgICAnOicgKyBwYWRTdGFydChnZXRVVENTZWNvbmRzKGRhdGUpLCAyLCAwKSArXG4gICAgJy4nICsgcGFkU3RhcnQobWlsbGlzZWNvbmRzLCAzLCAwKSArXG4gICAgJ1onO1xufSA6IG5hdGl2ZURhdGVUb0lTT1N0cmluZztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBvcmRpbmFyeVRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29yZGluYXJ5LXRvLXByaW1pdGl2ZScpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuLy8gYERhdGUucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0ZS5wcm90b3R5cGUtQEB0b3ByaW1pdGl2ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaGludCkge1xuICBhbk9iamVjdCh0aGlzKTtcbiAgaWYgKGhpbnQgPT09ICdzdHJpbmcnIHx8IGhpbnQgPT09ICdkZWZhdWx0JykgaGludCA9ICdzdHJpbmcnO1xuICBlbHNlIGlmIChoaW50ICE9PSAnbnVtYmVyJykgdGhyb3cgJFR5cGVFcnJvcignSW5jb3JyZWN0IGhpbnQnKTtcbiAgcmV0dXJuIG9yZGluYXJ5VG9QcmltaXRpdmUodGhpcywgaGludCk7XG59O1xuIiwidmFyIG1ha2VCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21ha2UtYnVpbHQtaW4nKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgbmFtZSwgZGVzY3JpcHRvcikge1xuICBpZiAoZGVzY3JpcHRvci5nZXQpIG1ha2VCdWlsdEluKGRlc2NyaXB0b3IuZ2V0LCBuYW1lLCB7IGdldHRlcjogdHJ1ZSB9KTtcbiAgaWYgKGRlc2NyaXB0b3Iuc2V0KSBtYWtlQnVpbHRJbihkZXNjcmlwdG9yLnNldCwgbmFtZSwgeyBzZXR0ZXI6IHRydWUgfSk7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eS5mKHRhcmdldCwgbmFtZSwgZGVzY3JpcHRvcik7XG59O1xuIiwidmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgbWFrZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWFrZS1idWlsdC1pbicpO1xudmFyIGRlZmluZUdsb2JhbFByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1nbG9iYWwtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fTtcbiAgdmFyIHNpbXBsZSA9IG9wdGlvbnMuZW51bWVyYWJsZTtcbiAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubmFtZSA6IGtleTtcbiAgaWYgKGlzQ2FsbGFibGUodmFsdWUpKSBtYWtlQnVpbHRJbih2YWx1ZSwgbmFtZSwgb3B0aW9ucyk7XG4gIGlmIChvcHRpb25zLmdsb2JhbCkge1xuICAgIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICAgIGVsc2UgZGVmaW5lR2xvYmFsUHJvcGVydHkoa2V5LCB2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghb3B0aW9ucy51bnNhZmUpIGRlbGV0ZSBPW2tleV07XG4gICAgICBlbHNlIGlmIChPW2tleV0pIHNpbXBsZSA9IHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICAgIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICAgIGVsc2UgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihPLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiAhb3B0aW9ucy5ub25Db25maWd1cmFibGUsXG4gICAgICB3cml0YWJsZTogIW9wdGlvbnMubm9uV3JpdGFibGVcbiAgICB9KTtcbiAgfSByZXR1cm4gTztcbn07XG4iLCJ2YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgZGVmaW5lQnVpbHRJbih0YXJnZXQsIGtleSwgc3JjW2tleV0sIG9wdGlvbnMpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgdHJ5IHtcbiAgICBkZWZpbmVQcm9wZXJ0eShnbG9iYWwsIGtleSwgeyB2YWx1ZTogdmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZ2xvYmFsW2tleV0gPSB2YWx1ZTtcbiAgfSByZXR1cm4gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRyeVRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RyeS10by1zdHJpbmcnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIFApIHtcbiAgaWYgKCFkZWxldGUgT1tQXSkgdGhyb3cgJFR5cGVFcnJvcignQ2Fubm90IGRlbGV0ZSBwcm9wZXJ0eSAnICsgdHJ5VG9TdHJpbmcoUCkgKyAnIG9mICcgKyB0cnlUb1N0cmluZyhPKSk7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIERldGVjdCBJRTgncyBpbmNvbXBsZXRlIGRlZmluZVByb3BlcnR5IGltcGxlbWVudGF0aW9uXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAxLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KVsxXSAhPSA3O1xufSk7XG4iLCJ2YXIgZG9jdW1lbnRBbGwgPSB0eXBlb2YgZG9jdW1lbnQgPT0gJ29iamVjdCcgJiYgZG9jdW1lbnQuYWxsO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLUlzSFRNTEREQS1pbnRlcm5hbC1zbG90XG52YXIgSVNfSFRNTEREQSA9IHR5cGVvZiBkb2N1bWVudEFsbCA9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudEFsbCAhPT0gdW5kZWZpbmVkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYWxsOiBkb2N1bWVudEFsbCxcbiAgSVNfSFRNTEREQTogSVNfSFRNTEREQVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIEVYSVNUUyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEVYSVNUUyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwidmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDB4MUZGRkZGRkZGRkZGRkY7IC8vIDIgKiogNTMgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID4gTUFYX1NBRkVfSU5URUdFUikgdGhyb3cgJFR5cGVFcnJvcignTWF4aW11bSBhbGxvd2VkIGluZGV4IGV4Y2VlZGVkJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgSW5kZXhTaXplRXJyb3I6IHsgczogJ0lOREVYX1NJWkVfRVJSJywgYzogMSwgbTogMSB9LFxuICBET01TdHJpbmdTaXplRXJyb3I6IHsgczogJ0RPTVNUUklOR19TSVpFX0VSUicsIGM6IDIsIG06IDAgfSxcbiAgSGllcmFyY2h5UmVxdWVzdEVycm9yOiB7IHM6ICdISUVSQVJDSFlfUkVRVUVTVF9FUlInLCBjOiAzLCBtOiAxIH0sXG4gIFdyb25nRG9jdW1lbnRFcnJvcjogeyBzOiAnV1JPTkdfRE9DVU1FTlRfRVJSJywgYzogNCwgbTogMSB9LFxuICBJbnZhbGlkQ2hhcmFjdGVyRXJyb3I6IHsgczogJ0lOVkFMSURfQ0hBUkFDVEVSX0VSUicsIGM6IDUsIG06IDEgfSxcbiAgTm9EYXRhQWxsb3dlZEVycm9yOiB7IHM6ICdOT19EQVRBX0FMTE9XRURfRVJSJywgYzogNiwgbTogMCB9LFxuICBOb01vZGlmaWNhdGlvbkFsbG93ZWRFcnJvcjogeyBzOiAnTk9fTU9ESUZJQ0FUSU9OX0FMTE9XRURfRVJSJywgYzogNywgbTogMSB9LFxuICBOb3RGb3VuZEVycm9yOiB7IHM6ICdOT1RfRk9VTkRfRVJSJywgYzogOCwgbTogMSB9LFxuICBOb3RTdXBwb3J0ZWRFcnJvcjogeyBzOiAnTk9UX1NVUFBPUlRFRF9FUlInLCBjOiA5LCBtOiAxIH0sXG4gIEluVXNlQXR0cmlidXRlRXJyb3I6IHsgczogJ0lOVVNFX0FUVFJJQlVURV9FUlInLCBjOiAxMCwgbTogMSB9LFxuICBJbnZhbGlkU3RhdGVFcnJvcjogeyBzOiAnSU5WQUxJRF9TVEFURV9FUlInLCBjOiAxMSwgbTogMSB9LFxuICBTeW50YXhFcnJvcjogeyBzOiAnU1lOVEFYX0VSUicsIGM6IDEyLCBtOiAxIH0sXG4gIEludmFsaWRNb2RpZmljYXRpb25FcnJvcjogeyBzOiAnSU5WQUxJRF9NT0RJRklDQVRJT05fRVJSJywgYzogMTMsIG06IDEgfSxcbiAgTmFtZXNwYWNlRXJyb3I6IHsgczogJ05BTUVTUEFDRV9FUlInLCBjOiAxNCwgbTogMSB9LFxuICBJbnZhbGlkQWNjZXNzRXJyb3I6IHsgczogJ0lOVkFMSURfQUNDRVNTX0VSUicsIGM6IDE1LCBtOiAxIH0sXG4gIFZhbGlkYXRpb25FcnJvcjogeyBzOiAnVkFMSURBVElPTl9FUlInLCBjOiAxNiwgbTogMCB9LFxuICBUeXBlTWlzbWF0Y2hFcnJvcjogeyBzOiAnVFlQRV9NSVNNQVRDSF9FUlInLCBjOiAxNywgbTogMSB9LFxuICBTZWN1cml0eUVycm9yOiB7IHM6ICdTRUNVUklUWV9FUlInLCBjOiAxOCwgbTogMSB9LFxuICBOZXR3b3JrRXJyb3I6IHsgczogJ05FVFdPUktfRVJSJywgYzogMTksIG06IDEgfSxcbiAgQWJvcnRFcnJvcjogeyBzOiAnQUJPUlRfRVJSJywgYzogMjAsIG06IDEgfSxcbiAgVVJMTWlzbWF0Y2hFcnJvcjogeyBzOiAnVVJMX01JU01BVENIX0VSUicsIGM6IDIxLCBtOiAxIH0sXG4gIFF1b3RhRXhjZWVkZWRFcnJvcjogeyBzOiAnUVVPVEFfRVhDRUVERURfRVJSJywgYzogMjIsIG06IDEgfSxcbiAgVGltZW91dEVycm9yOiB7IHM6ICdUSU1FT1VUX0VSUicsIGM6IDIzLCBtOiAxIH0sXG4gIEludmFsaWROb2RlVHlwZUVycm9yOiB7IHM6ICdJTlZBTElEX05PREVfVFlQRV9FUlInLCBjOiAyNCwgbTogMSB9LFxuICBEYXRhQ2xvbmVFcnJvcjogeyBzOiAnREFUQV9DTE9ORV9FUlInLCBjOiAyNSwgbTogMSB9XG59O1xuIiwiLy8gaXRlcmFibGUgRE9NIGNvbGxlY3Rpb25zXG4vLyBmbGFnIC0gYGl0ZXJhYmxlYCBpbnRlcmZhY2UgLSAnZW50cmllcycsICdrZXlzJywgJ3ZhbHVlcycsICdmb3JFYWNoJyBtZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IDAsXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IDAsXG4gIENTU1ZhbHVlTGlzdDogMCxcbiAgQ2xpZW50UmVjdExpc3Q6IDAsXG4gIERPTVJlY3RMaXN0OiAwLFxuICBET01TdHJpbmdMaXN0OiAwLFxuICBET01Ub2tlbkxpc3Q6IDEsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiAwLFxuICBGaWxlTGlzdDogMCxcbiAgSFRNTEFsbENvbGxlY3Rpb246IDAsXG4gIEhUTUxDb2xsZWN0aW9uOiAwLFxuICBIVE1MRm9ybUVsZW1lbnQ6IDAsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiAwLFxuICBNZWRpYUxpc3Q6IDAsXG4gIE1pbWVUeXBlQXJyYXk6IDAsXG4gIE5hbWVkTm9kZU1hcDogMCxcbiAgTm9kZUxpc3Q6IDEsXG4gIFBhaW50UmVxdWVzdExpc3Q6IDAsXG4gIFBsdWdpbjogMCxcbiAgUGx1Z2luQXJyYXk6IDAsXG4gIFNWR0xlbmd0aExpc3Q6IDAsXG4gIFNWR051bWJlckxpc3Q6IDAsXG4gIFNWR1BhdGhTZWdMaXN0OiAwLFxuICBTVkdQb2ludExpc3Q6IDAsXG4gIFNWR1N0cmluZ0xpc3Q6IDAsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IDAsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IDAsXG4gIFN0eWxlU2hlZXRMaXN0OiAwLFxuICBUZXh0VHJhY2tDdWVMaXN0OiAwLFxuICBUZXh0VHJhY2tMaXN0OiAwLFxuICBUb3VjaExpc3Q6IDBcbn07XG4iLCIvLyBpbiBvbGQgV2ViS2l0IHZlcnNpb25zLCBgZWxlbWVudC5jbGFzc0xpc3RgIGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBnbG9iYWwgYERPTVRva2VuTGlzdGBcbnZhciBkb2N1bWVudENyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcblxudmFyIGNsYXNzTGlzdCA9IGRvY3VtZW50Q3JlYXRlRWxlbWVudCgnc3BhbicpLmNsYXNzTGlzdDtcbnZhciBET01Ub2tlbkxpc3RQcm90b3R5cGUgPSBjbGFzc0xpc3QgJiYgY2xhc3NMaXN0LmNvbnN0cnVjdG9yICYmIGNsYXNzTGlzdC5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gRE9NVG9rZW5MaXN0UHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlID8gdW5kZWZpbmVkIDogRE9NVG9rZW5MaXN0UHJvdG90eXBlO1xuIiwidmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG52YXIgZmlyZWZveCA9IHVzZXJBZ2VudC5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS9pKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhIWZpcmVmb3ggJiYgK2ZpcmVmb3hbMV07XG4iLCJ2YXIgSVNfREVOTyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtZGVubycpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhSVNfREVOTyAmJiAhSVNfTk9ERVxuICAmJiB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnXG4gICYmIHR5cGVvZiBkb2N1bWVudCA9PSAnb2JqZWN0JztcbiIsIi8qIGdsb2JhbCBEZW5vIC0tIERlbm8gY2FzZSAqL1xubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgRGVubyA9PSAnb2JqZWN0JyAmJiBEZW5vICYmIHR5cGVvZiBEZW5vLnZlcnNpb24gPT0gJ29iamVjdCc7XG4iLCJ2YXIgVUEgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAvTVNJRXxUcmlkZW50Ly50ZXN0KFVBKTtcbiIsInZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gL2lwYWR8aXBob25lfGlwb2QvaS50ZXN0KHVzZXJBZ2VudCkgJiYgZ2xvYmFsLlBlYmJsZSAhPT0gdW5kZWZpbmVkO1xuIiwidmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IC8oPzppcGFkfGlwaG9uZXxpcG9kKS4qYXBwbGV3ZWJraXQvaS50ZXN0KHVzZXJBZ2VudCk7XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzc29mKGdsb2JhbC5wcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG4iLCJ2YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gL3dlYjBzKD8hLipjaHJvbWUpL2kudGVzdCh1c2VyQWdlbnQpO1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignbmF2aWdhdG9yJywgJ3VzZXJBZ2VudCcpIHx8ICcnO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBEZW5vID0gZ2xvYmFsLkRlbm87XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnMgfHwgRGVubyAmJiBEZW5vLnZlcnNpb247XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52ODtcbnZhciBtYXRjaCwgdmVyc2lvbjtcblxuaWYgKHY4KSB7XG4gIG1hdGNoID0gdjguc3BsaXQoJy4nKTtcbiAgLy8gaW4gb2xkIENocm9tZSwgdmVyc2lvbnMgb2YgVjggaXNuJ3QgVjggPSBDaHJvbWUgLyAxMFxuICAvLyBidXQgdGhlaXIgY29ycmVjdCB2ZXJzaW9ucyBhcmUgbm90IGludGVyZXN0aW5nIGZvciB1c1xuICB2ZXJzaW9uID0gbWF0Y2hbMF0gPiAwICYmIG1hdGNoWzBdIDwgNCA/IDEgOiArKG1hdGNoWzBdICsgbWF0Y2hbMV0pO1xufVxuXG4vLyBCcm93c2VyRlMgTm9kZUpTIGBwcm9jZXNzYCBwb2x5ZmlsbCBpbmNvcnJlY3RseSBzZXQgYC52OGAgdG8gYDAuMGBcbi8vIHNvIGNoZWNrIGB1c2VyQWdlbnRgIGV2ZW4gaWYgYC52OGAgZXhpc3RzLCBidXQgMFxuaWYgKCF2ZXJzaW9uICYmIHVzZXJBZ2VudCkge1xuICBtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvRWRnZVxcLyhcXGQrKS8pO1xuICBpZiAoIW1hdGNoIHx8IG1hdGNoWzFdID49IDc0KSB7XG4gICAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0Nocm9tZVxcLyhcXGQrKS8pO1xuICAgIGlmIChtYXRjaCkgdmVyc2lvbiA9ICttYXRjaFsxXTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHZlcnNpb247XG4iLCJ2YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbnZhciB3ZWJraXQgPSB1c2VyQWdlbnQubWF0Y2goL0FwcGxlV2ViS2l0XFwvKFxcZCspXFwuLyk7XG5cbm1vZHVsZS5leHBvcnRzID0gISF3ZWJraXQgJiYgK3dlYmtpdFsxXTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTlNUUlVDVE9SKSB7XG4gIHJldHVybiBnbG9iYWxbQ09OU1RSVUNUT1JdLnByb3RvdHlwZTtcbn07XG4iLCIvLyBJRTgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gW1xuICAnY29uc3RydWN0b3InLFxuICAnaGFzT3duUHJvcGVydHknLFxuICAnaXNQcm90b3R5cGVPZicsXG4gICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsXG4gICd0b0xvY2FsZVN0cmluZycsXG4gICd0b1N0cmluZycsXG4gICd2YWx1ZU9mJ1xuXTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxudmFyICRFcnJvciA9IEVycm9yO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcblxudmFyIFRFU1QgPSAoZnVuY3Rpb24gKGFyZykgeyByZXR1cm4gU3RyaW5nKCRFcnJvcihhcmcpLnN0YWNrKTsgfSkoJ3p4Y2FzZCcpO1xudmFyIFY4X09SX0NIQUtSQV9TVEFDS19FTlRSWSA9IC9cXG5cXHMqYXQgW146XSo6W15cXG5dKi87XG52YXIgSVNfVjhfT1JfQ0hBS1JBX1NUQUNLID0gVjhfT1JfQ0hBS1JBX1NUQUNLX0VOVFJZLnRlc3QoVEVTVCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0YWNrLCBkcm9wRW50cmllcykge1xuICBpZiAoSVNfVjhfT1JfQ0hBS1JBX1NUQUNLICYmIHR5cGVvZiBzdGFjayA9PSAnc3RyaW5nJyAmJiAhJEVycm9yLnByZXBhcmVTdGFja1RyYWNlKSB7XG4gICAgd2hpbGUgKGRyb3BFbnRyaWVzLS0pIHN0YWNrID0gcmVwbGFjZShzdGFjaywgVjhfT1JfQ0hBS1JBX1NUQUNLX0VOVFJZLCAnJyk7XG4gIH0gcmV0dXJuIHN0YWNrO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBlcnJvciA9IEVycm9yKCdhJyk7XG4gIGlmICghKCdzdGFjaycgaW4gZXJyb3IpKSByZXR1cm4gdHJ1ZTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVycm9yLCAnc3RhY2snLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgNykpO1xuICByZXR1cm4gZXJyb3Iuc3RhY2sgIT09IDc7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBub3JtYWxpemVTdHJpbmdBcmd1bWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ub3JtYWxpemUtc3RyaW5nLWFyZ3VtZW50Jyk7XG5cbnZhciBuYXRpdmVFcnJvclRvU3RyaW5nID0gRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nO1xuXG52YXIgSU5DT1JSRUNUX1RPX1NUUklORyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgaWYgKERFU0NSSVBUT1JTKSB7XG4gICAgLy8gQ2hyb21lIDMyLSBpbmNvcnJlY3RseSBjYWxsIGFjY2Vzc29yXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbiAgICB2YXIgb2JqZWN0ID0gY3JlYXRlKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ25hbWUnLCB7IGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMgPT09IG9iamVjdDtcbiAgICB9IH0pKTtcbiAgICBpZiAobmF0aXZlRXJyb3JUb1N0cmluZy5jYWxsKG9iamVjdCkgIT09ICd0cnVlJykgcmV0dXJuIHRydWU7XG4gIH1cbiAgLy8gRkYxMC0gZG9lcyBub3QgcHJvcGVybHkgaGFuZGxlIG5vbi1zdHJpbmdzXG4gIHJldHVybiBuYXRpdmVFcnJvclRvU3RyaW5nLmNhbGwoeyBtZXNzYWdlOiAxLCBuYW1lOiAyIH0pICE9PSAnMjogMSdcbiAgICAvLyBJRTggZG9lcyBub3QgcHJvcGVybHkgaGFuZGxlIGRlZmF1bHRzXG4gICAgfHwgbmF0aXZlRXJyb3JUb1N0cmluZy5jYWxsKHt9KSAhPT0gJ0Vycm9yJztcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IElOQ09SUkVDVF9UT19TVFJJTkcgPyBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgdmFyIE8gPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIG5hbWUgPSBub3JtYWxpemVTdHJpbmdBcmd1bWVudChPLm5hbWUsICdFcnJvcicpO1xuICB2YXIgbWVzc2FnZSA9IG5vcm1hbGl6ZVN0cmluZ0FyZ3VtZW50KE8ubWVzc2FnZSk7XG4gIHJldHVybiAhbmFtZSA/IG1lc3NhZ2UgOiAhbWVzc2FnZSA/IG5hbWUgOiBuYW1lICsgJzogJyArIG1lc3NhZ2U7XG59IDogbmF0aXZlRXJyb3JUb1N0cmluZztcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIGRlZmluZUdsb2JhbFByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1nbG9iYWwtcHJvcGVydHknKTtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xuXG4vKlxuICBvcHRpb25zLnRhcmdldCAgICAgICAgIC0gbmFtZSBvZiB0aGUgdGFyZ2V0IG9iamVjdFxuICBvcHRpb25zLmdsb2JhbCAgICAgICAgIC0gdGFyZ2V0IGlzIHRoZSBnbG9iYWwgb2JqZWN0XG4gIG9wdGlvbnMuc3RhdCAgICAgICAgICAgLSBleHBvcnQgYXMgc3RhdGljIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucHJvdG8gICAgICAgICAgLSBleHBvcnQgYXMgcHJvdG90eXBlIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucmVhbCAgICAgICAgICAgLSByZWFsIHByb3RvdHlwZSBtZXRob2QgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLmZvcmNlZCAgICAgICAgIC0gZXhwb3J0IGV2ZW4gaWYgdGhlIG5hdGl2ZSBmZWF0dXJlIGlzIGF2YWlsYWJsZVxuICBvcHRpb25zLmJpbmQgICAgICAgICAgIC0gYmluZCBtZXRob2RzIHRvIHRoZSB0YXJnZXQsIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy53cmFwICAgICAgICAgICAtIHdyYXAgY29uc3RydWN0b3JzIHRvIHByZXZlbnRpbmcgZ2xvYmFsIHBvbGx1dGlvbiwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLnVuc2FmZSAgICAgICAgIC0gdXNlIHRoZSBzaW1wbGUgYXNzaWdubWVudCBvZiBwcm9wZXJ0eSBpbnN0ZWFkIG9mIGRlbGV0ZSArIGRlZmluZVByb3BlcnR5XG4gIG9wdGlvbnMuc2hhbSAgICAgICAgICAgLSBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gIG9wdGlvbnMuZW51bWVyYWJsZSAgICAgLSBleHBvcnQgYXMgZW51bWVyYWJsZSBwcm9wZXJ0eVxuICBvcHRpb25zLmRvbnRDYWxsR2V0U2V0IC0gcHJldmVudCBjYWxsaW5nIGEgZ2V0dGVyIG9uIHRhcmdldFxuICBvcHRpb25zLm5hbWUgICAgICAgICAgIC0gdGhlIC5uYW1lIG9mIHRoZSBmdW5jdGlvbiBpZiBpdCBkb2VzIG5vdCBtYXRjaCB0aGUga2V5XG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucywgc291cmNlKSB7XG4gIHZhciBUQVJHRVQgPSBvcHRpb25zLnRhcmdldDtcbiAgdmFyIEdMT0JBTCA9IG9wdGlvbnMuZ2xvYmFsO1xuICB2YXIgU1RBVElDID0gb3B0aW9ucy5zdGF0O1xuICB2YXIgRk9SQ0VELCB0YXJnZXQsIGtleSwgdGFyZ2V0UHJvcGVydHksIHNvdXJjZVByb3BlcnR5LCBkZXNjcmlwdG9yO1xuICBpZiAoR0xPQkFMKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsO1xuICB9IGVsc2UgaWYgKFNUQVRJQykge1xuICAgIHRhcmdldCA9IGdsb2JhbFtUQVJHRVRdIHx8IGRlZmluZUdsb2JhbFByb3BlcnR5KFRBUkdFVCwge30pO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldCA9IChnbG9iYWxbVEFSR0VUXSB8fCB7fSkucHJvdG90eXBlO1xuICB9XG4gIGlmICh0YXJnZXQpIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIHNvdXJjZVByb3BlcnR5ID0gc291cmNlW2tleV07XG4gICAgaWYgKG9wdGlvbnMuZG9udENhbGxHZXRTZXQpIHtcbiAgICAgIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpO1xuICAgICAgdGFyZ2V0UHJvcGVydHkgPSBkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IudmFsdWU7XG4gICAgfSBlbHNlIHRhcmdldFByb3BlcnR5ID0gdGFyZ2V0W2tleV07XG4gICAgRk9SQ0VEID0gaXNGb3JjZWQoR0xPQkFMID8ga2V5IDogVEFSR0VUICsgKFNUQVRJQyA/ICcuJyA6ICcjJykgKyBrZXksIG9wdGlvbnMuZm9yY2VkKTtcbiAgICAvLyBjb250YWluZWQgaW4gdGFyZ2V0XG4gICAgaWYgKCFGT1JDRUQgJiYgdGFyZ2V0UHJvcGVydHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHR5cGVvZiBzb3VyY2VQcm9wZXJ0eSA9PSB0eXBlb2YgdGFyZ2V0UHJvcGVydHkpIGNvbnRpbnVlO1xuICAgICAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhzb3VyY2VQcm9wZXJ0eSwgdGFyZ2V0UHJvcGVydHkpO1xuICAgIH1cbiAgICAvLyBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gICAgaWYgKG9wdGlvbnMuc2hhbSB8fCAodGFyZ2V0UHJvcGVydHkgJiYgdGFyZ2V0UHJvcGVydHkuc2hhbSkpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShzb3VyY2VQcm9wZXJ0eSwgJ3NoYW0nLCB0cnVlKTtcbiAgICB9XG4gICAgZGVmaW5lQnVpbHRJbih0YXJnZXQsIGtleSwgc291cmNlUHJvcGVydHksIG9wdGlvbnMpO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgIHNpbmNlIGl0J3MgbW92ZWQgdG8gZW50cnkgcG9pbnRzXG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgUmVnRXhwUHJvdG90eXBlID0gUmVnRXhwLnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjLCBGT1JDRUQsIFNIQU0pIHtcbiAgdmFyIFNZTUJPTCA9IHdlbGxLbm93blN5bWJvbChLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTeW1ib2wtbmFtZWQgUmVnRXhwIG1ldGhvZHMgY2FsbCAuZXhlY1xuICAgIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlID0gL2EvO1xuXG4gICAgaWYgKEtFWSA9PT0gJ3NwbGl0Jykge1xuICAgICAgLy8gV2UgY2FuJ3QgdXNlIHJlYWwgcmVnZXggaGVyZSBzaW5jZSBpdCBjYXVzZXMgZGVvcHRpbWl6YXRpb25cbiAgICAgIC8vIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uIGluIFY4XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzA2XG4gICAgICByZSA9IHt9O1xuICAgICAgLy8gUmVnRXhwW0BAc3BsaXRdIGRvZXNuJ3QgY2FsbCB0aGUgcmVnZXgncyBleGVjIG1ldGhvZCwgYnV0IGZpcnN0IGNyZWF0ZXNcbiAgICAgIC8vIGEgbmV3IG9uZS4gV2UgbmVlZCB0byByZXR1cm4gdGhlIHBhdGNoZWQgcmVnZXggd2hlbiBjcmVhdGluZyB0aGUgbmV3IG9uZS5cbiAgICAgIHJlLmNvbnN0cnVjdG9yID0ge307XG4gICAgICByZS5jb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlOyB9O1xuICAgICAgcmUuZmxhZ3MgPSAnJztcbiAgICAgIHJlW1NZTUJPTF0gPSAvLi9bU1lNQk9MXTtcbiAgICB9XG5cbiAgICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyBleGVjQ2FsbGVkID0gdHJ1ZTsgcmV0dXJuIG51bGw7IH07XG5cbiAgICByZVtTWU1CT0xdKCcnKTtcbiAgICByZXR1cm4gIWV4ZWNDYWxsZWQ7XG4gIH0pO1xuXG4gIGlmIChcbiAgICAhREVMRUdBVEVTX1RPX1NZTUJPTCB8fFxuICAgICFERUxFR0FURVNfVE9fRVhFQyB8fFxuICAgIEZPUkNFRFxuICApIHtcbiAgICB2YXIgdW5jdXJyaWVkTmF0aXZlUmVnRXhwTWV0aG9kID0gdW5jdXJyeVRoaXMoLy4vW1NZTUJPTF0pO1xuICAgIHZhciBtZXRob2RzID0gZXhlYyhTWU1CT0wsICcnW0tFWV0sIGZ1bmN0aW9uIChuYXRpdmVNZXRob2QsIHJlZ2V4cCwgc3RyLCBhcmcyLCBmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgdmFyIHVuY3VycmllZE5hdGl2ZU1ldGhvZCA9IHVuY3VycnlUaGlzKG5hdGl2ZU1ldGhvZCk7XG4gICAgICB2YXIgJGV4ZWMgPSByZWdleHAuZXhlYztcbiAgICAgIGlmICgkZXhlYyA9PT0gcmVnZXhwRXhlYyB8fCAkZXhlYyA9PT0gUmVnRXhwUHJvdG90eXBlLmV4ZWMpIHtcbiAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgLy8gVGhlIG5hdGl2ZSBTdHJpbmcgbWV0aG9kIGFscmVhZHkgZGVsZWdhdGVzIHRvIEBAbWV0aG9kICh0aGlzXG4gICAgICAgICAgLy8gcG9seWZpbGxlZCBmdW5jdGlvbiksIGxlYXNpbmcgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IHVuY3VycmllZE5hdGl2ZVJlZ0V4cE1ldGhvZChyZWdleHAsIHN0ciwgYXJnMikgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogdW5jdXJyaWVkTmF0aXZlTWV0aG9kKHN0ciwgcmVnZXhwLCBhcmcyKSB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgZG9uZTogZmFsc2UgfTtcbiAgICB9KTtcblxuICAgIGRlZmluZUJ1aWx0SW4oU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBtZXRob2RzWzBdKTtcbiAgICBkZWZpbmVCdWlsdEluKFJlZ0V4cFByb3RvdHlwZSwgU1lNQk9MLCBtZXRob2RzWzFdKTtcbiAgfVxuXG4gIGlmIChTSEFNKSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoUmVnRXhwUHJvdG90eXBlW1NZTUJPTF0sICdzaGFtJywgdHJ1ZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGRvZXNOb3RFeGNlZWRTYWZlSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2VzLW5vdC1leGNlZWQtc2FmZS1pbnRlZ2VyJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcblxuLy8gYEZsYXR0ZW5JbnRvQXJyYXlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtRmxhdHRlbkludG9BcnJheVxudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSBmdW5jdGlvbiAodGFyZ2V0LCBvcmlnaW5hbCwgc291cmNlLCBzb3VyY2VMZW4sIHN0YXJ0LCBkZXB0aCwgbWFwcGVyLCB0aGlzQXJnKSB7XG4gIHZhciB0YXJnZXRJbmRleCA9IHN0YXJ0O1xuICB2YXIgc291cmNlSW5kZXggPSAwO1xuICB2YXIgbWFwRm4gPSBtYXBwZXIgPyBiaW5kKG1hcHBlciwgdGhpc0FyZykgOiBmYWxzZTtcbiAgdmFyIGVsZW1lbnQsIGVsZW1lbnRMZW47XG5cbiAgd2hpbGUgKHNvdXJjZUluZGV4IDwgc291cmNlTGVuKSB7XG4gICAgaWYgKHNvdXJjZUluZGV4IGluIHNvdXJjZSkge1xuICAgICAgZWxlbWVudCA9IG1hcEZuID8gbWFwRm4oc291cmNlW3NvdXJjZUluZGV4XSwgc291cmNlSW5kZXgsIG9yaWdpbmFsKSA6IHNvdXJjZVtzb3VyY2VJbmRleF07XG5cbiAgICAgIGlmIChkZXB0aCA+IDAgJiYgaXNBcnJheShlbGVtZW50KSkge1xuICAgICAgICBlbGVtZW50TGVuID0gbGVuZ3RoT2ZBcnJheUxpa2UoZWxlbWVudCk7XG4gICAgICAgIHRhcmdldEluZGV4ID0gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBlbGVtZW50LCBlbGVtZW50TGVuLCB0YXJnZXRJbmRleCwgZGVwdGggLSAxKSAtIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb2VzTm90RXhjZWVkU2FmZUludGVnZXIodGFyZ2V0SW5kZXggKyAxKTtcbiAgICAgICAgdGFyZ2V0W3RhcmdldEluZGV4XSA9IGVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIHRhcmdldEluZGV4Kys7XG4gICAgfVxuICAgIHNvdXJjZUluZGV4Kys7XG4gIH1cbiAgcmV0dXJuIHRhcmdldEluZGV4O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmbGF0dGVuSW50b0FycmF5O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LWlzZXh0ZW5zaWJsZSwgZXMteC9uby1vYmplY3QtcHJldmVudGV4dGVuc2lvbnMgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5pc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbiIsInZhciBOQVRJVkVfQklORCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZScpO1xuXG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgYXBwbHkgPSBGdW5jdGlvblByb3RvdHlwZS5hcHBseTtcbnZhciBjYWxsID0gRnVuY3Rpb25Qcm90b3R5cGUuY2FsbDtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tcmVmbGVjdCAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBSZWZsZWN0ID09ICdvYmplY3QnICYmIFJlZmxlY3QuYXBwbHkgfHwgKE5BVElWRV9CSU5EID8gY2FsbC5iaW5kKGFwcGx5KSA6IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGNhbGwuYXBwbHkoYXBwbHksIGFyZ3VtZW50cyk7XG59KTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlJyk7XG5cbnZhciBiaW5kID0gdW5jdXJyeVRoaXModW5jdXJyeVRoaXMuYmluZCk7XG5cbi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQpIHtcbiAgYUNhbGxhYmxlKGZuKTtcbiAgcmV0dXJuIHRoYXQgPT09IHVuZGVmaW5lZCA/IGZuIDogTkFUSVZFX0JJTkQgPyBiaW5kKGZuLCB0aGF0KSA6IGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tZnVuY3Rpb24tcHJvdG90eXBlLWJpbmQgLS0gc2FmZVxuICB2YXIgdGVzdCA9IChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pLmJpbmQoKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGlucyAtLSBzYWZlXG4gIHJldHVybiB0eXBlb2YgdGVzdCAhPSAnZnVuY3Rpb24nIHx8IHRlc3QuaGFzT3duUHJvcGVydHkoJ3Byb3RvdHlwZScpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGFycmF5U2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2UnKTtcbnZhciBOQVRJVkVfQklORCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZScpO1xuXG52YXIgJEZ1bmN0aW9uID0gRnVuY3Rpb247XG52YXIgY29uY2F0ID0gdW5jdXJyeVRoaXMoW10uY29uY2F0KTtcbnZhciBqb2luID0gdW5jdXJyeVRoaXMoW10uam9pbik7XG52YXIgZmFjdG9yaWVzID0ge307XG5cbnZhciBjb25zdHJ1Y3QgPSBmdW5jdGlvbiAoQywgYXJnc0xlbmd0aCwgYXJncykge1xuICBpZiAoIWhhc093bihmYWN0b3JpZXMsIGFyZ3NMZW5ndGgpKSB7XG4gICAgZm9yICh2YXIgbGlzdCA9IFtdLCBpID0gMDsgaSA8IGFyZ3NMZW5ndGg7IGkrKykgbGlzdFtpXSA9ICdhWycgKyBpICsgJ10nO1xuICAgIGZhY3Rvcmllc1thcmdzTGVuZ3RoXSA9ICRGdW5jdGlvbignQyxhJywgJ3JldHVybiBuZXcgQygnICsgam9pbihsaXN0LCAnLCcpICsgJyknKTtcbiAgfSByZXR1cm4gZmFjdG9yaWVzW2FyZ3NMZW5ndGhdKEMsIGFyZ3MpO1xufTtcblxuLy8gYEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbm1vZHVsZS5leHBvcnRzID0gTkFUSVZFX0JJTkQgPyAkRnVuY3Rpb24uYmluZCA6IGZ1bmN0aW9uIGJpbmQodGhhdCAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgdmFyIEYgPSBhQ2FsbGFibGUodGhpcyk7XG4gIHZhciBQcm90b3R5cGUgPSBGLnByb3RvdHlwZTtcbiAgdmFyIHBhcnRBcmdzID0gYXJyYXlTbGljZShhcmd1bWVudHMsIDEpO1xuICB2YXIgYm91bmRGdW5jdGlvbiA9IGZ1bmN0aW9uIGJvdW5kKC8qIGFyZ3MuLi4gKi8pIHtcbiAgICB2YXIgYXJncyA9IGNvbmNhdChwYXJ0QXJncywgYXJyYXlTbGljZShhcmd1bWVudHMpKTtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGJvdW5kRnVuY3Rpb24gPyBjb25zdHJ1Y3QoRiwgYXJncy5sZW5ndGgsIGFyZ3MpIDogRi5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfTtcbiAgaWYgKGlzT2JqZWN0KFByb3RvdHlwZSkpIGJvdW5kRnVuY3Rpb24ucHJvdG90eXBlID0gUHJvdG90eXBlO1xuICByZXR1cm4gYm91bmRGdW5jdGlvbjtcbn07XG4iLCJ2YXIgTkFUSVZFX0JJTkQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1uYXRpdmUnKTtcblxudmFyIGNhbGwgPSBGdW5jdGlvbi5wcm90b3R5cGUuY2FsbDtcblxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfQklORCA/IGNhbGwuYmluZChjYWxsKSA6IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGNhbGwuYXBwbHkoY2FsbCwgYXJndW1lbnRzKTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xuXG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciBnZXREZXNjcmlwdG9yID0gREVTQ1JJUFRPUlMgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxudmFyIEVYSVNUUyA9IGhhc093bihGdW5jdGlvblByb3RvdHlwZSwgJ25hbWUnKTtcbi8vIGFkZGl0aW9uYWwgcHJvdGVjdGlvbiBmcm9tIG1pbmlmaWVkIC8gbWFuZ2xlZCAvIGRyb3BwZWQgZnVuY3Rpb24gbmFtZXNcbnZhciBQUk9QRVIgPSBFWElTVFMgJiYgKGZ1bmN0aW9uIHNvbWV0aGluZygpIHsgLyogZW1wdHkgKi8gfSkubmFtZSA9PT0gJ3NvbWV0aGluZyc7XG52YXIgQ09ORklHVVJBQkxFID0gRVhJU1RTICYmICghREVTQ1JJUFRPUlMgfHwgKERFU0NSSVBUT1JTICYmIGdldERlc2NyaXB0b3IoRnVuY3Rpb25Qcm90b3R5cGUsICduYW1lJykuY29uZmlndXJhYmxlKSk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBFWElTVFM6IEVYSVNUUyxcbiAgUFJPUEVSOiBQUk9QRVIsXG4gIENPTkZJR1VSQUJMRTogQ09ORklHVVJBQkxFXG59O1xuIiwidmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlJyk7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBiaW5kID0gRnVuY3Rpb25Qcm90b3R5cGUuYmluZDtcbnZhciBjYWxsID0gRnVuY3Rpb25Qcm90b3R5cGUuY2FsbDtcbnZhciB1bmN1cnJ5VGhpcyA9IE5BVElWRV9CSU5EICYmIGJpbmQuYmluZChjYWxsLCBjYWxsKTtcblxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfQklORCA/IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZm4gJiYgdW5jdXJyeVRoaXMoZm4pO1xufSA6IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZm4gJiYgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjYWxsLmFwcGx5KGZuLCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsInZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBBc3luY0Zyb21TeW5jSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXN5bmMtZnJvbS1zeW5jLWl0ZXJhdG9yJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZ2V0SXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yJyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIEFTWU5DX0lURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdhc3luY0l0ZXJhdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB1c2luZ0l0ZXJhdG9yKSB7XG4gIHZhciBtZXRob2QgPSBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGdldE1ldGhvZChpdCwgQVNZTkNfSVRFUkFUT1IpIDogdXNpbmdJdGVyYXRvcjtcbiAgcmV0dXJuIG1ldGhvZCA/IGFuT2JqZWN0KGNhbGwobWV0aG9kLCBpdCkpIDogbmV3IEFzeW5jRnJvbVN5bmNJdGVyYXRvcihnZXRJdGVyYXRvcihpdCkpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xuXG52YXIgYUZ1bmN0aW9uID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBpc0NhbGxhYmxlKGFyZ3VtZW50KSA/IGFyZ3VtZW50IDogdW5kZWZpbmVkO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZXNwYWNlLCBtZXRob2QpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gYUZ1bmN0aW9uKGdsb2JhbFtuYW1lc3BhY2VdKSA6IGdsb2JhbFtuYW1lc3BhY2VdICYmIGdsb2JhbFtuYW1lc3BhY2VdW21ldGhvZF07XG59O1xuIiwidmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4ge1xuICAgIGl0ZXJhdG9yOiBvYmosXG4gICAgbmV4dDogYUNhbGxhYmxlKGFuT2JqZWN0KG9iaikubmV4dClcbiAgfTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcbnZhciBpc051bGxPclVuZGVmaW5lZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1udWxsLW9yLXVuZGVmaW5lZCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzTnVsbE9yVW5kZWZpbmVkKGl0KSkgcmV0dXJuIGdldE1ldGhvZChpdCwgSVRFUkFUT1IpXG4gICAgfHwgZ2V0TWV0aG9kKGl0LCAnQEBpdGVyYXRvcicpXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCJ2YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0cnlUb1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90cnktdG8tc3RyaW5nJyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQsIHVzaW5nSXRlcmF0b3IpIHtcbiAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBnZXRJdGVyYXRvck1ldGhvZChhcmd1bWVudCkgOiB1c2luZ0l0ZXJhdG9yO1xuICBpZiAoYUNhbGxhYmxlKGl0ZXJhdG9yTWV0aG9kKSkgcmV0dXJuIGFuT2JqZWN0KGNhbGwoaXRlcmF0b3JNZXRob2QsIGFyZ3VtZW50KSk7XG4gIHRocm93ICRUeXBlRXJyb3IodHJ5VG9TdHJpbmcoYXJndW1lbnQpICsgJyBpcyBub3QgaXRlcmFibGUnKTtcbn07XG4iLCJ2YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW1hcCAtLSBzYWZlXG4gIHJldHVybiBjYWxsKE1hcC5wcm90b3R5cGUuZW50cmllcywgaXQpO1xufTtcbiIsInZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGlzTnVsbE9yVW5kZWZpbmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW51bGwtb3ItdW5kZWZpbmVkJyk7XG5cbi8vIGBHZXRNZXRob2RgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXRtZXRob2Rcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFYsIFApIHtcbiAgdmFyIGZ1bmMgPSBWW1BdO1xuICByZXR1cm4gaXNOdWxsT3JVbmRlZmluZWQoZnVuYykgPyB1bmRlZmluZWQgOiBhQ2FsbGFibGUoZnVuYyk7XG59O1xuIiwidmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1zZXQgLS0gc2FmZVxuICByZXR1cm4gY2FsbChTZXQucHJvdG90eXBlLnZhbHVlcywgaXQpO1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcblxudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MUyA9IC9cXCQoWyQmJ2BdfFxcZHsxLDJ9fDxbXj5dKj4pL2c7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQgPSAvXFwkKFskJidgXXxcXGR7MSwyfSkvZztcblxuLy8gYEdldFN1YnN0aXR1dGlvbmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldHN1YnN0aXR1dGlvblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWF0Y2hlZCwgc3RyLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VtZW50KSB7XG4gIHZhciB0YWlsUG9zID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgdmFyIG0gPSBjYXB0dXJlcy5sZW5ndGg7XG4gIHZhciBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQ7XG4gIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICBuYW1lZENhcHR1cmVzID0gdG9PYmplY3QobmFtZWRDYXB0dXJlcyk7XG4gICAgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTO1xuICB9XG4gIHJldHVybiByZXBsYWNlKHJlcGxhY2VtZW50LCBzeW1ib2xzLCBmdW5jdGlvbiAobWF0Y2gsIGNoKSB7XG4gICAgdmFyIGNhcHR1cmU7XG4gICAgc3dpdGNoIChjaGFyQXQoY2gsIDApKSB7XG4gICAgICBjYXNlICckJzogcmV0dXJuICckJztcbiAgICAgIGNhc2UgJyYnOiByZXR1cm4gbWF0Y2hlZDtcbiAgICAgIGNhc2UgJ2AnOiByZXR1cm4gc3RyaW5nU2xpY2Uoc3RyLCAwLCBwb3NpdGlvbik7XG4gICAgICBjYXNlIFwiJ1wiOiByZXR1cm4gc3RyaW5nU2xpY2Uoc3RyLCB0YWlsUG9zKTtcbiAgICAgIGNhc2UgJzwnOlxuICAgICAgICBjYXB0dXJlID0gbmFtZWRDYXB0dXJlc1tzdHJpbmdTbGljZShjaCwgMSwgLTEpXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OiAvLyBcXGRcXGQ/XG4gICAgICAgIHZhciBuID0gK2NoO1xuICAgICAgICBpZiAobiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICBpZiAobiA+IG0pIHtcbiAgICAgICAgICB2YXIgZiA9IGZsb29yKG4gLyAxMCk7XG4gICAgICAgICAgaWYgKGYgPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICBpZiAoZiA8PSBtKSByZXR1cm4gY2FwdHVyZXNbZiAtIDFdID09PSB1bmRlZmluZWQgPyBjaGFyQXQoY2gsIDEpIDogY2FwdHVyZXNbZiAtIDFdICsgY2hhckF0KGNoLCAxKTtcbiAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgIH1cbiAgICAgICAgY2FwdHVyZSA9IGNhcHR1cmVzW24gLSAxXTtcbiAgICB9XG4gICAgcmV0dXJuIGNhcHR1cmUgPT09IHVuZGVmaW5lZCA/ICcnIDogY2FwdHVyZTtcbiAgfSk7XG59O1xuIiwidmFyIGNoZWNrID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAmJiBpdC5NYXRoID09IE1hdGggJiYgaXQ7XG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxubW9kdWxlLmV4cG9ydHMgPVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1nbG9iYWwtdGhpcyAtLSBzYWZlXG4gIGNoZWNrKHR5cGVvZiBnbG9iYWxUaGlzID09ICdvYmplY3QnICYmIGdsb2JhbFRoaXMpIHx8XG4gIGNoZWNrKHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93KSB8fFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzIC0tIHNhZmVcbiAgY2hlY2sodHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZikgfHxcbiAgY2hlY2sodHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuYyAtLSBmYWxsYmFja1xuICAoZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSkoKSB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSB1bmN1cnJ5VGhpcyh7fS5oYXNPd25Qcm9wZXJ0eSk7XG5cbi8vIGBIYXNPd25Qcm9wZXJ0eWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWhhc293bnByb3BlcnR5XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1vYmplY3QtaGFzb3duIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0Lmhhc093biB8fCBmdW5jdGlvbiBoYXNPd24oaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkodG9PYmplY3QoaXQpLCBrZXkpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gIHZhciBjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGU7XG4gIGlmIChjb25zb2xlICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICBhcmd1bWVudHMubGVuZ3RoID09IDEgPyBjb25zb2xlLmVycm9yKGEpIDogY29uc29sZS5lcnJvcihhLCBiKTtcbiAgfVxufTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ2RvY3VtZW50JywgJ2RvY3VtZW50RWxlbWVudCcpO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG5cbi8vIFRoYW5rcyB0byBJRTggZm9yIGl0cyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhREVTQ1JJUFRPUlMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3JlYXRlRWxlbWVudCgnZGl2JyksICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfVxuICB9KS5hICE9IDc7XG59KTtcbiIsIi8vIElFRUU3NTQgY29udmVyc2lvbnMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9pZWVlNzU0XG52YXIgJEFycmF5ID0gQXJyYXk7XG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIExOMiA9IE1hdGguTE4yO1xuXG52YXIgcGFjayA9IGZ1bmN0aW9uIChudW1iZXIsIG1hbnRpc3NhTGVuZ3RoLCBieXRlcykge1xuICB2YXIgYnVmZmVyID0gJEFycmF5KGJ5dGVzKTtcbiAgdmFyIGV4cG9uZW50TGVuZ3RoID0gYnl0ZXMgKiA4IC0gbWFudGlzc2FMZW5ndGggLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGV4cG9uZW50TGVuZ3RoKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIHJ0ID0gbWFudGlzc2FMZW5ndGggPT09IDIzID8gcG93KDIsIC0yNCkgLSBwb3coMiwgLTc3KSA6IDA7XG4gIHZhciBzaWduID0gbnVtYmVyIDwgMCB8fCBudW1iZXIgPT09IDAgJiYgMSAvIG51bWJlciA8IDAgPyAxIDogMDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGV4cG9uZW50LCBtYW50aXNzYSwgYztcbiAgbnVtYmVyID0gYWJzKG51bWJlcik7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gIGlmIChudW1iZXIgIT0gbnVtYmVyIHx8IG51bWJlciA9PT0gSW5maW5pdHkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgIG1hbnRpc3NhID0gbnVtYmVyICE9IG51bWJlciA/IDEgOiAwO1xuICAgIGV4cG9uZW50ID0gZU1heDtcbiAgfSBlbHNlIHtcbiAgICBleHBvbmVudCA9IGZsb29yKGxvZyhudW1iZXIpIC8gTE4yKTtcbiAgICBjID0gcG93KDIsIC1leHBvbmVudCk7XG4gICAgaWYgKG51bWJlciAqIGMgPCAxKSB7XG4gICAgICBleHBvbmVudC0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZiAoZXhwb25lbnQgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBudW1iZXIgKz0gcnQgLyBjO1xuICAgIH0gZWxzZSB7XG4gICAgICBudW1iZXIgKz0gcnQgKiBwb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYgKG51bWJlciAqIGMgPj0gMikge1xuICAgICAgZXhwb25lbnQrKztcbiAgICAgIGMgLz0gMjtcbiAgICB9XG4gICAgaWYgKGV4cG9uZW50ICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbWFudGlzc2EgPSAwO1xuICAgICAgZXhwb25lbnQgPSBlTWF4O1xuICAgIH0gZWxzZSBpZiAoZXhwb25lbnQgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtYW50aXNzYSA9IChudW1iZXIgKiBjIC0gMSkgKiBwb3coMiwgbWFudGlzc2FMZW5ndGgpO1xuICAgICAgZXhwb25lbnQgPSBleHBvbmVudCArIGVCaWFzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtYW50aXNzYSA9IG51bWJlciAqIHBvdygyLCBlQmlhcyAtIDEpICogcG93KDIsIG1hbnRpc3NhTGVuZ3RoKTtcbiAgICAgIGV4cG9uZW50ID0gMDtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKG1hbnRpc3NhTGVuZ3RoID49IDgpIHtcbiAgICBidWZmZXJbaW5kZXgrK10gPSBtYW50aXNzYSAmIDI1NTtcbiAgICBtYW50aXNzYSAvPSAyNTY7XG4gICAgbWFudGlzc2FMZW5ndGggLT0gODtcbiAgfVxuICBleHBvbmVudCA9IGV4cG9uZW50IDw8IG1hbnRpc3NhTGVuZ3RoIHwgbWFudGlzc2E7XG4gIGV4cG9uZW50TGVuZ3RoICs9IG1hbnRpc3NhTGVuZ3RoO1xuICB3aGlsZSAoZXhwb25lbnRMZW5ndGggPiAwKSB7XG4gICAgYnVmZmVyW2luZGV4KytdID0gZXhwb25lbnQgJiAyNTU7XG4gICAgZXhwb25lbnQgLz0gMjU2O1xuICAgIGV4cG9uZW50TGVuZ3RoIC09IDg7XG4gIH1cbiAgYnVmZmVyWy0taW5kZXhdIHw9IHNpZ24gKiAxMjg7XG4gIHJldHVybiBidWZmZXI7XG59O1xuXG52YXIgdW5wYWNrID0gZnVuY3Rpb24gKGJ1ZmZlciwgbWFudGlzc2FMZW5ndGgpIHtcbiAgdmFyIGJ5dGVzID0gYnVmZmVyLmxlbmd0aDtcbiAgdmFyIGV4cG9uZW50TGVuZ3RoID0gYnl0ZXMgKiA4IC0gbWFudGlzc2FMZW5ndGggLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGV4cG9uZW50TGVuZ3RoKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIG5CaXRzID0gZXhwb25lbnRMZW5ndGggLSA3O1xuICB2YXIgaW5kZXggPSBieXRlcyAtIDE7XG4gIHZhciBzaWduID0gYnVmZmVyW2luZGV4LS1dO1xuICB2YXIgZXhwb25lbnQgPSBzaWduICYgMTI3O1xuICB2YXIgbWFudGlzc2E7XG4gIHNpZ24gPj49IDc7XG4gIHdoaWxlIChuQml0cyA+IDApIHtcbiAgICBleHBvbmVudCA9IGV4cG9uZW50ICogMjU2ICsgYnVmZmVyW2luZGV4LS1dO1xuICAgIG5CaXRzIC09IDg7XG4gIH1cbiAgbWFudGlzc2EgPSBleHBvbmVudCAmICgxIDw8IC1uQml0cykgLSAxO1xuICBleHBvbmVudCA+Pj0gLW5CaXRzO1xuICBuQml0cyArPSBtYW50aXNzYUxlbmd0aDtcbiAgd2hpbGUgKG5CaXRzID4gMCkge1xuICAgIG1hbnRpc3NhID0gbWFudGlzc2EgKiAyNTYgKyBidWZmZXJbaW5kZXgtLV07XG4gICAgbkJpdHMgLT0gODtcbiAgfVxuICBpZiAoZXhwb25lbnQgPT09IDApIHtcbiAgICBleHBvbmVudCA9IDEgLSBlQmlhcztcbiAgfSBlbHNlIGlmIChleHBvbmVudCA9PT0gZU1heCkge1xuICAgIHJldHVybiBtYW50aXNzYSA/IE5hTiA6IHNpZ24gPyAtSW5maW5pdHkgOiBJbmZpbml0eTtcbiAgfSBlbHNlIHtcbiAgICBtYW50aXNzYSA9IG1hbnRpc3NhICsgcG93KDIsIG1hbnRpc3NhTGVuZ3RoKTtcbiAgICBleHBvbmVudCA9IGV4cG9uZW50IC0gZUJpYXM7XG4gIH0gcmV0dXJuIChzaWduID8gLTEgOiAxKSAqIG1hbnRpc3NhICogcG93KDIsIGV4cG9uZW50IC0gbWFudGlzc2FMZW5ndGgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHBhY2s6IHBhY2ssXG4gIHVucGFjazogdW5wYWNrXG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG52YXIgJE9iamVjdCA9IE9iamVjdDtcbnZhciBzcGxpdCA9IHVuY3VycnlUaGlzKCcnLnNwbGl0KTtcblxuLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3Ncbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyB0aHJvd3MgYW4gZXJyb3IgaW4gcmhpbm8sIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9yaGluby9pc3N1ZXMvMzQ2XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgLS0gc2FmZVxuICByZXR1cm4gISRPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKTtcbn0pID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjbGFzc29mKGl0KSA9PSAnU3RyaW5nJyA/IHNwbGl0KGl0LCAnJykgOiAkT2JqZWN0KGl0KTtcbn0gOiAkT2JqZWN0O1xuIiwidmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xuXG4vLyBtYWtlcyBzdWJjbGFzc2luZyB3b3JrIGNvcnJlY3QgZm9yIHdyYXBwZWQgYnVpbHQtaW5zXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgkdGhpcywgZHVtbXksIFdyYXBwZXIpIHtcbiAgdmFyIE5ld1RhcmdldCwgTmV3VGFyZ2V0UHJvdG90eXBlO1xuICBpZiAoXG4gICAgLy8gaXQgY2FuIHdvcmsgb25seSB3aXRoIG5hdGl2ZSBgc2V0UHJvdG90eXBlT2ZgXG4gICAgc2V0UHJvdG90eXBlT2YgJiZcbiAgICAvLyB3ZSBoYXZlbid0IGNvbXBsZXRlbHkgY29ycmVjdCBwcmUtRVM2IHdheSBmb3IgZ2V0dGluZyBgbmV3LnRhcmdldGAsIHNvIHVzZSB0aGlzXG4gICAgaXNDYWxsYWJsZShOZXdUYXJnZXQgPSBkdW1teS5jb25zdHJ1Y3RvcikgJiZcbiAgICBOZXdUYXJnZXQgIT09IFdyYXBwZXIgJiZcbiAgICBpc09iamVjdChOZXdUYXJnZXRQcm90b3R5cGUgPSBOZXdUYXJnZXQucHJvdG90eXBlKSAmJlxuICAgIE5ld1RhcmdldFByb3RvdHlwZSAhPT0gV3JhcHBlci5wcm90b3R5cGVcbiAgKSBzZXRQcm90b3R5cGVPZigkdGhpcywgTmV3VGFyZ2V0UHJvdG90eXBlKTtcbiAgcmV0dXJuICR0aGlzO1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgc3RvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG5cbnZhciBmdW5jdGlvblRvU3RyaW5nID0gdW5jdXJyeVRoaXMoRnVuY3Rpb24udG9TdHJpbmcpO1xuXG4vLyB0aGlzIGhlbHBlciBicm9rZW4gaW4gYGNvcmUtanNAMy40LjEtMy40LjRgLCBzbyB3ZSBjYW4ndCB1c2UgYHNoYXJlZGAgaGVscGVyXG5pZiAoIWlzQ2FsbGFibGUoc3RvcmUuaW5zcGVjdFNvdXJjZSkpIHtcbiAgc3RvcmUuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBmdW5jdGlvblRvU3RyaW5nKGl0KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZS5pbnNwZWN0U291cmNlO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcblxuLy8gYEluc3RhbGxFcnJvckNhdXNlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9wcm9wb3NhbC1lcnJvci1jYXVzZS8jc2VjLWVycm9yb2JqZWN0cy1pbnN0YWxsLWVycm9yLWNhdXNlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBvcHRpb25zKSB7XG4gIGlmIChpc09iamVjdChvcHRpb25zKSAmJiAnY2F1c2UnIGluIG9wdGlvbnMpIHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoTywgJ2NhdXNlJywgb3B0aW9ucy5jYXVzZSk7XG4gIH1cbn07XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLWV4dGVybmFsJyk7XG52YXIgaXNFeHRlbnNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1leHRlbnNpYmxlJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIEZSRUVaSU5HID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZyZWV6aW5nJyk7XG5cbnZhciBSRVFVSVJFRCA9IGZhbHNlO1xudmFyIE1FVEFEQVRBID0gdWlkKCdtZXRhJyk7XG52YXIgaWQgPSAwO1xuXG52YXIgc2V0TWV0YWRhdGEgPSBmdW5jdGlvbiAoaXQpIHtcbiAgZGVmaW5lUHJvcGVydHkoaXQsIE1FVEFEQVRBLCB7IHZhbHVlOiB7XG4gICAgb2JqZWN0SUQ6ICdPJyArIGlkKyssIC8vIG9iamVjdCBJRFxuICAgIHdlYWtEYXRhOiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IH0pO1xufTtcblxudmFyIGZhc3RLZXkgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICAvLyByZXR1cm4gYSBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzT3duKGl0LCBNRVRBREFUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuICdGJztcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gJ0UnO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YWRhdGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFEQVRBXS5vYmplY3RJRDtcbn07XG5cbnZhciBnZXRXZWFrRGF0YSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIGlmICghaGFzT3duKGl0LCBNRVRBREFUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YWRhdGEoaXQpO1xuICAvLyByZXR1cm4gdGhlIHN0b3JlIG9mIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFEQVRBXS53ZWFrRGF0YTtcbn07XG5cbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWklORyAmJiBSRVFVSVJFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFoYXNPd24oaXQsIE1FVEFEQVRBKSkgc2V0TWV0YWRhdGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuXG52YXIgZW5hYmxlID0gZnVuY3Rpb24gKCkge1xuICBtZXRhLmVuYWJsZSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbiAgUkVRVUlSRUQgPSB0cnVlO1xuICB2YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZjtcbiAgdmFyIHNwbGljZSA9IHVuY3VycnlUaGlzKFtdLnNwbGljZSk7XG4gIHZhciB0ZXN0ID0ge307XG4gIHRlc3RbTUVUQURBVEFdID0gMTtcblxuICAvLyBwcmV2ZW50IGV4cG9zaW5nIG9mIG1ldGFkYXRhIGtleVxuICBpZiAoZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0KS5sZW5ndGgpIHtcbiAgICBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICAgIHZhciByZXN1bHQgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSByZXN1bHQubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHJlc3VsdFtpXSA9PT0gTUVUQURBVEEpIHtcbiAgICAgICAgICBzcGxpY2UocmVzdWx0LCBpLCAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICAkKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgICAgIGdldE93blByb3BlcnR5TmFtZXM6IGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbE1vZHVsZS5mXG4gICAgfSk7XG4gIH1cbn07XG5cbnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIGVuYWJsZTogZW5hYmxlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrRGF0YTogZ2V0V2Vha0RhdGEsXG4gIG9uRnJlZXplOiBvbkZyZWV6ZVxufTtcblxuaGlkZGVuS2V5c1tNRVRBREFUQV0gPSB0cnVlO1xuIiwidmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWFrLW1hcC1iYXNpYy1kZXRlY3Rpb24nKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG52YXIgT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQgPSAnT2JqZWN0IGFscmVhZHkgaW5pdGlhbGl6ZWQnO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xudmFyIHNldCwgZ2V0LCBoYXM7XG5cbnZhciBlbmZvcmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBoYXMoaXQpID8gZ2V0KGl0KSA6IHNldChpdCwge30pO1xufTtcblxudmFyIGdldHRlckZvciA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgc3RhdGU7XG4gICAgaWYgKCFpc09iamVjdChpdCkgfHwgKHN0YXRlID0gZ2V0KGl0KSkudHlwZSAhPT0gVFlQRSkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCcpO1xuICAgIH0gcmV0dXJuIHN0YXRlO1xuICB9O1xufTtcblxuaWYgKE5BVElWRV9XRUFLX01BUCB8fCBzaGFyZWQuc3RhdGUpIHtcbiAgdmFyIHN0b3JlID0gc2hhcmVkLnN0YXRlIHx8IChzaGFyZWQuc3RhdGUgPSBuZXcgV2Vha01hcCgpKTtcbiAgdmFyIHdtZ2V0ID0gdW5jdXJyeVRoaXMoc3RvcmUuZ2V0KTtcbiAgdmFyIHdtaGFzID0gdW5jdXJyeVRoaXMoc3RvcmUuaGFzKTtcbiAgdmFyIHdtc2V0ID0gdW5jdXJyeVRoaXMoc3RvcmUuc2V0KTtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIGlmICh3bWhhcyhzdG9yZSwgaXQpKSB0aHJvdyBUeXBlRXJyb3IoT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQpO1xuICAgIG1ldGFkYXRhLmZhY2FkZSA9IGl0O1xuICAgIHdtc2V0KHN0b3JlLCBpdCwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtZ2V0KHN0b3JlLCBpdCkgfHwge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWhhcyhzdG9yZSwgaXQpO1xuICB9O1xufSBlbHNlIHtcbiAgdmFyIFNUQVRFID0gc2hhcmVkS2V5KCdzdGF0ZScpO1xuICBoaWRkZW5LZXlzW1NUQVRFXSA9IHRydWU7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICBpZiAoaGFzT3duKGl0LCBTVEFURSkpIHRocm93IFR5cGVFcnJvcihPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCk7XG4gICAgbWV0YWRhdGEuZmFjYWRlID0gaXQ7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGl0LCBTVEFURSwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGhhc093bihpdCwgU1RBVEUpID8gaXRbU1RBVEVdIDoge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBoYXNPd24oaXQsIFNUQVRFKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBnZXQ6IGdldCxcbiAgaGFzOiBoYXMsXG4gIGVuZm9yY2U6IGVuZm9yY2UsXG4gIGdldHRlckZvcjogZ2V0dGVyRm9yXG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvdHlwZVtJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG4vLyBgSXNBcnJheWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzYXJyYXlcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLWFycmF5LWlzYXJyYXkgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGNsYXNzb2YoYXJndW1lbnQpID09ICdBcnJheSc7XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG52YXIgc2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBzbGljZShjbGFzc29mKGl0KSwgMCwgMykgPT09ICdCaWcnO1xufTtcbiIsInZhciAkZG9jdW1lbnRBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtYWxsJyk7XG5cbnZhciBkb2N1bWVudEFsbCA9ICRkb2N1bWVudEFsbC5hbGw7XG5cbi8vIGBJc0NhbGxhYmxlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNjYWxsYWJsZVxubW9kdWxlLmV4cG9ydHMgPSAkZG9jdW1lbnRBbGwuSVNfSFRNTEREQSA/IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gdHlwZW9mIGFyZ3VtZW50ID09ICdmdW5jdGlvbicgfHwgYXJndW1lbnQgPT09IGRvY3VtZW50QWxsO1xufSA6IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gdHlwZW9mIGFyZ3VtZW50ID09ICdmdW5jdGlvbic7XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xuXG52YXIgbm9vcCA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBlbXB0eSA9IFtdO1xudmFyIGNvbnN0cnVjdCA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnY29uc3RydWN0Jyk7XG52YXIgY29uc3RydWN0b3JSZWdFeHAgPSAvXlxccyooPzpjbGFzc3xmdW5jdGlvbilcXGIvO1xudmFyIGV4ZWMgPSB1bmN1cnJ5VGhpcyhjb25zdHJ1Y3RvclJlZ0V4cC5leGVjKTtcbnZhciBJTkNPUlJFQ1RfVE9fU1RSSU5HID0gIWNvbnN0cnVjdG9yUmVnRXhwLmV4ZWMobm9vcCk7XG5cbnZhciBpc0NvbnN0cnVjdG9yTW9kZXJuID0gZnVuY3Rpb24gaXNDb25zdHJ1Y3Rvcihhcmd1bWVudCkge1xuICBpZiAoIWlzQ2FsbGFibGUoYXJndW1lbnQpKSByZXR1cm4gZmFsc2U7XG4gIHRyeSB7XG4gICAgY29uc3RydWN0KG5vb3AsIGVtcHR5LCBhcmd1bWVudCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG52YXIgaXNDb25zdHJ1Y3RvckxlZ2FjeSA9IGZ1bmN0aW9uIGlzQ29uc3RydWN0b3IoYXJndW1lbnQpIHtcbiAgaWYgKCFpc0NhbGxhYmxlKGFyZ3VtZW50KSkgcmV0dXJuIGZhbHNlO1xuICBzd2l0Y2ggKGNsYXNzb2YoYXJndW1lbnQpKSB7XG4gICAgY2FzZSAnQXN5bmNGdW5jdGlvbic6XG4gICAgY2FzZSAnR2VuZXJhdG9yRnVuY3Rpb24nOlxuICAgIGNhc2UgJ0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24nOiByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyB3ZSBjYW4ndCBjaGVjayAucHJvdG90eXBlIHNpbmNlIGNvbnN0cnVjdG9ycyBwcm9kdWNlZCBieSAuYmluZCBoYXZlbid0IGl0XG4gICAgLy8gYEZ1bmN0aW9uI3RvU3RyaW5nYCB0aHJvd3Mgb24gc29tZSBidWlsdC1pdCBmdW5jdGlvbiBpbiBzb21lIGxlZ2FjeSBlbmdpbmVzXG4gICAgLy8gKGZvciBleGFtcGxlLCBgRE9NUXVhZGAgYW5kIHNpbWlsYXIgaW4gRkY0MS0pXG4gICAgcmV0dXJuIElOQ09SUkVDVF9UT19TVFJJTkcgfHwgISFleGVjKGNvbnN0cnVjdG9yUmVnRXhwLCBpbnNwZWN0U291cmNlKGFyZ3VtZW50KSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG5cbmlzQ29uc3RydWN0b3JMZWdhY3kuc2hhbSA9IHRydWU7XG5cbi8vIGBJc0NvbnN0cnVjdG9yYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNjb25zdHJ1Y3RvclxubW9kdWxlLmV4cG9ydHMgPSAhY29uc3RydWN0IHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNhbGxlZDtcbiAgcmV0dXJuIGlzQ29uc3RydWN0b3JNb2Rlcm4oaXNDb25zdHJ1Y3Rvck1vZGVybi5jYWxsKVxuICAgIHx8ICFpc0NvbnN0cnVjdG9yTW9kZXJuKE9iamVjdClcbiAgICB8fCAhaXNDb25zdHJ1Y3Rvck1vZGVybihmdW5jdGlvbiAoKSB7IGNhbGxlZCA9IHRydWU7IH0pXG4gICAgfHwgY2FsbGVkO1xufSkgPyBpc0NvbnN0cnVjdG9yTGVnYWN5IDogaXNDb25zdHJ1Y3Rvck1vZGVybjtcbiIsInZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkZXNjcmlwdG9yKSB7XG4gIHJldHVybiBkZXNjcmlwdG9yICE9PSB1bmRlZmluZWQgJiYgKGhhc093bihkZXNjcmlwdG9yLCAndmFsdWUnKSB8fCBoYXNPd24oZGVzY3JpcHRvciwgJ3dyaXRhYmxlJykpO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcblxudmFyIHJlcGxhY2VtZW50ID0gLyN8XFwucHJvdG90eXBlXFwuLztcblxudmFyIGlzRm9yY2VkID0gZnVuY3Rpb24gKGZlYXR1cmUsIGRldGVjdGlvbikge1xuICB2YXIgdmFsdWUgPSBkYXRhW25vcm1hbGl6ZShmZWF0dXJlKV07XG4gIHJldHVybiB2YWx1ZSA9PSBQT0xZRklMTCA/IHRydWVcbiAgICA6IHZhbHVlID09IE5BVElWRSA/IGZhbHNlXG4gICAgOiBpc0NhbGxhYmxlKGRldGVjdGlvbikgPyBmYWlscyhkZXRlY3Rpb24pXG4gICAgOiAhIWRldGVjdGlvbjtcbn07XG5cbnZhciBub3JtYWxpemUgPSBpc0ZvcmNlZC5ub3JtYWxpemUgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHJldHVybiBTdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlcGxhY2VtZW50LCAnLicpLnRvTG93ZXJDYXNlKCk7XG59O1xuXG52YXIgZGF0YSA9IGlzRm9yY2VkLmRhdGEgPSB7fTtcbnZhciBOQVRJVkUgPSBpc0ZvcmNlZC5OQVRJVkUgPSAnTic7XG52YXIgUE9MWUZJTEwgPSBpc0ZvcmNlZC5QT0xZRklMTCA9ICdQJztcblxubW9kdWxlLmV4cG9ydHMgPSBpc0ZvcmNlZDtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuLy8gYElzSW50ZWdyYWxOdW1iZXJgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc2ludGVncmFsbnVtYmVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1udW1iZXItaXNpbnRlZ2VyIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gTnVtYmVyLmlzSW50ZWdlciB8fCBmdW5jdGlvbiBpc0ludGVnZXIoaXQpIHtcbiAgcmV0dXJuICFpc09iamVjdChpdCkgJiYgaXNGaW5pdGUoaXQpICYmIGZsb29yKGl0KSA9PT0gaXQ7XG59O1xuIiwiLy8gd2UgY2FuJ3QgdXNlIGp1c3QgYGl0ID09IG51bGxgIHNpbmNlIG9mIGBkb2N1bWVudC5hbGxgIHNwZWNpYWwgY2FzZVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1Jc0hUTUxEREEtaW50ZXJuYWwtc2xvdC1hZWNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gbnVsbCB8fCBpdCA9PT0gdW5kZWZpbmVkO1xufTtcbiIsInZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgJGRvY3VtZW50QWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWFsbCcpO1xuXG52YXIgZG9jdW1lbnRBbGwgPSAkZG9jdW1lbnRBbGwuYWxsO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICRkb2N1bWVudEFsbC5JU19IVE1MRERBID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IGlzQ2FsbGFibGUoaXQpIHx8IGl0ID09PSBkb2N1bWVudEFsbDtcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogaXNDYWxsYWJsZShpdCk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBNQVRDSCA9IHdlbGxLbm93blN5bWJvbCgnbWF0Y2gnKTtcblxuLy8gYElzUmVnRXhwYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNyZWdleHBcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpc1JlZ0V4cDtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNsYXNzb2YoaXQpID09ICdSZWdFeHAnKTtcbn07XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQnKTtcblxudmFyICRPYmplY3QgPSBPYmplY3Q7XG5cbm1vZHVsZS5leHBvcnRzID0gVVNFX1NZTUJPTF9BU19VSUQgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyICRTeW1ib2wgPSBnZXRCdWlsdEluKCdTeW1ib2wnKTtcbiAgcmV0dXJuIGlzQ2FsbGFibGUoJFN5bWJvbCkgJiYgaXNQcm90b3R5cGVPZigkU3ltYm9sLnByb3RvdHlwZSwgJE9iamVjdChpdCkpO1xufTtcbiIsInZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRyeVRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RyeS10by1zdHJpbmcnKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcbnZhciBnZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3InKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgaXRlcmF0b3JDbG9zZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1jbG9zZScpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxudmFyIFJlc3VsdCA9IGZ1bmN0aW9uIChzdG9wcGVkLCByZXN1bHQpIHtcbiAgdGhpcy5zdG9wcGVkID0gc3RvcHBlZDtcbiAgdGhpcy5yZXN1bHQgPSByZXN1bHQ7XG59O1xuXG52YXIgUmVzdWx0UHJvdG90eXBlID0gUmVzdWx0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIHVuYm91bmRGdW5jdGlvbiwgb3B0aW9ucykge1xuICB2YXIgdGhhdCA9IG9wdGlvbnMgJiYgb3B0aW9ucy50aGF0O1xuICB2YXIgQVNfRU5UUklFUyA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5BU19FTlRSSUVTKTtcbiAgdmFyIElTX1JFQ09SRCA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5JU19SRUNPUkQpO1xuICB2YXIgSVNfSVRFUkFUT1IgPSAhIShvcHRpb25zICYmIG9wdGlvbnMuSVNfSVRFUkFUT1IpO1xuICB2YXIgSU5URVJSVVBURUQgPSAhIShvcHRpb25zICYmIG9wdGlvbnMuSU5URVJSVVBURUQpO1xuICB2YXIgZm4gPSBiaW5kKHVuYm91bmRGdW5jdGlvbiwgdGhhdCk7XG4gIHZhciBpdGVyYXRvciwgaXRlckZuLCBpbmRleCwgbGVuZ3RoLCByZXN1bHQsIG5leHQsIHN0ZXA7XG5cbiAgdmFyIHN0b3AgPSBmdW5jdGlvbiAoY29uZGl0aW9uKSB7XG4gICAgaWYgKGl0ZXJhdG9yKSBpdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCAnbm9ybWFsJywgY29uZGl0aW9uKTtcbiAgICByZXR1cm4gbmV3IFJlc3VsdCh0cnVlLCBjb25kaXRpb24pO1xuICB9O1xuXG4gIHZhciBjYWxsRm4gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAoQVNfRU5UUklFUykge1xuICAgICAgYW5PYmplY3QodmFsdWUpO1xuICAgICAgcmV0dXJuIElOVEVSUlVQVEVEID8gZm4odmFsdWVbMF0sIHZhbHVlWzFdLCBzdG9wKSA6IGZuKHZhbHVlWzBdLCB2YWx1ZVsxXSk7XG4gICAgfSByZXR1cm4gSU5URVJSVVBURUQgPyBmbih2YWx1ZSwgc3RvcCkgOiBmbih2YWx1ZSk7XG4gIH07XG5cbiAgaWYgKElTX1JFQ09SRCkge1xuICAgIGl0ZXJhdG9yID0gaXRlcmFibGUuaXRlcmF0b3I7XG4gIH0gZWxzZSBpZiAoSVNfSVRFUkFUT1IpIHtcbiAgICBpdGVyYXRvciA9IGl0ZXJhYmxlO1xuICB9IGVsc2Uge1xuICAgIGl0ZXJGbiA9IGdldEl0ZXJhdG9yTWV0aG9kKGl0ZXJhYmxlKTtcbiAgICBpZiAoIWl0ZXJGbikgdGhyb3cgJFR5cGVFcnJvcih0cnlUb1N0cmluZyhpdGVyYWJsZSkgKyAnIGlzIG5vdCBpdGVyYWJsZScpO1xuICAgIC8vIG9wdGltaXNhdGlvbiBmb3IgYXJyYXkgaXRlcmF0b3JzXG4gICAgaWYgKGlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyRm4pKSB7XG4gICAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoaXRlcmFibGUpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICByZXN1bHQgPSBjYWxsRm4oaXRlcmFibGVbaW5kZXhdKTtcbiAgICAgICAgaWYgKHJlc3VsdCAmJiBpc1Byb3RvdHlwZU9mKFJlc3VsdFByb3RvdHlwZSwgcmVzdWx0KSkgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0gcmV0dXJuIG5ldyBSZXN1bHQoZmFsc2UpO1xuICAgIH1cbiAgICBpdGVyYXRvciA9IGdldEl0ZXJhdG9yKGl0ZXJhYmxlLCBpdGVyRm4pO1xuICB9XG5cbiAgbmV4dCA9IElTX1JFQ09SRCA/IGl0ZXJhYmxlLm5leHQgOiBpdGVyYXRvci5uZXh0O1xuICB3aGlsZSAoIShzdGVwID0gY2FsbChuZXh0LCBpdGVyYXRvcikpLmRvbmUpIHtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gY2FsbEZuKHN0ZXAudmFsdWUpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCAndGhyb3cnLCBlcnJvcik7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVzdWx0ID09ICdvYmplY3QnICYmIHJlc3VsdCAmJiBpc1Byb3RvdHlwZU9mKFJlc3VsdFByb3RvdHlwZSwgcmVzdWx0KSkgcmV0dXJuIHJlc3VsdDtcbiAgfSByZXR1cm4gbmV3IFJlc3VsdChmYWxzZSk7XG59O1xuIiwidmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBraW5kLCB2YWx1ZSkge1xuICB2YXIgaW5uZXJSZXN1bHQsIGlubmVyRXJyb3I7XG4gIGFuT2JqZWN0KGl0ZXJhdG9yKTtcbiAgdHJ5IHtcbiAgICBpbm5lclJlc3VsdCA9IGdldE1ldGhvZChpdGVyYXRvciwgJ3JldHVybicpO1xuICAgIGlmICghaW5uZXJSZXN1bHQpIHtcbiAgICAgIGlmIChraW5kID09PSAndGhyb3cnKSB0aHJvdyB2YWx1ZTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgaW5uZXJSZXN1bHQgPSBjYWxsKGlubmVyUmVzdWx0LCBpdGVyYXRvcik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaW5uZXJFcnJvciA9IHRydWU7XG4gICAgaW5uZXJSZXN1bHQgPSBlcnJvcjtcbiAgfVxuICBpZiAoa2luZCA9PT0gJ3Rocm93JykgdGhyb3cgdmFsdWU7XG4gIGlmIChpbm5lckVycm9yKSB0aHJvdyBpbm5lclJlc3VsdDtcbiAgYW5PYmplY3QoaW5uZXJSZXN1bHQpO1xuICByZXR1cm4gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJykuSXRlcmF0b3JQcm90b3R5cGU7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0LCBFTlVNRVJBQkxFX05FWFQpIHtcbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIEl0ZXJhdG9yQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigrIUVOVU1FUkFCTEVfTkVYVCwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yQ29uc3RydWN0b3IsIFRPX1NUUklOR19UQUcsIGZhbHNlLCB0cnVlKTtcbiAgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgcmV0dXJuIEl0ZXJhdG9yQ29uc3RydWN0b3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGRlZmluZUJ1aWx0SW5zID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbnMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMtY29yZScpLkl0ZXJhdG9yUHJvdG90eXBlO1xudmFyIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWl0ZXItcmVzdWx0LW9iamVjdCcpO1xudmFyIGl0ZXJhdG9yQ2xvc2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3ItY2xvc2UnKTtcblxudmFyIElURVJBVE9SX0hFTFBFUiA9ICdJdGVyYXRvckhlbHBlcic7XG52YXIgV1JBUF9GT1JfVkFMSURfSVRFUkFUT1IgPSAnV3JhcEZvclZhbGlkSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG5cbnZhciBjcmVhdGVJdGVyYXRvclByb3h5UHJvdG90eXBlID0gZnVuY3Rpb24gKElTX0lURVJBVE9SKSB7XG4gIHZhciBJVEVSQVRPUl9QUk9YWSA9IElTX0lURVJBVE9SID8gV1JBUF9GT1JfVkFMSURfSVRFUkFUT1IgOiBJVEVSQVRPUl9IRUxQRVI7XG5cbiAgdmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihJVEVSQVRPUl9QUk9YWSk7XG5cbiAgdmFyIEl0ZXJhdG9yUHJveHlQcm90b3R5cGUgPSBkZWZpbmVCdWlsdElucyhjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpLCB7XG4gICAgbmV4dDogZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAvLyBmb3Igc2ltcGxpZmljYXRpb246XG4gICAgICAvLyAgIGZvciBgJVdyYXBGb3JWYWxpZEl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0YCBvdXIgYG5leHRIYW5kbGVyYCByZXR1cm5zIGBJdGVyUmVzdWx0T2JqZWN0YFxuICAgICAgLy8gICBmb3IgYCVJdGVyYXRvckhlbHBlclByb3RvdHlwZSUubmV4dGAgLSBqdXN0IGEgdmFsdWVcbiAgICAgIGlmIChJU19JVEVSQVRPUikgcmV0dXJuIHN0YXRlLm5leHRIYW5kbGVyKCk7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gc3RhdGUuZG9uZSA/IHVuZGVmaW5lZCA6IHN0YXRlLm5leHRIYW5kbGVyKCk7XG4gICAgICAgIHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KHJlc3VsdCwgc3RhdGUuZG9uZSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfSxcbiAgICAncmV0dXJuJzogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgIHZhciBpdGVyYXRvciA9IHN0YXRlLml0ZXJhdG9yO1xuICAgICAgc3RhdGUuZG9uZSA9IHRydWU7XG4gICAgICBpZiAoSVNfSVRFUkFUT1IpIHtcbiAgICAgICAgdmFyIHJldHVybk1ldGhvZCA9IGdldE1ldGhvZChpdGVyYXRvciwgJ3JldHVybicpO1xuICAgICAgICByZXR1cm4gcmV0dXJuTWV0aG9kID8gY2FsbChyZXR1cm5NZXRob2QsIGl0ZXJhdG9yKSA6IGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QodW5kZWZpbmVkLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIHZhciBpbm5lckl0ZXJhdG9yID0gc3RhdGUuaW5uZXJJdGVyYXRvcjtcbiAgICAgIGlmIChpbm5lckl0ZXJhdG9yKSB0cnkge1xuICAgICAgICBpdGVyYXRvckNsb3NlKGlubmVySXRlcmF0b3IsICdyZXR1cm4nKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCAndGhyb3cnLCBlcnJvcik7XG4gICAgICB9XG4gICAgICBpdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCAncmV0dXJuJyk7XG4gICAgICByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdCh1bmRlZmluZWQsIHRydWUpO1xuICAgIH1cbiAgfSk7XG5cbiAgaWYgKCFJU19JVEVSQVRPUikge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShJdGVyYXRvclByb3h5UHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCAnSXRlcmF0b3IgSGVscGVyJyk7XG4gIH1cblxuICByZXR1cm4gSXRlcmF0b3JQcm94eVByb3RvdHlwZTtcbn07XG5cbnZhciBJdGVyYXRvckhlbHBlclByb3RvdHlwZSA9IGNyZWF0ZUl0ZXJhdG9yUHJveHlQcm90b3R5cGUoZmFsc2UpO1xudmFyIFdyYXBGb3JWYWxpZEl0ZXJhdG9yUHJvdG90eXBlID0gY3JlYXRlSXRlcmF0b3JQcm94eVByb3RvdHlwZSh0cnVlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmV4dEhhbmRsZXIsIElTX0lURVJBVE9SKSB7XG4gIHZhciBJVEVSQVRPUl9QUk9YWSA9IElTX0lURVJBVE9SID8gV1JBUF9GT1JfVkFMSURfSVRFUkFUT1IgOiBJVEVSQVRPUl9IRUxQRVI7XG5cbiAgdmFyIEl0ZXJhdG9yUHJveHkgPSBmdW5jdGlvbiBJdGVyYXRvcihyZWNvcmQsIHN0YXRlKSB7XG4gICAgaWYgKHN0YXRlKSB7XG4gICAgICBzdGF0ZS5pdGVyYXRvciA9IHJlY29yZC5pdGVyYXRvcjtcbiAgICAgIHN0YXRlLm5leHQgPSByZWNvcmQubmV4dDtcbiAgICB9IGVsc2Ugc3RhdGUgPSByZWNvcmQ7XG4gICAgc3RhdGUudHlwZSA9IElURVJBVE9SX1BST1hZO1xuICAgIHN0YXRlLm5leHRIYW5kbGVyID0gbmV4dEhhbmRsZXI7XG4gICAgc3RhdGUuZG9uZSA9IGZhbHNlO1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywgc3RhdGUpO1xuICB9O1xuXG4gIEl0ZXJhdG9yUHJveHkucHJvdG90eXBlID0gSVNfSVRFUkFUT1IgPyBXcmFwRm9yVmFsaWRJdGVyYXRvclByb3RvdHlwZSA6IEl0ZXJhdG9ySGVscGVyUHJvdG90eXBlO1xuXG4gIHJldHVybiBJdGVyYXRvclByb3h5O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIEZ1bmN0aW9uTmFtZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1uYW1lJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3ItY3JlYXRlLWNvbnN0cnVjdG9yJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEl0ZXJhdG9yc0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUnKTtcblxudmFyIFBST1BFUl9GVU5DVElPTl9OQU1FID0gRnVuY3Rpb25OYW1lLlBST1BFUjtcbnZhciBDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSA9IEZ1bmN0aW9uTmFtZS5DT05GSUdVUkFCTEU7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSBJdGVyYXRvcnNDb3JlLkl0ZXJhdG9yUHJvdG90eXBlO1xudmFyIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSBJdGVyYXRvcnNDb3JlLkJVR0dZX1NBRkFSSV9JVEVSQVRPUlM7XG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcbnZhciBFTlRSSUVTID0gJ2VudHJpZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEl0ZXJhYmxlLCBOQU1FLCBJdGVyYXRvckNvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yKEl0ZXJhdG9yQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuXG4gIHZhciBnZXRJdGVyYXRpb25NZXRob2QgPSBmdW5jdGlvbiAoS0lORCkge1xuICAgIGlmIChLSU5EID09PSBERUZBVUxUICYmIGRlZmF1bHRJdGVyYXRvcikgcmV0dXJuIGRlZmF1bHRJdGVyYXRvcjtcbiAgICBpZiAoIUJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgJiYgS0lORCBpbiBJdGVyYWJsZVByb3RvdHlwZSkgcmV0dXJuIEl0ZXJhYmxlUHJvdG90eXBlW0tJTkRdO1xuICAgIHN3aXRjaCAoS0lORCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICAgIGNhc2UgRU5UUklFUzogcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzKTsgfTtcbiAgfTtcblxuICB2YXIgVE9fU1RSSU5HX1RBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIElOQ09SUkVDVF9WQUxVRVNfTkFNRSA9IGZhbHNlO1xuICB2YXIgSXRlcmFibGVQcm90b3R5cGUgPSBJdGVyYWJsZS5wcm90b3R5cGU7XG4gIHZhciBuYXRpdmVJdGVyYXRvciA9IEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SXVxuICAgIHx8IEl0ZXJhYmxlUHJvdG90eXBlWydAQGl0ZXJhdG9yJ11cbiAgICB8fCBERUZBVUxUICYmIEl0ZXJhYmxlUHJvdG90eXBlW0RFRkFVTFRdO1xuICB2YXIgZGVmYXVsdEl0ZXJhdG9yID0gIUJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgJiYgbmF0aXZlSXRlcmF0b3IgfHwgZ2V0SXRlcmF0aW9uTWV0aG9kKERFRkFVTFQpO1xuICB2YXIgYW55TmF0aXZlSXRlcmF0b3IgPSBOQU1FID09ICdBcnJheScgPyBJdGVyYWJsZVByb3RvdHlwZS5lbnRyaWVzIHx8IG5hdGl2ZUl0ZXJhdG9yIDogbmF0aXZlSXRlcmF0b3I7XG4gIHZhciBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIG1ldGhvZHMsIEtFWTtcblxuICAvLyBmaXggbmF0aXZlXG4gIGlmIChhbnlOYXRpdmVJdGVyYXRvcikge1xuICAgIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKGFueU5hdGl2ZUl0ZXJhdG9yLmNhbGwobmV3IEl0ZXJhYmxlKCkpKTtcbiAgICBpZiAoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICBpZiAoIUlTX1BVUkUgJiYgZ2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlKSAhPT0gSXRlcmF0b3JQcm90b3R5cGUpIHtcbiAgICAgICAgaWYgKHNldFByb3RvdHlwZU9mKSB7XG4gICAgICAgICAgc2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJdGVyYXRvclByb3RvdHlwZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzQ2FsbGFibGUoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSkpIHtcbiAgICAgICAgICBkZWZpbmVCdWlsdEluKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIFRPX1NUUklOR19UQUcsIHRydWUsIHRydWUpO1xuICAgICAgaWYgKElTX1BVUkUpIEl0ZXJhdG9yc1tUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXM7XG4gICAgfVxuICB9XG5cbiAgLy8gZml4IEFycmF5LnByb3RvdHlwZS57IHZhbHVlcywgQEBpdGVyYXRvciB9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoUFJPUEVSX0ZVTkNUSU9OX05BTUUgJiYgREVGQVVMVCA9PSBWQUxVRVMgJiYgbmF0aXZlSXRlcmF0b3IgJiYgbmF0aXZlSXRlcmF0b3IubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgaWYgKCFJU19QVVJFICYmIENPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoSXRlcmFibGVQcm90b3R5cGUsICduYW1lJywgVkFMVUVTKTtcbiAgICB9IGVsc2Uge1xuICAgICAgSU5DT1JSRUNUX1ZBTFVFU19OQU1FID0gdHJ1ZTtcbiAgICAgIGRlZmF1bHRJdGVyYXRvciA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIGNhbGwobmF0aXZlSXRlcmF0b3IsIHRoaXMpOyB9O1xuICAgIH1cbiAgfVxuXG4gIC8vIGV4cG9ydCBhZGRpdGlvbmFsIG1ldGhvZHNcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBnZXRJdGVyYXRpb25NZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/IGRlZmF1bHRJdGVyYXRvciA6IGdldEl0ZXJhdGlvbk1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6IGdldEl0ZXJhdGlvbk1ldGhvZChFTlRSSUVTKVxuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChLRVkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgfHwgSU5DT1JSRUNUX1ZBTFVFU19OQU1FIHx8ICEoS0VZIGluIEl0ZXJhYmxlUHJvdG90eXBlKSkge1xuICAgICAgICBkZWZpbmVCdWlsdEluKEl0ZXJhYmxlUHJvdG90eXBlLCBLRVksIG1ldGhvZHNbS0VZXSk7XG4gICAgICB9XG4gICAgfSBlbHNlICQoeyB0YXJnZXQ6IE5BTUUsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgfHwgSU5DT1JSRUNUX1ZBTFVFU19OQU1FIH0sIG1ldGhvZHMpO1xuICB9XG5cbiAgLy8gZGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUlTX1BVUkUgfHwgRk9SQ0VEKSAmJiBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl0gIT09IGRlZmF1bHRJdGVyYXRvcikge1xuICAgIGRlZmluZUJ1aWx0SW4oSXRlcmFibGVQcm90b3R5cGUsIElURVJBVE9SLCBkZWZhdWx0SXRlcmF0b3IsIHsgbmFtZTogREVGQVVMVCB9KTtcbiAgfVxuICBJdGVyYXRvcnNbTkFNRV0gPSBkZWZhdWx0SXRlcmF0b3I7XG5cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtaXRlcmF0b3ItaGVscGVyc1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGdldEl0ZXJhdG9yRGlyZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1kaXJlY3QnKTtcbnZhciBjcmVhdGVJdGVyYXRvclByb3h5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWNyZWF0ZS1wcm94eScpO1xuXG52YXIgSXRlcmF0b3JQcm94eSA9IGNyZWF0ZUl0ZXJhdG9yUHJveHkoZnVuY3Rpb24gKCkge1xuICB2YXIgcmVzdWx0ID0gYW5PYmplY3QoY2FsbCh0aGlzLm5leHQsIHRoaXMuaXRlcmF0b3IpKTtcbiAgdmFyIGRvbmUgPSB0aGlzLmRvbmUgPSAhIXJlc3VsdC5kb25lO1xuICBpZiAoIWRvbmUpIHJldHVybiBbdGhpcy5pbmRleCsrLCByZXN1bHQudmFsdWVdO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5kZXhlZCgpIHtcbiAgcmV0dXJuIG5ldyBJdGVyYXRvclByb3h5KGdldEl0ZXJhdG9yRGlyZWN0KHRoaXMpLCB7XG4gICAgaW5kZXg6IDBcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IGZhbHNlO1xuXG4vLyBgJUl0ZXJhdG9yUHJvdG90eXBlJWAgb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSVpdGVyYXRvcnByb3RvdHlwZSUtb2JqZWN0XG52YXIgSXRlcmF0b3JQcm90b3R5cGUsIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSwgYXJyYXlJdGVyYXRvcjtcblxuLyogZXNsaW50LWRpc2FibGUgZXMteC9uby1hcnJheS1wcm90b3R5cGUta2V5cyAtLSBzYWZlICovXG5pZiAoW10ua2V5cykge1xuICBhcnJheUl0ZXJhdG9yID0gW10ua2V5cygpO1xuICAvLyBTYWZhcmkgOCBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbiAgaWYgKCEoJ25leHQnIGluIGFycmF5SXRlcmF0b3IpKSBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gdHJ1ZTtcbiAgZWxzZSB7XG4gICAgUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoZ2V0UHJvdG90eXBlT2YoYXJyYXlJdGVyYXRvcikpO1xuICAgIGlmIChQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUpIEl0ZXJhdG9yUHJvdG90eXBlID0gUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG59XG5cbnZhciBORVdfSVRFUkFUT1JfUFJPVE9UWVBFID0gIWlzT2JqZWN0KEl0ZXJhdG9yUHJvdG90eXBlKSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciB0ZXN0ID0ge307XG4gIC8vIEZGNDQtIGxlZ2FjeSBpdGVyYXRvcnMgY2FzZVxuICByZXR1cm4gSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdLmNhbGwodGVzdCkgIT09IHRlc3Q7XG59KTtcblxuaWYgKE5FV19JVEVSQVRPUl9QUk9UT1RZUEUpIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5lbHNlIGlmIChJU19QVVJFKSBJdGVyYXRvclByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG5cbi8vIGAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0laXRlcmF0b3Jwcm90b3R5cGUlLUBAaXRlcmF0b3JcbmlmICghaXNDYWxsYWJsZShJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0pKSB7XG4gIGRlZmluZUJ1aWx0SW4oSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgSXRlcmF0b3JQcm90b3R5cGU6IEl0ZXJhdG9yUHJvdG90eXBlLFxuICBCVUdHWV9TQUZBUklfSVRFUkFUT1JTOiBCVUdHWV9TQUZBUklfSVRFUkFUT1JTXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcblxuLy8gYExlbmd0aE9mQXJyYXlMaWtlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbGVuZ3Rob2ZhcnJheWxpa2Vcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gdG9MZW5ndGgob2JqLmxlbmd0aCk7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1uYW1lJykuQ09ORklHVVJBQkxFO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBlbmZvcmNlSW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZW5mb3JjZTtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG52YXIgQ09ORklHVVJBQkxFX0xFTkdUSCA9IERFU0NSSVBUT1JTICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sICdsZW5ndGgnLCB7IHZhbHVlOiA4IH0pLmxlbmd0aCAhPT0gODtcbn0pO1xuXG52YXIgVEVNUExBVEUgPSBTdHJpbmcoU3RyaW5nKS5zcGxpdCgnU3RyaW5nJyk7XG5cbnZhciBtYWtlQnVpbHRJbiA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHZhbHVlLCBuYW1lLCBvcHRpb25zKSB7XG4gIGlmIChTdHJpbmcobmFtZSkuc2xpY2UoMCwgNykgPT09ICdTeW1ib2woJykge1xuICAgIG5hbWUgPSAnWycgKyBTdHJpbmcobmFtZSkucmVwbGFjZSgvXlN5bWJvbFxcKChbXildKilcXCkvLCAnJDEnKSArICddJztcbiAgfVxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmdldHRlcikgbmFtZSA9ICdnZXQgJyArIG5hbWU7XG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuc2V0dGVyKSBuYW1lID0gJ3NldCAnICsgbmFtZTtcbiAgaWYgKCFoYXNPd24odmFsdWUsICduYW1lJykgfHwgKENPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FICYmIHZhbHVlLm5hbWUgIT09IG5hbWUpKSB7XG4gICAgaWYgKERFU0NSSVBUT1JTKSBkZWZpbmVQcm9wZXJ0eSh2YWx1ZSwgJ25hbWUnLCB7IHZhbHVlOiBuYW1lLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gICAgZWxzZSB2YWx1ZS5uYW1lID0gbmFtZTtcbiAgfVxuICBpZiAoQ09ORklHVVJBQkxFX0xFTkdUSCAmJiBvcHRpb25zICYmIGhhc093bihvcHRpb25zLCAnYXJpdHknKSAmJiB2YWx1ZS5sZW5ndGggIT09IG9wdGlvbnMuYXJpdHkpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eSh2YWx1ZSwgJ2xlbmd0aCcsIHsgdmFsdWU6IG9wdGlvbnMuYXJpdHkgfSk7XG4gIH1cbiAgdHJ5IHtcbiAgICBpZiAob3B0aW9ucyAmJiBoYXNPd24ob3B0aW9ucywgJ2NvbnN0cnVjdG9yJykgJiYgb3B0aW9ucy5jb25zdHJ1Y3Rvcikge1xuICAgICAgaWYgKERFU0NSSVBUT1JTKSBkZWZpbmVQcm9wZXJ0eSh2YWx1ZSwgJ3Byb3RvdHlwZScsIHsgd3JpdGFibGU6IGZhbHNlIH0pO1xuICAgIC8vIGluIFY4IH4gQ2hyb21lIDUzLCBwcm90b3R5cGVzIG9mIHNvbWUgbWV0aG9kcywgbGlrZSBgQXJyYXkucHJvdG90eXBlLnZhbHVlc2AsIGFyZSBub24td3JpdGFibGVcbiAgICB9IGVsc2UgaWYgKHZhbHVlLnByb3RvdHlwZSkgdmFsdWUucHJvdG90eXBlID0gdW5kZWZpbmVkO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIHZhciBzdGF0ZSA9IGVuZm9yY2VJbnRlcm5hbFN0YXRlKHZhbHVlKTtcbiAgaWYgKCFoYXNPd24oc3RhdGUsICdzb3VyY2UnKSkge1xuICAgIHN0YXRlLnNvdXJjZSA9IFRFTVBMQVRFLmpvaW4odHlwZW9mIG5hbWUgPT0gJ3N0cmluZycgPyBuYW1lIDogJycpO1xuICB9IHJldHVybiB2YWx1ZTtcbn07XG5cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWV4dGVuZC1uYXRpdmUgLS0gcmVxdWlyZWRcbkZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZyA9IG1ha2VCdWlsdEluKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gaXNDYWxsYWJsZSh0aGlzKSAmJiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnNvdXJjZSB8fCBpbnNwZWN0U291cmNlKHRoaXMpO1xufSwgJ3RvU3RyaW5nJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxuLy8gYE1hcC5wcm90b3R5cGUuZW1wbGFjZWAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGh1bWJzdXBlcC9wcm9wb3NhbC11cHNlcnRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW1wbGFjZShrZXksIGhhbmRsZXIpIHtcbiAgdmFyIG1hcCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgZ2V0ID0gYUNhbGxhYmxlKG1hcC5nZXQpO1xuICB2YXIgaGFzID0gYUNhbGxhYmxlKG1hcC5oYXMpO1xuICB2YXIgc2V0ID0gYUNhbGxhYmxlKG1hcC5zZXQpO1xuICB2YXIgdmFsdWUsIGluc2VydGVkO1xuICBpZiAoY2FsbChoYXMsIG1hcCwga2V5KSkge1xuICAgIHZhbHVlID0gY2FsbChnZXQsIG1hcCwga2V5KTtcbiAgICBpZiAoJ3VwZGF0ZScgaW4gaGFuZGxlcikge1xuICAgICAgdmFsdWUgPSBoYW5kbGVyLnVwZGF0ZSh2YWx1ZSwga2V5LCBtYXApO1xuICAgICAgY2FsbChzZXQsIG1hcCwga2V5LCB2YWx1ZSk7XG4gICAgfSByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaW5zZXJ0ZWQgPSBoYW5kbGVyLmluc2VydChrZXksIG1hcCk7XG4gIGNhbGwoc2V0LCBtYXAsIGtleSwgaW5zZXJ0ZWQpO1xuICByZXR1cm4gaW5zZXJ0ZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuLy8gYE1hcC5wcm90b3R5cGUudXBzZXJ0YCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90aHVtYnN1cGVwL3Byb3Bvc2FsLXVwc2VydFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB1cHNlcnQoa2V5LCB1cGRhdGVGbiAvKiAsIGluc2VydEZuICovKSB7XG4gIHZhciBtYXAgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIGdldCA9IGFDYWxsYWJsZShtYXAuZ2V0KTtcbiAgdmFyIGhhcyA9IGFDYWxsYWJsZShtYXAuaGFzKTtcbiAgdmFyIHNldCA9IGFDYWxsYWJsZShtYXAuc2V0KTtcbiAgdmFyIGluc2VydEZuID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciB2YWx1ZTtcbiAgaWYgKCFpc0NhbGxhYmxlKHVwZGF0ZUZuKSAmJiAhaXNDYWxsYWJsZShpbnNlcnRGbikpIHtcbiAgICB0aHJvdyAkVHlwZUVycm9yKCdBdCBsZWFzdCBvbmUgY2FsbGJhY2sgcmVxdWlyZWQnKTtcbiAgfVxuICBpZiAoY2FsbChoYXMsIG1hcCwga2V5KSkge1xuICAgIHZhbHVlID0gY2FsbChnZXQsIG1hcCwga2V5KTtcbiAgICBpZiAoaXNDYWxsYWJsZSh1cGRhdGVGbikpIHtcbiAgICAgIHZhbHVlID0gdXBkYXRlRm4odmFsdWUpO1xuICAgICAgY2FsbChzZXQsIG1hcCwga2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzQ2FsbGFibGUoaW5zZXJ0Rm4pKSB7XG4gICAgdmFsdWUgPSBpbnNlcnRGbigpO1xuICAgIGNhbGwoc2V0LCBtYXAsIGtleSwgdmFsdWUpO1xuICB9IHJldHVybiB2YWx1ZTtcbn07XG4iLCIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1tYXRoLWV4cG0xIC0tIHNhZmVcbnZhciAkZXhwbTEgPSBNYXRoLmV4cG0xO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4vLyBgTWF0aC5leHBtMWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguZXhwbTFcbm1vZHVsZS5leHBvcnRzID0gKCEkZXhwbTFcbiAgLy8gT2xkIEZGIGJ1Z1xuICB8fCAkZXhwbTEoMTApID4gMjIwMjUuNDY1Nzk0ODA2NzE5IHx8ICRleHBtMSgxMCkgPCAyMjAyNS40NjU3OTQ4MDY3MTY1MTY4XG4gIC8vIFRvciBCcm93c2VyIGJ1Z1xuICB8fCAkZXhwbTEoLTJlLTE3KSAhPSAtMmUtMTdcbikgPyBmdW5jdGlvbiBleHBtMSh4KSB7XG4gIHZhciBuID0gK3g7XG4gIHJldHVybiBuID09IDAgPyBuIDogbiA+IC0xZS02ICYmIG4gPCAxZS02ID8gbiArIG4gKiBuIC8gMiA6IGV4cChuKSAtIDE7XG59IDogJGV4cG0xO1xuIiwidmFyIHNpZ24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC1zaWduJyk7XG5cbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBFUFNJTE9OID0gcG93KDIsIC01Mik7XG52YXIgRVBTSUxPTjMyID0gcG93KDIsIC0yMyk7XG52YXIgTUFYMzIgPSBwb3coMiwgMTI3KSAqICgyIC0gRVBTSUxPTjMyKTtcbnZhciBNSU4zMiA9IHBvdygyLCAtMTI2KTtcblxudmFyIHJvdW5kVGllc1RvRXZlbiA9IGZ1bmN0aW9uIChuKSB7XG4gIHJldHVybiBuICsgMSAvIEVQU0lMT04gLSAxIC8gRVBTSUxPTjtcbn07XG5cbi8vIGBNYXRoLmZyb3VuZGAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguZnJvdW5kXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1tYXRoLWZyb3VuZCAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguZnJvdW5kIHx8IGZ1bmN0aW9uIGZyb3VuZCh4KSB7XG4gIHZhciBuID0gK3g7XG4gIHZhciAkYWJzID0gYWJzKG4pO1xuICB2YXIgJHNpZ24gPSBzaWduKG4pO1xuICB2YXIgYSwgcmVzdWx0O1xuICBpZiAoJGFicyA8IE1JTjMyKSByZXR1cm4gJHNpZ24gKiByb3VuZFRpZXNUb0V2ZW4oJGFicyAvIE1JTjMyIC8gRVBTSUxPTjMyKSAqIE1JTjMyICogRVBTSUxPTjMyO1xuICBhID0gKDEgKyBFUFNJTE9OMzIgLyBFUFNJTE9OKSAqICRhYnM7XG4gIHJlc3VsdCA9IGEgLSAoYSAtICRhYnMpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICBpZiAocmVzdWx0ID4gTUFYMzIgfHwgcmVzdWx0ICE9IHJlc3VsdCkgcmV0dXJuICRzaWduICogSW5maW5pdHk7XG4gIHJldHVybiAkc2lnbiAqIHJlc3VsdDtcbn07XG4iLCJ2YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgTE9HMTBFID0gTWF0aC5MT0cxMEU7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW1hdGgtbG9nMTAgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmxvZzEwIHx8IGZ1bmN0aW9uIGxvZzEwKHgpIHtcbiAgcmV0dXJuIGxvZyh4KSAqIExPRzEwRTtcbn07XG4iLCJ2YXIgbG9nID0gTWF0aC5sb2c7XG5cbi8vIGBNYXRoLmxvZzFwYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5sb2cxcFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tbWF0aC1sb2cxcCAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGgubG9nMXAgfHwgZnVuY3Rpb24gbG9nMXAoeCkge1xuICB2YXIgbiA9ICt4O1xuICByZXR1cm4gbiA+IC0xZS04ICYmIG4gPCAxZS04ID8gbiAtIG4gKiBuIC8gMiA6IGxvZygxICsgbik7XG59O1xuIiwiLy8gYE1hdGguc2NhbGVgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNjYWxlIHx8IGZ1bmN0aW9uIHNjYWxlKHgsIGluTG93LCBpbkhpZ2gsIG91dExvdywgb3V0SGlnaCkge1xuICB2YXIgbnggPSAreDtcbiAgdmFyIG5JbkxvdyA9ICtpbkxvdztcbiAgdmFyIG5JbkhpZ2ggPSAraW5IaWdoO1xuICB2YXIgbk91dExvdyA9ICtvdXRMb3c7XG4gIHZhciBuT3V0SGlnaCA9ICtvdXRIaWdoO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICBpZiAobnggIT0gbnggfHwgbkluTG93ICE9IG5JbkxvdyB8fCBuSW5IaWdoICE9IG5JbkhpZ2ggfHwgbk91dExvdyAhPSBuT3V0TG93IHx8IG5PdXRIaWdoICE9IG5PdXRIaWdoKSByZXR1cm4gTmFOO1xuICBpZiAobnggPT09IEluZmluaXR5IHx8IG54ID09PSAtSW5maW5pdHkpIHJldHVybiBueDtcbiAgcmV0dXJuIChueCAtIG5JbkxvdykgKiAobk91dEhpZ2ggLSBuT3V0TG93KSAvIChuSW5IaWdoIC0gbkluTG93KSArIG5PdXRMb3c7XG59O1xuIiwiLy8gYE1hdGguc2lnbmAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguc2lnblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tbWF0aC1zaWduIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zaWduIHx8IGZ1bmN0aW9uIHNpZ24oeCkge1xuICB2YXIgbiA9ICt4O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICByZXR1cm4gbiA9PSAwIHx8IG4gIT0gbiA/IG4gOiBuIDwgMCA/IC0xIDogMTtcbn07XG4iLCJ2YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGBNYXRoLnRydW5jYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC50cnVuY1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tbWF0aC10cnVuYyAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGgudHJ1bmMgfHwgZnVuY3Rpb24gdHJ1bmMoeCkge1xuICB2YXIgbiA9ICt4O1xuICByZXR1cm4gKG4gPiAwID8gZmxvb3IgOiBjZWlsKShuKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90YXNrJykuc2V0O1xudmFyIElTX0lPUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtaW9zJyk7XG52YXIgSVNfSU9TX1BFQkJMRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtaW9zLXBlYmJsZScpO1xudmFyIElTX1dFQk9TX1dFQktJVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtd2Vib3Mtd2Via2l0Jyk7XG52YXIgSVNfTk9ERSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZScpO1xuXG52YXIgTXV0YXRpb25PYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG4vLyBOb2RlLmpzIDExIHNob3dzIEV4cGVyaW1lbnRhbFdhcm5pbmcgb24gZ2V0dGluZyBgcXVldWVNaWNyb3Rhc2tgXG52YXIgcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdsb2JhbCwgJ3F1ZXVlTWljcm90YXNrJyk7XG52YXIgcXVldWVNaWNyb3Rhc2sgPSBxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IgJiYgcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yLnZhbHVlO1xuXG52YXIgZmx1c2gsIGhlYWQsIGxhc3QsIG5vdGlmeSwgdG9nZ2xlLCBub2RlLCBwcm9taXNlLCB0aGVuO1xuXG4vLyBtb2Rlcm4gZW5naW5lcyBoYXZlIHF1ZXVlTWljcm90YXNrIG1ldGhvZFxuaWYgKCFxdWV1ZU1pY3JvdGFzaykge1xuICBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoSVNfTk9ERSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICBmbiA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChoZWFkKSBub3RpZnkoKTtcbiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMzOVxuICAvLyBhbHNvIGV4Y2VwdCBXZWJPUyBXZWJraXQgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg5OFxuICBpZiAoIUlTX0lPUyAmJiAhSVNfTk9ERSAmJiAhSVNfV0VCT1NfV0VCS0lUICYmIE11dGF0aW9uT2JzZXJ2ZXIgJiYgZG9jdW1lbnQpIHtcbiAgICB0b2dnbGUgPSB0cnVlO1xuICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmICghSVNfSU9TX1BFQkJMRSAmJiBQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIC8vIFByb21pc2UucmVzb2x2ZSB3aXRob3V0IGFuIGFyZ3VtZW50IHRocm93cyBhbiBlcnJvciBpbiBMRyBXZWJPUyAyXG4gICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgIC8vIHdvcmthcm91bmQgb2YgV2ViS2l0IH4gaU9TIFNhZmFyaSAxMC4xIGJ1Z1xuICAgIHByb21pc2UuY29uc3RydWN0b3IgPSBQcm9taXNlO1xuICAgIHRoZW4gPSBiaW5kKHByb21pc2UudGhlbiwgcHJvbWlzZSk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhlbihmbHVzaCk7XG4gICAgfTtcbiAgLy8gTm9kZS5qcyB3aXRob3V0IHByb21pc2VzXG4gIH0gZWxzZSBpZiAoSVNfTk9ERSkge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ2VcbiAgLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2VcbiAgLy8gLSBzZXRUaW1lb3V0XG4gIH0gZWxzZSB7XG4gICAgLy8gc3RyYW5nZSBJRSArIHdlYnBhY2sgZGV2IHNlcnZlciBidWcgLSB1c2UgLmJpbmQoZ2xvYmFsKVxuICAgIG1hY3JvdGFzayA9IGJpbmQobWFjcm90YXNrLCBnbG9iYWwpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG1hY3JvdGFzayhmbHVzaCk7XG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHF1ZXVlTWljcm90YXNrIHx8IGZ1bmN0aW9uIChmbikge1xuICB2YXIgdGFzayA9IHsgZm46IGZuLCBuZXh0OiB1bmRlZmluZWQgfTtcbiAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XG4gIGlmICghaGVhZCkge1xuICAgIGhlYWQgPSB0YXNrO1xuICAgIG5vdGlmeSgpO1xuICB9IGxhc3QgPSB0YXNrO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxudmFyIFByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyAkVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhQ2FsbGFibGUocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUNhbGxhYmxlKHJlamVjdCk7XG59O1xuXG4vLyBgTmV3UHJvbWlzZUNhcGFiaWxpdHlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1uZXdwcm9taXNlY2FwYWJpbGl0eVxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuIiwidmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCwgJGRlZmF1bHQpIHtcbiAgcmV0dXJuIGFyZ3VtZW50ID09PSB1bmRlZmluZWQgPyBhcmd1bWVudHMubGVuZ3RoIDwgMiA/ICcnIDogJGRlZmF1bHQgOiB0b1N0cmluZyhhcmd1bWVudCk7XG59O1xuIiwidmFyICRSYW5nZUVycm9yID0gUmFuZ2VFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgaWYgKGl0ID09PSBpdCkgcmV0dXJuIGl0O1xuICB0aHJvdyAkUmFuZ2VFcnJvcignTmFOIGlzIG5vdCBhbGxvd2VkJyk7XG59O1xuIiwidmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGlzUmVnRXhwKGl0KSkge1xuICAgIHRocm93ICRUeXBlRXJyb3IoXCJUaGUgbWV0aG9kIGRvZXNuJ3QgYWNjZXB0IHJlZ3VsYXIgZXhwcmVzc2lvbnNcIik7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbnZhciBnbG9iYWxJc0Zpbml0ZSA9IGdsb2JhbC5pc0Zpbml0ZTtcblxuLy8gYE51bWJlci5pc0Zpbml0ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci5pc2Zpbml0ZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tbnVtYmVyLWlzZmluaXRlIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gTnVtYmVyLmlzRmluaXRlIHx8IGZ1bmN0aW9uIGlzRmluaXRlKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ251bWJlcicgJiYgZ2xvYmFsSXNGaW5pdGUoaXQpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciB0cmltID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltJykudHJpbTtcbnZhciB3aGl0ZXNwYWNlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93aGl0ZXNwYWNlcycpO1xuXG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcbnZhciAkcGFyc2VGbG9hdCA9IGdsb2JhbC5wYXJzZUZsb2F0O1xudmFyIFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgSVRFUkFUT1IgPSBTeW1ib2wgJiYgU3ltYm9sLml0ZXJhdG9yO1xudmFyIEZPUkNFRCA9IDEgLyAkcGFyc2VGbG9hdCh3aGl0ZXNwYWNlcyArICctMCcpICE9PSAtSW5maW5pdHlcbiAgLy8gTVMgRWRnZSAxOC0gYnJva2VuIHdpdGggYm94ZWQgc3ltYm9sc1xuICB8fCAoSVRFUkFUT1IgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHsgJHBhcnNlRmxvYXQoT2JqZWN0KElURVJBVE9SKSk7IH0pKTtcblxuLy8gYHBhcnNlRmxvYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wYXJzZWZsb2F0LXN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBGT1JDRUQgPyBmdW5jdGlvbiBwYXJzZUZsb2F0KHN0cmluZykge1xuICB2YXIgdHJpbW1lZFN0cmluZyA9IHRyaW0odG9TdHJpbmcoc3RyaW5nKSk7XG4gIHZhciByZXN1bHQgPSAkcGFyc2VGbG9hdCh0cmltbWVkU3RyaW5nKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gMCAmJiBjaGFyQXQodHJpbW1lZFN0cmluZywgMCkgPT0gJy0nID8gLTAgOiByZXN1bHQ7XG59IDogJHBhcnNlRmxvYXQ7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgdHJpbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbScpLnRyaW07XG52YXIgd2hpdGVzcGFjZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2hpdGVzcGFjZXMnKTtcblxudmFyICRwYXJzZUludCA9IGdsb2JhbC5wYXJzZUludDtcbnZhciBTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIElURVJBVE9SID0gU3ltYm9sICYmIFN5bWJvbC5pdGVyYXRvcjtcbnZhciBoZXggPSAvXlsrLV0/MHgvaTtcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoaGV4LmV4ZWMpO1xudmFyIEZPUkNFRCA9ICRwYXJzZUludCh3aGl0ZXNwYWNlcyArICcwOCcpICE9PSA4IHx8ICRwYXJzZUludCh3aGl0ZXNwYWNlcyArICcweDE2JykgIT09IDIyXG4gIC8vIE1TIEVkZ2UgMTgtIGJyb2tlbiB3aXRoIGJveGVkIHN5bWJvbHNcbiAgfHwgKElURVJBVE9SICYmICFmYWlscyhmdW5jdGlvbiAoKSB7ICRwYXJzZUludChPYmplY3QoSVRFUkFUT1IpKTsgfSkpO1xuXG4vLyBgcGFyc2VJbnRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wYXJzZWludC1zdHJpbmctcmFkaXhcbm1vZHVsZS5leHBvcnRzID0gRk9SQ0VEID8gZnVuY3Rpb24gcGFyc2VJbnQoc3RyaW5nLCByYWRpeCkge1xuICB2YXIgUyA9IHRyaW0odG9TdHJpbmcoc3RyaW5nKSk7XG4gIHJldHVybiAkcGFyc2VJbnQoUywgKHJhZGl4ID4+PiAwKSB8fCAoZXhlYyhoZXgsIFMpID8gMTYgOiAxMCkpO1xufSA6ICRwYXJzZUludDtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1jcmVhdGUtY29uc3RydWN0b3InKTtcbnZhciBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyLXJlc3VsdC1vYmplY3QnKTtcbnZhciBpc051bGxPclVuZGVmaW5lZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1udWxsLW9yLXVuZGVmaW5lZCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJykuZjtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xuXG52YXIgSU5DT1JSRUNUX1JBTkdFID0gJ0luY29ycmVjdCBOdW1iZXIucmFuZ2UgYXJndW1lbnRzJztcbnZhciBOVU1FUklDX1JBTkdFX0lURVJBVE9SID0gJ051bWVyaWNSYW5nZUl0ZXJhdG9yJztcblxudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoTlVNRVJJQ19SQU5HRV9JVEVSQVRPUik7XG5cbnZhciAkUmFuZ2VFcnJvciA9IFJhbmdlRXJyb3I7XG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxudmFyICRSYW5nZUl0ZXJhdG9yID0gY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvcihmdW5jdGlvbiBOdW1lcmljUmFuZ2VJdGVyYXRvcihzdGFydCwgZW5kLCBvcHRpb24sIHR5cGUsIHplcm8sIG9uZSkge1xuICBpZiAodHlwZW9mIHN0YXJ0ICE9IHR5cGUgfHwgKGVuZCAhPT0gSW5maW5pdHkgJiYgZW5kICE9PSAtSW5maW5pdHkgJiYgdHlwZW9mIGVuZCAhPSB0eXBlKSkge1xuICAgIHRocm93ICRUeXBlRXJyb3IoSU5DT1JSRUNUX1JBTkdFKTtcbiAgfVxuICBpZiAoc3RhcnQgPT09IEluZmluaXR5IHx8IHN0YXJ0ID09PSAtSW5maW5pdHkpIHtcbiAgICB0aHJvdyAkUmFuZ2VFcnJvcihJTkNPUlJFQ1RfUkFOR0UpO1xuICB9XG4gIHZhciBpZkluY3JlYXNlID0gZW5kID4gc3RhcnQ7XG4gIHZhciBpbmNsdXNpdmVFbmQgPSBmYWxzZTtcbiAgdmFyIHN0ZXA7XG4gIGlmIChvcHRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgIHN0ZXAgPSB1bmRlZmluZWQ7XG4gIH0gZWxzZSBpZiAoaXNPYmplY3Qob3B0aW9uKSkge1xuICAgIHN0ZXAgPSBvcHRpb24uc3RlcDtcbiAgICBpbmNsdXNpdmVFbmQgPSAhIW9wdGlvbi5pbmNsdXNpdmU7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbiA9PSB0eXBlKSB7XG4gICAgc3RlcCA9IG9wdGlvbjtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyAkVHlwZUVycm9yKElOQ09SUkVDVF9SQU5HRSk7XG4gIH1cbiAgaWYgKGlzTnVsbE9yVW5kZWZpbmVkKHN0ZXApKSB7XG4gICAgc3RlcCA9IGlmSW5jcmVhc2UgPyBvbmUgOiAtb25lO1xuICB9XG4gIGlmICh0eXBlb2Ygc3RlcCAhPSB0eXBlKSB7XG4gICAgdGhyb3cgJFR5cGVFcnJvcihJTkNPUlJFQ1RfUkFOR0UpO1xuICB9XG4gIGlmIChzdGVwID09PSBJbmZpbml0eSB8fCBzdGVwID09PSAtSW5maW5pdHkgfHwgKHN0ZXAgPT09IHplcm8gJiYgc3RhcnQgIT09IGVuZCkpIHtcbiAgICB0aHJvdyAkUmFuZ2VFcnJvcihJTkNPUlJFQ1RfUkFOR0UpO1xuICB9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gIHZhciBoaXRzRW5kID0gc3RhcnQgIT0gc3RhcnQgfHwgZW5kICE9IGVuZCB8fCBzdGVwICE9IHN0ZXAgfHwgKGVuZCA+IHN0YXJ0KSAhPT0gKHN0ZXAgPiB6ZXJvKTtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogTlVNRVJJQ19SQU5HRV9JVEVSQVRPUixcbiAgICBzdGFydDogc3RhcnQsXG4gICAgZW5kOiBlbmQsXG4gICAgc3RlcDogc3RlcCxcbiAgICBpbmNsdXNpdmVFbmQ6IGluY2x1c2l2ZUVuZCxcbiAgICBoaXRzRW5kOiBoaXRzRW5kLFxuICAgIGN1cnJlbnRDb3VudDogemVybyxcbiAgICB6ZXJvOiB6ZXJvXG4gIH0pO1xuICBpZiAoIURFU0NSSVBUT1JTKSB7XG4gICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICAgIHRoaXMuZW5kID0gZW5kO1xuICAgIHRoaXMuc3RlcCA9IHN0ZXA7XG4gICAgdGhpcy5pbmNsdXNpdmUgPSBpbmNsdXNpdmVFbmQ7XG4gIH1cbn0sIE5VTUVSSUNfUkFOR0VfSVRFUkFUT1IsIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gIGlmIChzdGF0ZS5oaXRzRW5kKSByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdCh1bmRlZmluZWQsIHRydWUpO1xuICB2YXIgc3RhcnQgPSBzdGF0ZS5zdGFydDtcbiAgdmFyIGVuZCA9IHN0YXRlLmVuZDtcbiAgdmFyIHN0ZXAgPSBzdGF0ZS5zdGVwO1xuICB2YXIgY3VycmVudFlpZWxkaW5nVmFsdWUgPSBzdGFydCArIChzdGVwICogc3RhdGUuY3VycmVudENvdW50KyspO1xuICBpZiAoY3VycmVudFlpZWxkaW5nVmFsdWUgPT09IGVuZCkgc3RhdGUuaGl0c0VuZCA9IHRydWU7XG4gIHZhciBpbmNsdXNpdmVFbmQgPSBzdGF0ZS5pbmNsdXNpdmVFbmQ7XG4gIHZhciBlbmRDb25kaXRpb247XG4gIGlmIChlbmQgPiBzdGFydCkge1xuICAgIGVuZENvbmRpdGlvbiA9IGluY2x1c2l2ZUVuZCA/IGN1cnJlbnRZaWVsZGluZ1ZhbHVlID4gZW5kIDogY3VycmVudFlpZWxkaW5nVmFsdWUgPj0gZW5kO1xuICB9IGVsc2Uge1xuICAgIGVuZENvbmRpdGlvbiA9IGluY2x1c2l2ZUVuZCA/IGVuZCA+IGN1cnJlbnRZaWVsZGluZ1ZhbHVlIDogZW5kID49IGN1cnJlbnRZaWVsZGluZ1ZhbHVlO1xuICB9XG4gIGlmIChlbmRDb25kaXRpb24pIHtcbiAgICBzdGF0ZS5oaXRzRW5kID0gdHJ1ZTtcbiAgICByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdCh1bmRlZmluZWQsIHRydWUpO1xuICB9IHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KGN1cnJlbnRZaWVsZGluZ1ZhbHVlLCBmYWxzZSk7XG59KTtcblxudmFyIGdldHRlciA9IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4geyBnZXQ6IGZuLCBzZXQ6IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgY29uZmlndXJhYmxlOiB0cnVlLCBlbnVtZXJhYmxlOiBmYWxzZSB9O1xufTtcblxuaWYgKERFU0NSSVBUT1JTKSB7XG4gIGRlZmluZVByb3BlcnRpZXMoJFJhbmdlSXRlcmF0b3IucHJvdG90eXBlLCB7XG4gICAgc3RhcnQ6IGdldHRlcihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5zdGFydDtcbiAgICB9KSxcbiAgICBlbmQ6IGdldHRlcihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5lbmQ7XG4gICAgfSksXG4gICAgaW5jbHVzaXZlOiBnZXR0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcykuaW5jbHVzaXZlRW5kO1xuICAgIH0pLFxuICAgIHN0ZXA6IGdldHRlcihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5zdGVwO1xuICAgIH0pXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9ICRSYW5nZUl0ZXJhdG9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LWFzc2lnbiAtLSBzYWZlXG52YXIgJGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBjb25jYXQgPSB1bmN1cnJ5VGhpcyhbXS5jb25jYXQpO1xuXG4vLyBgT2JqZWN0LmFzc2lnbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5hc3NpZ25cbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBzaG91bGQgaGF2ZSBjb3JyZWN0IG9yZGVyIG9mIG9wZXJhdGlvbnMgKEVkZ2UgYnVnKVxuICBpZiAoREVTQ1JJUFRPUlMgJiYgJGFzc2lnbih7IGI6IDEgfSwgJGFzc2lnbihkZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5KHRoaXMsICdiJywge1xuICAgICAgICB2YWx1ZTogMyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2VcbiAgICAgIH0pO1xuICAgIH1cbiAgfSksIHsgYjogMiB9KSkuYiAhPT0gMSkgcmV0dXJuIHRydWU7XG4gIC8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1zeW1ib2wgLS0gc2FmZVxuICB2YXIgc3ltYm9sID0gU3ltYm9sKCk7XG4gIHZhciBhbHBoYWJldCA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbc3ltYm9sXSA9IDc7XG4gIGFscGhhYmV0LnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChjaHIpIHsgQltjaHJdID0gY2hyOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW3N5bWJvbF0gIT0gNyB8fCBvYmplY3RLZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBhbHBoYWJldDtcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gIHZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmY7XG4gIHdoaWxlIChhcmd1bWVudHNMZW5ndGggPiBpbmRleCkge1xuICAgIHZhciBTID0gSW5kZXhlZE9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8gY29uY2F0KG9iamVjdEtleXMoUyksIGdldE93blByb3BlcnR5U3ltYm9scyhTKSkgOiBvYmplY3RLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikge1xuICAgICAga2V5ID0ga2V5c1tqKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBjYWxsKHByb3BlcnR5SXNFbnVtZXJhYmxlLCBTLCBrZXkpKSBUW2tleV0gPSBTW2tleV07XG4gICAgfVxuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG4iLCIvKiBnbG9iYWwgQWN0aXZlWE9iamVjdCAtLSBvbGQgSUUsIFdTSCAqL1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnRpZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2h0bWwnKTtcbnZhciBkb2N1bWVudENyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xuXG52YXIgR1QgPSAnPic7XG52YXIgTFQgPSAnPCc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgU0NSSVBUID0gJ3NjcmlwdCc7XG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG5cbnZhciBFbXB0eUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuXG52YXIgc2NyaXB0VGFnID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIExUICsgU0NSSVBUICsgR1QgKyBjb250ZW50ICsgTFQgKyAnLycgKyBTQ1JJUFQgKyBHVDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBBY3RpdmVYIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCA9IGZ1bmN0aW9uIChhY3RpdmVYRG9jdW1lbnQpIHtcbiAgYWN0aXZlWERvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnJykpO1xuICBhY3RpdmVYRG9jdW1lbnQuY2xvc2UoKTtcbiAgdmFyIHRlbXAgPSBhY3RpdmVYRG9jdW1lbnQucGFyZW50V2luZG93Lk9iamVjdDtcbiAgYWN0aXZlWERvY3VtZW50ID0gbnVsbDsgLy8gYXZvaWQgbWVtb3J5IGxlYWtcbiAgcmV0dXJuIHRlbXA7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgdmFyIEpTID0gJ2phdmEnICsgU0NSSVBUICsgJzonO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBodG1sLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy80NzVcbiAgaWZyYW1lLnNyYyA9IFN0cmluZyhKUyk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCdkb2N1bWVudC5GPU9iamVjdCcpKTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgcmV0dXJuIGlmcmFtZURvY3VtZW50LkY7XG59O1xuXG4vLyBDaGVjayBmb3IgZG9jdW1lbnQuZG9tYWluIGFuZCBhY3RpdmUgeCBzdXBwb3J0XG4vLyBObyBuZWVkIHRvIHVzZSBhY3RpdmUgeCBhcHByb2FjaCB3aGVuIGRvY3VtZW50LmRvbWFpbiBpcyBub3Qgc2V0XG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3Vlcy8xNTBcbi8vIHZhcmlhdGlvbiBvZiBodHRwczovL2dpdGh1Yi5jb20va2l0Y2FtYnJpZGdlL2VzNS1zaGltL2NvbW1pdC80ZjczOGFjMDY2MzQ2XG4vLyBhdm9pZCBJRSBHQyBidWdcbnZhciBhY3RpdmVYRG9jdW1lbnQ7XG52YXIgTnVsbFByb3RvT2JqZWN0ID0gZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIGFjdGl2ZVhEb2N1bWVudCA9IG5ldyBBY3RpdmVYT2JqZWN0KCdodG1sZmlsZScpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBpZ25vcmUgKi8gfVxuICBOdWxsUHJvdG9PYmplY3QgPSB0eXBlb2YgZG9jdW1lbnQgIT0gJ3VuZGVmaW5lZCdcbiAgICA/IGRvY3VtZW50LmRvbWFpbiAmJiBhY3RpdmVYRG9jdW1lbnRcbiAgICAgID8gTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpIC8vIG9sZCBJRVxuICAgICAgOiBOdWxsUHJvdG9PYmplY3RWaWFJRnJhbWUoKVxuICAgIDogTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpOyAvLyBXU0hcbiAgdmFyIGxlbmd0aCA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSBkZWxldGUgTnVsbFByb3RvT2JqZWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbbGVuZ3RoXV07XG4gIHJldHVybiBOdWxsUHJvdG9PYmplY3QoKTtcbn07XG5cbmhpZGRlbktleXNbSUVfUFJPVE9dID0gdHJ1ZTtcblxuLy8gYE9iamVjdC5jcmVhdGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuY3JlYXRlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1vYmplY3QtY3JlYXRlIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eUNvbnN0cnVjdG9yKCk7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBOdWxsUHJvdG9PYmplY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRlZmluZVByb3BlcnRpZXNNb2R1bGUuZihyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIFY4X1BST1RPVFlQRV9ERUZJTkVfQlVHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Y4LXByb3RvdHlwZS1kZWZpbmUtYnVnJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0aWVzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTICYmICFWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIgcHJvcHMgPSB0b0luZGV4ZWRPYmplY3QoUHJvcGVydGllcyk7XG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoTywga2V5ID0ga2V5c1tpbmRleCsrXSwgcHJvcHNba2V5XSk7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG52YXIgVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdjgtcHJvdG90eXBlLWRlZmluZS1idWcnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG52YXIgJGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgRU5VTUVSQUJMRSA9ICdlbnVtZXJhYmxlJztcbnZhciBDT05GSUdVUkFCTEUgPSAnY29uZmlndXJhYmxlJztcbnZhciBXUklUQUJMRSA9ICd3cml0YWJsZSc7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydHlcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmICh0eXBlb2YgTyA9PT0gJ2Z1bmN0aW9uJyAmJiBQID09PSAncHJvdG90eXBlJyAmJiAndmFsdWUnIGluIEF0dHJpYnV0ZXMgJiYgV1JJVEFCTEUgaW4gQXR0cmlidXRlcyAmJiAhQXR0cmlidXRlc1tXUklUQUJMRV0pIHtcbiAgICB2YXIgY3VycmVudCA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCk7XG4gICAgaWYgKGN1cnJlbnQgJiYgY3VycmVudFtXUklUQUJMRV0pIHtcbiAgICAgIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICAgICAgQXR0cmlidXRlcyA9IHtcbiAgICAgICAgY29uZmlndXJhYmxlOiBDT05GSUdVUkFCTEUgaW4gQXR0cmlidXRlcyA/IEF0dHJpYnV0ZXNbQ09ORklHVVJBQkxFXSA6IGN1cnJlbnRbQ09ORklHVVJBQkxFXSxcbiAgICAgICAgZW51bWVyYWJsZTogRU5VTUVSQUJMRSBpbiBBdHRyaWJ1dGVzID8gQXR0cmlidXRlc1tFTlVNRVJBQkxFXSA6IGN1cnJlbnRbRU5VTUVSQUJMRV0sXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZVxuICAgICAgfTtcbiAgICB9XG4gIH0gcmV0dXJuICRkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbn0gOiAkZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gJGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93ICRUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yXG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICBQID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXNPd24oTywgUCkpIHJldHVybiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoIWNhbGwocHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZiwgTywgUCksIE9bUF0pO1xufTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIGVzLXgvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5bmFtZXMgLS0gc2FmZSAqL1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZS1zaW1wbGUnKTtcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlOYW1lcyhpdCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIGFycmF5U2xpY2Uod2luZG93TmFtZXMpO1xuICB9XG59O1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgY2xhc3NvZihpdCkgPT0gJ1dpbmRvdydcbiAgICA/IGdldFdpbmRvd05hbWVzKGl0KVxuICAgIDogJGdldE93blByb3BlcnR5TmFtZXModG9JbmRleGVkT2JqZWN0KGl0KSk7XG59O1xuIiwidmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxudmFyIGhpZGRlbktleXMgPSBlbnVtQnVnS2V5cy5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eW5hbWVzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eXN5bWJvbHMgLS0gc2FmZVxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsInZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXInKTtcblxudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xudmFyICRPYmplY3QgPSBPYmplY3Q7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gJE9iamVjdC5wcm90b3R5cGU7XG5cbi8vIGBPYmplY3QuZ2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0cHJvdG90eXBlb2Zcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW9iamVjdC1nZXRwcm90b3R5cGVvZiAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA/ICRPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiAoTykge1xuICB2YXIgb2JqZWN0ID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXNPd24ob2JqZWN0LCBJRV9QUk9UTykpIHJldHVybiBvYmplY3RbSUVfUFJPVE9dO1xuICB2YXIgY29uc3RydWN0b3IgPSBvYmplY3QuY29uc3RydWN0b3I7XG4gIGlmIChpc0NhbGxhYmxlKGNvbnN0cnVjdG9yKSAmJiBvYmplY3QgaW5zdGFuY2VvZiBjb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBjb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIG9iamVjdCBpbnN0YW5jZW9mICRPYmplY3QgPyBPYmplY3RQcm90b3R5cGUgOiBudWxsO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBBUlJBWV9CVUZGRVJfTk9OX0VYVEVOU0lCTEUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLW5vbi1leHRlbnNpYmxlJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW9iamVjdC1pc2V4dGVuc2libGUgLS0gc2FmZVxudmFyICRpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7ICRpc0V4dGVuc2libGUoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmlzRXh0ZW5zaWJsZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5pc2V4dGVuc2libGVcbm1vZHVsZS5leHBvcnRzID0gKEZBSUxTX09OX1BSSU1JVElWRVMgfHwgQVJSQVlfQlVGRkVSX05PTl9FWFRFTlNJQkxFKSA/IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGZhbHNlO1xuICBpZiAoQVJSQVlfQlVGRkVSX05PTl9FWFRFTlNJQkxFICYmIGNsYXNzb2YoaXQpID09ICdBcnJheUJ1ZmZlcicpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKGl0KSA6IHRydWU7XG59IDogJGlzRXh0ZW5zaWJsZTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB1bmN1cnJ5VGhpcyh7fS5pc1Byb3RvdHlwZU9mKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1jcmVhdGUtY29uc3RydWN0b3InKTtcbnZhciBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyLXJlc3VsdC1vYmplY3QnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcblxudmFyIE9CSkVDVF9JVEVSQVRPUiA9ICdPYmplY3QgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoT0JKRUNUX0lURVJBVE9SKTtcblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yKGZ1bmN0aW9uIE9iamVjdEl0ZXJhdG9yKHNvdXJjZSwgbW9kZSkge1xuICB2YXIgb2JqZWN0ID0gdG9PYmplY3Qoc291cmNlKTtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogT0JKRUNUX0lURVJBVE9SLFxuICAgIG1vZGU6IG1vZGUsXG4gICAgb2JqZWN0OiBvYmplY3QsXG4gICAga2V5czogb2JqZWN0S2V5cyhvYmplY3QpLFxuICAgIGluZGV4OiAwXG4gIH0pO1xufSwgJ09iamVjdCcsIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gIHZhciBrZXlzID0gc3RhdGUua2V5cztcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBpZiAoa2V5cyA9PT0gbnVsbCB8fCBzdGF0ZS5pbmRleCA+PSBrZXlzLmxlbmd0aCkge1xuICAgICAgc3RhdGUub2JqZWN0ID0gc3RhdGUua2V5cyA9IG51bGw7XG4gICAgICByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdCh1bmRlZmluZWQsIHRydWUpO1xuICAgIH1cbiAgICB2YXIga2V5ID0ga2V5c1tzdGF0ZS5pbmRleCsrXTtcbiAgICB2YXIgb2JqZWN0ID0gc3RhdGUub2JqZWN0O1xuICAgIGlmICghaGFzT3duKG9iamVjdCwga2V5KSkgY29udGludWU7XG4gICAgc3dpdGNoIChzdGF0ZS5tb2RlKSB7XG4gICAgICBjYXNlICdrZXlzJzogcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3Qoa2V5LCBmYWxzZSk7XG4gICAgICBjYXNlICd2YWx1ZXMnOiByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdChvYmplY3Rba2V5XSwgZmFsc2UpO1xuICAgIH0gLyogZW50cmllcyAqLyByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdChba2V5LCBvYmplY3Rba2V5XV0sIGZhbHNlKTtcbiAgfVxufSk7XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBpbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5kZXhPZjtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pICFoYXNPd24oaGlkZGVuS2V5cywga2V5KSAmJiBoYXNPd24oTywga2V5KSAmJiBwdXNoKHJlc3VsdCwga2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhc093bihPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5pbmRleE9mKHJlc3VsdCwga2V5KSB8fCBwdXNoKHJlc3VsdCwga2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbi8vIGBPYmplY3Qua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5rZXlzXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1vYmplY3Qta2V5cyAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBOYXNob3JuIH4gSkRLOCBidWdcbnZhciBOQVNIT1JOX0JVRyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiAhJHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoeyAxOiAyIH0sIDEpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUucHJvcGVydHlpc2VudW1lcmFibGVcbmV4cG9ydHMuZiA9IE5BU0hPUk5fQlVHID8gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoVikge1xuICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0aGlzLCBWKTtcbiAgcmV0dXJuICEhZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLmVudW1lcmFibGU7XG59IDogJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIFdFQktJVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtd2Via2l0LXZlcnNpb24nKTtcblxuLy8gRm9yY2VkIHJlcGxhY2VtZW50IG9iamVjdCBwcm90b3R5cGUgYWNjZXNzb3JzIG1ldGhvZHNcbm1vZHVsZS5leHBvcnRzID0gSVNfUFVSRSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBUaGlzIGZlYXR1cmUgZGV0ZWN0aW9uIGNyYXNoZXMgb2xkIFdlYktpdFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMjMyXG4gIGlmIChXRUJLSVQgJiYgV0VCS0lUIDwgNTM1KSByZXR1cm47XG4gIHZhciBrZXkgPSBNYXRoLnJhbmRvbSgpO1xuICAvLyBJbiBGRiB0aHJvd3Mgb25seSBkZWZpbmUgbWV0aG9kc1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWYsIG5vLXVzZWxlc3MtY2FsbCwgZXMteC9uby1sZWdhY3ktb2JqZWN0LXByb3RvdHlwZS1hY2Nlc3Nvci1tZXRob2RzIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIF9fZGVmaW5lU2V0dGVyX18uY2FsbChudWxsLCBrZXksIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG4gIGRlbGV0ZSBnbG9iYWxba2V5XTtcbn0pO1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gLS0gc2FmZSAqL1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFQb3NzaWJsZVByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnNldHByb3RvdHlwZW9mXG4vLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW9iamVjdC1zZXRwcm90b3R5cGVvZiAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyBmdW5jdGlvbiAoKSB7XG4gIHZhciBDT1JSRUNUX1NFVFRFUiA9IGZhbHNlO1xuICB2YXIgdGVzdCA9IHt9O1xuICB2YXIgc2V0dGVyO1xuICB0cnkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxuICAgIHNldHRlciA9IHVuY3VycnlUaGlzKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCk7XG4gICAgc2V0dGVyKHRlc3QsIFtdKTtcbiAgICBDT1JSRUNUX1NFVFRFUiA9IHRlc3QgaW5zdGFuY2VvZiBBcnJheTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICBhbk9iamVjdChPKTtcbiAgICBhUG9zc2libGVQcm90b3R5cGUocHJvdG8pO1xuICAgIGlmIChDT1JSRUNUX1NFVFRFUikgc2V0dGVyKE8sIHByb3RvKTtcbiAgICBlbHNlIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgcmV0dXJuIE87XG4gIH07XG59KCkgOiB1bmRlZmluZWQpO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpLmY7XG5cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHVuY3VycnlUaGlzKCRwcm9wZXJ0eUlzRW51bWVyYWJsZSk7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xuXG4vLyBgT2JqZWN0LnsgZW50cmllcywgdmFsdWVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoVE9fRU5UUklFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QoaXQpO1xuICAgIHZhciBrZXlzID0gb2JqZWN0S2V5cyhPKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBpKSB7XG4gICAgICBrZXkgPSBrZXlzW2krK107XG4gICAgICBpZiAoIURFU0NSSVBUT1JTIHx8IHByb3BlcnR5SXNFbnVtZXJhYmxlKE8sIGtleSkpIHtcbiAgICAgICAgcHVzaChyZXN1bHQsIFRPX0VOVFJJRVMgPyBba2V5LCBPW2tleV1dIDogT1trZXldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgT2JqZWN0LmVudHJpZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5lbnRyaWVzXG4gIGVudHJpZXM6IGNyZWF0ZU1ldGhvZCh0cnVlKSxcbiAgLy8gYE9iamVjdC52YWx1ZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC52YWx1ZXNcbiAgdmFsdWVzOiBjcmVhdGVNZXRob2QoZmFsc2UpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IFRPX1NUUklOR19UQUdfU1VQUE9SVCA/IHt9LnRvU3RyaW5nIDogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyICQkT0JTRVJWQUJMRSA9IHdlbGxLbm93blN5bWJvbCgnb2JzZXJ2YWJsZScpO1xudmFyIE5hdGl2ZU9ic2VydmFibGUgPSBnbG9iYWwuT2JzZXJ2YWJsZTtcbnZhciBOYXRpdmVPYnNlcnZhYmxlUHJvdG90eXBlID0gTmF0aXZlT2JzZXJ2YWJsZSAmJiBOYXRpdmVPYnNlcnZhYmxlLnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSAhaXNDYWxsYWJsZShOYXRpdmVPYnNlcnZhYmxlKVxuICB8fCAhaXNDYWxsYWJsZShOYXRpdmVPYnNlcnZhYmxlLmZyb20pXG4gIHx8ICFpc0NhbGxhYmxlKE5hdGl2ZU9ic2VydmFibGUub2YpXG4gIHx8ICFpc0NhbGxhYmxlKE5hdGl2ZU9ic2VydmFibGVQcm90b3R5cGUuc3Vic2NyaWJlKVxuICB8fCAhaXNDYWxsYWJsZShOYXRpdmVPYnNlcnZhYmxlUHJvdG90eXBlWyQkT0JTRVJWQUJMRV0pO1xuIiwidmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbi8vIGBPcmRpbmFyeVRvUHJpbWl0aXZlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb3JkaW5hcnl0b3ByaW1pdGl2ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIHByZWYpIHtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChwcmVmID09PSAnc3RyaW5nJyAmJiBpc0NhbGxhYmxlKGZuID0gaW5wdXQudG9TdHJpbmcpICYmICFpc09iamVjdCh2YWwgPSBjYWxsKGZuLCBpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAoaXNDYWxsYWJsZShmbiA9IGlucHV0LnZhbHVlT2YpICYmICFpc09iamVjdCh2YWwgPSBjYWxsKGZuLCBpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAocHJlZiAhPT0gJ3N0cmluZycgJiYgaXNDYWxsYWJsZShmbiA9IGlucHV0LnRvU3RyaW5nKSAmJiAhaXNPYmplY3QodmFsID0gY2FsbChmbiwgaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgJFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxudmFyIGNvbmNhdCA9IHVuY3VycnlUaGlzKFtdLmNvbmNhdCk7XG5cbi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignUmVmbGVjdCcsICdvd25LZXlzJykgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gIHJldHVybiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyBjb25jYXQoa2V5cywgZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiB7IGVycm9yOiBmYWxzZSwgdmFsdWU6IGV4ZWMoKSB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB7IGVycm9yOiB0cnVlLCB2YWx1ZTogZXJyb3IgfTtcbiAgfVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtbmF0aXZlLWNvbnN0cnVjdG9yJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19CUk9XU0VSID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1icm93c2VyJyk7XG52YXIgSVNfREVOTyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtZGVubycpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcblxudmFyIE5hdGl2ZVByb21pc2VQcm90b3R5cGUgPSBOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IgJiYgTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgU1VCQ0xBU1NJTkcgPSBmYWxzZTtcbnZhciBOQVRJVkVfUFJPTUlTRV9SRUpFQ1RJT05fRVZFTlQgPSBpc0NhbGxhYmxlKGdsb2JhbC5Qcm9taXNlUmVqZWN0aW9uRXZlbnQpO1xuXG52YXIgRk9SQ0VEX1BST01JU0VfQ09OU1RSVUNUT1IgPSBpc0ZvcmNlZCgnUHJvbWlzZScsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIFBST01JU0VfQ09OU1RSVUNUT1JfU09VUkNFID0gaW5zcGVjdFNvdXJjZShOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IpO1xuICB2YXIgR0xPQkFMX0NPUkVfSlNfUFJPTUlTRSA9IFBST01JU0VfQ09OU1RSVUNUT1JfU09VUkNFICE9PSBTdHJpbmcoTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yKTtcbiAgLy8gVjggNi42IChOb2RlIDEwIGFuZCBDaHJvbWUgNjYpIGhhdmUgYSBidWcgd2l0aCByZXNvbHZpbmcgY3VzdG9tIHRoZW5hYmxlc1xuICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD04MzA1NjVcbiAgLy8gV2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcbiAgaWYgKCFHTE9CQUxfQ09SRV9KU19QUk9NSVNFICYmIFY4X1ZFUlNJT04gPT09IDY2KSByZXR1cm4gdHJ1ZTtcbiAgLy8gV2UgbmVlZCBQcm9taXNlI3sgY2F0Y2gsIGZpbmFsbHkgfSBpbiB0aGUgcHVyZSB2ZXJzaW9uIGZvciBwcmV2ZW50aW5nIHByb3RvdHlwZSBwb2xsdXRpb25cbiAgaWYgKElTX1BVUkUgJiYgIShOYXRpdmVQcm9taXNlUHJvdG90eXBlWydjYXRjaCddICYmIE5hdGl2ZVByb21pc2VQcm90b3R5cGVbJ2ZpbmFsbHknXSkpIHJldHVybiB0cnVlO1xuICAvLyBXZSBjYW4ndCB1c2UgQEBzcGVjaWVzIGZlYXR1cmUgZGV0ZWN0aW9uIGluIFY4IHNpbmNlIGl0IGNhdXNlc1xuICAvLyBkZW9wdGltaXphdGlvbiBhbmQgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3OVxuICBpZiAoIVY4X1ZFUlNJT04gfHwgVjhfVkVSU0lPTiA8IDUxIHx8ICEvbmF0aXZlIGNvZGUvLnRlc3QoUFJPTUlTRV9DT05TVFJVQ1RPUl9TT1VSQ0UpKSB7XG4gICAgLy8gRGV0ZWN0IGNvcnJlY3RuZXNzIG9mIHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSgxKTsgfSk7XG4gICAgdmFyIEZha2VQcm9taXNlID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICAgIGV4ZWMoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xuICAgIH07XG4gICAgdmFyIGNvbnN0cnVjdG9yID0gcHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgIGNvbnN0cnVjdG9yW1NQRUNJRVNdID0gRmFrZVByb21pc2U7XG4gICAgU1VCQ0xBU1NJTkcgPSBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KSBpbnN0YW5jZW9mIEZha2VQcm9taXNlO1xuICAgIGlmICghU1VCQ0xBU1NJTkcpIHJldHVybiB0cnVlO1xuICAvLyBVbmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gIH0gcmV0dXJuICFHTE9CQUxfQ09SRV9KU19QUk9NSVNFICYmIChJU19CUk9XU0VSIHx8IElTX0RFTk8pICYmICFOQVRJVkVfUFJPTUlTRV9SRUpFQ1RJT05fRVZFTlQ7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENPTlNUUlVDVE9SOiBGT1JDRURfUFJPTUlTRV9DT05TVFJVQ1RPUixcbiAgUkVKRUNUSU9OX0VWRU5UOiBOQVRJVkVfUFJPTUlTRV9SRUpFQ1RJT05fRVZFTlQsXG4gIFNVQkNMQVNTSU5HOiBTVUJDTEFTU0lOR1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLlByb21pc2U7XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIGFuT2JqZWN0KEMpO1xuICBpZiAoaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0gQykgcmV0dXJuIHg7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XG4gIHZhciByZXNvbHZlID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgcmVzb2x2ZSh4KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59O1xuIiwidmFyIE5hdGl2ZVByb21pc2VDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wcm9taXNlLW5hdGl2ZS1jb25zdHJ1Y3RvcicpO1xudmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24nKTtcbnZhciBGT1JDRURfUFJPTUlTRV9DT05TVFJVQ1RPUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wcm9taXNlLWNvbnN0cnVjdG9yLWRldGVjdGlvbicpLkNPTlNUUlVDVE9SO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZPUkNFRF9QUk9NSVNFX0NPTlNUUlVDVE9SIHx8ICFjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gIE5hdGl2ZVByb21pc2VDb25zdHJ1Y3Rvci5hbGwoaXRlcmFibGUpLnRoZW4odW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG4iLCJ2YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRhcmdldCwgU291cmNlLCBrZXkpIHtcbiAga2V5IGluIFRhcmdldCB8fCBkZWZpbmVQcm9wZXJ0eShUYXJnZXQsIGtleSwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFNvdXJjZVtrZXldOyB9LFxuICAgIHNldDogZnVuY3Rpb24gKGl0KSB7IFNvdXJjZVtrZXldID0gaXQ7IH1cbiAgfSk7XG59O1xuIiwidmFyIFF1ZXVlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmhlYWQgPSBudWxsO1xuICB0aGlzLnRhaWwgPSBudWxsO1xufTtcblxuUXVldWUucHJvdG90eXBlID0ge1xuICBhZGQ6IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgdmFyIGVudHJ5ID0geyBpdGVtOiBpdGVtLCBuZXh0OiBudWxsIH07XG4gICAgaWYgKHRoaXMuaGVhZCkgdGhpcy50YWlsLm5leHQgPSBlbnRyeTtcbiAgICBlbHNlIHRoaXMuaGVhZCA9IGVudHJ5O1xuICAgIHRoaXMudGFpbCA9IGVudHJ5O1xuICB9LFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZW50cnkgPSB0aGlzLmhlYWQ7XG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICB0aGlzLmhlYWQgPSBlbnRyeS5uZXh0O1xuICAgICAgaWYgKHRoaXMudGFpbCA9PT0gZW50cnkpIHRoaXMudGFpbCA9IG51bGw7XG4gICAgICByZXR1cm4gZW50cnkuaXRlbTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUXVldWU7XG4iLCIvLyBUT0RPOiBpbiBjb3JlLWpzQDQsIG1vdmUgL21vZHVsZXMvIGRlcGVuZGVuY2llcyB0byBwdWJsaWMgZW50cmllcyBmb3IgYmV0dGVyIG9wdGltaXphdGlvbiBieSB0b29scyBsaWtlIGBwcmVzZXQtZW52YFxucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMud2Vhay1tYXAnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcblxudmFyIE1hcCA9IGdldEJ1aWx0SW4oJ01hcCcpO1xudmFyIFdlYWtNYXAgPSBnZXRCdWlsdEluKCdXZWFrTWFwJyk7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xuXG52YXIgbWV0YWRhdGEgPSBzaGFyZWQoJ21ldGFkYXRhJyk7XG52YXIgc3RvcmUgPSBtZXRhZGF0YS5zdG9yZSB8fCAobWV0YWRhdGEuc3RvcmUgPSBuZXcgV2Vha01hcCgpKTtcblxudmFyIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAgPSBmdW5jdGlvbiAodGFyZ2V0LCB0YXJnZXRLZXksIGNyZWF0ZSkge1xuICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBzdG9yZS5nZXQodGFyZ2V0KTtcbiAgaWYgKCF0YXJnZXRNZXRhZGF0YSkge1xuICAgIGlmICghY3JlYXRlKSByZXR1cm47XG4gICAgc3RvcmUuc2V0KHRhcmdldCwgdGFyZ2V0TWV0YWRhdGEgPSBuZXcgTWFwKCkpO1xuICB9XG4gIHZhciBrZXlNZXRhZGF0YSA9IHRhcmdldE1ldGFkYXRhLmdldCh0YXJnZXRLZXkpO1xuICBpZiAoIWtleU1ldGFkYXRhKSB7XG4gICAgaWYgKCFjcmVhdGUpIHJldHVybjtcbiAgICB0YXJnZXRNZXRhZGF0YS5zZXQodGFyZ2V0S2V5LCBrZXlNZXRhZGF0YSA9IG5ldyBNYXAoKSk7XG4gIH0gcmV0dXJuIGtleU1ldGFkYXRhO1xufTtcblxudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBtZXRhZGF0YU1hcC5oYXMoTWV0YWRhdGFLZXkpO1xufTtcblxudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogbWV0YWRhdGFNYXAuZ2V0KE1ldGFkYXRhS2V5KTtcbn07XG5cbnZhciBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBNZXRhZGF0YVZhbHVlLCBPLCBQKSB7XG4gIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgdHJ1ZSkuc2V0KE1ldGFkYXRhS2V5LCBNZXRhZGF0YVZhbHVlKTtcbn07XG5cbnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHRhcmdldEtleSkge1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKHRhcmdldCwgdGFyZ2V0S2V5LCBmYWxzZSk7XG4gIHZhciBrZXlzID0gW107XG4gIGlmIChtZXRhZGF0YU1hcCkgbWV0YWRhdGFNYXAuZm9yRWFjaChmdW5jdGlvbiAoXywga2V5KSB7IHB1c2goa2V5cywga2V5KTsgfSk7XG4gIHJldHVybiBrZXlzO1xufTtcblxudmFyIHRvTWV0YWRhdGFLZXkgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiBTdHJpbmcoaXQpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHN0b3JlOiBzdG9yZSxcbiAgZ2V0TWFwOiBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwLFxuICBoYXM6IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEsXG4gIGdldDogb3JkaW5hcnlHZXRPd25NZXRhZGF0YSxcbiAgc2V0OiBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhLFxuICBrZXlzOiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyxcbiAgdG9LZXk6IHRvTWV0YWRhdGFLZXlcbn07XG4iLCJ2YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cGV4ZWNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFIsIFMpIHtcbiAgdmFyIGV4ZWMgPSBSLmV4ZWM7XG4gIGlmIChpc0NhbGxhYmxlKGV4ZWMpKSB7XG4gICAgdmFyIHJlc3VsdCA9IGNhbGwoZXhlYywgUiwgUyk7XG4gICAgaWYgKHJlc3VsdCAhPT0gbnVsbCkgYW5PYmplY3QocmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGlmIChjbGFzc29mKFIpID09PSAnUmVnRXhwJykgcmV0dXJuIGNhbGwocmVnZXhwRXhlYywgUiwgUyk7XG4gIHRocm93ICRUeXBlRXJyb3IoJ1JlZ0V4cCNleGVjIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXInKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSByZWdleHAvbm8tZW1wdHktY2FwdHVyaW5nLWdyb3VwLCByZWdleHAvbm8tZW1wdHktZ3JvdXAsIHJlZ2V4cC9uby1sYXp5LWVuZHMgLS0gdGVzdGluZyAqL1xuLyogZXNsaW50LWRpc2FibGUgcmVnZXhwL25vLXVzZWxlc3MtcXVhbnRpZmllciAtLSB0ZXN0aW5nICovXG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzJyk7XG52YXIgc3RpY2t5SGVscGVycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtc3RpY2t5LWhlbHBlcnMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJykuZ2V0O1xudmFyIFVOU1VQUE9SVEVEX0RPVF9BTEwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXVuc3VwcG9ydGVkLWRvdC1hbGwnKTtcbnZhciBVTlNVUFBPUlRFRF9OQ0cgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXVuc3VwcG9ydGVkLW5jZycpO1xuXG52YXIgbmF0aXZlUmVwbGFjZSA9IHNoYXJlZCgnbmF0aXZlLXN0cmluZy1yZXBsYWNlJywgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKTtcbnZhciBuYXRpdmVFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xudmFyIHBhdGNoZWRFeGVjID0gbmF0aXZlRXhlYztcbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIGluZGV4T2YgPSB1bmN1cnJ5VGhpcygnJy5pbmRleE9mKTtcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbnZhciBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUxID0gL2EvO1xuICB2YXIgcmUyID0gL2IqL2c7XG4gIGNhbGwobmF0aXZlRXhlYywgcmUxLCAnYScpO1xuICBjYWxsKG5hdGl2ZUV4ZWMsIHJlMiwgJ2EnKTtcbiAgcmV0dXJuIHJlMS5sYXN0SW5kZXggIT09IDAgfHwgcmUyLmxhc3RJbmRleCAhPT0gMDtcbn0pKCk7XG5cbnZhciBVTlNVUFBPUlRFRF9ZID0gc3RpY2t5SGVscGVycy5CUk9LRU5fQ0FSRVQ7XG5cbi8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwLCBjb3BpZWQgZnJvbSBlczUtc2hpbSdzIFN0cmluZyNzcGxpdCBwYXRjaC5cbnZhciBOUENHX0lOQ0xVREVEID0gLygpPz8vLmV4ZWMoJycpWzFdICE9PSB1bmRlZmluZWQ7XG5cbnZhciBQQVRDSCA9IFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyB8fCBOUENHX0lOQ0xVREVEIHx8IFVOU1VQUE9SVEVEX1kgfHwgVU5TVVBQT1JURURfRE9UX0FMTCB8fCBVTlNVUFBPUlRFRF9OQ0c7XG5cbmlmIChQQVRDSCkge1xuICBwYXRjaGVkRXhlYyA9IGZ1bmN0aW9uIGV4ZWMoc3RyaW5nKSB7XG4gICAgdmFyIHJlID0gdGhpcztcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHJlKTtcbiAgICB2YXIgc3RyID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICB2YXIgcmF3ID0gc3RhdGUucmF3O1xuICAgIHZhciByZXN1bHQsIHJlQ29weSwgbGFzdEluZGV4LCBtYXRjaCwgaSwgb2JqZWN0LCBncm91cDtcblxuICAgIGlmIChyYXcpIHtcbiAgICAgIHJhdy5sYXN0SW5kZXggPSByZS5sYXN0SW5kZXg7XG4gICAgICByZXN1bHQgPSBjYWxsKHBhdGNoZWRFeGVjLCByYXcsIHN0cik7XG4gICAgICByZS5sYXN0SW5kZXggPSByYXcubGFzdEluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICB2YXIgZ3JvdXBzID0gc3RhdGUuZ3JvdXBzO1xuICAgIHZhciBzdGlja3kgPSBVTlNVUFBPUlRFRF9ZICYmIHJlLnN0aWNreTtcbiAgICB2YXIgZmxhZ3MgPSBjYWxsKHJlZ2V4cEZsYWdzLCByZSk7XG4gICAgdmFyIHNvdXJjZSA9IHJlLnNvdXJjZTtcbiAgICB2YXIgY2hhcnNBZGRlZCA9IDA7XG4gICAgdmFyIHN0ckNvcHkgPSBzdHI7XG5cbiAgICBpZiAoc3RpY2t5KSB7XG4gICAgICBmbGFncyA9IHJlcGxhY2UoZmxhZ3MsICd5JywgJycpO1xuICAgICAgaWYgKGluZGV4T2YoZmxhZ3MsICdnJykgPT09IC0xKSB7XG4gICAgICAgIGZsYWdzICs9ICdnJztcbiAgICAgIH1cblxuICAgICAgc3RyQ29weSA9IHN0cmluZ1NsaWNlKHN0ciwgcmUubGFzdEluZGV4KTtcbiAgICAgIC8vIFN1cHBvcnQgYW5jaG9yZWQgc3RpY2t5IGJlaGF2aW9yLlxuICAgICAgaWYgKHJlLmxhc3RJbmRleCA+IDAgJiYgKCFyZS5tdWx0aWxpbmUgfHwgcmUubXVsdGlsaW5lICYmIGNoYXJBdChzdHIsIHJlLmxhc3RJbmRleCAtIDEpICE9PSAnXFxuJykpIHtcbiAgICAgICAgc291cmNlID0gJyg/OiAnICsgc291cmNlICsgJyknO1xuICAgICAgICBzdHJDb3B5ID0gJyAnICsgc3RyQ29weTtcbiAgICAgICAgY2hhcnNBZGRlZCsrO1xuICAgICAgfVxuICAgICAgLy8gXig/ICsgcnggKyApIGlzIG5lZWRlZCwgaW4gY29tYmluYXRpb24gd2l0aCBzb21lIHN0ciBzbGljaW5nLCB0b1xuICAgICAgLy8gc2ltdWxhdGUgdGhlICd5JyBmbGFnLlxuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXig/OicgKyBzb3VyY2UgKyAnKScsIGZsYWdzKTtcbiAgICB9XG5cbiAgICBpZiAoTlBDR19JTkNMVURFRCkge1xuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXicgKyBzb3VyY2UgKyAnJCg/IVxcXFxzKScsIGZsYWdzKTtcbiAgICB9XG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmUubGFzdEluZGV4O1xuXG4gICAgbWF0Y2ggPSBjYWxsKG5hdGl2ZUV4ZWMsIHN0aWNreSA/IHJlQ29weSA6IHJlLCBzdHJDb3B5KTtcblxuICAgIGlmIChzdGlja3kpIHtcbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBtYXRjaC5pbnB1dCA9IHN0cmluZ1NsaWNlKG1hdGNoLmlucHV0LCBjaGFyc0FkZGVkKTtcbiAgICAgICAgbWF0Y2hbMF0gPSBzdHJpbmdTbGljZShtYXRjaFswXSwgY2hhcnNBZGRlZCk7XG4gICAgICAgIG1hdGNoLmluZGV4ID0gcmUubGFzdEluZGV4O1xuICAgICAgICByZS5sYXN0SW5kZXggKz0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgfSBlbHNlIHJlLmxhc3RJbmRleCA9IDA7XG4gICAgfSBlbHNlIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgJiYgbWF0Y2gpIHtcbiAgICAgIHJlLmxhc3RJbmRleCA9IHJlLmdsb2JhbCA/IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoIDogbGFzdEluZGV4O1xuICAgIH1cbiAgICBpZiAoTlBDR19JTkNMVURFRCAmJiBtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYFxuICAgICAgLy8gZm9yIE5QQ0csIGxpa2UgSUU4LiBOT1RFOiBUaGlzIGRvZXNuJ3Qgd29yayBmb3IgLyguPyk/L1xuICAgICAgY2FsbChuYXRpdmVSZXBsYWNlLCBtYXRjaFswXSwgcmVDb3B5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKG1hdGNoICYmIGdyb3Vwcykge1xuICAgICAgbWF0Y2guZ3JvdXBzID0gb2JqZWN0ID0gY3JlYXRlKG51bGwpO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBncm91cCA9IGdyb3Vwc1tpXTtcbiAgICAgICAgb2JqZWN0W2dyb3VwWzBdXSA9IG1hdGNoW2dyb3VwWzFdXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2g7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGF0Y2hlZEV4ZWM7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLmZsYWdzYCBnZXR0ZXIgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0LXJlZ2V4cC5wcm90b3R5cGUuZmxhZ3Ncbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmhhc0luZGljZXMpIHJlc3VsdCArPSAnZCc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC5kb3RBbGwpIHJlc3VsdCArPSAncyc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnVuaWNvZGVTZXRzKSByZXN1bHQgKz0gJ3YnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgcmVnRXhwRmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzJyk7XG5cbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChSKSB7XG4gIHZhciBmbGFncyA9IFIuZmxhZ3M7XG4gIHJldHVybiBmbGFncyA9PT0gdW5kZWZpbmVkICYmICEoJ2ZsYWdzJyBpbiBSZWdFeHBQcm90b3R5cGUpICYmICFoYXNPd24oUiwgJ2ZsYWdzJykgJiYgaXNQcm90b3R5cGVPZihSZWdFeHBQcm90b3R5cGUsIFIpXG4gICAgPyBjYWxsKHJlZ0V4cEZsYWdzLCBSKSA6IGZsYWdzO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxuLy8gYmFiZWwtbWluaWZ5IGFuZCBDbG9zdXJlIENvbXBpbGVyIHRyYW5zcGlsZXMgUmVnRXhwKCdhJywgJ3knKSAtPiAvYS95IGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcblxudmFyIFVOU1VQUE9SVEVEX1kgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciByZSA9ICRSZWdFeHAoJ2EnLCAneScpO1xuICByZS5sYXN0SW5kZXggPSAyO1xuICByZXR1cm4gcmUuZXhlYygnYWJjZCcpICE9IG51bGw7XG59KTtcblxuLy8gVUMgQnJvd3NlciBidWdcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xMDA4XG52YXIgTUlTU0VEX1NUSUNLWSA9IFVOU1VQUE9SVEVEX1kgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gISRSZWdFeHAoJ2EnLCAneScpLnN0aWNreTtcbn0pO1xuXG52YXIgQlJPS0VOX0NBUkVUID0gVU5TVVBQT1JURURfWSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTc3MzY4N1xuICB2YXIgcmUgPSAkUmVnRXhwKCdecicsICdneScpO1xuICByZS5sYXN0SW5kZXggPSAyO1xuICByZXR1cm4gcmUuZXhlYygnc3RyJykgIT0gbnVsbDtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQlJPS0VOX0NBUkVUOiBCUk9LRU5fQ0FSRVQsXG4gIE1JU1NFRF9TVElDS1k6IE1JU1NFRF9TVElDS1ksXG4gIFVOU1VQUE9SVEVEX1k6IFVOU1VQUE9SVEVEX1lcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbi8vIGJhYmVsLW1pbmlmeSBhbmQgQ2xvc3VyZSBDb21waWxlciB0cmFuc3BpbGVzIFJlZ0V4cCgnLicsICdzJykgLT4gLy4vcyBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG5cbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUgPSAkUmVnRXhwKCcuJywgJ3MnKTtcbiAgcmV0dXJuICEocmUuZG90QWxsICYmIHJlLmV4ZWMoJ1xcbicpICYmIHJlLmZsYWdzID09PSAncycpO1xufSk7XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbi8vIGJhYmVsLW1pbmlmeSBhbmQgQ2xvc3VyZSBDb21waWxlciB0cmFuc3BpbGVzIFJlZ0V4cCgnKD88YT5iKScsICdnJykgLT4gLyg/PGE+YikvZyBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG5cbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUgPSAkUmVnRXhwKCcoPzxhPmIpJywgJ2cnKTtcbiAgcmV0dXJuIHJlLmV4ZWMoJ2InKS5ncm91cHMuYSAhPT0gJ2InIHx8XG4gICAgJ2InLnJlcGxhY2UocmUsICckPGE+YycpICE9PSAnYmMnO1xufSk7XG4iLCJ2YXIgaXNOdWxsT3JVbmRlZmluZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbi8vIGBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVxdWlyZW9iamVjdGNvZXJjaWJsZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGlzTnVsbE9yVW5kZWZpbmVkKGl0KSkgdGhyb3cgJFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gYFNhbWVWYWx1ZVplcm9gIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zYW1ldmFsdWV6ZXJvXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh4LCB5KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gIHJldHVybiB4ID09PSB5IHx8IHggIT0geCAmJiB5ICE9IHk7XG59O1xuIiwiLy8gYFNhbWVWYWx1ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNhbWV2YWx1ZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LWlzIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmlzIHx8IGZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgcmV0dXJuIHggPT09IHkgPyB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geSA6IHggIT0geCAmJiB5ICE9IHk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBhcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcbnZhciBhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlJyk7XG52YXIgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdmFsaWRhdGUtYXJndW1lbnRzLWxlbmd0aCcpO1xuXG52YXIgTVNJRSA9IC9NU0lFIC5cXC4vLnRlc3QodXNlckFnZW50KTsgLy8gPC0gZGlydHkgaWU5LSBjaGVja1xudmFyIEZ1bmN0aW9uID0gZ2xvYmFsLkZ1bmN0aW9uO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uIChzY2hlZHVsZXIpIHtcbiAgcmV0dXJuIE1TSUUgPyBmdW5jdGlvbiAoaGFuZGxlciwgdGltZW91dCAvKiAsIC4uLmFyZ3VtZW50cyAqLykge1xuICAgIHZhciBib3VuZEFyZ3MgPSB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKSA+IDI7XG4gICAgdmFyIGZuID0gaXNDYWxsYWJsZShoYW5kbGVyKSA/IGhhbmRsZXIgOiBGdW5jdGlvbihoYW5kbGVyKTtcbiAgICB2YXIgYXJncyA9IGJvdW5kQXJncyA/IGFycmF5U2xpY2UoYXJndW1lbnRzLCAyKSA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc2NoZWR1bGVyKGJvdW5kQXJncyA/IGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwcGx5KGZuLCB0aGlzLCBhcmdzKTtcbiAgICB9IDogZm4sIHRpbWVvdXQpO1xuICB9IDogc2NoZWR1bGVyO1xufTtcblxuLy8gaWU5LSBzZXRUaW1lb3V0ICYgc2V0SW50ZXJ2YWwgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGZpeFxuLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvdGltZXJzLWFuZC11c2VyLXByb21wdHMuaHRtbCN0aW1lcnNcbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgc2V0VGltZW91dGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3RpbWVycy1hbmQtdXNlci1wcm9tcHRzLmh0bWwjZG9tLXNldHRpbWVvdXRcbiAgc2V0VGltZW91dDogd3JhcChnbG9iYWwuc2V0VGltZW91dCksXG4gIC8vIGBzZXRJbnRlcnZhbGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3RpbWVycy1hbmQtdXNlci1wcm9tcHRzLmh0bWwjZG9tLXNldGludGVydmFsXG4gIHNldEludGVydmFsOiB3cmFwKGdsb2JhbC5zZXRJbnRlcnZhbClcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09OU1RSVUNUT1JfTkFNRSkge1xuICB2YXIgQ29uc3RydWN0b3IgPSBnZXRCdWlsdEluKENPTlNUUlVDVE9SX05BTUUpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiBDb25zdHJ1Y3RvciAmJiAhQ29uc3RydWN0b3JbU1BFQ0lFU10pIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgU1BFQ0lFUywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gICAgfSk7XG4gIH1cbn07XG4iLCJ2YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgVEFHLCBTVEFUSUMpIHtcbiAgaWYgKHRhcmdldCAmJiAhU1RBVElDKSB0YXJnZXQgPSB0YXJnZXQucHJvdG90eXBlO1xuICBpZiAodGFyZ2V0ICYmICFoYXNPd24odGFyZ2V0LCBUT19TVFJJTkdfVEFHKSkge1xuICAgIGRlZmluZVByb3BlcnR5KHRhcmdldCwgVE9fU1RSSU5HX1RBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiBUQUcgfSk7XG4gIH1cbn07XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcblxudmFyIGtleXMgPSBzaGFyZWQoJ2tleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBrZXlzW2tleV0gfHwgKGtleXNba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGRlZmluZUdsb2JhbFByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1nbG9iYWwtcHJvcGVydHknKTtcblxudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgZGVmaW5lR2xvYmFsUHJvcGVydHkoU0hBUkVELCB7fSk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3RvcmU7XG4iLCJ2YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgc3RvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiAnMy4yNS4yJyxcbiAgbW9kZTogSVNfUFVSRSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDE0LTIwMjIgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknLFxuICBsaWNlbnNlOiAnaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvYmxvYi92My4yNS4yL0xJQ0VOU0UnLFxuICBzb3VyY2U6ICdodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcydcbn0pO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNvbnN0cnVjdG9yJyk7XG52YXIgaXNOdWxsT3JVbmRlZmluZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxuLy8gYFNwZWNpZXNDb25zdHJ1Y3RvcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNwZWNpZXNjb25zdHJ1Y3RvclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgZGVmYXVsdENvbnN0cnVjdG9yKSB7XG4gIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3I7XG4gIHZhciBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IGlzTnVsbE9yVW5kZWZpbmVkKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPyBkZWZhdWx0Q29uc3RydWN0b3IgOiBhQ29uc3RydWN0b3IoUyk7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIGNoZWNrIHRoZSBleGlzdGVuY2Ugb2YgYSBtZXRob2QsIGxvd2VyY2FzZVxuLy8gb2YgYSB0YWcgYW5kIGVzY2FwaW5nIHF1b3RlcyBpbiBhcmd1bWVudHNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gIHJldHVybiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRlc3QgPSAnJ1tNRVRIT0RfTkFNRV0oJ1wiJyk7XG4gICAgcmV0dXJuIHRlc3QgIT09IHRlc3QudG9Mb3dlckNhc2UoKSB8fCB0ZXN0LnNwbGl0KCdcIicpLmxlbmd0aCA+IDM7XG4gIH0pO1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcbnZhciBjaGFyQ29kZUF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckNvZGVBdCk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoQ09OVkVSVF9UT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgcG9zKSB7XG4gICAgdmFyIFMgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgdmFyIHBvc2l0aW9uID0gdG9JbnRlZ2VyT3JJbmZpbml0eShwb3MpO1xuICAgIHZhciBzaXplID0gUy5sZW5ndGg7XG4gICAgdmFyIGZpcnN0LCBzZWNvbmQ7XG4gICAgaWYgKHBvc2l0aW9uIDwgMCB8fCBwb3NpdGlvbiA+PSBzaXplKSByZXR1cm4gQ09OVkVSVF9UT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBmaXJzdCA9IGNoYXJDb2RlQXQoUywgcG9zaXRpb24pO1xuICAgIHJldHVybiBmaXJzdCA8IDB4RDgwMCB8fCBmaXJzdCA+IDB4REJGRiB8fCBwb3NpdGlvbiArIDEgPT09IHNpemVcbiAgICAgIHx8IChzZWNvbmQgPSBjaGFyQ29kZUF0KFMsIHBvc2l0aW9uICsgMSkpIDwgMHhEQzAwIHx8IHNlY29uZCA+IDB4REZGRlxuICAgICAgICA/IENPTlZFUlRfVE9fU1RSSU5HXG4gICAgICAgICAgPyBjaGFyQXQoUywgcG9zaXRpb24pXG4gICAgICAgICAgOiBmaXJzdFxuICAgICAgICA6IENPTlZFUlRfVE9fU1RSSU5HXG4gICAgICAgICAgPyBzdHJpbmdTbGljZShTLCBwb3NpdGlvbiwgcG9zaXRpb24gKyAyKVxuICAgICAgICAgIDogKGZpcnN0IC0gMHhEODAwIDw8IDEwKSArIChzZWNvbmQgLSAweERDMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5jb2RlcG9pbnRhdFxuICBjb2RlQXQ6IGNyZWF0ZU1ldGhvZChmYWxzZSksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxuICBjaGFyQXQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxufTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8yODBcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAvVmVyc2lvblxcLzEwKD86XFwuXFxkKyl7MSwyfSg/OiBbXFx3Li9dKyk/KD86IE1vYmlsZVxcL1xcdyspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgJHJlcGVhdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcmVwZWF0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxudmFyIHJlcGVhdCA9IHVuY3VycnlUaGlzKCRyZXBlYXQpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnsgcGFkU3RhcnQsIHBhZEVuZCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKElTX0VORCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBtYXhMZW5ndGgsIGZpbGxTdHJpbmcpIHtcbiAgICB2YXIgUyA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJHRoaXMpKTtcbiAgICB2YXIgaW50TWF4TGVuZ3RoID0gdG9MZW5ndGgobWF4TGVuZ3RoKTtcbiAgICB2YXIgc3RyaW5nTGVuZ3RoID0gUy5sZW5ndGg7XG4gICAgdmFyIGZpbGxTdHIgPSBmaWxsU3RyaW5nID09PSB1bmRlZmluZWQgPyAnICcgOiB0b1N0cmluZyhmaWxsU3RyaW5nKTtcbiAgICB2YXIgZmlsbExlbiwgc3RyaW5nRmlsbGVyO1xuICAgIGlmIChpbnRNYXhMZW5ndGggPD0gc3RyaW5nTGVuZ3RoIHx8IGZpbGxTdHIgPT0gJycpIHJldHVybiBTO1xuICAgIGZpbGxMZW4gPSBpbnRNYXhMZW5ndGggLSBzdHJpbmdMZW5ndGg7XG4gICAgc3RyaW5nRmlsbGVyID0gcmVwZWF0KGZpbGxTdHIsIGNlaWwoZmlsbExlbiAvIGZpbGxTdHIubGVuZ3RoKSk7XG4gICAgaWYgKHN0cmluZ0ZpbGxlci5sZW5ndGggPiBmaWxsTGVuKSBzdHJpbmdGaWxsZXIgPSBzdHJpbmdTbGljZShzdHJpbmdGaWxsZXIsIDAsIGZpbGxMZW4pO1xuICAgIHJldHVybiBJU19FTkQgPyBTICsgc3RyaW5nRmlsbGVyIDogc3RyaW5nRmlsbGVyICsgUztcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5wYWRTdGFydGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5wYWRzdGFydFxuICBzdGFydDogY3JlYXRlTWV0aG9kKGZhbHNlKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUucGFkRW5kYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnBhZGVuZFxuICBlbmQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9iZXN0aWVqcy9wdW55Y29kZS5qcy9ibG9iL21hc3Rlci9wdW55Y29kZS5qc1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG52YXIgbWF4SW50ID0gMjE0NzQ4MzY0NzsgLy8gYWthLiAweDdGRkZGRkZGIG9yIDJeMzEtMVxudmFyIGJhc2UgPSAzNjtcbnZhciB0TWluID0gMTtcbnZhciB0TWF4ID0gMjY7XG52YXIgc2tldyA9IDM4O1xudmFyIGRhbXAgPSA3MDA7XG52YXIgaW5pdGlhbEJpYXMgPSA3MjtcbnZhciBpbml0aWFsTiA9IDEyODsgLy8gMHg4MFxudmFyIGRlbGltaXRlciA9ICctJzsgLy8gJ1xceDJEJ1xudmFyIHJlZ2V4Tm9uQVNDSUkgPSAvW15cXDAtXFx1MDA3RV0vOyAvLyBub24tQVNDSUkgY2hhcnNcbnZhciByZWdleFNlcGFyYXRvcnMgPSAvWy5cXHUzMDAyXFx1RkYwRVxcdUZGNjFdL2c7IC8vIFJGQyAzNDkwIHNlcGFyYXRvcnNcbnZhciBPVkVSRkxPV19FUlJPUiA9ICdPdmVyZmxvdzogaW5wdXQgbmVlZHMgd2lkZXIgaW50ZWdlcnMgdG8gcHJvY2Vzcyc7XG52YXIgYmFzZU1pbnVzVE1pbiA9IGJhc2UgLSB0TWluO1xuXG52YXIgJFJhbmdlRXJyb3IgPSBSYW5nZUVycm9yO1xudmFyIGV4ZWMgPSB1bmN1cnJ5VGhpcyhyZWdleFNlcGFyYXRvcnMuZXhlYyk7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG52YXIgY2hhckNvZGVBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJDb2RlQXQpO1xudmFyIGpvaW4gPSB1bmN1cnJ5VGhpcyhbXS5qb2luKTtcbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG52YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xudmFyIHNwbGl0ID0gdW5jdXJyeVRoaXMoJycuc3BsaXQpO1xudmFyIHRvTG93ZXJDYXNlID0gdW5jdXJyeVRoaXMoJycudG9Mb3dlckNhc2UpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgY29udGFpbmluZyB0aGUgbnVtZXJpYyBjb2RlIHBvaW50cyBvZiBlYWNoIFVuaWNvZGVcbiAqIGNoYXJhY3RlciBpbiB0aGUgc3RyaW5nLiBXaGlsZSBKYXZhU2NyaXB0IHVzZXMgVUNTLTIgaW50ZXJuYWxseSxcbiAqIHRoaXMgZnVuY3Rpb24gd2lsbCBjb252ZXJ0IGEgcGFpciBvZiBzdXJyb2dhdGUgaGFsdmVzIChlYWNoIG9mIHdoaWNoXG4gKiBVQ1MtMiBleHBvc2VzIGFzIHNlcGFyYXRlIGNoYXJhY3RlcnMpIGludG8gYSBzaW5nbGUgY29kZSBwb2ludCxcbiAqIG1hdGNoaW5nIFVURi0xNi5cbiAqL1xudmFyIHVjczJkZWNvZGUgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHZhciBvdXRwdXQgPSBbXTtcbiAgdmFyIGNvdW50ZXIgPSAwO1xuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgd2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBjaGFyQ29kZUF0KHN0cmluZywgY291bnRlcisrKTtcbiAgICBpZiAodmFsdWUgPj0gMHhEODAwICYmIHZhbHVlIDw9IDB4REJGRiAmJiBjb3VudGVyIDwgbGVuZ3RoKSB7XG4gICAgICAvLyBJdCdzIGEgaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyLlxuICAgICAgdmFyIGV4dHJhID0gY2hhckNvZGVBdChzdHJpbmcsIGNvdW50ZXIrKyk7XG4gICAgICBpZiAoKGV4dHJhICYgMHhGQzAwKSA9PSAweERDMDApIHsgLy8gTG93IHN1cnJvZ2F0ZS5cbiAgICAgICAgcHVzaChvdXRwdXQsICgodmFsdWUgJiAweDNGRikgPDwgMTApICsgKGV4dHJhICYgMHgzRkYpICsgMHgxMDAwMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJdCdzIGFuIHVubWF0Y2hlZCBzdXJyb2dhdGU7IG9ubHkgYXBwZW5kIHRoaXMgY29kZSB1bml0LCBpbiBjYXNlIHRoZVxuICAgICAgICAvLyBuZXh0IGNvZGUgdW5pdCBpcyB0aGUgaGlnaCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpci5cbiAgICAgICAgcHVzaChvdXRwdXQsIHZhbHVlKTtcbiAgICAgICAgY291bnRlci0tO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwdXNoKG91dHB1dCwgdmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb3V0cHV0O1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIGRpZ2l0L2ludGVnZXIgaW50byBhIGJhc2ljIGNvZGUgcG9pbnQuXG4gKi9cbnZhciBkaWdpdFRvQmFzaWMgPSBmdW5jdGlvbiAoZGlnaXQpIHtcbiAgLy8gIDAuLjI1IG1hcCB0byBBU0NJSSBhLi56IG9yIEEuLlpcbiAgLy8gMjYuLjM1IG1hcCB0byBBU0NJSSAwLi45XG4gIHJldHVybiBkaWdpdCArIDIyICsgNzUgKiAoZGlnaXQgPCAyNik7XG59O1xuXG4vKipcbiAqIEJpYXMgYWRhcHRhdGlvbiBmdW5jdGlvbiBhcyBwZXIgc2VjdGlvbiAzLjQgb2YgUkZDIDM0OTIuXG4gKiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzQ5MiNzZWN0aW9uLTMuNFxuICovXG52YXIgYWRhcHQgPSBmdW5jdGlvbiAoZGVsdGEsIG51bVBvaW50cywgZmlyc3RUaW1lKSB7XG4gIHZhciBrID0gMDtcbiAgZGVsdGEgPSBmaXJzdFRpbWUgPyBmbG9vcihkZWx0YSAvIGRhbXApIDogZGVsdGEgPj4gMTtcbiAgZGVsdGEgKz0gZmxvb3IoZGVsdGEgLyBudW1Qb2ludHMpO1xuICB3aGlsZSAoZGVsdGEgPiBiYXNlTWludXNUTWluICogdE1heCA+PiAxKSB7XG4gICAgZGVsdGEgPSBmbG9vcihkZWx0YSAvIGJhc2VNaW51c1RNaW4pO1xuICAgIGsgKz0gYmFzZTtcbiAgfVxuICByZXR1cm4gZmxvb3IoayArIChiYXNlTWludXNUTWluICsgMSkgKiBkZWx0YSAvIChkZWx0YSArIHNrZXcpKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzIChlLmcuIGEgZG9tYWluIG5hbWUgbGFiZWwpIHRvIGFcbiAqIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG4gKi9cbnZhciBlbmNvZGUgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuXG4gIC8vIENvbnZlcnQgdGhlIGlucHV0IGluIFVDUy0yIHRvIGFuIGFycmF5IG9mIFVuaWNvZGUgY29kZSBwb2ludHMuXG4gIGlucHV0ID0gdWNzMmRlY29kZShpbnB1dCk7XG5cbiAgLy8gQ2FjaGUgdGhlIGxlbmd0aC5cbiAgdmFyIGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuXG4gIC8vIEluaXRpYWxpemUgdGhlIHN0YXRlLlxuICB2YXIgbiA9IGluaXRpYWxOO1xuICB2YXIgZGVsdGEgPSAwO1xuICB2YXIgYmlhcyA9IGluaXRpYWxCaWFzO1xuICB2YXIgaSwgY3VycmVudFZhbHVlO1xuXG4gIC8vIEhhbmRsZSB0aGUgYmFzaWMgY29kZSBwb2ludHMuXG4gIGZvciAoaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgIGN1cnJlbnRWYWx1ZSA9IGlucHV0W2ldO1xuICAgIGlmIChjdXJyZW50VmFsdWUgPCAweDgwKSB7XG4gICAgICBwdXNoKG91dHB1dCwgZnJvbUNoYXJDb2RlKGN1cnJlbnRWYWx1ZSkpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBiYXNpY0xlbmd0aCA9IG91dHB1dC5sZW5ndGg7IC8vIG51bWJlciBvZiBiYXNpYyBjb2RlIHBvaW50cy5cbiAgdmFyIGhhbmRsZWRDUENvdW50ID0gYmFzaWNMZW5ndGg7IC8vIG51bWJlciBvZiBjb2RlIHBvaW50cyB0aGF0IGhhdmUgYmVlbiBoYW5kbGVkO1xuXG4gIC8vIEZpbmlzaCB0aGUgYmFzaWMgc3RyaW5nIHdpdGggYSBkZWxpbWl0ZXIgdW5sZXNzIGl0J3MgZW1wdHkuXG4gIGlmIChiYXNpY0xlbmd0aCkge1xuICAgIHB1c2gob3V0cHV0LCBkZWxpbWl0ZXIpO1xuICB9XG5cbiAgLy8gTWFpbiBlbmNvZGluZyBsb29wOlxuICB3aGlsZSAoaGFuZGxlZENQQ291bnQgPCBpbnB1dExlbmd0aCkge1xuICAgIC8vIEFsbCBub24tYmFzaWMgY29kZSBwb2ludHMgPCBuIGhhdmUgYmVlbiBoYW5kbGVkIGFscmVhZHkuIEZpbmQgdGhlIG5leHQgbGFyZ2VyIG9uZTpcbiAgICB2YXIgbSA9IG1heEludDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGN1cnJlbnRWYWx1ZSA9IGlucHV0W2ldO1xuICAgICAgaWYgKGN1cnJlbnRWYWx1ZSA+PSBuICYmIGN1cnJlbnRWYWx1ZSA8IG0pIHtcbiAgICAgICAgbSA9IGN1cnJlbnRWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJbmNyZWFzZSBgZGVsdGFgIGVub3VnaCB0byBhZHZhbmNlIHRoZSBkZWNvZGVyJ3MgPG4saT4gc3RhdGUgdG8gPG0sMD4sIGJ1dCBndWFyZCBhZ2FpbnN0IG92ZXJmbG93LlxuICAgIHZhciBoYW5kbGVkQ1BDb3VudFBsdXNPbmUgPSBoYW5kbGVkQ1BDb3VudCArIDE7XG4gICAgaWYgKG0gLSBuID4gZmxvb3IoKG1heEludCAtIGRlbHRhKSAvIGhhbmRsZWRDUENvdW50UGx1c09uZSkpIHtcbiAgICAgIHRocm93ICRSYW5nZUVycm9yKE9WRVJGTE9XX0VSUk9SKTtcbiAgICB9XG5cbiAgICBkZWx0YSArPSAobSAtIG4pICogaGFuZGxlZENQQ291bnRQbHVzT25lO1xuICAgIG4gPSBtO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBjdXJyZW50VmFsdWUgPSBpbnB1dFtpXTtcbiAgICAgIGlmIChjdXJyZW50VmFsdWUgPCBuICYmICsrZGVsdGEgPiBtYXhJbnQpIHtcbiAgICAgICAgdGhyb3cgJFJhbmdlRXJyb3IoT1ZFUkZMT1dfRVJST1IpO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRWYWx1ZSA9PSBuKSB7XG4gICAgICAgIC8vIFJlcHJlc2VudCBkZWx0YSBhcyBhIGdlbmVyYWxpemVkIHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyLlxuICAgICAgICB2YXIgcSA9IGRlbHRhO1xuICAgICAgICB2YXIgayA9IGJhc2U7XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgdmFyIHQgPSBrIDw9IGJpYXMgPyB0TWluIDogKGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXMpO1xuICAgICAgICAgIGlmIChxIDwgdCkgYnJlYWs7XG4gICAgICAgICAgdmFyIHFNaW51c1QgPSBxIC0gdDtcbiAgICAgICAgICB2YXIgYmFzZU1pbnVzVCA9IGJhc2UgLSB0O1xuICAgICAgICAgIHB1c2gob3V0cHV0LCBmcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHQgKyBxTWludXNUICUgYmFzZU1pbnVzVCkpKTtcbiAgICAgICAgICBxID0gZmxvb3IocU1pbnVzVCAvIGJhc2VNaW51c1QpO1xuICAgICAgICAgIGsgKz0gYmFzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1c2gob3V0cHV0LCBmcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHEpKSk7XG4gICAgICAgIGJpYXMgPSBhZGFwdChkZWx0YSwgaGFuZGxlZENQQ291bnRQbHVzT25lLCBoYW5kbGVkQ1BDb3VudCA9PSBiYXNpY0xlbmd0aCk7XG4gICAgICAgIGRlbHRhID0gMDtcbiAgICAgICAgaGFuZGxlZENQQ291bnQrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBkZWx0YSsrO1xuICAgIG4rKztcbiAgfVxuICByZXR1cm4gam9pbihvdXRwdXQsICcnKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gIHZhciBlbmNvZGVkID0gW107XG4gIHZhciBsYWJlbHMgPSBzcGxpdChyZXBsYWNlKHRvTG93ZXJDYXNlKGlucHV0KSwgcmVnZXhTZXBhcmF0b3JzLCAnXFx1MDAyRScpLCAnLicpO1xuICB2YXIgaSwgbGFiZWw7XG4gIGZvciAoaSA9IDA7IGkgPCBsYWJlbHMubGVuZ3RoOyBpKyspIHtcbiAgICBsYWJlbCA9IGxhYmVsc1tpXTtcbiAgICBwdXNoKGVuY29kZWQsIGV4ZWMocmVnZXhOb25BU0NJSSwgbGFiZWwpID8gJ3huLS0nICsgZW5jb2RlKGxhYmVsKSA6IGxhYmVsKTtcbiAgfVxuICByZXR1cm4gam9pbihlbmNvZGVkLCAnLicpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG52YXIgJFJhbmdlRXJyb3IgPSBSYW5nZUVycm9yO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXRgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGVhdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpIHtcbiAgdmFyIHN0ciA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIHZhciBuID0gdG9JbnRlZ2VyT3JJbmZpbml0eShjb3VudCk7XG4gIGlmIChuIDwgMCB8fCBuID09IEluZmluaXR5KSB0aHJvdyAkUmFuZ2VFcnJvcignV3JvbmcgbnVtYmVyIG9mIHJlcGV0aXRpb25zJyk7XG4gIGZvciAoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSkgaWYgKG4gJiAxKSByZXN1bHQgKz0gc3RyO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkdHJpbUVuZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbScpLmVuZDtcbnZhciBmb3JjZWRTdHJpbmdUcmltTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW1FbmQsIHRyaW1SaWdodCB9YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltZW5kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jU3RyaW5nLnByb3RvdHlwZS50cmltcmlnaHRcbm1vZHVsZS5leHBvcnRzID0gZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCgndHJpbUVuZCcpID8gZnVuY3Rpb24gdHJpbUVuZCgpIHtcbiAgcmV0dXJuICR0cmltRW5kKHRoaXMpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tc3RyaW5nLXByb3RvdHlwZS10cmltc3RhcnQtdHJpbWVuZCAtLSBzYWZlXG59IDogJycudHJpbUVuZDtcbiIsInZhciBQUk9QRVJfRlVOQ1RJT05fTkFNRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1uYW1lJykuUFJPUEVSO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd2hpdGVzcGFjZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2hpdGVzcGFjZXMnKTtcblxudmFyIG5vbiA9ICdcXHUyMDBCXFx1MDA4NVxcdTE4MEUnO1xuXG4vLyBjaGVjayB0aGF0IGEgbWV0aG9kIHdvcmtzIHdpdGggdGhlIGNvcnJlY3QgbGlzdFxuLy8gb2Ygd2hpdGVzcGFjZXMgYW5kIGhhcyBhIGNvcnJlY3QgbmFtZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUpIHtcbiAgcmV0dXJuIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISF3aGl0ZXNwYWNlc1tNRVRIT0RfTkFNRV0oKVxuICAgICAgfHwgbm9uW01FVEhPRF9OQU1FXSgpICE9PSBub25cbiAgICAgIHx8IChQUk9QRVJfRlVOQ1RJT05fTkFNRSAmJiB3aGl0ZXNwYWNlc1tNRVRIT0RfTkFNRV0ubmFtZSAhPT0gTUVUSE9EX05BTUUpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJHRyaW1TdGFydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbScpLnN0YXJ0O1xudmFyIGZvcmNlZFN0cmluZ1RyaW1NZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0tZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbVN0YXJ0LCB0cmltTGVmdCB9YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltc3RhcnRcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNTdHJpbmcucHJvdG90eXBlLnRyaW1sZWZ0XG5tb2R1bGUuZXhwb3J0cyA9IGZvcmNlZFN0cmluZ1RyaW1NZXRob2QoJ3RyaW1TdGFydCcpID8gZnVuY3Rpb24gdHJpbVN0YXJ0KCkge1xuICByZXR1cm4gJHRyaW1TdGFydCh0aGlzKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLXN0cmluZy1wcm90b3R5cGUtdHJpbXN0YXJ0LXRyaW1lbmQgLS0gc2FmZVxufSA6ICcnLnRyaW1TdGFydDtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHdoaXRlc3BhY2VzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3doaXRlc3BhY2VzJyk7XG5cbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgd2hpdGVzcGFjZSA9ICdbJyArIHdoaXRlc3BhY2VzICsgJ10nO1xudmFyIGx0cmltID0gUmVnRXhwKCdeJyArIHdoaXRlc3BhY2UgKyB3aGl0ZXNwYWNlICsgJyonKTtcbnZhciBydHJpbSA9IFJlZ0V4cCh3aGl0ZXNwYWNlICsgd2hpdGVzcGFjZSArICcqJCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW0sIHRyaW1TdGFydCwgdHJpbUVuZCwgdHJpbUxlZnQsIHRyaW1SaWdodCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcykge1xuICAgIHZhciBzdHJpbmcgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgaWYgKFRZUEUgJiAxKSBzdHJpbmcgPSByZXBsYWNlKHN0cmluZywgbHRyaW0sICcnKTtcbiAgICBpZiAoVFlQRSAmIDIpIHN0cmluZyA9IHJlcGxhY2Uoc3RyaW5nLCBydHJpbSwgJycpO1xuICAgIHJldHVybiBzdHJpbmc7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltTGVmdCwgdHJpbVN0YXJ0IH1gIG1ldGhvZHNcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1zdGFydFxuICBzdGFydDogY3JlYXRlTWV0aG9kKDEpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW1SaWdodCwgdHJpbUVuZCB9YCBtZXRob2RzXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltZW5kXG4gIGVuZDogY3JlYXRlTWV0aG9kKDIpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS50cmltYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1cbiAgdHJpbTogY3JlYXRlTWV0aG9kKDMpXG59O1xuIiwiLyogZXNsaW50LWRpc2FibGUgZXMteC9uby1zeW1ib2wgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5c3ltYm9scyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xubW9kdWxlLmV4cG9ydHMgPSAhIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN5bWJvbCA9IFN5bWJvbCgpO1xuICAvLyBDaHJvbWUgMzggU3ltYm9sIGhhcyBpbmNvcnJlY3QgdG9TdHJpbmcgY29udmVyc2lvblxuICAvLyBgZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzYCBwb2x5ZmlsbCBzeW1ib2xzIGNvbnZlcnRlZCB0byBvYmplY3QgYXJlIG5vdCBTeW1ib2wgaW5zdGFuY2VzXG4gIHJldHVybiAhU3RyaW5nKHN5bWJvbCkgfHwgIShPYmplY3Qoc3ltYm9sKSBpbnN0YW5jZW9mIFN5bWJvbCkgfHxcbiAgICAvLyBDaHJvbWUgMzgtNDAgc3ltYm9scyBhcmUgbm90IGluaGVyaXRlZCBmcm9tIERPTSBjb2xsZWN0aW9ucyBwcm90b3R5cGVzIHRvIGluc3RhbmNlc1xuICAgICFTeW1ib2wuc2hhbSAmJiBWOF9WRVJTSU9OICYmIFY4X1ZFUlNJT04gPCA0MTtcbn0pO1xuIiwidmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBTeW1ib2wgPSBnZXRCdWlsdEluKCdTeW1ib2wnKTtcbiAgdmFyIFN5bWJvbFByb3RvdHlwZSA9IFN5bWJvbCAmJiBTeW1ib2wucHJvdG90eXBlO1xuICB2YXIgdmFsdWVPZiA9IFN5bWJvbFByb3RvdHlwZSAmJiBTeW1ib2xQcm90b3R5cGUudmFsdWVPZjtcbiAgdmFyIFRPX1BSSU1JVElWRSA9IHdlbGxLbm93blN5bWJvbCgndG9QcmltaXRpdmUnKTtcblxuICBpZiAoU3ltYm9sUHJvdG90eXBlICYmICFTeW1ib2xQcm90b3R5cGVbVE9fUFJJTUlUSVZFXSkge1xuICAgIC8vIGBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3ByaW1pdGl2ZVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgLmxlbmd0aFxuICAgIGRlZmluZUJ1aWx0SW4oU3ltYm9sUHJvdG90eXBlLCBUT19QUklNSVRJVkUsIGZ1bmN0aW9uIChoaW50KSB7XG4gICAgICByZXR1cm4gY2FsbCh2YWx1ZU9mLCB0aGlzKTtcbiAgICB9LCB7IGFyaXR5OiAxIH0pO1xuICB9XG59O1xuIiwidmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3ltYm9sLWNvbnN0cnVjdG9yLWRldGVjdGlvbicpO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBlcy14L25vLXN5bWJvbCAtLSBzYWZlICovXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9TWU1CT0wgJiYgISFTeW1ib2xbJ2ZvciddICYmICEhU3ltYm9sLmtleUZvcjtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9odG1sJyk7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZScpO1xudmFyIGNyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy92YWxpZGF0ZS1hcmd1bWVudHMtbGVuZ3RoJyk7XG52YXIgSVNfSU9TID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MnKTtcbnZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG5cbnZhciBzZXQgPSBnbG9iYWwuc2V0SW1tZWRpYXRlO1xudmFyIGNsZWFyID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBEaXNwYXRjaCA9IGdsb2JhbC5EaXNwYXRjaDtcbnZhciBGdW5jdGlvbiA9IGdsb2JhbC5GdW5jdGlvbjtcbnZhciBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcbnZhciBTdHJpbmcgPSBnbG9iYWwuU3RyaW5nO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgbG9jYXRpb24sIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xuXG50cnkge1xuICAvLyBEZW5vIHRocm93cyBhIFJlZmVyZW5jZUVycm9yIG9uIGBsb2NhdGlvbmAgYWNjZXNzIHdpdGhvdXQgYC0tbG9jYXRpb25gIGZsYWdcbiAgbG9jYXRpb24gPSBnbG9iYWwubG9jYXRpb247XG59IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG5cbnZhciBydW4gPSBmdW5jdGlvbiAoaWQpIHtcbiAgaWYgKGhhc093bihxdWV1ZSwgaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcblxudmFyIHJ1bm5lciA9IGZ1bmN0aW9uIChpZCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJ1bihpZCk7XG4gIH07XG59O1xuXG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgcnVuKGV2ZW50LmRhdGEpO1xufTtcblxudmFyIHBvc3QgPSBmdW5jdGlvbiAoaWQpIHtcbiAgLy8gb2xkIGVuZ2luZXMgaGF2ZSBub3QgbG9jYXRpb24ub3JpZ2luXG4gIGdsb2JhbC5wb3N0TWVzc2FnZShTdHJpbmcoaWQpLCBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0KTtcbn07XG5cbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmICghc2V0IHx8ICFjbGVhcikge1xuICBzZXQgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoaGFuZGxlcikge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIHZhciBmbiA9IGlzQ2FsbGFibGUoaGFuZGxlcikgPyBoYW5kbGVyIDogRnVuY3Rpb24oaGFuZGxlcik7XG4gICAgdmFyIGFyZ3MgPSBhcnJheVNsaWNlKGFyZ3VtZW50cywgMSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwcGx5KGZuLCB1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYgKElTX05PREUpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhydW5uZXIoaWQpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KHJ1bm5lcihpZCkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgLy8gZXhjZXB0IGlPUyAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82MjRcbiAgfSBlbHNlIGlmIChNZXNzYWdlQ2hhbm5lbCAmJiAhSVNfSU9TKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBiaW5kKHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmIChcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJlxuICAgIGlzQ2FsbGFibGUoZ2xvYmFsLnBvc3RNZXNzYWdlKSAmJlxuICAgICFnbG9iYWwuaW1wb3J0U2NyaXB0cyAmJlxuICAgIGxvY2F0aW9uICYmIGxvY2F0aW9uLnByb3RvY29sICE9PSAnZmlsZTonICYmXG4gICAgIWZhaWxzKHBvc3QpXG4gICkge1xuICAgIGRlZmVyID0gcG9zdDtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmIChPTlJFQURZU1RBVEVDSEFOR0UgaW4gY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjcmVhdGVFbGVtZW50KCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgc2V0VGltZW91dChydW5uZXIoaWQpLCAwKTtcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldCxcbiAgY2xlYXI6IGNsZWFyXG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG4vLyBgdGhpc051bWJlclZhbHVlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdGhpc251bWJlcnZhbHVlXG5tb2R1bGUuZXhwb3J0cyA9IHVuY3VycnlUaGlzKDEuMC52YWx1ZU9mKTtcbiIsInZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBIZWxwZXIgZm9yIGEgcG9wdWxhciByZXBlYXRpbmcgY2FzZSBvZiB0aGUgc3BlYzpcbi8vIExldCBpbnRlZ2VyIGJlID8gVG9JbnRlZ2VyKGluZGV4KS5cbi8vIElmIGludGVnZXIgPCAwLCBsZXQgcmVzdWx0IGJlIG1heCgobGVuZ3RoICsgaW50ZWdlciksIDApOyBlbHNlIGxldCByZXN1bHQgYmUgbWluKGludGVnZXIsIGxlbmd0aCkuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIHZhciBpbnRlZ2VyID0gdG9JbnRlZ2VyT3JJbmZpbml0eShpbmRleCk7XG4gIHJldHVybiBpbnRlZ2VyIDwgMCA/IG1heChpbnRlZ2VyICsgbGVuZ3RoLCAwKSA6IG1pbihpbnRlZ2VyLCBsZW5ndGgpO1xufTtcbiIsInZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbi8vIGBUb0JpZ0ludGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvYmlnaW50XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIgcHJpbSA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCAnbnVtYmVyJyk7XG4gIGlmICh0eXBlb2YgcHJpbSA9PSAnbnVtYmVyJykgdGhyb3cgJFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgbnVtYmVyIHRvIGJpZ2ludFwiKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tYmlnaW50IC0tIHNhZmVcbiAgcmV0dXJuIEJpZ0ludChwcmltKTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG5cbnZhciAkUmFuZ2VFcnJvciA9IFJhbmdlRXJyb3I7XG5cbi8vIGBUb0luZGV4YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9pbmRleFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09PSB1bmRlZmluZWQpIHJldHVybiAwO1xuICB2YXIgbnVtYmVyID0gdG9JbnRlZ2VyT3JJbmZpbml0eShpdCk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChudW1iZXIpO1xuICBpZiAobnVtYmVyICE9PSBsZW5ndGgpIHRocm93ICRSYW5nZUVycm9yKCdXcm9uZyBsZW5ndGggb3IgaW5kZXgnKTtcbiAgcmV0dXJuIGxlbmd0aDtcbn07XG4iLCIvLyB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSW5kZXhlZE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGl0KSk7XG59O1xuIiwidmFyIHRydW5jID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtdHJ1bmMnKTtcblxuLy8gYFRvSW50ZWdlck9ySW5maW5pdHlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b2ludGVnZXJvcmluZmluaXR5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIgbnVtYmVyID0gK2FyZ3VtZW50O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICByZXR1cm4gbnVtYmVyICE9PSBudW1iZXIgfHwgbnVtYmVyID09PSAwID8gMCA6IHRydW5jKG51bWJlcik7XG59O1xuIiwidmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBUb0xlbmd0aGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvbGVuZ3RoXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gYXJndW1lbnQgPiAwID8gbWluKHRvSW50ZWdlck9ySW5maW5pdHkoYXJndW1lbnQpLCAweDFGRkZGRkZGRkZGRkZGKSA6IDA7IC8vIDIgKiogNTMgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxudmFyICRPYmplY3QgPSBPYmplY3Q7XG5cbi8vIGBUb09iamVjdGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvb2JqZWN0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gJE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KSk7XG59O1xuIiwidmFyIHRvUG9zaXRpdmVJbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXBvc2l0aXZlLWludGVnZXInKTtcblxudmFyICRSYW5nZUVycm9yID0gUmFuZ2VFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIEJZVEVTKSB7XG4gIHZhciBvZmZzZXQgPSB0b1Bvc2l0aXZlSW50ZWdlcihpdCk7XG4gIGlmIChvZmZzZXQgJSBCWVRFUykgdGhyb3cgJFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCcpO1xuICByZXR1cm4gb2Zmc2V0O1xufTtcbiIsInZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcblxudmFyICRSYW5nZUVycm9yID0gUmFuZ2VFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHJlc3VsdCA9IHRvSW50ZWdlck9ySW5maW5pdHkoaXQpO1xuICBpZiAocmVzdWx0IDwgMCkgdGhyb3cgJFJhbmdlRXJyb3IoXCJUaGUgYXJndW1lbnQgY2FuJ3QgYmUgbGVzcyB0aGFuIDBcIik7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgb3JkaW5hcnlUb1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vcmRpbmFyeS10by1wcmltaXRpdmUnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG52YXIgVE9fUFJJTUlUSVZFID0gd2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xuXG4vLyBgVG9QcmltaXRpdmVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b3ByaW1pdGl2ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIHByZWYpIHtcbiAgaWYgKCFpc09iamVjdChpbnB1dCkgfHwgaXNTeW1ib2woaW5wdXQpKSByZXR1cm4gaW5wdXQ7XG4gIHZhciBleG90aWNUb1ByaW0gPSBnZXRNZXRob2QoaW5wdXQsIFRPX1BSSU1JVElWRSk7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChleG90aWNUb1ByaW0pIHtcbiAgICBpZiAocHJlZiA9PT0gdW5kZWZpbmVkKSBwcmVmID0gJ2RlZmF1bHQnO1xuICAgIHJlc3VsdCA9IGNhbGwoZXhvdGljVG9QcmltLCBpbnB1dCwgcHJlZik7XG4gICAgaWYgKCFpc09iamVjdChyZXN1bHQpIHx8IGlzU3ltYm9sKHJlc3VsdCkpIHJldHVybiByZXN1bHQ7XG4gICAgdGhyb3cgJFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbiAgfVxuICBpZiAocHJlZiA9PT0gdW5kZWZpbmVkKSBwcmVmID0gJ251bWJlcic7XG4gIHJldHVybiBvcmRpbmFyeVRvUHJpbWl0aXZlKGlucHV0LCBwcmVmKTtcbn07XG4iLCJ2YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtc3ltYm9sJyk7XG5cbi8vIGBUb1Byb3BlcnR5S2V5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9wcm9wZXJ0eWtleVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIGtleSA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCAnc3RyaW5nJyk7XG4gIHJldHVybiBpc1N5bWJvbChrZXkpID8ga2V5IDoga2V5ICsgJyc7XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciB0ZXN0ID0ge307XG5cbnRlc3RbVE9fU1RSSU5HX1RBR10gPSAneic7XG5cbm1vZHVsZS5leHBvcnRzID0gU3RyaW5nKHRlc3QpID09PSAnW29iamVjdCB6XSc7XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG5cbnZhciAkU3RyaW5nID0gU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoY2xhc3NvZihhcmd1bWVudCkgPT09ICdTeW1ib2wnKSB0aHJvdyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IGEgU3ltYm9sIHZhbHVlIHRvIGEgc3RyaW5nJyk7XG4gIHJldHVybiAkU3RyaW5nKGFyZ3VtZW50KTtcbn07XG4iLCJ2YXIgSVNfTk9ERSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHRyeSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jIC0tIHNhZmVcbiAgICBpZiAoSVNfTk9ERSkgcmV0dXJuIEZ1bmN0aW9uKCdyZXR1cm4gcmVxdWlyZShcIicgKyBuYW1lICsgJ1wiKScpKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbn07XG4iLCJ2YXIgJFN0cmluZyA9IFN0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gJFN0cmluZyhhcmd1bWVudCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuICdPYmplY3QnO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgVFlQRURfQVJSQVlTX0NPTlNUUlVDVE9SU19SRVFVSVJFU19XUkFQUEVSUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcnMtcmVxdWlyZS13cmFwcGVycycpO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIEFycmF5QnVmZmVyTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlcicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaXNJbnRlZ3JhbE51bWJlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1pbnRlZ3JhbC1udW1iZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4Jyk7XG52YXIgdG9PZmZzZXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2Zmc2V0Jyk7XG52YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXknKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJykuZjtcbnZhciB0eXBlZEFycmF5RnJvbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1mcm9tJyk7XG52YXIgZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xuXG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBlbmZvcmNlSW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZW5mb3JjZTtcbnZhciBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG52YXIgcm91bmQgPSBNYXRoLnJvdW5kO1xudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbnZhciBBcnJheUJ1ZmZlciA9IEFycmF5QnVmZmVyTW9kdWxlLkFycmF5QnVmZmVyO1xudmFyIEFycmF5QnVmZmVyUHJvdG90eXBlID0gQXJyYXlCdWZmZXIucHJvdG90eXBlO1xudmFyIERhdGFWaWV3ID0gQXJyYXlCdWZmZXJNb2R1bGUuRGF0YVZpZXc7XG52YXIgTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyA9IEFycmF5QnVmZmVyVmlld0NvcmUuTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUztcbnZhciBUWVBFRF9BUlJBWV9UQUcgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLlRZUEVEX0FSUkFZX1RBRztcbnZhciBUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5UeXBlZEFycmF5O1xudmFyIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLlR5cGVkQXJyYXlQcm90b3R5cGU7XG52YXIgYVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcbnZhciBpc1R5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmlzVHlwZWRBcnJheTtcbnZhciBCWVRFU19QRVJfRUxFTUVOVCA9ICdCWVRFU19QRVJfRUxFTUVOVCc7XG52YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCc7XG5cbnZhciBmcm9tTGlzdCA9IGZ1bmN0aW9uIChDLCBsaXN0KSB7XG4gIGFUeXBlZEFycmF5Q29uc3RydWN0b3IoQyk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgdmFyIHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgbmF0aXZlRGVmaW5lUHJvcGVydHkoaXQsIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKVtrZXldO1xuICB9IH0pO1xufTtcblxudmFyIGlzQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGtsYXNzO1xuICByZXR1cm4gaXNQcm90b3R5cGVPZihBcnJheUJ1ZmZlclByb3RvdHlwZSwgaXQpIHx8IChrbGFzcyA9IGNsYXNzb2YoaXQpKSA9PSAnQXJyYXlCdWZmZXInIHx8IGtsYXNzID09ICdTaGFyZWRBcnJheUJ1ZmZlcic7XG59O1xuXG52YXIgaXNUeXBlZEFycmF5SW5kZXggPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgcmV0dXJuIGlzVHlwZWRBcnJheSh0YXJnZXQpXG4gICAgJiYgIWlzU3ltYm9sKGtleSlcbiAgICAmJiBrZXkgaW4gdGFyZ2V0XG4gICAgJiYgaXNJbnRlZ3JhbE51bWJlcigra2V5KVxuICAgICYmIGtleSA+PSAwO1xufTtcblxudmFyIHdyYXBwZWRHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIHtcbiAga2V5ID0gdG9Qcm9wZXJ0eUtleShrZXkpO1xuICByZXR1cm4gaXNUeXBlZEFycmF5SW5kZXgodGFyZ2V0LCBrZXkpXG4gICAgPyBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMiwgdGFyZ2V0W2tleV0pXG4gICAgOiBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpO1xufTtcblxudmFyIHdyYXBwZWREZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKSB7XG4gIGtleSA9IHRvUHJvcGVydHlLZXkoa2V5KTtcbiAgaWYgKGlzVHlwZWRBcnJheUluZGV4KHRhcmdldCwga2V5KVxuICAgICYmIGlzT2JqZWN0KGRlc2NyaXB0b3IpXG4gICAgJiYgaGFzT3duKGRlc2NyaXB0b3IsICd2YWx1ZScpXG4gICAgJiYgIWhhc093bihkZXNjcmlwdG9yLCAnZ2V0JylcbiAgICAmJiAhaGFzT3duKGRlc2NyaXB0b3IsICdzZXQnKVxuICAgIC8vIFRPRE86IGFkZCB2YWxpZGF0aW9uIGRlc2NyaXB0b3Igdy9vIGNhbGxpbmcgYWNjZXNzb3JzXG4gICAgJiYgIWRlc2NyaXB0b3IuY29uZmlndXJhYmxlXG4gICAgJiYgKCFoYXNPd24oZGVzY3JpcHRvciwgJ3dyaXRhYmxlJykgfHwgZGVzY3JpcHRvci53cml0YWJsZSlcbiAgICAmJiAoIWhhc093bihkZXNjcmlwdG9yLCAnZW51bWVyYWJsZScpIHx8IGRlc2NyaXB0b3IuZW51bWVyYWJsZSlcbiAgKSB7XG4gICAgdGFyZ2V0W2tleV0gPSBkZXNjcmlwdG9yLnZhbHVlO1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH0gcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKTtcbn07XG5cbmlmIChERVNDUklQVE9SUykge1xuICBpZiAoIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MpIHtcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZiA9IHdyYXBwZWRHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZiA9IHdyYXBwZWREZWZpbmVQcm9wZXJ0eTtcbiAgICBhZGRHZXR0ZXIoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2J1ZmZlcicpO1xuICAgIGFkZEdldHRlcihUeXBlZEFycmF5UHJvdG90eXBlLCAnYnl0ZU9mZnNldCcpO1xuICAgIGFkZEdldHRlcihUeXBlZEFycmF5UHJvdG90eXBlLCAnYnl0ZUxlbmd0aCcpO1xuICAgIGFkZEdldHRlcihUeXBlZEFycmF5UHJvdG90eXBlLCAnbGVuZ3RoJyk7XG4gIH1cblxuICAkKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyB9LCB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiB3cmFwcGVkR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAgIGRlZmluZVByb3BlcnR5OiB3cmFwcGVkRGVmaW5lUHJvcGVydHlcbiAgfSk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVFlQRSwgd3JhcHBlciwgQ0xBTVBFRCkge1xuICAgIHZhciBCWVRFUyA9IFRZUEUubWF0Y2goL1xcZCskLylbMF0gLyA4O1xuICAgIHZhciBDT05TVFJVQ1RPUl9OQU1FID0gVFlQRSArIChDTEFNUEVEID8gJ0NsYW1wZWQnIDogJycpICsgJ0FycmF5JztcbiAgICB2YXIgR0VUVEVSID0gJ2dldCcgKyBUWVBFO1xuICAgIHZhciBTRVRURVIgPSAnc2V0JyArIFRZUEU7XG4gICAgdmFyIE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGdsb2JhbFtDT05TVFJVQ1RPUl9OQU1FXTtcbiAgICB2YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yO1xuICAgIHZhciBUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUgPSBUeXBlZEFycmF5Q29uc3RydWN0b3IgJiYgVHlwZWRBcnJheUNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgICB2YXIgZXhwb3J0ZWQgPSB7fTtcblxuICAgIHZhciBnZXR0ZXIgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgIHJldHVybiBkYXRhLnZpZXdbR0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5ieXRlT2Zmc2V0LCB0cnVlKTtcbiAgICB9O1xuXG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgIGlmIChDTEFNUEVEKSB2YWx1ZSA9ICh2YWx1ZSA9IHJvdW5kKHZhbHVlKSkgPCAwID8gMCA6IHZhbHVlID4gMHhGRiA/IDB4RkYgOiB2YWx1ZSAmIDB4RkY7XG4gICAgICBkYXRhLnZpZXdbU0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5ieXRlT2Zmc2V0LCB2YWx1ZSwgdHJ1ZSk7XG4gICAgfTtcblxuICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICBuYXRpdmVEZWZpbmVQcm9wZXJ0eSh0aGF0LCBpbmRleCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0dGVyKHRoaXMsIGluZGV4KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBpZiAoIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MpIHtcbiAgICAgIFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsIG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSk7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHZhciBieXRlT2Zmc2V0ID0gMDtcbiAgICAgICAgdmFyIGJ1ZmZlciwgYnl0ZUxlbmd0aCwgbGVuZ3RoO1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICAgICAgbGVuZ3RoID0gdG9JbmRleChkYXRhKTtcbiAgICAgICAgICBieXRlTGVuZ3RoID0gbGVuZ3RoICogQllURVM7XG4gICAgICAgICAgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXlCdWZmZXIoZGF0YSkpIHtcbiAgICAgICAgICBidWZmZXIgPSBkYXRhO1xuICAgICAgICAgIGJ5dGVPZmZzZXQgPSB0b09mZnNldChvZmZzZXQsIEJZVEVTKTtcbiAgICAgICAgICB2YXIgJGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBpZiAoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoJGxlbiAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gJGxlbiAtIGJ5dGVPZmZzZXQ7XG4gICAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCA8IDApIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9IHRvTGVuZ3RoKCRsZW5ndGgpICogQllURVM7XG4gICAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCArIGJ5dGVPZmZzZXQgPiAkbGVuKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxlbmd0aCA9IGJ5dGVMZW5ndGggLyBCWVRFUztcbiAgICAgICAgfSBlbHNlIGlmIChpc1R5cGVkQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gY2FsbCh0eXBlZEFycmF5RnJvbSwgVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRJbnRlcm5hbFN0YXRlKHRoYXQsIHtcbiAgICAgICAgICBidWZmZXI6IGJ1ZmZlcixcbiAgICAgICAgICBieXRlT2Zmc2V0OiBieXRlT2Zmc2V0LFxuICAgICAgICAgIGJ5dGVMZW5ndGg6IGJ5dGVMZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoOiBsZW5ndGgsXG4gICAgICAgICAgdmlldzogbmV3IERhdGFWaWV3KGJ1ZmZlcilcbiAgICAgICAgfSk7XG4gICAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkgYWRkRWxlbWVudCh0aGF0LCBpbmRleCsrKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoc2V0UHJvdG90eXBlT2YpIHNldFByb3RvdHlwZU9mKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgVHlwZWRBcnJheSk7XG4gICAgICBUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUgPSBUeXBlZEFycmF5Q29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKFR5cGVkQXJyYXlQcm90b3R5cGUpO1xuICAgIH0gZWxzZSBpZiAoVFlQRURfQVJSQVlTX0NPTlNUUlVDVE9SU19SRVFVSVJFU19XUkFQUEVSUykge1xuICAgICAgVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gd3JhcHBlcihmdW5jdGlvbiAoZHVtbXksIGRhdGEsIHR5cGVkQXJyYXlPZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZShkdW1teSwgVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlKTtcbiAgICAgICAgcmV0dXJuIGluaGVyaXRJZlJlcXVpcmVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSByZXR1cm4gbmV3IE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3Rvcih0b0luZGV4KGRhdGEpKTtcbiAgICAgICAgICBpZiAoaXNBcnJheUJ1ZmZlcihkYXRhKSkgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBuZXcgTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yKGRhdGEsIHRvT2Zmc2V0KHR5cGVkQXJyYXlPZmZzZXQsIEJZVEVTKSwgJGxlbmd0aClcbiAgICAgICAgICAgIDogdHlwZWRBcnJheU9mZnNldCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gbmV3IE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcihkYXRhLCB0b09mZnNldCh0eXBlZEFycmF5T2Zmc2V0LCBCWVRFUykpXG4gICAgICAgICAgICAgIDogbmV3IE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcihkYXRhKTtcbiAgICAgICAgICBpZiAoaXNUeXBlZEFycmF5KGRhdGEpKSByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBkYXRhKTtcbiAgICAgICAgICByZXR1cm4gY2FsbCh0eXBlZEFycmF5RnJvbSwgVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBkYXRhKTtcbiAgICAgICAgfSgpLCBkdW1teSwgVHlwZWRBcnJheUNvbnN0cnVjdG9yKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoc2V0UHJvdG90eXBlT2YpIHNldFByb3RvdHlwZU9mKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgVHlwZWRBcnJheSk7XG4gICAgICBmb3JFYWNoKGdldE93blByb3BlcnR5TmFtZXMoTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yKSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIShrZXkgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yKSkge1xuICAgICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShUeXBlZEFycmF5Q29uc3RydWN0b3IsIGtleSwgTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGU7XG4gICAgfVxuXG4gICAgaWYgKFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZS5jb25zdHJ1Y3RvciAhPT0gVHlwZWRBcnJheUNvbnN0cnVjdG9yKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlLCAnY29uc3RydWN0b3InLCBUeXBlZEFycmF5Q29uc3RydWN0b3IpO1xuICAgIH1cblxuICAgIGVuZm9yY2VJbnRlcm5hbFN0YXRlKFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSkuVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gVHlwZWRBcnJheUNvbnN0cnVjdG9yO1xuXG4gICAgaWYgKFRZUEVEX0FSUkFZX1RBRykge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSwgVFlQRURfQVJSQVlfVEFHLCBDT05TVFJVQ1RPUl9OQU1FKTtcbiAgICB9XG5cbiAgICB2YXIgRk9SQ0VEID0gVHlwZWRBcnJheUNvbnN0cnVjdG9yICE9IE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcblxuICAgIGV4cG9ydGVkW0NPTlNUUlVDVE9SX05BTUVdID0gVHlwZWRBcnJheUNvbnN0cnVjdG9yO1xuXG4gICAgJCh7IGdsb2JhbDogdHJ1ZSwgY29uc3RydWN0b3I6IHRydWUsIGZvcmNlZDogRk9SQ0VELCBzaGFtOiAhTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyB9LCBleHBvcnRlZCk7XG5cbiAgICBpZiAoIShCWVRFU19QRVJfRUxFTUVOVCBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3IpKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBCWVRFU19QRVJfRUxFTUVOVCwgQllURVMpO1xuICAgIH1cblxuICAgIGlmICghKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSkpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XG4gICAgfVxuXG4gICAgc2V0U3BlY2llcyhDT05TVFJVQ1RPUl9OQU1FKTtcbiAgfTtcbn0gZWxzZSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLW5ldyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24nKTtcbnZhciBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKS5OQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTO1xuXG52YXIgQXJyYXlCdWZmZXIgPSBnbG9iYWwuQXJyYXlCdWZmZXI7XG52YXIgSW50OEFycmF5ID0gZ2xvYmFsLkludDhBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSAhTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBJbnQ4QXJyYXkoMSk7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBuZXcgSW50OEFycmF5KC0xKTtcbn0pIHx8ICFjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gIG5ldyBJbnQ4QXJyYXkoKTtcbiAgbmV3IEludDhBcnJheShudWxsKTtcbiAgbmV3IEludDhBcnJheSgxLjUpO1xuICBuZXcgSW50OEFycmF5KGl0ZXJhYmxlKTtcbn0sIHRydWUpIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gU2FmYXJpICgxMSspIGJ1ZyAtIGEgcmVhc29uIHdoeSBldmVuIFNhZmFyaSAxMyBzaG91bGQgbG9hZCBhIHR5cGVkIGFycmF5IHBvbHlmaWxsXG4gIHJldHVybiBuZXcgSW50OEFycmF5KG5ldyBBcnJheUJ1ZmZlcigyKSwgMSwgdW5kZWZpbmVkKS5sZW5ndGggIT09IDE7XG59KTtcbiIsInZhciBhcnJheUZyb21Db25zdHJ1Y3RvckFuZExpc3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZnJvbS1jb25zdHJ1Y3Rvci1hbmQtbGlzdCcpO1xudmFyIHR5cGVkQXJyYXlTcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgbGlzdCkge1xuICByZXR1cm4gYXJyYXlGcm9tQ29uc3RydWN0b3JBbmRMaXN0KHR5cGVkQXJyYXlTcGVjaWVzQ29uc3RydWN0b3IoaW5zdGFuY2UpLCBsaXN0KTtcbn07XG4iLCJ2YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jb25zdHJ1Y3RvcicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgZ2V0SXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yJyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIGlzQXJyYXlJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBpc0JpZ0ludEFycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWJpZy1pbnQtYXJyYXknKTtcbnZhciBhVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKS5hVHlwZWRBcnJheUNvbnN0cnVjdG9yO1xudmFyIHRvQmlnSW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWJpZy1pbnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmcm9tKHNvdXJjZSAvKiAsIG1hcGZuLCB0aGlzQXJnICovKSB7XG4gIHZhciBDID0gYUNvbnN0cnVjdG9yKHRoaXMpO1xuICB2YXIgTyA9IHRvT2JqZWN0KHNvdXJjZSk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgbWFwZm4gPSBhcmd1bWVudHNMZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKE8pO1xuICB2YXIgaSwgbGVuZ3RoLCByZXN1bHQsIHRoaXNJc0JpZ0ludEFycmF5LCB2YWx1ZSwgc3RlcCwgaXRlcmF0b3IsIG5leHQ7XG4gIGlmIChpdGVyYXRvck1ldGhvZCAmJiAhaXNBcnJheUl0ZXJhdG9yTWV0aG9kKGl0ZXJhdG9yTWV0aG9kKSkge1xuICAgIGl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoTywgaXRlcmF0b3JNZXRob2QpO1xuICAgIG5leHQgPSBpdGVyYXRvci5uZXh0O1xuICAgIE8gPSBbXTtcbiAgICB3aGlsZSAoIShzdGVwID0gY2FsbChuZXh0LCBpdGVyYXRvcikpLmRvbmUpIHtcbiAgICAgIE8ucHVzaChzdGVwLnZhbHVlKTtcbiAgICB9XG4gIH1cbiAgaWYgKG1hcHBpbmcgJiYgYXJndW1lbnRzTGVuZ3RoID4gMikge1xuICAgIG1hcGZuID0gYmluZChtYXBmbiwgYXJndW1lbnRzWzJdKTtcbiAgfVxuICBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgcmVzdWx0ID0gbmV3IChhVHlwZWRBcnJheUNvbnN0cnVjdG9yKEMpKShsZW5ndGgpO1xuICB0aGlzSXNCaWdJbnRBcnJheSA9IGlzQmlnSW50QXJyYXkocmVzdWx0KTtcbiAgZm9yIChpID0gMDsgbGVuZ3RoID4gaTsgaSsrKSB7XG4gICAgdmFsdWUgPSBtYXBwaW5nID8gbWFwZm4oT1tpXSwgaSkgOiBPW2ldO1xuICAgIC8vIEZGMzAtIHR5cGVkIGFycmF5cyBkb2Vzbid0IHByb3Blcmx5IGNvbnZlcnQgb2JqZWN0cyB0byB0eXBlZCBhcnJheSB2YWx1ZXNcbiAgICByZXN1bHRbaV0gPSB0aGlzSXNCaWdJbnRBcnJheSA/IHRvQmlnSW50KHZhbHVlKSA6ICt2YWx1ZTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG52YXIgYVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcbnZhciBnZXRUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmdldFR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcblxuLy8gYSBwYXJ0IG9mIGBUeXBlZEFycmF5U3BlY2llc0NyZWF0ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jdHlwZWRhcnJheS1zcGVjaWVzLWNyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWxBcnJheSkge1xuICByZXR1cm4gYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcihzcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWxBcnJheSwgZ2V0VHlwZWRBcnJheUNvbnN0cnVjdG9yKG9yaWdpbmFsQXJyYXkpKSk7XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG52YXIgaWQgPSAwO1xudmFyIHBvc3RmaXggPSBNYXRoLnJhbmRvbSgpO1xudmFyIHRvU3RyaW5nID0gdW5jdXJyeVRoaXMoMS4wLnRvU3RyaW5nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcgKyAoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSkgKyAnKV8nICsgdG9TdHJpbmcoKytpZCArIHBvc3RmaXgsIDM2KTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB1bmljb3JuL3JlbGF0aXZlLXVybC1zdHlsZSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICB2YXIgdXJsID0gbmV3IFVSTCgnYj9hPTEmYj0yJmM9MycsICdodHRwOi8vYScpO1xuICB2YXIgc2VhcmNoUGFyYW1zID0gdXJsLnNlYXJjaFBhcmFtcztcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICB1cmwucGF0aG5hbWUgPSAnYyUyMGQnO1xuICBzZWFyY2hQYXJhbXMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgIHNlYXJjaFBhcmFtc1snZGVsZXRlJ10oJ2InKTtcbiAgICByZXN1bHQgKz0ga2V5ICsgdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gKElTX1BVUkUgJiYgIXVybC50b0pTT04pXG4gICAgfHwgIXNlYXJjaFBhcmFtcy5zb3J0XG4gICAgfHwgdXJsLmhyZWYgIT09ICdodHRwOi8vYS9jJTIwZD9hPTEmYz0zJ1xuICAgIHx8IHNlYXJjaFBhcmFtcy5nZXQoJ2MnKSAhPT0gJzMnXG4gICAgfHwgU3RyaW5nKG5ldyBVUkxTZWFyY2hQYXJhbXMoJz9hPTEnKSkgIT09ICdhPTEnXG4gICAgfHwgIXNlYXJjaFBhcmFtc1tJVEVSQVRPUl1cbiAgICAvLyB0aHJvd3MgaW4gRWRnZVxuICAgIHx8IG5ldyBVUkwoJ2h0dHBzOi8vYUBiJykudXNlcm5hbWUgIT09ICdhJ1xuICAgIHx8IG5ldyBVUkxTZWFyY2hQYXJhbXMobmV3IFVSTFNlYXJjaFBhcmFtcygnYT1iJykpLmdldCgnYScpICE9PSAnYidcbiAgICAvLyBub3QgcHVueWNvZGVkIGluIEVkZ2VcbiAgICB8fCBuZXcgVVJMKCdodHRwOi8v0YLQtdGB0YInKS5ob3N0ICE9PSAneG4tLWUxYXliYydcbiAgICAvLyBub3QgZXNjYXBlZCBpbiBDaHJvbWUgNjItXG4gICAgfHwgbmV3IFVSTCgnaHR0cDovL2Ej0LEnKS5oYXNoICE9PSAnIyVEMCVCMSdcbiAgICAvLyBmYWlscyBpbiBDaHJvbWUgNjYtXG4gICAgfHwgcmVzdWx0ICE9PSAnYTFjMydcbiAgICAvLyB0aHJvd3MgaW4gU2FmYXJpXG4gICAgfHwgbmV3IFVSTCgnaHR0cDovL3gnLCB1bmRlZmluZWQpLmhvc3QgIT09ICd4Jztcbn0pO1xuIiwiLyogZXNsaW50LWRpc2FibGUgZXMteC9uby1zeW1ib2wgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N5bWJvbC1jb25zdHJ1Y3Rvci1kZXRlY3Rpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfU1lNQk9MXG4gICYmICFTeW1ib2wuc2hhbVxuICAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gVjggfiBDaHJvbWUgMzYtXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMzM0XG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAncHJvdG90eXBlJywge1xuICAgIHZhbHVlOiA0MixcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSkucHJvdG90eXBlICE9IDQyO1xufSk7XG4iLCJ2YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocGFzc2VkLCByZXF1aXJlZCkge1xuICBpZiAocGFzc2VkIDwgcmVxdWlyZWQpIHRocm93ICRUeXBlRXJyb3IoJ05vdCBlbm91Z2ggYXJndW1lbnRzJyk7XG4gIHJldHVybiBwYXNzZWQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNDYWxsYWJsZShXZWFrTWFwKSAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoU3RyaW5nKFdlYWtNYXApKTtcbiIsInZhciBwYXRoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BhdGgnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtd3JhcHBlZCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FKSB7XG4gIHZhciBTeW1ib2wgPSBwYXRoLlN5bWJvbCB8fCAocGF0aC5TeW1ib2wgPSB7fSk7XG4gIGlmICghaGFzT3duKFN5bWJvbCwgTkFNRSkpIGRlZmluZVByb3BlcnR5KFN5bWJvbCwgTkFNRSwge1xuICAgIHZhbHVlOiB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlLmYoTkFNRSlcbiAgfSk7XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG5leHBvcnRzLmYgPSB3ZWxsS25vd25TeW1ib2w7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N5bWJvbC1jb25zdHJ1Y3Rvci1kZXRlY3Rpb24nKTtcbnZhciBVU0VfU1lNQk9MX0FTX1VJRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZCcpO1xuXG52YXIgV2VsbEtub3duU3ltYm9sc1N0b3JlID0gc2hhcmVkKCd3a3MnKTtcbnZhciBTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIHN5bWJvbEZvciA9IFN5bWJvbCAmJiBTeW1ib2xbJ2ZvciddO1xudmFyIGNyZWF0ZVdlbGxLbm93blN5bWJvbCA9IFVTRV9TWU1CT0xfQVNfVUlEID8gU3ltYm9sIDogU3ltYm9sICYmIFN5bWJvbC53aXRob3V0U2V0dGVyIHx8IHVpZDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICBpZiAoIWhhc093bihXZWxsS25vd25TeW1ib2xzU3RvcmUsIG5hbWUpIHx8ICEoTkFUSVZFX1NZTUJPTCB8fCB0eXBlb2YgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID09ICdzdHJpbmcnKSkge1xuICAgIHZhciBkZXNjcmlwdGlvbiA9ICdTeW1ib2wuJyArIG5hbWU7XG4gICAgaWYgKE5BVElWRV9TWU1CT0wgJiYgaGFzT3duKFN5bWJvbCwgbmFtZSkpIHtcbiAgICAgIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IFN5bWJvbFtuYW1lXTtcbiAgICB9IGVsc2UgaWYgKFVTRV9TWU1CT0xfQVNfVUlEICYmIHN5bWJvbEZvcikge1xuICAgICAgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gc3ltYm9sRm9yKGRlc2NyaXB0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gY3JlYXRlV2VsbEtub3duU3ltYm9sKGRlc2NyaXB0aW9uKTtcbiAgICB9XG4gIH0gcmV0dXJuIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXTtcbn07XG4iLCIvLyBhIHN0cmluZyBvZiBhbGwgdmFsaWQgdW5pY29kZSB3aGl0ZXNwYWNlc1xubW9kdWxlLmV4cG9ydHMgPSAnXFx1MDAwOVxcdTAwMEFcXHUwMDBCXFx1MDAwQ1xcdTAwMERcXHUwMDIwXFx1MDBBMFxcdTE2ODBcXHUyMDAwXFx1MjAwMVxcdTIwMDInICtcbiAgJ1xcdTIwMDNcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGJztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMnKTtcbnZhciBwcm94eUFjY2Vzc29yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb3h5LWFjY2Vzc29yJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIG5vcm1hbGl6ZVN0cmluZ0FyZ3VtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25vcm1hbGl6ZS1zdHJpbmctYXJndW1lbnQnKTtcbnZhciBpbnN0YWxsRXJyb3JDYXVzZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnN0YWxsLWVycm9yLWNhdXNlJyk7XG52YXIgY2xlYXJFcnJvclN0YWNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Vycm9yLXN0YWNrLWNsZWFyJyk7XG52YXIgRVJST1JfU1RBQ0tfSU5TVEFMTEFCTEUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXJyb3Itc3RhY2staW5zdGFsbGFibGUnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChGVUxMX05BTUUsIHdyYXBwZXIsIEZPUkNFRCwgSVNfQUdHUkVHQVRFX0VSUk9SKSB7XG4gIHZhciBTVEFDS19UUkFDRV9MSU1JVCA9ICdzdGFja1RyYWNlTGltaXQnO1xuICB2YXIgT1BUSU9OU19QT1NJVElPTiA9IElTX0FHR1JFR0FURV9FUlJPUiA/IDIgOiAxO1xuICB2YXIgcGF0aCA9IEZVTExfTkFNRS5zcGxpdCgnLicpO1xuICB2YXIgRVJST1JfTkFNRSA9IHBhdGhbcGF0aC5sZW5ndGggLSAxXTtcbiAgdmFyIE9yaWdpbmFsRXJyb3IgPSBnZXRCdWlsdEluLmFwcGx5KG51bGwsIHBhdGgpO1xuXG4gIGlmICghT3JpZ2luYWxFcnJvcikgcmV0dXJuO1xuXG4gIHZhciBPcmlnaW5hbEVycm9yUHJvdG90eXBlID0gT3JpZ2luYWxFcnJvci5wcm90b3R5cGU7XG5cbiAgLy8gVjggOS4zLSBidWcgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MTIwMDZcbiAgaWYgKCFJU19QVVJFICYmIGhhc093bihPcmlnaW5hbEVycm9yUHJvdG90eXBlLCAnY2F1c2UnKSkgZGVsZXRlIE9yaWdpbmFsRXJyb3JQcm90b3R5cGUuY2F1c2U7XG5cbiAgaWYgKCFGT1JDRUQpIHJldHVybiBPcmlnaW5hbEVycm9yO1xuXG4gIHZhciBCYXNlRXJyb3IgPSBnZXRCdWlsdEluKCdFcnJvcicpO1xuXG4gIHZhciBXcmFwcGVkRXJyb3IgPSB3cmFwcGVyKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgdmFyIG1lc3NhZ2UgPSBub3JtYWxpemVTdHJpbmdBcmd1bWVudChJU19BR0dSRUdBVEVfRVJST1IgPyBiIDogYSwgdW5kZWZpbmVkKTtcbiAgICB2YXIgcmVzdWx0ID0gSVNfQUdHUkVHQVRFX0VSUk9SID8gbmV3IE9yaWdpbmFsRXJyb3IoYSkgOiBuZXcgT3JpZ2luYWxFcnJvcigpO1xuICAgIGlmIChtZXNzYWdlICE9PSB1bmRlZmluZWQpIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShyZXN1bHQsICdtZXNzYWdlJywgbWVzc2FnZSk7XG4gICAgaWYgKEVSUk9SX1NUQUNLX0lOU1RBTExBQkxFKSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkocmVzdWx0LCAnc3RhY2snLCBjbGVhckVycm9yU3RhY2socmVzdWx0LnN0YWNrLCAyKSk7XG4gICAgaWYgKHRoaXMgJiYgaXNQcm90b3R5cGVPZihPcmlnaW5hbEVycm9yUHJvdG90eXBlLCB0aGlzKSkgaW5oZXJpdElmUmVxdWlyZWQocmVzdWx0LCB0aGlzLCBXcmFwcGVkRXJyb3IpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gT1BUSU9OU19QT1NJVElPTikgaW5zdGFsbEVycm9yQ2F1c2UocmVzdWx0LCBhcmd1bWVudHNbT1BUSU9OU19QT1NJVElPTl0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0pO1xuXG4gIFdyYXBwZWRFcnJvci5wcm90b3R5cGUgPSBPcmlnaW5hbEVycm9yUHJvdG90eXBlO1xuXG4gIGlmIChFUlJPUl9OQU1FICE9PSAnRXJyb3InKSB7XG4gICAgaWYgKHNldFByb3RvdHlwZU9mKSBzZXRQcm90b3R5cGVPZihXcmFwcGVkRXJyb3IsIEJhc2VFcnJvcik7XG4gICAgZWxzZSBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKFdyYXBwZWRFcnJvciwgQmFzZUVycm9yLCB7IG5hbWU6IHRydWUgfSk7XG4gIH0gZWxzZSBpZiAoREVTQ1JJUFRPUlMgJiYgU1RBQ0tfVFJBQ0VfTElNSVQgaW4gT3JpZ2luYWxFcnJvcikge1xuICAgIHByb3h5QWNjZXNzb3IoV3JhcHBlZEVycm9yLCBPcmlnaW5hbEVycm9yLCBTVEFDS19UUkFDRV9MSU1JVCk7XG4gICAgcHJveHlBY2Nlc3NvcihXcmFwcGVkRXJyb3IsIE9yaWdpbmFsRXJyb3IsICdwcmVwYXJlU3RhY2tUcmFjZScpO1xuICB9XG5cbiAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhXcmFwcGVkRXJyb3IsIE9yaWdpbmFsRXJyb3IpO1xuXG4gIGlmICghSVNfUFVSRSkgdHJ5IHtcbiAgICAvLyBTYWZhcmkgMTMtIGJ1ZzogV2ViQXNzZW1ibHkgZXJyb3JzIGRvZXMgbm90IGhhdmUgYSBwcm9wZXIgYC5uYW1lYFxuICAgIGlmIChPcmlnaW5hbEVycm9yUHJvdG90eXBlLm5hbWUgIT09IEVSUk9SX05BTUUpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShPcmlnaW5hbEVycm9yUHJvdG90eXBlLCAnbmFtZScsIEVSUk9SX05BTUUpO1xuICAgIH1cbiAgICBPcmlnaW5hbEVycm9yUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gV3JhcHBlZEVycm9yO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG5cbiAgcmV0dXJuIFdyYXBwZWRFcnJvcjtcbn07XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGFwcGx5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWFwcGx5Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3cmFwRXJyb3JDb25zdHJ1Y3RvcldpdGhDYXVzZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93cmFwLWVycm9yLWNvbnN0cnVjdG9yLXdpdGgtY2F1c2UnKTtcblxudmFyIEFHR1JFR0FURV9FUlJPUiA9ICdBZ2dyZWdhdGVFcnJvcic7XG52YXIgJEFnZ3JlZ2F0ZUVycm9yID0gZ2V0QnVpbHRJbihBR0dSRUdBVEVfRVJST1IpO1xuXG52YXIgRk9SQ0VEID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICRBZ2dyZWdhdGVFcnJvcihbMV0pLmVycm9yc1swXSAhPT0gMTtcbn0pICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICRBZ2dyZWdhdGVFcnJvcihbMV0sIEFHR1JFR0FURV9FUlJPUiwgeyBjYXVzZTogNyB9KS5jYXVzZSAhPT0gNztcbn0pO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1lcnJvci1jYXVzZVxuJCh7IGdsb2JhbDogdHJ1ZSwgY29uc3RydWN0b3I6IHRydWUsIGFyaXR5OiAyLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIEFnZ3JlZ2F0ZUVycm9yOiB3cmFwRXJyb3JDb25zdHJ1Y3RvcldpdGhDYXVzZShBR0dSRUdBVEVfRVJST1IsIGZ1bmN0aW9uIChpbml0KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBmdW5jdGlvbnMgYC5sZW5ndGhgXG4gICAgcmV0dXJuIGZ1bmN0aW9uIEFnZ3JlZ2F0ZUVycm9yKGVycm9ycywgbWVzc2FnZSkgeyByZXR1cm4gYXBwbHkoaW5pdCwgdGhpcywgYXJndW1lbnRzKTsgfTtcbiAgfSwgRk9SQ0VELCB0cnVlKVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBjbGVhckVycm9yU3RhY2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXJyb3Itc3RhY2stY2xlYXInKTtcbnZhciBpbnN0YWxsRXJyb3JDYXVzZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnN0YWxsLWVycm9yLWNhdXNlJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgbm9ybWFsaXplU3RyaW5nQXJndW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbm9ybWFsaXplLXN0cmluZy1hcmd1bWVudCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEVSUk9SX1NUQUNLX0lOU1RBTExBQkxFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Vycm9yLXN0YWNrLWluc3RhbGxhYmxlJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyICRFcnJvciA9IEVycm9yO1xudmFyIHB1c2ggPSBbXS5wdXNoO1xuXG52YXIgJEFnZ3JlZ2F0ZUVycm9yID0gZnVuY3Rpb24gQWdncmVnYXRlRXJyb3IoZXJyb3JzLCBtZXNzYWdlIC8qICwgb3B0aW9ucyAqLykge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgaXNJbnN0YW5jZSA9IGlzUHJvdG90eXBlT2YoQWdncmVnYXRlRXJyb3JQcm90b3R5cGUsIHRoaXMpO1xuICB2YXIgdGhhdDtcbiAgaWYgKHNldFByb3RvdHlwZU9mKSB7XG4gICAgdGhhdCA9IHNldFByb3RvdHlwZU9mKCRFcnJvcigpLCBpc0luc3RhbmNlID8gZ2V0UHJvdG90eXBlT2YodGhpcykgOiBBZ2dyZWdhdGVFcnJvclByb3RvdHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhhdCA9IGlzSW5zdGFuY2UgPyB0aGlzIDogY3JlYXRlKEFnZ3JlZ2F0ZUVycm9yUHJvdG90eXBlKTtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkodGhhdCwgVE9fU1RSSU5HX1RBRywgJ0Vycm9yJyk7XG4gIH1cbiAgaWYgKG1lc3NhZ2UgIT09IHVuZGVmaW5lZCkgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHRoYXQsICdtZXNzYWdlJywgbm9ybWFsaXplU3RyaW5nQXJndW1lbnQobWVzc2FnZSkpO1xuICBpZiAoRVJST1JfU1RBQ0tfSU5TVEFMTEFCTEUpIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSh0aGF0LCAnc3RhY2snLCBjbGVhckVycm9yU3RhY2sodGhhdC5zdGFjaywgMSkpO1xuICBpbnN0YWxsRXJyb3JDYXVzZSh0aGF0LCBvcHRpb25zKTtcbiAgdmFyIGVycm9yc0FycmF5ID0gW107XG4gIGl0ZXJhdGUoZXJyb3JzLCBwdXNoLCB7IHRoYXQ6IGVycm9yc0FycmF5IH0pO1xuICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkodGhhdCwgJ2Vycm9ycycsIGVycm9yc0FycmF5KTtcbiAgcmV0dXJuIHRoYXQ7XG59O1xuXG5pZiAoc2V0UHJvdG90eXBlT2YpIHNldFByb3RvdHlwZU9mKCRBZ2dyZWdhdGVFcnJvciwgJEVycm9yKTtcbmVsc2UgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcygkQWdncmVnYXRlRXJyb3IsICRFcnJvciwgeyBuYW1lOiB0cnVlIH0pO1xuXG52YXIgQWdncmVnYXRlRXJyb3JQcm90b3R5cGUgPSAkQWdncmVnYXRlRXJyb3IucHJvdG90eXBlID0gY3JlYXRlKCRFcnJvci5wcm90b3R5cGUsIHtcbiAgY29uc3RydWN0b3I6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCAkQWdncmVnYXRlRXJyb3IpLFxuICBtZXNzYWdlOiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgJycpLFxuICBuYW1lOiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgJ0FnZ3JlZ2F0ZUVycm9yJylcbn0pO1xuXG4vLyBgQWdncmVnYXRlRXJyb3JgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFnZ3JlZ2F0ZS1lcnJvci1jb25zdHJ1Y3RvclxuJCh7IGdsb2JhbDogdHJ1ZSwgY29uc3RydWN0b3I6IHRydWUsIGFyaXR5OiAyIH0sIHtcbiAgQWdncmVnYXRlRXJyb3I6ICRBZ2dyZWdhdGVFcnJvclxufSk7XG4iLCIvLyBUT0RPOiBSZW1vdmUgdGhpcyBtb2R1bGUgZnJvbSBgY29yZS1qc0A0YCBzaW5jZSBpdCdzIHJlcGxhY2VkIHRvIG1vZHVsZSBiZWxvd1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hZ2dyZWdhdGUtZXJyb3IuY29uc3RydWN0b3InKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBhcnJheUJ1ZmZlck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXInKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG5cbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xudmFyIEFycmF5QnVmZmVyID0gYXJyYXlCdWZmZXJNb2R1bGVbQVJSQVlfQlVGRkVSXTtcbnZhciBOYXRpdmVBcnJheUJ1ZmZlciA9IGdsb2JhbFtBUlJBWV9CVUZGRVJdO1xuXG4vLyBgQXJyYXlCdWZmZXJgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5YnVmZmVyLWNvbnN0cnVjdG9yXG4kKHsgZ2xvYmFsOiB0cnVlLCBjb25zdHJ1Y3RvcjogdHJ1ZSwgZm9yY2VkOiBOYXRpdmVBcnJheUJ1ZmZlciAhPT0gQXJyYXlCdWZmZXIgfSwge1xuICBBcnJheUJ1ZmZlcjogQXJyYXlCdWZmZXJcbn0pO1xuXG5zZXRTcGVjaWVzKEFSUkFZX0JVRkZFUik7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcblxudmFyIE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLk5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1M7XG5cbi8vIGBBcnJheUJ1ZmZlci5pc1ZpZXdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheWJ1ZmZlci5pc3ZpZXdcbiQoeyB0YXJnZXQ6ICdBcnJheUJ1ZmZlcicsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgfSwge1xuICBpc1ZpZXc6IEFycmF5QnVmZmVyVmlld0NvcmUuaXNWaWV3XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgQXJyYXlCdWZmZXJNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcblxudmFyIEFycmF5QnVmZmVyID0gQXJyYXlCdWZmZXJNb2R1bGUuQXJyYXlCdWZmZXI7XG52YXIgRGF0YVZpZXcgPSBBcnJheUJ1ZmZlck1vZHVsZS5EYXRhVmlldztcbnZhciBEYXRhVmlld1Byb3RvdHlwZSA9IERhdGFWaWV3LnByb3RvdHlwZTtcbnZhciBuYXRpdmVBcnJheUJ1ZmZlclNsaWNlID0gdW5jdXJyeVRoaXMoQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlKTtcbnZhciBnZXRVaW50OCA9IHVuY3VycnlUaGlzKERhdGFWaWV3UHJvdG90eXBlLmdldFVpbnQ4KTtcbnZhciBzZXRVaW50OCA9IHVuY3VycnlUaGlzKERhdGFWaWV3UHJvdG90eXBlLnNldFVpbnQ4KTtcblxudmFyIElOQ09SUkVDVF9TTElDRSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICFuZXcgQXJyYXlCdWZmZXIoMikuc2xpY2UoMSwgdW5kZWZpbmVkKS5ieXRlTGVuZ3RoO1xufSk7XG5cbi8vIGBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheWJ1ZmZlci5wcm90b3R5cGUuc2xpY2VcbiQoeyB0YXJnZXQ6ICdBcnJheUJ1ZmZlcicsIHByb3RvOiB0cnVlLCB1bnNhZmU6IHRydWUsIGZvcmNlZDogSU5DT1JSRUNUX1NMSUNFIH0sIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAobmF0aXZlQXJyYXlCdWZmZXJTbGljZSAmJiBlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIG5hdGl2ZUFycmF5QnVmZmVyU2xpY2UoYW5PYmplY3QodGhpcyksIHN0YXJ0KTsgLy8gRkYgZml4XG4gICAgfVxuICAgIHZhciBsZW5ndGggPSBhbk9iamVjdCh0aGlzKS5ieXRlTGVuZ3RoO1xuICAgIHZhciBmaXJzdCA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuZ3RoKTtcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kLCBsZW5ndGgpO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCBBcnJheUJ1ZmZlcikpKHRvTGVuZ3RoKGZpbiAtIGZpcnN0KSk7XG4gICAgdmFyIHZpZXdTb3VyY2UgPSBuZXcgRGF0YVZpZXcodGhpcyk7XG4gICAgdmFyIHZpZXdUYXJnZXQgPSBuZXcgRGF0YVZpZXcocmVzdWx0KTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChmaXJzdCA8IGZpbikge1xuICAgICAgc2V0VWludDgodmlld1RhcmdldCwgaW5kZXgrKywgZ2V0VWludDgodmlld1NvdXJjZSwgZmlyc3QrKykpO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcmVsYXRpdmUtaW5kZXhpbmctbWV0aG9kXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSB9LCB7XG4gIGF0OiBmdW5jdGlvbiBhdChpbmRleCkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbiA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICAgIHZhciByZWxhdGl2ZUluZGV4ID0gdG9JbnRlZ2VyT3JJbmZpbml0eShpbmRleCk7XG4gICAgdmFyIGsgPSByZWxhdGl2ZUluZGV4ID49IDAgPyByZWxhdGl2ZUluZGV4IDogbGVuICsgcmVsYXRpdmVJbmRleDtcbiAgICByZXR1cm4gKGsgPCAwIHx8IGsgPj0gbGVuKSA/IHVuZGVmaW5lZCA6IE9ba107XG4gIH1cbn0pO1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdhdCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBkb2VzTm90RXhjZWVkU2FmZUludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9lcy1ub3QtZXhjZWVkLXNhZmUtaW50ZWdlcicpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG5cbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRSA9IHdlbGxLbm93blN5bWJvbCgnaXNDb25jYXRTcHJlYWRhYmxlJyk7XG5cbi8vIFdlIGNhbid0IHVzZSB0aGlzIGZlYXR1cmUgZGV0ZWN0aW9uIGluIFY4IHNpbmNlIGl0IGNhdXNlc1xuLy8gZGVvcHRpbWl6YXRpb24gYW5kIHNlcmlvdXMgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NzlcbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRV9TVVBQT1JUID0gVjhfVkVSU0lPTiA+PSA1MSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgYXJyYXkgPSBbXTtcbiAgYXJyYXlbSVNfQ09OQ0FUX1NQUkVBREFCTEVdID0gZmFsc2U7XG4gIHJldHVybiBhcnJheS5jb25jYXQoKVswXSAhPT0gYXJyYXk7XG59KTtcblxudmFyIFNQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ2NvbmNhdCcpO1xuXG52YXIgaXNDb25jYXRTcHJlYWRhYmxlID0gZnVuY3Rpb24gKE8pIHtcbiAgaWYgKCFpc09iamVjdChPKSkgcmV0dXJuIGZhbHNlO1xuICB2YXIgc3ByZWFkYWJsZSA9IE9bSVNfQ09OQ0FUX1NQUkVBREFCTEVdO1xuICByZXR1cm4gc3ByZWFkYWJsZSAhPT0gdW5kZWZpbmVkID8gISFzcHJlYWRhYmxlIDogaXNBcnJheShPKTtcbn07XG5cbnZhciBGT1JDRUQgPSAhSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCB8fCAhU1BFQ0lFU19TVVBQT1JUO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmNvbmNhdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5jb25jYXRcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBpc0NvbmNhdFNwcmVhZGFibGUgYW5kIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGFyaXR5OiAxLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIGNvbmNhdDogZnVuY3Rpb24gY29uY2F0KGFyZykge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgdmFyIG4gPSAwO1xuICAgIHZhciBpLCBrLCBsZW5ndGgsIGxlbiwgRTtcbiAgICBmb3IgKGkgPSAtMSwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBFID0gaSA9PT0gLTEgPyBPIDogYXJndW1lbnRzW2ldO1xuICAgICAgaWYgKGlzQ29uY2F0U3ByZWFkYWJsZShFKSkge1xuICAgICAgICBsZW4gPSBsZW5ndGhPZkFycmF5TGlrZShFKTtcbiAgICAgICAgZG9lc05vdEV4Y2VlZFNhZmVJbnRlZ2VyKG4gKyBsZW4pO1xuICAgICAgICBmb3IgKGsgPSAwOyBrIDwgbGVuOyBrKyssIG4rKykgaWYgKGsgaW4gRSkgY3JlYXRlUHJvcGVydHkoQSwgbiwgRVtrXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb2VzTm90RXhjZWVkU2FmZUludGVnZXIobiArIDEpO1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShBLCBuKyssIEUpO1xuICAgICAgfVxuICAgIH1cbiAgICBBLmxlbmd0aCA9IG47XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY29weVdpdGhpbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1jb3B5LXdpdGhpbicpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5jb3B5d2l0aGluXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSB9LCB7XG4gIGNvcHlXaXRoaW46IGNvcHlXaXRoaW5cbn0pO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdjb3B5V2l0aGluJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkZXZlcnkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZXZlcnk7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG5cbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnZXZlcnknKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5ldmVyeWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5ldmVyeVxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIVNUUklDVF9NRVRIT0QgfSwge1xuICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGV2ZXJ5KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmaWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZpbGwnKTtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZpbGxgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsbFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUgfSwge1xuICBmaWxsOiBmaWxsXG59KTtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcygnZmlsbCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGZpbHRlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5maWx0ZXI7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xuXG52YXIgSEFTX1NQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ2ZpbHRlcicpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWx0ZXJcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB9LCB7XG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmaWx0ZXIodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRmaW5kSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmluZEluZGV4O1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbnZhciBGSU5EX0lOREVYID0gJ2ZpbmRJbmRleCc7XG52YXIgU0tJUFNfSE9MRVMgPSB0cnVlO1xuXG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEZJTkRfSU5ERVggaW4gW10pIEFycmF5KDEpW0ZJTkRfSU5ERVhdKGZ1bmN0aW9uICgpIHsgU0tJUFNfSE9MRVMgPSBmYWxzZTsgfSk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRpbmRleFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogU0tJUFNfSE9MRVMgfSwge1xuICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZEluZGV4KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoRklORF9JTkRFWCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkZmluZExhc3RJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24tZnJvbS1sYXN0JykuZmluZExhc3RJbmRleDtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZpbmRMYXN0SW5kZXhgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtYXJyYXktZmluZC1mcm9tLWxhc3RcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlIH0sIHtcbiAgZmluZExhc3RJbmRleDogZnVuY3Rpb24gZmluZExhc3RJbmRleChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZExhc3RJbmRleCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdmaW5kTGFzdEluZGV4Jyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkZmluZExhc3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uLWZyb20tbGFzdCcpLmZpbmRMYXN0O1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmluZExhc3RgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtYXJyYXktZmluZC1mcm9tLWxhc3RcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlIH0sIHtcbiAgZmluZExhc3Q6IGZ1bmN0aW9uIGZpbmRMYXN0KGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kTGFzdCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdmaW5kTGFzdCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmluZDtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xuXG52YXIgRklORCA9ICdmaW5kJztcbnZhciBTS0lQU19IT0xFUyA9IHRydWU7XG5cbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoRklORCBpbiBbXSkgQXJyYXkoMSlbRklORF0oZnVuY3Rpb24gKCkgeyBTS0lQU19IT0xFUyA9IGZhbHNlOyB9KTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maW5kYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IFNLSVBTX0hPTEVTIH0sIHtcbiAgZmluZDogZnVuY3Rpb24gZmluZChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKEZJTkQpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmxhdHRlbkludG9BcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mbGF0dGVuLWludG8tYXJyYXknKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmxhdE1hcGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mbGF0bWFwXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSB9LCB7XG4gIGZsYXRNYXA6IGZ1bmN0aW9uIGZsYXRNYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBzb3VyY2VMZW4gPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgICB2YXIgQTtcbiAgICBhQ2FsbGFibGUoY2FsbGJhY2tmbik7XG4gICAgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBBLmxlbmd0aCA9IGZsYXR0ZW5JbnRvQXJyYXkoQSwgTywgTywgc291cmNlTGVuLCAwLCAxLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmxhdHRlbkludG9BcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mbGF0dGVuLWludG8tYXJyYXknKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZsYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmxhdFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUgfSwge1xuICBmbGF0OiBmdW5jdGlvbiBmbGF0KC8qIGRlcHRoQXJnID0gMSAqLykge1xuICAgIHZhciBkZXB0aEFyZyA9IGFyZ3VtZW50cy5sZW5ndGggPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgc291cmNlTGVuID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgdmFyIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgQS5sZW5ndGggPSBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgZGVwdGhBcmcgPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXJPckluZmluaXR5KGRlcHRoQXJnKSk7XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mb3ItZWFjaCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tYXJyYXktcHJvdG90eXBlLWZvcmVhY2ggLS0gc2FmZVxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogW10uZm9yRWFjaCAhPSBmb3JFYWNoIH0sIHtcbiAgZm9yRWFjaDogZm9yRWFjaFxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZyb20nKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG5cbnZhciBJTkNPUlJFQ1RfSVRFUkFUSU9OID0gIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tYXJyYXktZnJvbSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICBBcnJheS5mcm9tKGl0ZXJhYmxlKTtcbn0pO1xuXG4vLyBgQXJyYXkuZnJvbWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LmZyb21cbiQoeyB0YXJnZXQ6ICdBcnJheScsIHN0YXQ6IHRydWUsIGZvcmNlZDogSU5DT1JSRUNUX0lURVJBVElPTiB9LCB7XG4gIGZyb206IGZyb21cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGluY2x1ZGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5jbHVkZXM7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xuXG4vLyBGRjk5KyBidWdcbnZhciBCUk9LRU5fT05fU1BBUlNFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIUFycmF5KDEpLmluY2x1ZGVzKCk7XG59KTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogQlJPS0VOX09OX1NQQVJTRSB9LCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdpbmNsdWRlcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgZXMteC9uby1hcnJheS1wcm90b3R5cGUtaW5kZXhvZiAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgJGluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmRleE9mO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xuXG52YXIgbmF0aXZlSW5kZXhPZiA9IHVuY3VycnlUaGlzKFtdLmluZGV4T2YpO1xuXG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhbmF0aXZlSW5kZXhPZiAmJiAxIC8gbmF0aXZlSW5kZXhPZihbMV0sIDEsIC0wKSA8IDA7XG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ2luZGV4T2YnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5pbmRleE9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IE5FR0FUSVZFX1pFUk8gfHwgIVNUUklDVF9NRVRIT0QgfSwge1xuICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgdmFyIGZyb21JbmRleCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHJldHVybiBORUdBVElWRV9aRVJPXG4gICAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgICA/IG5hdGl2ZUluZGV4T2YodGhpcywgc2VhcmNoRWxlbWVudCwgZnJvbUluZGV4KSB8fCAwXG4gICAgICA6ICRpbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGZyb21JbmRleCk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xuXG4vLyBgQXJyYXkuaXNBcnJheWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LmlzYXJyYXlcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHN0YXQ6IHRydWUgfSwge1xuICBpc0FycmF5OiBpc0FycmF5XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgZGVmaW5lSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3ItZGVmaW5lJyk7XG52YXIgY3JlYXRlSXRlclJlc3VsdE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaXRlci1yZXN1bHQtb2JqZWN0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcblxudmFyIEFSUkFZX0lURVJBVE9SID0gJ0FycmF5IEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKEFSUkFZX0lURVJBVE9SKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmVudHJpZXNcbi8vIGBBcnJheS5wcm90b3R5cGUua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5rZXlzXG4vLyBgQXJyYXkucHJvdG90eXBlLnZhbHVlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS52YWx1ZXNcbi8vIGBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEBpdGVyYXRvclxuLy8gYENyZWF0ZUFycmF5SXRlcmF0b3JgIGludGVybmFsIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1jcmVhdGVhcnJheWl0ZXJhdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmluZUl0ZXJhdG9yKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogQVJSQVlfSVRFUkFUT1IsXG4gICAgdGFyZ2V0OiB0b0luZGV4ZWRPYmplY3QoaXRlcmF0ZWQpLCAvLyB0YXJnZXRcbiAgICBpbmRleDogMCwgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgICBraW5kOiBraW5kICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGtpbmRcbiAgfSk7XG4vLyBgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0lYXJyYXlpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgdGFyZ2V0ID0gc3RhdGUudGFyZ2V0O1xuICB2YXIga2luZCA9IHN0YXRlLmtpbmQ7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4Kys7XG4gIGlmICghdGFyZ2V0IHx8IGluZGV4ID49IHRhcmdldC5sZW5ndGgpIHtcbiAgICBzdGF0ZS50YXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QodW5kZWZpbmVkLCB0cnVlKTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KGluZGV4LCBmYWxzZSk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdCh0YXJnZXRbaW5kZXhdLCBmYWxzZSk7XG4gIHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KFtpbmRleCwgdGFyZ2V0W2luZGV4XV0sIGZhbHNlKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWNyZWF0ZXVubWFwcGVkYXJndW1lbnRzb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWNyZWF0ZW1hcHBlZGFyZ3VtZW50c29iamVjdFxudmFyIHZhbHVlcyA9IEl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuXG4vLyBWOCB+IENocm9tZSA0NS0gYnVnXG5pZiAoIUlTX1BVUkUgJiYgREVTQ1JJUFRPUlMgJiYgdmFsdWVzLm5hbWUgIT09ICd2YWx1ZXMnKSB0cnkge1xuICBkZWZpbmVQcm9wZXJ0eSh2YWx1ZXMsICduYW1lJywgeyB2YWx1ZTogJ3ZhbHVlcycgfSk7XG59IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG5cbnZhciBuYXRpdmVKb2luID0gdW5jdXJyeVRoaXMoW10uam9pbik7XG5cbnZhciBFUzNfU1RSSU5HUyA9IEluZGV4ZWRPYmplY3QgIT0gT2JqZWN0O1xudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdqb2luJywgJywnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5qb2luYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmpvaW5cbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEVTM19TVFJJTkdTIHx8ICFTVFJJQ1RfTUVUSE9EIH0sIHtcbiAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHtcbiAgICByZXR1cm4gbmF0aXZlSm9pbih0b0luZGV4ZWRPYmplY3QodGhpcyksIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkID8gJywnIDogc2VwYXJhdG9yKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBsYXN0SW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1sYXN0LWluZGV4LW9mJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubGFzdGluZGV4b2Zcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLWFycmF5LXByb3RvdHlwZS1sYXN0aW5kZXhvZiAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogbGFzdEluZGV4T2YgIT09IFtdLmxhc3RJbmRleE9mIH0sIHtcbiAgbGFzdEluZGV4T2Y6IGxhc3RJbmRleE9mXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRtYXAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykubWFwO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdtYXAnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubWFwXG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQgfSwge1xuICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY29uc3RydWN0b3InKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcblxudmFyICRBcnJheSA9IEFycmF5O1xuXG52YXIgSVNOVF9HRU5FUklDID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLWFycmF5LW9mIC0tIHNhZmVcbiAgcmV0dXJuICEoJEFycmF5Lm9mLmNhbGwoRikgaW5zdGFuY2VvZiBGKTtcbn0pO1xuXG4vLyBgQXJyYXkub2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5vZlxuLy8gV2ViS2l0IEFycmF5Lm9mIGlzbid0IGdlbmVyaWNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHN0YXQ6IHRydWUsIGZvcmNlZDogSVNOVF9HRU5FUklDIH0sIHtcbiAgb2Y6IGZ1bmN0aW9uIG9mKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKGlzQ29uc3RydWN0b3IodGhpcykgPyB0aGlzIDogJEFycmF5KShhcmd1bWVudHNMZW5ndGgpO1xuICAgIHdoaWxlIChhcmd1bWVudHNMZW5ndGggPiBpbmRleCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICByZXN1bHQubGVuZ3RoID0gYXJndW1lbnRzTGVuZ3RoO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBzZXRBcnJheUxlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zZXQtbGVuZ3RoJyk7XG52YXIgZG9lc05vdEV4Y2VlZFNhZmVJbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvZXMtbm90LWV4Y2VlZC1zYWZlLWludGVnZXInKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgSU5DT1JSRUNUX1RPX0xFTkdUSCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFtdLnB1c2guY2FsbCh7IGxlbmd0aDogMHgxMDAwMDAwMDAgfSwgMSkgIT09IDQyOTQ5NjcyOTc7XG59KTtcblxuLy8gVjggYW5kIFNhZmFyaSA8PSAxNS40LCBGRiA8IDIzIHRocm93cyBJbnRlcm5hbEVycm9yXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0xMjY4MVxudmFyIFNJTEVOVF9PTl9OT05fV1JJVEFCTEVfTEVOR1RIID0gIWZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShbXSwgJ2xlbmd0aCcsIHsgd3JpdGFibGU6IGZhbHNlIH0pLnB1c2goKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gZXJyb3IgaW5zdGFuY2VvZiBUeXBlRXJyb3I7XG4gIH1cbn0oKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5wdXNoYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnB1c2hcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBhcml0eTogMSwgZm9yY2VkOiBJTkNPUlJFQ1RfVE9fTEVOR1RIIHx8IFNJTEVOVF9PTl9OT05fV1JJVEFCTEVfTEVOR1RIIH0sIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgcHVzaDogZnVuY3Rpb24gcHVzaChpdGVtKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgdmFyIGFyZ0NvdW50ID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBkb2VzTm90RXhjZWVkU2FmZUludGVnZXIobGVuICsgYXJnQ291bnQpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJnQ291bnQ7IGkrKykge1xuICAgICAgT1tsZW5dID0gYXJndW1lbnRzW2ldO1xuICAgICAgbGVuKys7XG4gICAgfVxuICAgIHNldEFycmF5TGVuZ3RoKE8sIGxlbik7XG4gICAgcmV0dXJuIGxlbjtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkcmVkdWNlUmlnaHQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktcmVkdWNlJykucmlnaHQ7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG52YXIgQ0hST01FX1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcbnZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG5cbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgncmVkdWNlUmlnaHQnKTtcbi8vIENocm9tZSA4MC04MiBoYXMgYSBjcml0aWNhbCBidWdcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTEwNDk5ODJcbnZhciBDSFJPTUVfQlVHID0gIUlTX05PREUgJiYgQ0hST01FX1ZFUlNJT04gPiA3OSAmJiBDSFJPTUVfVkVSU0lPTiA8IDgzO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnJlZHVjZXJpZ2h0XG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhU1RSSUNUX01FVEhPRCB8fCBDSFJPTUVfQlVHIH0sIHtcbiAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICByZXR1cm4gJHJlZHVjZVJpZ2h0KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXJlZHVjZScpLmxlZnQ7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG52YXIgQ0hST01FX1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcbnZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG5cbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgncmVkdWNlJyk7XG4vLyBDaHJvbWUgODAtODIgaGFzIGEgY3JpdGljYWwgYnVnXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0xMDQ5OTgyXG52YXIgQ0hST01FX0JVRyA9ICFJU19OT0RFICYmIENIUk9NRV9WRVJTSU9OID4gNzkgJiYgQ0hST01FX1ZFUlNJT04gPCA4MztcblxuLy8gYEFycmF5LnByb3RvdHlwZS5yZWR1Y2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUucmVkdWNlXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhU1RSSUNUX01FVEhPRCB8fCBDSFJPTUVfQlVHIH0sIHtcbiAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGxlbmd0aCwgbGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xuXG52YXIgbmF0aXZlUmV2ZXJzZSA9IHVuY3VycnlUaGlzKFtdLnJldmVyc2UpO1xudmFyIHRlc3QgPSBbMSwgMl07XG5cbi8vIGBBcnJheS5wcm90b3R5cGUucmV2ZXJzZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5yZXZlcnNlXG4vLyBmaXggZm9yIFNhZmFyaSAxMi4wIGJ1Z1xuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE4ODc5NFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogU3RyaW5nKHRlc3QpID09PSBTdHJpbmcodGVzdC5yZXZlcnNlKCkpIH0sIHtcbiAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1hc3NpZ24gLS0gZGlydHkgaGFja1xuICAgIGlmIChpc0FycmF5KHRoaXMpKSB0aGlzLmxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIHJldHVybiBuYXRpdmVSZXZlcnNlKHRoaXMpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNvbnN0cnVjdG9yJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG52YXIgbmF0aXZlU2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2UnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdzbGljZScpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyICRBcnJheSA9IEFycmF5O1xudmFyIG1heCA9IE1hdGgubWF4O1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnNsaWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNsaWNlXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB9LCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICAgIHZhciBrID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW5ndGgpO1xuICAgIHZhciBmaW4gPSB0b0Fic29sdXRlSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQsIGxlbmd0aCk7XG4gICAgLy8gaW5saW5lIGBBcnJheVNwZWNpZXNDcmVhdGVgIGZvciB1c2FnZSBuYXRpdmUgYEFycmF5I3NsaWNlYCB3aGVyZSBpdCdzIHBvc3NpYmxlXG4gICAgdmFyIENvbnN0cnVjdG9yLCByZXN1bHQsIG47XG4gICAgaWYgKGlzQXJyYXkoTykpIHtcbiAgICAgIENvbnN0cnVjdG9yID0gTy5jb25zdHJ1Y3RvcjtcbiAgICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgICBpZiAoaXNDb25zdHJ1Y3RvcihDb25zdHJ1Y3RvcikgJiYgKENvbnN0cnVjdG9yID09PSAkQXJyYXkgfHwgaXNBcnJheShDb25zdHJ1Y3Rvci5wcm90b3R5cGUpKSkge1xuICAgICAgICBDb25zdHJ1Y3RvciA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoQ29uc3RydWN0b3IpKSB7XG4gICAgICAgIENvbnN0cnVjdG9yID0gQ29uc3RydWN0b3JbU1BFQ0lFU107XG4gICAgICAgIGlmIChDb25zdHJ1Y3RvciA9PT0gbnVsbCkgQ29uc3RydWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoQ29uc3RydWN0b3IgPT09ICRBcnJheSB8fCBDb25zdHJ1Y3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVTbGljZShPLCBrLCBmaW4pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQgPSBuZXcgKENvbnN0cnVjdG9yID09PSB1bmRlZmluZWQgPyAkQXJyYXkgOiBDb25zdHJ1Y3RvcikobWF4KGZpbiAtIGssIDApKTtcbiAgICBmb3IgKG4gPSAwOyBrIDwgZmluOyBrKyssIG4rKykgaWYgKGsgaW4gTykgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBuLCBPW2tdKTtcbiAgICByZXN1bHQubGVuZ3RoID0gbjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRzb21lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLnNvbWU7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG5cbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnc29tZScpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnNvbWVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc29tZVxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIVNUUklDVF9NRVRIT0QgfSwge1xuICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRzb21lKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgZGVsZXRlUHJvcGVydHlPclRocm93ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlbGV0ZS1wcm9wZXJ0eS1vci10aHJvdycpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaW50ZXJuYWxTb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNvcnQnKTtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcbnZhciBGRiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtZmYtdmVyc2lvbicpO1xudmFyIElFX09SX0VER0UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWllLW9yLWVkZ2UnKTtcbnZhciBWOCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xudmFyIFdFQktJVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtd2Via2l0LXZlcnNpb24nKTtcblxudmFyIHRlc3QgPSBbXTtcbnZhciBuYXRpdmVTb3J0ID0gdW5jdXJyeVRoaXModGVzdC5zb3J0KTtcbnZhciBwdXNoID0gdW5jdXJyeVRoaXModGVzdC5wdXNoKTtcblxuLy8gSUU4LVxudmFyIEZBSUxTX09OX1VOREVGSU5FRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdGVzdC5zb3J0KHVuZGVmaW5lZCk7XG59KTtcbi8vIFY4IGJ1Z1xudmFyIEZBSUxTX09OX05VTEwgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHRlc3Quc29ydChudWxsKTtcbn0pO1xuLy8gT2xkIFdlYktpdFxudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdzb3J0Jyk7XG5cbnZhciBTVEFCTEVfU09SVCA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGZlYXR1cmUgZGV0ZWN0aW9uIGNhbiBiZSB0b28gc2xvdywgc28gY2hlY2sgZW5naW5lcyB2ZXJzaW9uc1xuICBpZiAoVjgpIHJldHVybiBWOCA8IDcwO1xuICBpZiAoRkYgJiYgRkYgPiAzKSByZXR1cm47XG4gIGlmIChJRV9PUl9FREdFKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKFdFQktJVCkgcmV0dXJuIFdFQktJVCA8IDYwMztcblxuICB2YXIgcmVzdWx0ID0gJyc7XG4gIHZhciBjb2RlLCBjaHIsIHZhbHVlLCBpbmRleDtcblxuICAvLyBnZW5lcmF0ZSBhbiBhcnJheSB3aXRoIG1vcmUgNTEyIGVsZW1lbnRzIChDaGFrcmEgYW5kIG9sZCBWOCBmYWlscyBvbmx5IGluIHRoaXMgY2FzZSlcbiAgZm9yIChjb2RlID0gNjU7IGNvZGUgPCA3NjsgY29kZSsrKSB7XG4gICAgY2hyID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcblxuICAgIHN3aXRjaCAoY29kZSkge1xuICAgICAgY2FzZSA2NjogY2FzZSA2OTogY2FzZSA3MDogY2FzZSA3MjogdmFsdWUgPSAzOyBicmVhaztcbiAgICAgIGNhc2UgNjg6IGNhc2UgNzE6IHZhbHVlID0gNDsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiB2YWx1ZSA9IDI7XG4gICAgfVxuXG4gICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgNDc7IGluZGV4KyspIHtcbiAgICAgIHRlc3QucHVzaCh7IGs6IGNociArIGluZGV4LCB2OiB2YWx1ZSB9KTtcbiAgICB9XG4gIH1cblxuICB0ZXN0LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGIudiAtIGEudjsgfSk7XG5cbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgdGVzdC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICBjaHIgPSB0ZXN0W2luZGV4XS5rLmNoYXJBdCgwKTtcbiAgICBpZiAocmVzdWx0LmNoYXJBdChyZXN1bHQubGVuZ3RoIC0gMSkgIT09IGNocikgcmVzdWx0ICs9IGNocjtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQgIT09ICdER0JFRkhBQ0lKSyc7XG59KTtcblxudmFyIEZPUkNFRCA9IEZBSUxTX09OX1VOREVGSU5FRCB8fCAhRkFJTFNfT05fTlVMTCB8fCAhU1RSSUNUX01FVEhPRCB8fCAhU1RBQkxFX1NPUlQ7XG5cbnZhciBnZXRTb3J0Q29tcGFyZSA9IGZ1bmN0aW9uIChjb21wYXJlZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgaWYgKHkgPT09IHVuZGVmaW5lZCkgcmV0dXJuIC0xO1xuICAgIGlmICh4ID09PSB1bmRlZmluZWQpIHJldHVybiAxO1xuICAgIGlmIChjb21wYXJlZm4gIT09IHVuZGVmaW5lZCkgcmV0dXJuICtjb21wYXJlZm4oeCwgeSkgfHwgMDtcbiAgICByZXR1cm4gdG9TdHJpbmcoeCkgPiB0b1N0cmluZyh5KSA/IDEgOiAtMTtcbiAgfTtcbn07XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuc29ydGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb3J0XG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgIGlmIChjb21wYXJlZm4gIT09IHVuZGVmaW5lZCkgYUNhbGxhYmxlKGNvbXBhcmVmbik7XG5cbiAgICB2YXIgYXJyYXkgPSB0b09iamVjdCh0aGlzKTtcblxuICAgIGlmIChTVEFCTEVfU09SVCkgcmV0dXJuIGNvbXBhcmVmbiA9PT0gdW5kZWZpbmVkID8gbmF0aXZlU29ydChhcnJheSkgOiBuYXRpdmVTb3J0KGFycmF5LCBjb21wYXJlZm4pO1xuXG4gICAgdmFyIGl0ZW1zID0gW107XG4gICAgdmFyIGFycmF5TGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoYXJyYXkpO1xuICAgIHZhciBpdGVtc0xlbmd0aCwgaW5kZXg7XG5cbiAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBhcnJheUxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgaWYgKGluZGV4IGluIGFycmF5KSBwdXNoKGl0ZW1zLCBhcnJheVtpbmRleF0pO1xuICAgIH1cblxuICAgIGludGVybmFsU29ydChpdGVtcywgZ2V0U29ydENvbXBhcmUoY29tcGFyZWZuKSk7XG5cbiAgICBpdGVtc0xlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKGl0ZW1zKTtcbiAgICBpbmRleCA9IDA7XG5cbiAgICB3aGlsZSAoaW5kZXggPCBpdGVtc0xlbmd0aCkgYXJyYXlbaW5kZXhdID0gaXRlbXNbaW5kZXgrK107XG4gICAgd2hpbGUgKGluZGV4IDwgYXJyYXlMZW5ndGgpIGRlbGV0ZVByb3BlcnR5T3JUaHJvdyhhcnJheSwgaW5kZXgrKyk7XG5cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cbn0pO1xuIiwidmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcblxuLy8gYEFycmF5W0BAc3BlY2llc11gIGdldHRlclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtYXJyYXktQEBzcGVjaWVzXG5zZXRTcGVjaWVzKCdBcnJheScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBzZXRBcnJheUxlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zZXQtbGVuZ3RoJyk7XG52YXIgZG9lc05vdEV4Y2VlZFNhZmVJbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvZXMtbm90LWV4Y2VlZC1zYWZlLWludGVnZXInKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciBkZWxldGVQcm9wZXJ0eU9yVGhyb3cgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVsZXRlLXByb3BlcnR5LW9yLXRocm93Jyk7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xuXG52YXIgSEFTX1NQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ3NwbGljZScpO1xuXG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuc3BsaWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNwbGljZVxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIH0sIHtcbiAgc3BsaWNlOiBmdW5jdGlvbiBzcGxpY2Uoc3RhcnQsIGRlbGV0ZUNvdW50IC8qICwgLi4uaXRlbXMgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW4gPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgICB2YXIgYWN0dWFsU3RhcnQgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gICAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGluc2VydENvdW50LCBhY3R1YWxEZWxldGVDb3VudCwgQSwgaywgZnJvbSwgdG87XG4gICAgaWYgKGFyZ3VtZW50c0xlbmd0aCA9PT0gMCkge1xuICAgICAgaW5zZXJ0Q291bnQgPSBhY3R1YWxEZWxldGVDb3VudCA9IDA7XG4gICAgfSBlbHNlIGlmIChhcmd1bWVudHNMZW5ndGggPT09IDEpIHtcbiAgICAgIGluc2VydENvdW50ID0gMDtcbiAgICAgIGFjdHVhbERlbGV0ZUNvdW50ID0gbGVuIC0gYWN0dWFsU3RhcnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc2VydENvdW50ID0gYXJndW1lbnRzTGVuZ3RoIC0gMjtcbiAgICAgIGFjdHVhbERlbGV0ZUNvdW50ID0gbWluKG1heCh0b0ludGVnZXJPckluZmluaXR5KGRlbGV0ZUNvdW50KSwgMCksIGxlbiAtIGFjdHVhbFN0YXJ0KTtcbiAgICB9XG4gICAgZG9lc05vdEV4Y2VlZFNhZmVJbnRlZ2VyKGxlbiArIGluc2VydENvdW50IC0gYWN0dWFsRGVsZXRlQ291bnQpO1xuICAgIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgYWN0dWFsRGVsZXRlQ291bnQpO1xuICAgIGZvciAoayA9IDA7IGsgPCBhY3R1YWxEZWxldGVDb3VudDsgaysrKSB7XG4gICAgICBmcm9tID0gYWN0dWFsU3RhcnQgKyBrO1xuICAgICAgaWYgKGZyb20gaW4gTykgY3JlYXRlUHJvcGVydHkoQSwgaywgT1tmcm9tXSk7XG4gICAgfVxuICAgIEEubGVuZ3RoID0gYWN0dWFsRGVsZXRlQ291bnQ7XG4gICAgaWYgKGluc2VydENvdW50IDwgYWN0dWFsRGVsZXRlQ291bnQpIHtcbiAgICAgIGZvciAoayA9IGFjdHVhbFN0YXJ0OyBrIDwgbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQ7IGsrKykge1xuICAgICAgICBmcm9tID0gayArIGFjdHVhbERlbGV0ZUNvdW50O1xuICAgICAgICB0byA9IGsgKyBpbnNlcnRDb3VudDtcbiAgICAgICAgaWYgKGZyb20gaW4gTykgT1t0b10gPSBPW2Zyb21dO1xuICAgICAgICBlbHNlIGRlbGV0ZVByb3BlcnR5T3JUaHJvdyhPLCB0byk7XG4gICAgICB9XG4gICAgICBmb3IgKGsgPSBsZW47IGsgPiBsZW4gLSBhY3R1YWxEZWxldGVDb3VudCArIGluc2VydENvdW50OyBrLS0pIGRlbGV0ZVByb3BlcnR5T3JUaHJvdyhPLCBrIC0gMSk7XG4gICAgfSBlbHNlIGlmIChpbnNlcnRDb3VudCA+IGFjdHVhbERlbGV0ZUNvdW50KSB7XG4gICAgICBmb3IgKGsgPSBsZW4gLSBhY3R1YWxEZWxldGVDb3VudDsgayA+IGFjdHVhbFN0YXJ0OyBrLS0pIHtcbiAgICAgICAgZnJvbSA9IGsgKyBhY3R1YWxEZWxldGVDb3VudCAtIDE7XG4gICAgICAgIHRvID0gayArIGluc2VydENvdW50IC0gMTtcbiAgICAgICAgaWYgKGZyb20gaW4gTykgT1t0b10gPSBPW2Zyb21dO1xuICAgICAgICBlbHNlIGRlbGV0ZVByb3BlcnR5T3JUaHJvdyhPLCB0byk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoayA9IDA7IGsgPCBpbnNlcnRDb3VudDsgaysrKSB7XG4gICAgICBPW2sgKyBhY3R1YWxTdGFydF0gPSBhcmd1bWVudHNbayArIDJdO1xuICAgIH1cbiAgICBzZXRBcnJheUxlbmd0aChPLCBsZW4gLSBhY3R1YWxEZWxldGVDb3VudCArIGluc2VydENvdW50KTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG4iLCIvLyB0aGlzIG1ldGhvZCB3YXMgYWRkZWQgdG8gdW5zY29wYWJsZXMgYWZ0ZXIgaW1wbGVtZW50YXRpb25cbi8vIGluIHBvcHVsYXIgZW5naW5lcywgc28gaXQncyBtb3ZlZCB0byBhIHNlcGFyYXRlIG1vZHVsZVxudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2ZsYXRNYXAnKTtcbiIsIi8vIHRoaXMgbWV0aG9kIHdhcyBhZGRlZCB0byB1bnNjb3BhYmxlcyBhZnRlciBpbXBsZW1lbnRhdGlvblxuLy8gaW4gcG9wdWxhciBlbmdpbmVzLCBzbyBpdCdzIG1vdmVkIHRvIGEgc2VwYXJhdGUgbW9kdWxlXG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcygnZmxhdCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBzZXRBcnJheUxlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zZXQtbGVuZ3RoJyk7XG52YXIgZGVsZXRlUHJvcGVydHlPclRocm93ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlbGV0ZS1wcm9wZXJ0eS1vci10aHJvdycpO1xudmFyIGRvZXNOb3RFeGNlZWRTYWZlSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2VzLW5vdC1leGNlZWQtc2FmZS1pbnRlZ2VyJyk7XG5cbi8vIElFOC1cbnZhciBJTkNPUlJFQ1RfUkVTVUxUID0gW10udW5zaGlmdCgwKSAhPT0gMTtcblxuLy8gVjggfiBDaHJvbWUgPCA3MSBhbmQgU2FmYXJpIDw9IDE1LjQsIEZGIDwgMjMgdGhyb3dzIEludGVybmFsRXJyb3JcbnZhciBTSUxFTlRfT05fTk9OX1dSSVRBQkxFX0xFTkdUSCA9ICFmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoW10sICdsZW5ndGgnLCB7IHdyaXRhYmxlOiBmYWxzZSB9KS51bnNoaWZ0KCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIGVycm9yIGluc3RhbmNlb2YgVHlwZUVycm9yO1xuICB9XG59KCk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUudW5zaGlmdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS51bnNoaWZ0XG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgYXJpdHk6IDEsIGZvcmNlZDogSU5DT1JSRUNUX1JFU1VMVCB8fCBTSUxFTlRfT05fTk9OX1dSSVRBQkxFX0xFTkdUSCB9LCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIHVuc2hpZnQ6IGZ1bmN0aW9uIHVuc2hpZnQoaXRlbSkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbiA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICAgIHZhciBhcmdDb3VudCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgaWYgKGFyZ0NvdW50KSB7XG4gICAgICBkb2VzTm90RXhjZWVkU2FmZUludGVnZXIobGVuICsgYXJnQ291bnQpO1xuICAgICAgdmFyIGsgPSBsZW47XG4gICAgICB3aGlsZSAoay0tKSB7XG4gICAgICAgIHZhciB0byA9IGsgKyBhcmdDb3VudDtcbiAgICAgICAgaWYgKGsgaW4gTykgT1t0b10gPSBPW2tdO1xuICAgICAgICBlbHNlIGRlbGV0ZVByb3BlcnR5T3JUaHJvdyhPLCB0byk7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGFyZ0NvdW50OyBqKyspIHtcbiAgICAgICAgT1tqXSA9IGFyZ3VtZW50c1tqXTtcbiAgICAgIH1cbiAgICB9IHJldHVybiBzZXRBcnJheUxlbmd0aChPLCBsZW4gKyBhcmdDb3VudCk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgQXJyYXlCdWZmZXJNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyJyk7XG52YXIgTkFUSVZFX0FSUkFZX0JVRkZFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItYmFzaWMtZGV0ZWN0aW9uJyk7XG5cbi8vIGBEYXRhVmlld2AgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0YXZpZXctY29uc3RydWN0b3JcbiQoeyBnbG9iYWw6IHRydWUsIGNvbnN0cnVjdG9yOiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfQVJSQVlfQlVGRkVSIH0sIHtcbiAgRGF0YVZpZXc6IEFycmF5QnVmZmVyTW9kdWxlLkRhdGFWaWV3XG59KTtcbiIsIi8vIFRPRE86IFJlbW92ZSB0aGlzIG1vZHVsZSBmcm9tIGBjb3JlLWpzQDRgIHNpbmNlIGl0J3MgcmVwbGFjZWQgdG8gbW9kdWxlIGJlbG93XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmRhdGEtdmlldy5jb25zdHJ1Y3RvcicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKDE2ZTExKS5nZXRZZWFyKCkgIT09IDEyMDtcbn0pO1xuXG52YXIgZ2V0RnVsbFllYXIgPSB1bmN1cnJ5VGhpcyhEYXRlLnByb3RvdHlwZS5nZXRGdWxsWWVhcik7XG5cbi8vIGBEYXRlLnByb3RvdHlwZS5nZXRZZWFyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0ZS5wcm90b3R5cGUuZ2V0eWVhclxuJCh7IHRhcmdldDogJ0RhdGUnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBnZXRZZWFyOiBmdW5jdGlvbiBnZXRZZWFyKCkge1xuICAgIHJldHVybiBnZXRGdWxsWWVhcih0aGlzKSAtIDE5MDA7XG4gIH1cbn0pO1xuIiwiLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG52YXIgJERhdGUgPSBEYXRlO1xudmFyIHRoaXNUaW1lVmFsdWUgPSB1bmN1cnJ5VGhpcygkRGF0ZS5wcm90b3R5cGUuZ2V0VGltZSk7XG5cbi8vIGBEYXRlLm5vd2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWRhdGUubm93XG4kKHsgdGFyZ2V0OiAnRGF0ZScsIHN0YXQ6IHRydWUgfSwge1xuICBub3c6IGZ1bmN0aW9uIG5vdygpIHtcbiAgICByZXR1cm4gdGhpc1RpbWVWYWx1ZShuZXcgJERhdGUoKSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG5cbnZhciBEYXRlUHJvdG90eXBlID0gRGF0ZS5wcm90b3R5cGU7XG52YXIgdGhpc1RpbWVWYWx1ZSA9IHVuY3VycnlUaGlzKERhdGVQcm90b3R5cGUuZ2V0VGltZSk7XG52YXIgc2V0RnVsbFllYXIgPSB1bmN1cnJ5VGhpcyhEYXRlUHJvdG90eXBlLnNldEZ1bGxZZWFyKTtcblxuLy8gYERhdGUucHJvdG90eXBlLnNldFllYXJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS5zZXR5ZWFyXG4kKHsgdGFyZ2V0OiAnRGF0ZScsIHByb3RvOiB0cnVlIH0sIHtcbiAgc2V0WWVhcjogZnVuY3Rpb24gc2V0WWVhcih5ZWFyKSB7XG4gICAgLy8gdmFsaWRhdGVcbiAgICB0aGlzVGltZVZhbHVlKHRoaXMpO1xuICAgIHZhciB5aSA9IHRvSW50ZWdlck9ySW5maW5pdHkoeWVhcik7XG4gICAgdmFyIHl5eXkgPSAwIDw9IHlpICYmIHlpIDw9IDk5ID8geWkgKyAxOTAwIDogeWk7XG4gICAgcmV0dXJuIHNldEZ1bGxZZWFyKHRoaXMsIHl5eXkpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBgRGF0ZS5wcm90b3R5cGUudG9HTVRTdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS50b2dtdHN0cmluZ1xuJCh7IHRhcmdldDogJ0RhdGUnLCBwcm90bzogdHJ1ZSB9LCB7XG4gIHRvR01UU3RyaW5nOiBEYXRlLnByb3RvdHlwZS50b1VUQ1N0cmluZ1xufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0b0lTT1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kYXRlLXRvLWlzby1zdHJpbmcnKTtcblxuLy8gYERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0ZS5wcm90b3R5cGUudG9pc29zdHJpbmdcbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xuJCh7IHRhcmdldDogJ0RhdGUnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZyAhPT0gdG9JU09TdHJpbmcgfSwge1xuICB0b0lTT1N0cmluZzogdG9JU09TdHJpbmdcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcblxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKE5hTikudG9KU09OKCkgIT09IG51bGxcbiAgICB8fCBEYXRlLnByb3RvdHlwZS50b0pTT04uY2FsbCh7IHRvSVNPU3RyaW5nOiBmdW5jdGlvbiAoKSB7IHJldHVybiAxOyB9IH0pICE9PSAxO1xufSk7XG5cbi8vIGBEYXRlLnByb3RvdHlwZS50b0pTT05gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS50b2pzb25cbiQoeyB0YXJnZXQ6ICdEYXRlJywgcHJvdG86IHRydWUsIGFyaXR5OiAxLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKGtleSkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHB2ID0gdG9QcmltaXRpdmUoTywgJ251bWJlcicpO1xuICAgIHJldHVybiB0eXBlb2YgcHYgPT0gJ251bWJlcicgJiYgIWlzRmluaXRlKHB2KSA/IG51bGwgOiBPLnRvSVNPU3RyaW5nKCk7XG4gIH1cbn0pO1xuIiwidmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciBkYXRlVG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGF0ZS10by1wcmltaXRpdmUnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1BSSU1JVElWRSA9IHdlbGxLbm93blN5bWJvbCgndG9QcmltaXRpdmUnKTtcbnZhciBEYXRlUHJvdG90eXBlID0gRGF0ZS5wcm90b3R5cGU7XG5cbi8vIGBEYXRlLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWRhdGUucHJvdG90eXBlLUBAdG9wcmltaXRpdmVcbmlmICghaGFzT3duKERhdGVQcm90b3R5cGUsIFRPX1BSSU1JVElWRSkpIHtcbiAgZGVmaW5lQnVpbHRJbihEYXRlUHJvdG90eXBlLCBUT19QUklNSVRJVkUsIGRhdGVUb1ByaW1pdGl2ZSk7XG59XG4iLCIvLyBUT0RPOiBSZW1vdmUgZnJvbSBgY29yZS1qc0A0YFxudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG5cbnZhciBEYXRlUHJvdG90eXBlID0gRGF0ZS5wcm90b3R5cGU7XG52YXIgSU5WQUxJRF9EQVRFID0gJ0ludmFsaWQgRGF0ZSc7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciBuYXRpdmVEYXRlVG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyhEYXRlUHJvdG90eXBlW1RPX1NUUklOR10pO1xudmFyIHRoaXNUaW1lVmFsdWUgPSB1bmN1cnJ5VGhpcyhEYXRlUHJvdG90eXBlLmdldFRpbWUpO1xuXG4vLyBgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS50b3N0cmluZ1xuaWYgKFN0cmluZyhuZXcgRGF0ZShOYU4pKSAhPSBJTlZBTElEX0RBVEUpIHtcbiAgZGVmaW5lQnVpbHRJbihEYXRlUHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXNUaW1lVmFsdWUodGhpcyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gbmF0aXZlRGF0ZVRvU3RyaW5nKHRoaXMpIDogSU5WQUxJRF9EQVRFO1xuICB9KTtcbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBmdW5jdGlvbnMgYC5sZW5ndGhgICovXG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciB3cmFwRXJyb3JDb25zdHJ1Y3RvcldpdGhDYXVzZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93cmFwLWVycm9yLWNvbnN0cnVjdG9yLXdpdGgtY2F1c2UnKTtcblxudmFyIFdFQl9BU1NFTUJMWSA9ICdXZWJBc3NlbWJseSc7XG52YXIgV2ViQXNzZW1ibHkgPSBnbG9iYWxbV0VCX0FTU0VNQkxZXTtcblxudmFyIEZPUkNFRCA9IEVycm9yKCdlJywgeyBjYXVzZTogNyB9KS5jYXVzZSAhPT0gNztcblxudmFyIGV4cG9ydEdsb2JhbEVycm9yQ2F1c2VXcmFwcGVyID0gZnVuY3Rpb24gKEVSUk9SX05BTUUsIHdyYXBwZXIpIHtcbiAgdmFyIE8gPSB7fTtcbiAgT1tFUlJPUl9OQU1FXSA9IHdyYXBFcnJvckNvbnN0cnVjdG9yV2l0aENhdXNlKEVSUk9SX05BTUUsIHdyYXBwZXIsIEZPUkNFRCk7XG4gICQoeyBnbG9iYWw6IHRydWUsIGNvbnN0cnVjdG9yOiB0cnVlLCBhcml0eTogMSwgZm9yY2VkOiBGT1JDRUQgfSwgTyk7XG59O1xuXG52YXIgZXhwb3J0V2ViQXNzZW1ibHlFcnJvckNhdXNlV3JhcHBlciA9IGZ1bmN0aW9uIChFUlJPUl9OQU1FLCB3cmFwcGVyKSB7XG4gIGlmIChXZWJBc3NlbWJseSAmJiBXZWJBc3NlbWJseVtFUlJPUl9OQU1FXSkge1xuICAgIHZhciBPID0ge307XG4gICAgT1tFUlJPUl9OQU1FXSA9IHdyYXBFcnJvckNvbnN0cnVjdG9yV2l0aENhdXNlKFdFQl9BU1NFTUJMWSArICcuJyArIEVSUk9SX05BTUUsIHdyYXBwZXIsIEZPUkNFRCk7XG4gICAgJCh7IHRhcmdldDogV0VCX0FTU0VNQkxZLCBzdGF0OiB0cnVlLCBjb25zdHJ1Y3RvcjogdHJ1ZSwgYXJpdHk6IDEsIGZvcmNlZDogRk9SQ0VEIH0sIE8pO1xuICB9XG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1lcnJvci1jYXVzZVxuZXhwb3J0R2xvYmFsRXJyb3JDYXVzZVdyYXBwZXIoJ0Vycm9yJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEVycm9yKG1lc3NhZ2UpIHsgcmV0dXJuIGFwcGx5KGluaXQsIHRoaXMsIGFyZ3VtZW50cyk7IH07XG59KTtcbmV4cG9ydEdsb2JhbEVycm9yQ2F1c2VXcmFwcGVyKCdFdmFsRXJyb3InLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRXZhbEVycm9yKG1lc3NhZ2UpIHsgcmV0dXJuIGFwcGx5KGluaXQsIHRoaXMsIGFyZ3VtZW50cyk7IH07XG59KTtcbmV4cG9ydEdsb2JhbEVycm9yQ2F1c2VXcmFwcGVyKCdSYW5nZUVycm9yJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFJhbmdlRXJyb3IobWVzc2FnZSkgeyByZXR1cm4gYXBwbHkoaW5pdCwgdGhpcywgYXJndW1lbnRzKTsgfTtcbn0pO1xuZXhwb3J0R2xvYmFsRXJyb3JDYXVzZVdyYXBwZXIoJ1JlZmVyZW5jZUVycm9yJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFJlZmVyZW5jZUVycm9yKG1lc3NhZ2UpIHsgcmV0dXJuIGFwcGx5KGluaXQsIHRoaXMsIGFyZ3VtZW50cyk7IH07XG59KTtcbmV4cG9ydEdsb2JhbEVycm9yQ2F1c2VXcmFwcGVyKCdTeW50YXhFcnJvcicsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBTeW50YXhFcnJvcihtZXNzYWdlKSB7IHJldHVybiBhcHBseShpbml0LCB0aGlzLCBhcmd1bWVudHMpOyB9O1xufSk7XG5leHBvcnRHbG9iYWxFcnJvckNhdXNlV3JhcHBlcignVHlwZUVycm9yJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFR5cGVFcnJvcihtZXNzYWdlKSB7IHJldHVybiBhcHBseShpbml0LCB0aGlzLCBhcmd1bWVudHMpOyB9O1xufSk7XG5leHBvcnRHbG9iYWxFcnJvckNhdXNlV3JhcHBlcignVVJJRXJyb3InLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVVJJRXJyb3IobWVzc2FnZSkgeyByZXR1cm4gYXBwbHkoaW5pdCwgdGhpcywgYXJndW1lbnRzKTsgfTtcbn0pO1xuZXhwb3J0V2ViQXNzZW1ibHlFcnJvckNhdXNlV3JhcHBlcignQ29tcGlsZUVycm9yJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIENvbXBpbGVFcnJvcihtZXNzYWdlKSB7IHJldHVybiBhcHBseShpbml0LCB0aGlzLCBhcmd1bWVudHMpOyB9O1xufSk7XG5leHBvcnRXZWJBc3NlbWJseUVycm9yQ2F1c2VXcmFwcGVyKCdMaW5rRXJyb3InLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gTGlua0Vycm9yKG1lc3NhZ2UpIHsgcmV0dXJuIGFwcGx5KGluaXQsIHRoaXMsIGFyZ3VtZW50cyk7IH07XG59KTtcbmV4cG9ydFdlYkFzc2VtYmx5RXJyb3JDYXVzZVdyYXBwZXIoJ1J1bnRpbWVFcnJvcicsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBSdW50aW1lRXJyb3IobWVzc2FnZSkgeyByZXR1cm4gYXBwbHkoaW5pdCwgdGhpcywgYXJndW1lbnRzKTsgfTtcbn0pO1xuIiwidmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgZXJyb3JUb1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lcnJvci10by1zdHJpbmcnKTtcblxudmFyIEVycm9yUHJvdG90eXBlID0gRXJyb3IucHJvdG90eXBlO1xuXG4vLyBgRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2QgZml4XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWVycm9yLnByb3RvdHlwZS50b3N0cmluZ1xuaWYgKEVycm9yUHJvdG90eXBlLnRvU3RyaW5nICE9PSBlcnJvclRvU3RyaW5nKSB7XG4gIGRlZmluZUJ1aWx0SW4oRXJyb3JQcm90b3R5cGUsICd0b1N0cmluZycsIGVycm9yVG9TdHJpbmcpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG5cbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIGNoYXJDb2RlQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQ29kZUF0KTtcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoLy4vLmV4ZWMpO1xudmFyIG51bWJlclRvU3RyaW5nID0gdW5jdXJyeVRoaXMoMS4wLnRvU3RyaW5nKTtcbnZhciB0b1VwcGVyQ2FzZSA9IHVuY3VycnlUaGlzKCcnLnRvVXBwZXJDYXNlKTtcblxudmFyIHJhdyA9IC9bXFx3KitcXC0uL0BdLztcblxudmFyIGhleCA9IGZ1bmN0aW9uIChjb2RlLCBsZW5ndGgpIHtcbiAgdmFyIHJlc3VsdCA9IG51bWJlclRvU3RyaW5nKGNvZGUsIDE2KTtcbiAgd2hpbGUgKHJlc3VsdC5sZW5ndGggPCBsZW5ndGgpIHJlc3VsdCA9ICcwJyArIHJlc3VsdDtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIGBlc2NhcGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1lc2NhcGUtc3RyaW5nXG4kKHsgZ2xvYmFsOiB0cnVlIH0sIHtcbiAgZXNjYXBlOiBmdW5jdGlvbiBlc2NhcGUoc3RyaW5nKSB7XG4gICAgdmFyIHN0ciA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgIHZhciBsZW5ndGggPSBzdHIubGVuZ3RoO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGNociwgY29kZTtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGNociA9IGNoYXJBdChzdHIsIGluZGV4KyspO1xuICAgICAgaWYgKGV4ZWMocmF3LCBjaHIpKSB7XG4gICAgICAgIHJlc3VsdCArPSBjaHI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb2RlID0gY2hhckNvZGVBdChjaHIsIDApO1xuICAgICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICAgIHJlc3VsdCArPSAnJScgKyBoZXgoY29kZSwgMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ICs9ICcldScgKyB0b1VwcGVyQ2FzZShoZXgoY29kZSwgNCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgXG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQnKTtcblxuLy8gYEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbiQoeyB0YXJnZXQ6ICdGdW5jdGlvbicsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZ1bmN0aW9uLmJpbmQgIT09IGJpbmQgfSwge1xuICBiaW5kOiBiaW5kXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgbWFrZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWFrZS1idWlsdC1pbicpO1xuXG52YXIgSEFTX0lOU1RBTkNFID0gd2VsbEtub3duU3ltYm9sKCdoYXNJbnN0YW5jZScpO1xudmFyIEZ1bmN0aW9uUHJvdG90eXBlID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG4vLyBgRnVuY3Rpb24ucHJvdG90eXBlW0BAaGFzSW5zdGFuY2VdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZnVuY3Rpb24ucHJvdG90eXBlLUBAaGFzaW5zdGFuY2VcbmlmICghKEhBU19JTlNUQU5DRSBpbiBGdW5jdGlvblByb3RvdHlwZSkpIHtcbiAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihGdW5jdGlvblByb3RvdHlwZSwgSEFTX0lOU1RBTkNFLCB7IHZhbHVlOiBtYWtlQnVpbHRJbihmdW5jdGlvbiAoTykge1xuICAgIGlmICghaXNDYWxsYWJsZSh0aGlzKSB8fCAhaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcbiAgICB2YXIgUCA9IHRoaXMucHJvdG90eXBlO1xuICAgIGlmICghaXNPYmplY3QoUCkpIHJldHVybiBPIGluc3RhbmNlb2YgdGhpcztcbiAgICAvLyBmb3IgZW52aXJvbm1lbnQgdy9vIG5hdGl2ZSBgQEBoYXNJbnN0YW5jZWAgbG9naWMgZW5vdWdoIGBpbnN0YW5jZW9mYCwgYnV0IGFkZCB0aGlzOlxuICAgIHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpIGlmIChQID09PSBPKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sIEhBU19JTlNUQU5DRSkgfSk7XG59XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBGVU5DVElPTl9OQU1FX0VYSVNUUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1uYW1lJykuRVhJU1RTO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgZnVuY3Rpb25Ub1N0cmluZyA9IHVuY3VycnlUaGlzKEZ1bmN0aW9uUHJvdG90eXBlLnRvU3RyaW5nKTtcbnZhciBuYW1lUkUgPSAvZnVuY3Rpb25cXGIoPzpcXHN8XFwvXFwqW1xcU1xcc10qP1xcKlxcL3xcXC9cXC9bXlxcblxccl0qW1xcblxccl0rKSooW15cXHMoL10qKS87XG52YXIgcmVnRXhwRXhlYyA9IHVuY3VycnlUaGlzKG5hbWVSRS5leGVjKTtcbnZhciBOQU1FID0gJ25hbWUnO1xuXG4vLyBGdW5jdGlvbiBpbnN0YW5jZXMgYC5uYW1lYCBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1mdW5jdGlvbi1pbnN0YW5jZXMtbmFtZVxuaWYgKERFU0NSSVBUT1JTICYmICFGVU5DVElPTl9OQU1FX0VYSVNUUykge1xuICBkZWZpbmVQcm9wZXJ0eShGdW5jdGlvblByb3RvdHlwZSwgTkFNRSwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiByZWdFeHBFeGVjKG5hbWVSRSwgZnVuY3Rpb25Ub1N0cmluZyh0aGlzKSlbMV07XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxuLy8gYGdsb2JhbFRoaXNgIG9iamVjdFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nbG9iYWx0aGlzXG4kKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6IGdsb2JhbC5nbG9iYWxUaGlzICE9PSBnbG9iYWwgfSwge1xuICBnbG9iYWxUaGlzOiBnbG9iYWxcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1zeW1ib2wnKTtcbnZhciBhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtY29uc3RydWN0b3ItZGV0ZWN0aW9uJyk7XG5cbnZhciAkc3RyaW5naWZ5ID0gZ2V0QnVpbHRJbignSlNPTicsICdzdHJpbmdpZnknKTtcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoLy4vLmV4ZWMpO1xudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgY2hhckNvZGVBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJDb2RlQXQpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBudW1iZXJUb1N0cmluZyA9IHVuY3VycnlUaGlzKDEuMC50b1N0cmluZyk7XG5cbnZhciB0ZXN0ZXIgPSAvW1xcdUQ4MDAtXFx1REZGRl0vZztcbnZhciBsb3cgPSAvXltcXHVEODAwLVxcdURCRkZdJC87XG52YXIgaGkgPSAvXltcXHVEQzAwLVxcdURGRkZdJC87XG5cbnZhciBXUk9OR19TWU1CT0xTX0NPTlZFUlNJT04gPSAhTkFUSVZFX1NZTUJPTCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBzeW1ib2wgPSBnZXRCdWlsdEluKCdTeW1ib2wnKSgpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICByZXR1cm4gJHN0cmluZ2lmeShbc3ltYm9sXSkgIT0gJ1tudWxsXSdcbiAgICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgICB8fCAkc3RyaW5naWZ5KHsgYTogc3ltYm9sIH0pICE9ICd7fSdcbiAgICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICAgIHx8ICRzdHJpbmdpZnkoT2JqZWN0KHN5bWJvbCkpICE9ICd7fSc7XG59KTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtd2VsbC1mb3JtZWQtc3RyaW5naWZ5XG52YXIgSUxMX0ZPUk1FRF9VTklDT0RFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJHN0cmluZ2lmeSgnXFx1REYwNlxcdUQ4MzQnKSAhPT0gJ1wiXFxcXHVkZjA2XFxcXHVkODM0XCInXG4gICAgfHwgJHN0cmluZ2lmeSgnXFx1REVBRCcpICE9PSAnXCJcXFxcdWRlYWRcIic7XG59KTtcblxudmFyIHN0cmluZ2lmeVdpdGhTeW1ib2xzRml4ID0gZnVuY3Rpb24gKGl0LCByZXBsYWNlcikge1xuICB2YXIgYXJncyA9IGFycmF5U2xpY2UoYXJndW1lbnRzKTtcbiAgdmFyICRyZXBsYWNlciA9IHJlcGxhY2VyO1xuICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gIGlmICghaXNBcnJheShyZXBsYWNlcikpIHJlcGxhY2VyID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICBpZiAoaXNDYWxsYWJsZSgkcmVwbGFjZXIpKSB2YWx1ZSA9IGNhbGwoJHJlcGxhY2VyLCB0aGlzLCBrZXksIHZhbHVlKTtcbiAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICB9O1xuICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gIHJldHVybiBhcHBseSgkc3RyaW5naWZ5LCBudWxsLCBhcmdzKTtcbn07XG5cbnZhciBmaXhJbGxGb3JtZWQgPSBmdW5jdGlvbiAobWF0Y2gsIG9mZnNldCwgc3RyaW5nKSB7XG4gIHZhciBwcmV2ID0gY2hhckF0KHN0cmluZywgb2Zmc2V0IC0gMSk7XG4gIHZhciBuZXh0ID0gY2hhckF0KHN0cmluZywgb2Zmc2V0ICsgMSk7XG4gIGlmICgoZXhlYyhsb3csIG1hdGNoKSAmJiAhZXhlYyhoaSwgbmV4dCkpIHx8IChleGVjKGhpLCBtYXRjaCkgJiYgIWV4ZWMobG93LCBwcmV2KSkpIHtcbiAgICByZXR1cm4gJ1xcXFx1JyArIG51bWJlclRvU3RyaW5nKGNoYXJDb2RlQXQobWF0Y2gsIDApLCAxNik7XG4gIH0gcmV0dXJuIG1hdGNoO1xufTtcblxuaWYgKCRzdHJpbmdpZnkpIHtcbiAgLy8gYEpTT04uc3RyaW5naWZ5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1qc29uLnN0cmluZ2lmeVxuICAkKHsgdGFyZ2V0OiAnSlNPTicsIHN0YXQ6IHRydWUsIGFyaXR5OiAzLCBmb3JjZWQ6IFdST05HX1NZTUJPTFNfQ09OVkVSU0lPTiB8fCBJTExfRk9STUVEX1VOSUNPREUgfSwge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gICAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQsIHJlcGxhY2VyLCBzcGFjZSkge1xuICAgICAgdmFyIGFyZ3MgPSBhcnJheVNsaWNlKGFyZ3VtZW50cyk7XG4gICAgICB2YXIgcmVzdWx0ID0gYXBwbHkoV1JPTkdfU1lNQk9MU19DT05WRVJTSU9OID8gc3RyaW5naWZ5V2l0aFN5bWJvbHNGaXggOiAkc3RyaW5naWZ5LCBudWxsLCBhcmdzKTtcbiAgICAgIHJldHVybiBJTExfRk9STUVEX1VOSUNPREUgJiYgdHlwZW9mIHJlc3VsdCA9PSAnc3RyaW5nJyA/IHJlcGxhY2UocmVzdWx0LCB0ZXN0ZXIsIGZpeElsbEZvcm1lZCkgOiByZXN1bHQ7XG4gICAgfVxuICB9KTtcbn1cbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcblxuLy8gSlNPTltAQHRvU3RyaW5nVGFnXSBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1qc29uLUBAdG9zdHJpbmd0YWdcbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNvbGxlY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbicpO1xudmFyIGNvbGxlY3Rpb25TdHJvbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi1zdHJvbmcnKTtcblxuLy8gYE1hcGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLW9iamVjdHNcbmNvbGxlY3Rpb24oJ01hcCcsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBNYXAoKSB7IHJldHVybiBpbml0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwgY29sbGVjdGlvblN0cm9uZyk7XG4iLCIvLyBUT0RPOiBSZW1vdmUgdGhpcyBtb2R1bGUgZnJvbSBgY29yZS1qc0A0YCBzaW5jZSBpdCdzIHJlcGxhY2VkIHRvIG1vZHVsZSBiZWxvd1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXAuY29uc3RydWN0b3InKTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGxvZzFwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtbG9nMXAnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tbWF0aC1hY29zaCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xudmFyICRhY29zaCA9IE1hdGguYWNvc2g7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgc3FydCA9IE1hdGguc3FydDtcbnZhciBMTjIgPSBNYXRoLkxOMjtcblxudmFyIEZPUkNFRCA9ICEkYWNvc2hcbiAgLy8gVjggYnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzUwOVxuICB8fCBNYXRoLmZsb29yKCRhY29zaChOdW1iZXIuTUFYX1ZBTFVFKSkgIT0gNzEwXG4gIC8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hY29zaChJbmZpbml0eSkgLT4gTmFOXG4gIHx8ICRhY29zaChJbmZpbml0eSkgIT0gSW5maW5pdHk7XG5cbi8vIGBNYXRoLmFjb3NoYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5hY29zaFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIGFjb3NoOiBmdW5jdGlvbiBhY29zaCh4KSB7XG4gICAgdmFyIG4gPSAreDtcbiAgICByZXR1cm4gbiA8IDEgPyBOYU4gOiBuID4gOTQ5MDYyNjUuNjI0MjUxNTZcbiAgICAgID8gbG9nKG4pICsgTE4yXG4gICAgICA6IGxvZzFwKG4gLSAxICsgc3FydChuIC0gMSkgKiBzcXJ0KG4gKyAxKSk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW1hdGgtYXNpbmggLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciAkYXNpbmggPSBNYXRoLmFzaW5oO1xudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG5cbmZ1bmN0aW9uIGFzaW5oKHgpIHtcbiAgdmFyIG4gPSAreDtcbiAgcmV0dXJuICFpc0Zpbml0ZShuKSB8fCBuID09IDAgPyBuIDogbiA8IDAgPyAtYXNpbmgoLW4pIDogbG9nKG4gKyBzcXJ0KG4gKiBuICsgMSkpO1xufVxuXG4vLyBgTWF0aC5hc2luaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguYXNpbmhcbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hc2luaCgwKSAtPiAtMFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICEoJGFzaW5oICYmIDEgLyAkYXNpbmgoMCkgPiAwKSB9LCB7XG4gIGFzaW5oOiBhc2luaFxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tbWF0aC1hdGFuaCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xudmFyICRhdGFuaCA9IE1hdGguYXRhbmg7XG52YXIgbG9nID0gTWF0aC5sb2c7XG5cbi8vIGBNYXRoLmF0YW5oYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5hdGFuaFxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmF0YW5oKC0wKSAtPiAwXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogISgkYXRhbmggJiYgMSAvICRhdGFuaCgtMCkgPCAwKSB9LCB7XG4gIGF0YW5oOiBmdW5jdGlvbiBhdGFuaCh4KSB7XG4gICAgdmFyIG4gPSAreDtcbiAgICByZXR1cm4gbiA9PSAwID8gbiA6IGxvZygoMSArIG4pIC8gKDEgLSBuKSkgLyAyO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHNpZ24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC1zaWduJyk7XG5cbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBwb3cgPSBNYXRoLnBvdztcblxuLy8gYE1hdGguY2JydGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguY2JydFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHtcbiAgY2JydDogZnVuY3Rpb24gY2JydCh4KSB7XG4gICAgdmFyIG4gPSAreDtcbiAgICByZXR1cm4gc2lnbihuKSAqIHBvdyhhYnMobiksIDEgLyAzKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBMT0cyRSA9IE1hdGguTE9HMkU7XG5cbi8vIGBNYXRoLmNsejMyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5jbHozMlxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHtcbiAgY2x6MzI6IGZ1bmN0aW9uIGNsejMyKHgpIHtcbiAgICB2YXIgbiA9IHggPj4+IDA7XG4gICAgcmV0dXJuIG4gPyAzMSAtIGZsb29yKGxvZyhuICsgMC41KSAqIExPRzJFKSA6IDMyO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtZXhwbTEnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tbWF0aC1jb3NoIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG52YXIgJGNvc2ggPSBNYXRoLmNvc2g7XG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgRSA9IE1hdGguRTtcblxuLy8gYE1hdGguY29zaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguY29zaFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICEkY29zaCB8fCAkY29zaCg3MTApID09PSBJbmZpbml0eSB9LCB7XG4gIGNvc2g6IGZ1bmN0aW9uIGNvc2goeCkge1xuICAgIHZhciB0ID0gZXhwbTEoYWJzKHgpIC0gMSkgKyAxO1xuICAgIHJldHVybiAodCArIDEgLyAodCAqIEUgKiBFKSkgKiAoRSAvIDIpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtZXhwbTEnKTtcblxuLy8gYE1hdGguZXhwbTFgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmV4cG0xXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1tYXRoLWV4cG0xIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogZXhwbTEgIT0gTWF0aC5leHBtMSB9LCB7IGV4cG0xOiBleHBtMSB9KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZyb3VuZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLWZyb3VuZCcpO1xuXG4vLyBgTWF0aC5mcm91bmRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmZyb3VuZFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHsgZnJvdW5kOiBmcm91bmQgfSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tbWF0aC1oeXBvdCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xudmFyICRoeXBvdCA9IE1hdGguaHlwb3Q7XG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgc3FydCA9IE1hdGguc3FydDtcblxuLy8gQ2hyb21lIDc3IGJ1Z1xuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9OTU0NlxudmFyIEJVR0dZID0gISEkaHlwb3QgJiYgJGh5cG90KEluZmluaXR5LCBOYU4pICE9PSBJbmZpbml0eTtcblxuLy8gYE1hdGguaHlwb3RgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmh5cG90XG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGFyaXR5OiAyLCBmb3JjZWQ6IEJVR0dZIH0sIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgaHlwb3Q6IGZ1bmN0aW9uIGh5cG90KHZhbHVlMSwgdmFsdWUyKSB7XG4gICAgdmFyIHN1bSA9IDA7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbGFyZyA9IDA7XG4gICAgdmFyIGFyZywgZGl2O1xuICAgIHdoaWxlIChpIDwgYUxlbikge1xuICAgICAgYXJnID0gYWJzKGFyZ3VtZW50c1tpKytdKTtcbiAgICAgIGlmIChsYXJnIDwgYXJnKSB7XG4gICAgICAgIGRpdiA9IGxhcmcgLyBhcmc7XG4gICAgICAgIHN1bSA9IHN1bSAqIGRpdiAqIGRpdiArIDE7XG4gICAgICAgIGxhcmcgPSBhcmc7XG4gICAgICB9IGVsc2UgaWYgKGFyZyA+IDApIHtcbiAgICAgICAgZGl2ID0gYXJnIC8gbGFyZztcbiAgICAgICAgc3VtICs9IGRpdiAqIGRpdjtcbiAgICAgIH0gZWxzZSBzdW0gKz0gYXJnO1xuICAgIH1cbiAgICByZXR1cm4gbGFyZyA9PT0gSW5maW5pdHkgPyBJbmZpbml0eSA6IGxhcmcgKiBzcXJ0KHN1bSk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tbWF0aC1pbXVsIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG52YXIgJGltdWwgPSBNYXRoLmltdWw7XG5cbnZhciBGT1JDRUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkaW11bCgweEZGRkZGRkZGLCA1KSAhPSAtNSB8fCAkaW11bC5sZW5ndGggIT0gMjtcbn0pO1xuXG4vLyBgTWF0aC5pbXVsYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5pbXVsXG4vLyBzb21lIFdlYktpdCB2ZXJzaW9ucyBmYWlscyB3aXRoIGJpZyBudW1iZXJzLCBzb21lIGhhcyB3cm9uZyBhcml0eVxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIGltdWw6IGZ1bmN0aW9uIGltdWwoeCwgeSkge1xuICAgIHZhciBVSU5UMTYgPSAweEZGRkY7XG4gICAgdmFyIHhuID0gK3g7XG4gICAgdmFyIHluID0gK3k7XG4gICAgdmFyIHhsID0gVUlOVDE2ICYgeG47XG4gICAgdmFyIHlsID0gVUlOVDE2ICYgeW47XG4gICAgcmV0dXJuIDAgfCB4bCAqIHlsICsgKChVSU5UMTYgJiB4biA+Pj4gMTYpICogeWwgKyB4bCAqIChVSU5UMTYgJiB5biA+Pj4gMTYpIDw8IDE2ID4+PiAwKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBsb2cxMCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLWxvZzEwJyk7XG5cbi8vIGBNYXRoLmxvZzEwYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5sb2cxMFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHtcbiAgbG9nMTA6IGxvZzEwXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGxvZzFwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtbG9nMXAnKTtcblxuLy8gYE1hdGgubG9nMXBgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmxvZzFwXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwgeyBsb2cxcDogbG9nMXAgfSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIExOMiA9IE1hdGguTE4yO1xuXG4vLyBgTWF0aC5sb2cyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5sb2cyXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwge1xuICBsb2cyOiBmdW5jdGlvbiBsb2cyKHgpIHtcbiAgICByZXR1cm4gbG9nKHgpIC8gTE4yO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHNpZ24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC1zaWduJyk7XG5cbi8vIGBNYXRoLnNpZ25gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLnNpZ25cbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSB9LCB7XG4gIHNpZ246IHNpZ25cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLWV4cG0xJyk7XG5cbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBleHAgPSBNYXRoLmV4cDtcbnZhciBFID0gTWF0aC5FO1xuXG52YXIgRk9SQ0VEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1tYXRoLXNpbmggLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE1hdGguc2luaCgtMmUtMTcpICE9IC0yZS0xNztcbn0pO1xuXG4vLyBgTWF0aC5zaW5oYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5zaW5oXG4vLyBWOCBuZWFyIENocm9taXVtIDM4IGhhcyBhIHByb2JsZW0gd2l0aCB2ZXJ5IHNtYWxsIG51bWJlcnNcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBzaW5oOiBmdW5jdGlvbiBzaW5oKHgpIHtcbiAgICB2YXIgbiA9ICt4O1xuICAgIHJldHVybiBhYnMobikgPCAxID8gKGV4cG0xKG4pIC0gZXhwbTEoLW4pKSAvIDIgOiAoZXhwKG4gLSAxKSAtIGV4cCgtbiAtIDEpKSAqIChFIC8gMik7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC1leHBtMScpO1xuXG52YXIgZXhwID0gTWF0aC5leHA7XG5cbi8vIGBNYXRoLnRhbmhgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLnRhbmhcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSB9LCB7XG4gIHRhbmg6IGZ1bmN0aW9uIHRhbmgoeCkge1xuICAgIHZhciBuID0gK3g7XG4gICAgdmFyIGEgPSBleHBtMShuKTtcbiAgICB2YXIgYiA9IGV4cG0xKC1uKTtcbiAgICByZXR1cm4gYSA9PSBJbmZpbml0eSA/IDEgOiBiID09IEluZmluaXR5ID8gLTEgOiAoYSAtIGIpIC8gKGV4cChuKSArIGV4cCgtbikpO1xuICB9XG59KTtcbiIsInZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xuXG4vLyBNYXRoW0BAdG9TdHJpbmdUYWddIHByb3BlcnR5XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGgtQEB0b3N0cmluZ3RhZ1xuc2V0VG9TdHJpbmdUYWcoTWF0aCwgJ01hdGgnLCB0cnVlKTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHRydW5jID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtdHJ1bmMnKTtcblxuLy8gYE1hdGgudHJ1bmNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLnRydW5jXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwge1xuICB0cnVuYzogdHJ1bmNcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtc3ltYm9sJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJykuZjtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgdGhpc051bWJlclZhbHVlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RoaXMtbnVtYmVyLXZhbHVlJyk7XG52YXIgdHJpbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbScpLnRyaW07XG5cbnZhciBOVU1CRVIgPSAnTnVtYmVyJztcbnZhciBOYXRpdmVOdW1iZXIgPSBnbG9iYWxbTlVNQkVSXTtcbnZhciBOdW1iZXJQcm90b3R5cGUgPSBOYXRpdmVOdW1iZXIucHJvdG90eXBlO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgYXJyYXlTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbnZhciBjaGFyQ29kZUF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckNvZGVBdCk7XG5cbi8vIGBUb051bWVyaWNgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b251bWVyaWNcbnZhciB0b051bWVyaWMgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByaW1WYWx1ZSA9IHRvUHJpbWl0aXZlKHZhbHVlLCAnbnVtYmVyJyk7XG4gIHJldHVybiB0eXBlb2YgcHJpbVZhbHVlID09ICdiaWdpbnQnID8gcHJpbVZhbHVlIDogdG9OdW1iZXIocHJpbVZhbHVlKTtcbn07XG5cbi8vIGBUb051bWJlcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvbnVtYmVyXG52YXIgdG9OdW1iZXIgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIGl0ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsICdudW1iZXInKTtcbiAgdmFyIGZpcnN0LCB0aGlyZCwgcmFkaXgsIG1heENvZGUsIGRpZ2l0cywgbGVuZ3RoLCBpbmRleCwgY29kZTtcbiAgaWYgKGlzU3ltYm9sKGl0KSkgdGhyb3cgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCBhIFN5bWJvbCB2YWx1ZSB0byBhIG51bWJlcicpO1xuICBpZiAodHlwZW9mIGl0ID09ICdzdHJpbmcnICYmIGl0Lmxlbmd0aCA+IDIpIHtcbiAgICBpdCA9IHRyaW0oaXQpO1xuICAgIGZpcnN0ID0gY2hhckNvZGVBdChpdCwgMCk7XG4gICAgaWYgKGZpcnN0ID09PSA0MyB8fCBmaXJzdCA9PT0gNDUpIHtcbiAgICAgIHRoaXJkID0gY2hhckNvZGVBdChpdCwgMik7XG4gICAgICBpZiAodGhpcmQgPT09IDg4IHx8IHRoaXJkID09PSAxMjApIHJldHVybiBOYU47IC8vIE51bWJlcignKzB4MScpIHNob3VsZCBiZSBOYU4sIG9sZCBWOCBmaXhcbiAgICB9IGVsc2UgaWYgKGZpcnN0ID09PSA0OCkge1xuICAgICAgc3dpdGNoIChjaGFyQ29kZUF0KGl0LCAxKSkge1xuICAgICAgICBjYXNlIDY2OiBjYXNlIDk4OiByYWRpeCA9IDI7IG1heENvZGUgPSA0OTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgb2YgL14wYlswMV0rJC9pXG4gICAgICAgIGNhc2UgNzk6IGNhc2UgMTExOiByYWRpeCA9IDg7IG1heENvZGUgPSA1NTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgb2YgL14wb1swLTddKyQvaVxuICAgICAgICBkZWZhdWx0OiByZXR1cm4gK2l0O1xuICAgICAgfVxuICAgICAgZGlnaXRzID0gYXJyYXlTbGljZShpdCwgMik7XG4gICAgICBsZW5ndGggPSBkaWdpdHMubGVuZ3RoO1xuICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIGNvZGUgPSBjaGFyQ29kZUF0KGRpZ2l0cywgaW5kZXgpO1xuICAgICAgICAvLyBwYXJzZUludCBwYXJzZXMgYSBzdHJpbmcgdG8gYSBmaXJzdCB1bmF2YWlsYWJsZSBzeW1ib2xcbiAgICAgICAgLy8gYnV0IFRvTnVtYmVyIHNob3VsZCByZXR1cm4gTmFOIGlmIGEgc3RyaW5nIGNvbnRhaW5zIHVuYXZhaWxhYmxlIHN5bWJvbHNcbiAgICAgICAgaWYgKGNvZGUgPCA0OCB8fCBjb2RlID4gbWF4Q29kZSkgcmV0dXJuIE5hTjtcbiAgICAgIH0gcmV0dXJuIHBhcnNlSW50KGRpZ2l0cywgcmFkaXgpO1xuICAgIH1cbiAgfSByZXR1cm4gK2l0O1xufTtcblxuLy8gYE51bWJlcmAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLWNvbnN0cnVjdG9yXG5pZiAoaXNGb3JjZWQoTlVNQkVSLCAhTmF0aXZlTnVtYmVyKCcgMG8xJykgfHwgIU5hdGl2ZU51bWJlcignMGIxJykgfHwgTmF0aXZlTnVtYmVyKCcrMHgxJykpKSB7XG4gIHZhciBOdW1iZXJXcmFwcGVyID0gZnVuY3Rpb24gTnVtYmVyKHZhbHVlKSB7XG4gICAgdmFyIG4gPSBhcmd1bWVudHMubGVuZ3RoIDwgMSA/IDAgOiBOYXRpdmVOdW1iZXIodG9OdW1lcmljKHZhbHVlKSk7XG4gICAgdmFyIGR1bW15ID0gdGhpcztcbiAgICAvLyBjaGVjayBvbiAxLi5jb25zdHJ1Y3Rvcihmb28pIGNhc2VcbiAgICByZXR1cm4gaXNQcm90b3R5cGVPZihOdW1iZXJQcm90b3R5cGUsIGR1bW15KSAmJiBmYWlscyhmdW5jdGlvbiAoKSB7IHRoaXNOdW1iZXJWYWx1ZShkdW1teSk7IH0pXG4gICAgICA/IGluaGVyaXRJZlJlcXVpcmVkKE9iamVjdChuKSwgZHVtbXksIE51bWJlcldyYXBwZXIpIDogbjtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IERFU0NSSVBUT1JTID8gZ2V0T3duUHJvcGVydHlOYW1lcyhOYXRpdmVOdW1iZXIpIDogKFxuICAgIC8vIEVTMzpcbiAgICAnTUFYX1ZBTFVFLE1JTl9WQUxVRSxOYU4sTkVHQVRJVkVfSU5GSU5JVFksUE9TSVRJVkVfSU5GSU5JVFksJyArXG4gICAgLy8gRVMyMDE1IChpbiBjYXNlLCBpZiBtb2R1bGVzIHdpdGggRVMyMDE1IE51bWJlciBzdGF0aWNzIHJlcXVpcmVkIGJlZm9yZSk6XG4gICAgJ0VQU0lMT04sTUFYX1NBRkVfSU5URUdFUixNSU5fU0FGRV9JTlRFR0VSLGlzRmluaXRlLGlzSW50ZWdlcixpc05hTixpc1NhZmVJbnRlZ2VyLHBhcnNlRmxvYXQscGFyc2VJbnQsJyArXG4gICAgLy8gRVNOZXh0XG4gICAgJ2Zyb21TdHJpbmcscmFuZ2UnXG4gICkuc3BsaXQoJywnKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOyBqKyspIHtcbiAgICBpZiAoaGFzT3duKE5hdGl2ZU51bWJlciwga2V5ID0ga2V5c1tqXSkgJiYgIWhhc093bihOdW1iZXJXcmFwcGVyLCBrZXkpKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eShOdW1iZXJXcmFwcGVyLCBrZXksIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihOYXRpdmVOdW1iZXIsIGtleSkpO1xuICAgIH1cbiAgfVxuICBOdW1iZXJXcmFwcGVyLnByb3RvdHlwZSA9IE51bWJlclByb3RvdHlwZTtcbiAgTnVtYmVyUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTnVtYmVyV3JhcHBlcjtcbiAgZGVmaW5lQnVpbHRJbihnbG9iYWwsIE5VTUJFUiwgTnVtYmVyV3JhcHBlciwgeyBjb25zdHJ1Y3RvcjogdHJ1ZSB9KTtcbn1cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBgTnVtYmVyLkVQU0lMT05gIGNvbnN0YW50XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci5lcHNpbG9uXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSwgbm9uQ29uZmlndXJhYmxlOiB0cnVlLCBub25Xcml0YWJsZTogdHJ1ZSB9LCB7XG4gIEVQU0lMT046IE1hdGgucG93KDIsIC01Milcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgbnVtYmVySXNGaW5pdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbnVtYmVyLWlzLWZpbml0ZScpO1xuXG4vLyBgTnVtYmVyLmlzRmluaXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLmlzZmluaXRlXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSB9LCB7IGlzRmluaXRlOiBudW1iZXJJc0Zpbml0ZSB9KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzSW50ZWdyYWxOdW1iZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtaW50ZWdyYWwtbnVtYmVyJyk7XG5cbi8vIGBOdW1iZXIuaXNJbnRlZ2VyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLmlzaW50ZWdlclxuJCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUgfSwge1xuICBpc0ludGVnZXI6IGlzSW50ZWdyYWxOdW1iZXJcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbi8vIGBOdW1iZXIuaXNOYU5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIuaXNuYW5cbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBzdGF0OiB0cnVlIH0sIHtcbiAgaXNOYU46IGZ1bmN0aW9uIGlzTmFOKG51bWJlcikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgcmV0dXJuIG51bWJlciAhPSBudW1iZXI7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNJbnRlZ3JhbE51bWJlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1pbnRlZ3JhbC1udW1iZXInKTtcblxudmFyIGFicyA9IE1hdGguYWJzO1xuXG4vLyBgTnVtYmVyLmlzU2FmZUludGVnZXJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIuaXNzYWZlaW50ZWdlclxuJCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUgfSwge1xuICBpc1NhZmVJbnRlZ2VyOiBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKG51bWJlcikge1xuICAgIHJldHVybiBpc0ludGVncmFsTnVtYmVyKG51bWJlcikgJiYgYWJzKG51bWJlcikgPD0gMHgxRkZGRkZGRkZGRkZGRjtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYCBjb25zdGFudFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIubWF4X3NhZmVfaW50ZWdlclxuJCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUsIG5vbkNvbmZpZ3VyYWJsZTogdHJ1ZSwgbm9uV3JpdGFibGU6IHRydWUgfSwge1xuICBNQVhfU0FGRV9JTlRFR0VSOiAweDFGRkZGRkZGRkZGRkZGXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJgIGNvbnN0YW50XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci5taW5fc2FmZV9pbnRlZ2VyXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSwgbm9uQ29uZmlndXJhYmxlOiB0cnVlLCBub25Xcml0YWJsZTogdHJ1ZSB9LCB7XG4gIE1JTl9TQUZFX0lOVEVHRVI6IC0weDFGRkZGRkZGRkZGRkZGXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbnVtYmVyLXBhcnNlLWZsb2F0Jyk7XG5cbi8vIGBOdW1iZXIucGFyc2VGbG9hdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci5wYXJzZUZsb2F0XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1udW1iZXItcGFyc2VmbG9hdCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuJCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUsIGZvcmNlZDogTnVtYmVyLnBhcnNlRmxvYXQgIT0gcGFyc2VGbG9hdCB9LCB7XG4gIHBhcnNlRmxvYXQ6IHBhcnNlRmxvYXRcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgcGFyc2VJbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbnVtYmVyLXBhcnNlLWludCcpO1xuXG4vLyBgTnVtYmVyLnBhcnNlSW50YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLnBhcnNlaW50XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1udW1iZXItcGFyc2VpbnQgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IE51bWJlci5wYXJzZUludCAhPSBwYXJzZUludCB9LCB7XG4gIHBhcnNlSW50OiBwYXJzZUludFxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciB0aGlzTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGhpcy1udW1iZXItdmFsdWUnKTtcbnZhciAkcmVwZWF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1yZXBlYXQnKTtcbnZhciBsb2cxMCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLWxvZzEwJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyICRSYW5nZUVycm9yID0gUmFuZ2VFcnJvcjtcbnZhciAkU3RyaW5nID0gU3RyaW5nO1xudmFyICRpc0Zpbml0ZSA9IGlzRmluaXRlO1xudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciByb3VuZCA9IE1hdGgucm91bmQ7XG52YXIgbmF0aXZlVG9FeHBvbmVudGlhbCA9IHVuY3VycnlUaGlzKDEuMC50b0V4cG9uZW50aWFsKTtcbnZhciByZXBlYXQgPSB1bmN1cnJ5VGhpcygkcmVwZWF0KTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxuLy8gRWRnZSAxNy1cbnZhciBST1VORFNfUFJPUEVSTFkgPSBuYXRpdmVUb0V4cG9uZW50aWFsKC02LjllLTExLCA0KSA9PT0gJy02LjkwMDBlLTExJ1xuICAvLyBJRTExLSAmJiBFZGdlIDE0LVxuICAmJiBuYXRpdmVUb0V4cG9uZW50aWFsKDEuMjU1LCAyKSA9PT0gJzEuMjVlKzAnXG4gIC8vIEZGODYtLCBWOCB+IENocm9tZSA0OS01MFxuICAmJiBuYXRpdmVUb0V4cG9uZW50aWFsKDEyMzQ1LCAzKSA9PT0gJzEuMjM1ZSs0J1xuICAvLyBGRjg2LSwgVjggfiBDaHJvbWUgNDktNTBcbiAgJiYgbmF0aXZlVG9FeHBvbmVudGlhbCgyNSwgMCkgPT09ICczZSsxJztcblxuLy8gSUU4LVxudmFyIFRIUk9XU19PTl9JTkZJTklUWV9GUkFDVElPTiA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgbmF0aXZlVG9FeHBvbmVudGlhbCgxLCBJbmZpbml0eSk7XG59KSAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIG5hdGl2ZVRvRXhwb25lbnRpYWwoMSwgLUluZmluaXR5KTtcbn0pO1xuXG4vLyBTYWZhcmkgPDExICYmIEZGIDw1MFxudmFyIFBST1BFUl9OT05fRklOSVRFX1RISVNfQ0hFQ0sgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBuYXRpdmVUb0V4cG9uZW50aWFsKEluZmluaXR5LCBJbmZpbml0eSk7XG59KSAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBuYXRpdmVUb0V4cG9uZW50aWFsKE5hTiwgSW5maW5pdHkpO1xufSk7XG5cbnZhciBGT1JDRUQgPSAhUk9VTkRTX1BST1BFUkxZIHx8ICFUSFJPV1NfT05fSU5GSU5JVFlfRlJBQ1RJT04gfHwgIVBST1BFUl9OT05fRklOSVRFX1RISVNfQ0hFQ0s7XG5cbi8vIGBOdW1iZXIucHJvdG90eXBlLnRvRXhwb25lbnRpYWxgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIucHJvdG90eXBlLnRvZXhwb25lbnRpYWxcbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICB0b0V4cG9uZW50aWFsOiBmdW5jdGlvbiB0b0V4cG9uZW50aWFsKGZyYWN0aW9uRGlnaXRzKSB7XG4gICAgdmFyIHggPSB0aGlzTnVtYmVyVmFsdWUodGhpcyk7XG4gICAgaWYgKGZyYWN0aW9uRGlnaXRzID09PSB1bmRlZmluZWQpIHJldHVybiBuYXRpdmVUb0V4cG9uZW50aWFsKHgpO1xuICAgIHZhciBmID0gdG9JbnRlZ2VyT3JJbmZpbml0eShmcmFjdGlvbkRpZ2l0cyk7XG4gICAgaWYgKCEkaXNGaW5pdGUoeCkpIHJldHVybiBTdHJpbmcoeCk7XG4gICAgLy8gVE9ETzogRVMyMDE4IGluY3JlYXNlZCB0aGUgbWF4aW11bSBudW1iZXIgb2YgZnJhY3Rpb24gZGlnaXRzIHRvIDEwMCwgbmVlZCB0byBpbXByb3ZlIHRoZSBpbXBsZW1lbnRhdGlvblxuICAgIGlmIChmIDwgMCB8fCBmID4gMjApIHRocm93ICRSYW5nZUVycm9yKCdJbmNvcnJlY3QgZnJhY3Rpb24gZGlnaXRzJyk7XG4gICAgaWYgKFJPVU5EU19QUk9QRVJMWSkgcmV0dXJuIG5hdGl2ZVRvRXhwb25lbnRpYWwoeCwgZik7XG4gICAgdmFyIHMgPSAnJztcbiAgICB2YXIgbSA9ICcnO1xuICAgIHZhciBlID0gMDtcbiAgICB2YXIgYyA9ICcnO1xuICAgIHZhciBkID0gJyc7XG4gICAgaWYgKHggPCAwKSB7XG4gICAgICBzID0gJy0nO1xuICAgICAgeCA9IC14O1xuICAgIH1cbiAgICBpZiAoeCA9PT0gMCkge1xuICAgICAgZSA9IDA7XG4gICAgICBtID0gcmVwZWF0KCcwJywgZiArIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB0aGlzIGJsb2NrIGlzIGJhc2VkIG9uIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL1NoZWV0SlNEZXYvMTEwMGFkNTZiOWY4NTZjOTUyOTllZDBlMDY4ZWVhMDhcbiAgICAgIC8vIFRPRE86IGltcHJvdmUgYWNjdXJhY3kgd2l0aCBiaWcgZnJhY3Rpb24gZGlnaXRzXG4gICAgICB2YXIgbCA9IGxvZzEwKHgpO1xuICAgICAgZSA9IGZsb29yKGwpO1xuICAgICAgdmFyIG4gPSAwO1xuICAgICAgdmFyIHcgPSBwb3coMTAsIGUgLSBmKTtcbiAgICAgIG4gPSByb3VuZCh4IC8gdyk7XG4gICAgICBpZiAoMiAqIHggPj0gKDIgKiBuICsgMSkgKiB3KSB7XG4gICAgICAgIG4gKz0gMTtcbiAgICAgIH1cbiAgICAgIGlmIChuID49IHBvdygxMCwgZiArIDEpKSB7XG4gICAgICAgIG4gLz0gMTA7XG4gICAgICAgIGUgKz0gMTtcbiAgICAgIH1cbiAgICAgIG0gPSAkU3RyaW5nKG4pO1xuICAgIH1cbiAgICBpZiAoZiAhPT0gMCkge1xuICAgICAgbSA9IHN0cmluZ1NsaWNlKG0sIDAsIDEpICsgJy4nICsgc3RyaW5nU2xpY2UobSwgMSk7XG4gICAgfVxuICAgIGlmIChlID09PSAwKSB7XG4gICAgICBjID0gJysnO1xuICAgICAgZCA9ICcwJztcbiAgICB9IGVsc2Uge1xuICAgICAgYyA9IGUgPiAwID8gJysnIDogJy0nO1xuICAgICAgZCA9ICRTdHJpbmcoYWJzKGUpKTtcbiAgICB9XG4gICAgbSArPSAnZScgKyBjICsgZDtcbiAgICByZXR1cm4gcyArIG07XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgdGhpc051bWJlclZhbHVlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RoaXMtbnVtYmVyLXZhbHVlJyk7XG52YXIgJHJlcGVhdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcmVwZWF0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyICRSYW5nZUVycm9yID0gUmFuZ2VFcnJvcjtcbnZhciAkU3RyaW5nID0gU3RyaW5nO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciByZXBlYXQgPSB1bmN1cnJ5VGhpcygkcmVwZWF0KTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbnZhciBuYXRpdmVUb0ZpeGVkID0gdW5jdXJyeVRoaXMoMS4wLnRvRml4ZWQpO1xuXG52YXIgcG93ID0gZnVuY3Rpb24gKHgsIG4sIGFjYykge1xuICByZXR1cm4gbiA9PT0gMCA/IGFjYyA6IG4gJSAyID09PSAxID8gcG93KHgsIG4gLSAxLCBhY2MgKiB4KSA6IHBvdyh4ICogeCwgbiAvIDIsIGFjYyk7XG59O1xuXG52YXIgbG9nID0gZnVuY3Rpb24gKHgpIHtcbiAgdmFyIG4gPSAwO1xuICB2YXIgeDIgPSB4O1xuICB3aGlsZSAoeDIgPj0gNDA5Nikge1xuICAgIG4gKz0gMTI7XG4gICAgeDIgLz0gNDA5NjtcbiAgfVxuICB3aGlsZSAoeDIgPj0gMikge1xuICAgIG4gKz0gMTtcbiAgICB4MiAvPSAyO1xuICB9IHJldHVybiBuO1xufTtcblxudmFyIG11bHRpcGx5ID0gZnVuY3Rpb24gKGRhdGEsIG4sIGMpIHtcbiAgdmFyIGluZGV4ID0gLTE7XG4gIHZhciBjMiA9IGM7XG4gIHdoaWxlICgrK2luZGV4IDwgNikge1xuICAgIGMyICs9IG4gKiBkYXRhW2luZGV4XTtcbiAgICBkYXRhW2luZGV4XSA9IGMyICUgMWU3O1xuICAgIGMyID0gZmxvb3IoYzIgLyAxZTcpO1xuICB9XG59O1xuXG52YXIgZGl2aWRlID0gZnVuY3Rpb24gKGRhdGEsIG4pIHtcbiAgdmFyIGluZGV4ID0gNjtcbiAgdmFyIGMgPSAwO1xuICB3aGlsZSAoLS1pbmRleCA+PSAwKSB7XG4gICAgYyArPSBkYXRhW2luZGV4XTtcbiAgICBkYXRhW2luZGV4XSA9IGZsb29yKGMgLyBuKTtcbiAgICBjID0gKGMgJSBuKSAqIDFlNztcbiAgfVxufTtcblxudmFyIGRhdGFUb1N0cmluZyA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHZhciBpbmRleCA9IDY7XG4gIHZhciBzID0gJyc7XG4gIHdoaWxlICgtLWluZGV4ID49IDApIHtcbiAgICBpZiAocyAhPT0gJycgfHwgaW5kZXggPT09IDAgfHwgZGF0YVtpbmRleF0gIT09IDApIHtcbiAgICAgIHZhciB0ID0gJFN0cmluZyhkYXRhW2luZGV4XSk7XG4gICAgICBzID0gcyA9PT0gJycgPyB0IDogcyArIHJlcGVhdCgnMCcsIDcgLSB0Lmxlbmd0aCkgKyB0O1xuICAgIH1cbiAgfSByZXR1cm4gcztcbn07XG5cbnZhciBGT1JDRUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuYXRpdmVUb0ZpeGVkKDAuMDAwMDgsIDMpICE9PSAnMC4wMDAnIHx8XG4gICAgbmF0aXZlVG9GaXhlZCgwLjksIDApICE9PSAnMScgfHxcbiAgICBuYXRpdmVUb0ZpeGVkKDEuMjU1LCAyKSAhPT0gJzEuMjUnIHx8XG4gICAgbmF0aXZlVG9GaXhlZCgxMDAwMDAwMDAwMDAwMDAwMTI4LjAsIDApICE9PSAnMTAwMDAwMDAwMDAwMDAwMDEyOCc7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICBuYXRpdmVUb0ZpeGVkKHt9KTtcbn0pO1xuXG4vLyBgTnVtYmVyLnByb3RvdHlwZS50b0ZpeGVkYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLnByb3RvdHlwZS50b2ZpeGVkXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgdG9GaXhlZDogZnVuY3Rpb24gdG9GaXhlZChmcmFjdGlvbkRpZ2l0cykge1xuICAgIHZhciBudW1iZXIgPSB0aGlzTnVtYmVyVmFsdWUodGhpcyk7XG4gICAgdmFyIGZyYWN0RGlnaXRzID0gdG9JbnRlZ2VyT3JJbmZpbml0eShmcmFjdGlvbkRpZ2l0cyk7XG4gICAgdmFyIGRhdGEgPSBbMCwgMCwgMCwgMCwgMCwgMF07XG4gICAgdmFyIHNpZ24gPSAnJztcbiAgICB2YXIgcmVzdWx0ID0gJzAnO1xuICAgIHZhciBlLCB6LCBqLCBrO1xuXG4gICAgLy8gVE9ETzogRVMyMDE4IGluY3JlYXNlZCB0aGUgbWF4aW11bSBudW1iZXIgb2YgZnJhY3Rpb24gZGlnaXRzIHRvIDEwMCwgbmVlZCB0byBpbXByb3ZlIHRoZSBpbXBsZW1lbnRhdGlvblxuICAgIGlmIChmcmFjdERpZ2l0cyA8IDAgfHwgZnJhY3REaWdpdHMgPiAyMCkgdGhyb3cgJFJhbmdlRXJyb3IoJ0luY29ycmVjdCBmcmFjdGlvbiBkaWdpdHMnKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgIGlmIChudW1iZXIgIT0gbnVtYmVyKSByZXR1cm4gJ05hTic7XG4gICAgaWYgKG51bWJlciA8PSAtMWUyMSB8fCBudW1iZXIgPj0gMWUyMSkgcmV0dXJuICRTdHJpbmcobnVtYmVyKTtcbiAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgc2lnbiA9ICctJztcbiAgICAgIG51bWJlciA9IC1udW1iZXI7XG4gICAgfVxuICAgIGlmIChudW1iZXIgPiAxZS0yMSkge1xuICAgICAgZSA9IGxvZyhudW1iZXIgKiBwb3coMiwgNjksIDEpKSAtIDY5O1xuICAgICAgeiA9IGUgPCAwID8gbnVtYmVyICogcG93KDIsIC1lLCAxKSA6IG51bWJlciAvIHBvdygyLCBlLCAxKTtcbiAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDtcbiAgICAgIGUgPSA1MiAtIGU7XG4gICAgICBpZiAoZSA+IDApIHtcbiAgICAgICAgbXVsdGlwbHkoZGF0YSwgMCwgeik7XG4gICAgICAgIGogPSBmcmFjdERpZ2l0cztcbiAgICAgICAgd2hpbGUgKGogPj0gNykge1xuICAgICAgICAgIG11bHRpcGx5KGRhdGEsIDFlNywgMCk7XG4gICAgICAgICAgaiAtPSA3O1xuICAgICAgICB9XG4gICAgICAgIG11bHRpcGx5KGRhdGEsIHBvdygxMCwgaiwgMSksIDApO1xuICAgICAgICBqID0gZSAtIDE7XG4gICAgICAgIHdoaWxlIChqID49IDIzKSB7XG4gICAgICAgICAgZGl2aWRlKGRhdGEsIDEgPDwgMjMpO1xuICAgICAgICAgIGogLT0gMjM7XG4gICAgICAgIH1cbiAgICAgICAgZGl2aWRlKGRhdGEsIDEgPDwgaik7XG4gICAgICAgIG11bHRpcGx5KGRhdGEsIDEsIDEpO1xuICAgICAgICBkaXZpZGUoZGF0YSwgMik7XG4gICAgICAgIHJlc3VsdCA9IGRhdGFUb1N0cmluZyhkYXRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG11bHRpcGx5KGRhdGEsIDAsIHopO1xuICAgICAgICBtdWx0aXBseShkYXRhLCAxIDw8IC1lLCAwKTtcbiAgICAgICAgcmVzdWx0ID0gZGF0YVRvU3RyaW5nKGRhdGEpICsgcmVwZWF0KCcwJywgZnJhY3REaWdpdHMpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZnJhY3REaWdpdHMgPiAwKSB7XG4gICAgICBrID0gcmVzdWx0Lmxlbmd0aDtcbiAgICAgIHJlc3VsdCA9IHNpZ24gKyAoayA8PSBmcmFjdERpZ2l0c1xuICAgICAgICA/ICcwLicgKyByZXBlYXQoJzAnLCBmcmFjdERpZ2l0cyAtIGspICsgcmVzdWx0XG4gICAgICAgIDogc3RyaW5nU2xpY2UocmVzdWx0LCAwLCBrIC0gZnJhY3REaWdpdHMpICsgJy4nICsgc3RyaW5nU2xpY2UocmVzdWx0LCBrIC0gZnJhY3REaWdpdHMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gc2lnbiArIHJlc3VsdDtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB0aGlzTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGhpcy1udW1iZXItdmFsdWUnKTtcblxudmFyIG5hdGl2ZVRvUHJlY2lzaW9uID0gdW5jdXJyeVRoaXMoMS4wLnRvUHJlY2lzaW9uKTtcblxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gSUU3LVxuICByZXR1cm4gbmF0aXZlVG9QcmVjaXNpb24oMSwgdW5kZWZpbmVkKSAhPT0gJzEnO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgbmF0aXZlVG9QcmVjaXNpb24oe30pO1xufSk7XG5cbi8vIGBOdW1iZXIucHJvdG90eXBlLnRvUHJlY2lzaW9uYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLnByb3RvdHlwZS50b3ByZWNpc2lvblxuJCh7IHRhcmdldDogJ051bWJlcicsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIHRvUHJlY2lzaW9uOiBmdW5jdGlvbiB0b1ByZWNpc2lvbihwcmVjaXNpb24pIHtcbiAgICByZXR1cm4gcHJlY2lzaW9uID09PSB1bmRlZmluZWRcbiAgICAgID8gbmF0aXZlVG9QcmVjaXNpb24odGhpc051bWJlclZhbHVlKHRoaXMpKVxuICAgICAgOiBuYXRpdmVUb1ByZWNpc2lvbih0aGlzTnVtYmVyVmFsdWUodGhpcyksIHByZWNpc2lvbik7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1hc3NpZ24nKTtcblxuLy8gYE9iamVjdC5hc3NpZ25gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuYXNzaWduXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1vYmplY3QtYXNzaWduIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgYXJpdHk6IDIsIGZvcmNlZDogT2JqZWN0LmFzc2lnbiAhPT0gYXNzaWduIH0sIHtcbiAgYXNzaWduOiBhc3NpZ25cbn0pO1xuIiwiLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcblxuLy8gYE9iamVjdC5jcmVhdGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuY3JlYXRlXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgY3JlYXRlOiBjcmVhdGVcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBGT1JDRUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3RvdHlwZS1hY2Nlc3NvcnMtZm9yY2VkJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lR2V0dGVyX19gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLl9fZGVmaW5lR2V0dGVyX19cbmlmIChERVNDUklQVE9SUykge1xuICAkKHsgdGFyZ2V0OiAnT2JqZWN0JywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgICBfX2RlZmluZUdldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcikge1xuICAgICAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZih0b09iamVjdCh0aGlzKSwgUCwgeyBnZXQ6IGFDYWxsYWJsZShnZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gICAgfVxuICB9KTtcbn1cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZGVmaW5lUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMnKS5mO1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydGllc1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LWRlZmluZXByb3BlcnRpZXMgLS0gc2FmZVxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgIT09IGRlZmluZVByb3BlcnRpZXMsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIGRlZmluZVByb3BlcnRpZXM6IGRlZmluZVByb3BlcnRpZXNcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAhPT0gZGVmaW5lUHJvcGVydHksIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIGRlZmluZVByb3BlcnR5OiBkZWZpbmVQcm9wZXJ0eVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIEZPUkNFRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvdG90eXBlLWFjY2Vzc29ycy1mb3JjZWQnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVTZXR0ZXJfX2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVTZXR0ZXJfX1xuaWYgKERFU0NSSVBUT1JTKSB7XG4gICQoeyB0YXJnZXQ6ICdPYmplY3QnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAgIF9fZGVmaW5lU2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lU2V0dGVyX18oUCwgc2V0dGVyKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7IHNldDogYUNhbGxhYmxlKHNldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH0pO1xufVxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGVudHJpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXRvLWFycmF5JykuZW50cmllcztcblxuLy8gYE9iamVjdC5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmVudHJpZXNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhPKSB7XG4gICAgcmV0dXJuICRlbnRyaWVzKE8pO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIEZSRUVaSU5HID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZyZWV6aW5nJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBvbkZyZWV6ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YScpLm9uRnJlZXplO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1vYmplY3QtZnJlZXplIC0tIHNhZmVcbnZhciAkZnJlZXplID0gT2JqZWN0LmZyZWV6ZTtcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyAkZnJlZXplKDEpOyB9KTtcblxuLy8gYE9iamVjdC5mcmVlemVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZnJlZXplXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGQUlMU19PTl9QUklNSVRJVkVTLCBzaGFtOiAhRlJFRVpJTkcgfSwge1xuICBmcmVlemU6IGZ1bmN0aW9uIGZyZWV6ZShpdCkge1xuICAgIHJldHVybiAkZnJlZXplICYmIGlzT2JqZWN0KGl0KSA/ICRmcmVlemUob25GcmVlemUoaXQpKSA6IGl0O1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4vLyBgT2JqZWN0LmZyb21FbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC1mcm9tLWVudHJpZXNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgZnJvbUVudHJpZXM6IGZ1bmN0aW9uIGZyb21FbnRyaWVzKGl0ZXJhYmxlKSB7XG4gICAgdmFyIG9iaiA9IHt9O1xuICAgIGl0ZXJhdGUoaXRlcmFibGUsIGZ1bmN0aW9uIChrLCB2KSB7XG4gICAgICBjcmVhdGVQcm9wZXJ0eShvYmosIGssIHYpO1xuICAgIH0sIHsgQVNfRU5UUklFUzogdHJ1ZSB9KTtcbiAgICByZXR1cm4gb2JqO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG5cbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoMSk7IH0pO1xudmFyIEZPUkNFRCA9ICFERVNDUklQVE9SUyB8fCBGQUlMU19PTl9QUklNSVRJVkVTO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICAgIHJldHVybiBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JbmRleGVkT2JqZWN0KGl0KSwga2V5KTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3duLWtleXMnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqZWN0KSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3Qob2JqZWN0KTtcbiAgICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG4gICAgdmFyIGtleXMgPSBvd25LZXlzKE8pO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBrZXksIGRlc2NyaXB0b3I7XG4gICAgd2hpbGUgKGtleXMubGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywga2V5ID0ga2V5c1tpbmRleCsrXSk7XG4gICAgICBpZiAoZGVzY3JpcHRvciAhPT0gdW5kZWZpbmVkKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLWV4dGVybmFsJykuZjtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5bmFtZXMgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyByZXR1cm4gIU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKDEpOyB9KTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMgfSwge1xuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiBnZXRPd25Qcm9wZXJ0eU5hbWVzXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3ltYm9sLWNvbnN0cnVjdG9yLWRldGVjdGlvbicpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcblxuLy8gVjggfiBDaHJvbWUgMzggYW5kIDM5IGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBmYWlscyBvbiBwcmltaXRpdmVzXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNDQzXG52YXIgRk9SQ0VEID0gIU5BVElWRV9TWU1CT0wgfHwgZmFpbHMoZnVuY3Rpb24gKCkgeyBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZigxKTsgfSk7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5c3ltYm9sc1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgICB2YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID8gJGdldE93blByb3BlcnR5U3ltYm9scyh0b09iamVjdChpdCkpIDogW107XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBuYXRpdmVHZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXInKTtcblxudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IG5hdGl2ZUdldFByb3RvdHlwZU9mKDEpOyB9KTtcblxuLy8gYE9iamVjdC5nZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRwcm90b3R5cGVvZlxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUywgc2hhbTogIUNPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiB9LCB7XG4gIGdldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCkge1xuICAgIHJldHVybiBuYXRpdmVHZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuICB9XG59KTtcblxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcblxuLy8gYE9iamVjdC5oYXNPd25gIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtYWNjZXNzaWJsZS1vYmplY3QtaGFzb3ducHJvcGVydHlcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgaGFzT3duOiBoYXNPd25cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGlzRXh0ZW5zaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtZXh0ZW5zaWJsZScpO1xuXG4vLyBgT2JqZWN0LmlzRXh0ZW5zaWJsZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5pc2V4dGVuc2libGVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW9iamVjdC1pc2V4dGVuc2libGUgLS0gc2FmZVxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogT2JqZWN0LmlzRXh0ZW5zaWJsZSAhPT0gJGlzRXh0ZW5zaWJsZSB9LCB7XG4gIGlzRXh0ZW5zaWJsZTogJGlzRXh0ZW5zaWJsZVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBBUlJBWV9CVUZGRVJfTk9OX0VYVEVOU0lCTEUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLW5vbi1leHRlbnNpYmxlJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW9iamVjdC1pc2Zyb3plbiAtLSBzYWZlXG52YXIgJGlzRnJvemVuID0gT2JqZWN0LmlzRnJvemVuO1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7ICRpc0Zyb3plbigxKTsgfSk7XG5cbi8vIGBPYmplY3QuaXNGcm96ZW5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuaXNmcm96ZW5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMgfHwgQVJSQVlfQlVGRkVSX05PTl9FWFRFTlNJQkxFIH0sIHtcbiAgaXNGcm96ZW46IGZ1bmN0aW9uIGlzRnJvemVuKGl0KSB7XG4gICAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0cnVlO1xuICAgIGlmIChBUlJBWV9CVUZGRVJfTk9OX0VYVEVOU0lCTEUgJiYgY2xhc3NvZihpdCkgPT0gJ0FycmF5QnVmZmVyJykgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuICRpc0Zyb3plbiA/ICRpc0Zyb3plbihpdCkgOiBmYWxzZTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBBUlJBWV9CVUZGRVJfTk9OX0VYVEVOU0lCTEUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLW5vbi1leHRlbnNpYmxlJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW9iamVjdC1pc3NlYWxlZCAtLSBzYWZlXG52YXIgJGlzU2VhbGVkID0gT2JqZWN0LmlzU2VhbGVkO1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7ICRpc1NlYWxlZCgxKTsgfSk7XG5cbi8vIGBPYmplY3QuaXNTZWFsZWRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuaXNzZWFsZWRcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMgfHwgQVJSQVlfQlVGRkVSX05PTl9FWFRFTlNJQkxFIH0sIHtcbiAgaXNTZWFsZWQ6IGZ1bmN0aW9uIGlzU2VhbGVkKGl0KSB7XG4gICAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0cnVlO1xuICAgIGlmIChBUlJBWV9CVUZGRVJfTk9OX0VYVEVOU0lCTEUgJiYgY2xhc3NvZihpdCkgPT0gJ0FycmF5QnVmZmVyJykgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuICRpc1NlYWxlZCA/ICRpc1NlYWxlZChpdCkgOiBmYWxzZTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zYW1lLXZhbHVlJyk7XG5cbi8vIGBPYmplY3QuaXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuaXNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgaXM6IGlzXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIG5hdGl2ZUtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgbmF0aXZlS2V5cygxKTsgfSk7XG5cbi8vIGBPYmplY3Qua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5rZXlzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGQUlMU19PTl9QUklNSVRJVkVTIH0sIHtcbiAga2V5czogZnVuY3Rpb24ga2V5cyhpdCkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBGT1JDRUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3RvdHlwZS1hY2Nlc3NvcnMtZm9yY2VkJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXknKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBHZXR0ZXJfX2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUuX19sb29rdXBHZXR0ZXJfX1xuaWYgKERFU0NSSVBUT1JTKSB7XG4gICQoeyB0YXJnZXQ6ICdPYmplY3QnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAgIF9fbG9va3VwR2V0dGVyX186IGZ1bmN0aW9uIF9fbG9va3VwR2V0dGVyX18oUCkge1xuICAgICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICAgIHZhciBrZXkgPSB0b1Byb3BlcnR5S2V5KFApO1xuICAgICAgdmFyIGRlc2M7XG4gICAgICBkbyB7XG4gICAgICAgIGlmIChkZXNjID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIGtleSkpIHJldHVybiBkZXNjLmdldDtcbiAgICAgIH0gd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSk7XG4gICAgfVxuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgRk9SQ0VEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm90b3R5cGUtYWNjZXNzb3JzLWZvcmNlZCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLl9fbG9va3VwU2V0dGVyX19gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLl9fbG9va3VwU2V0dGVyX19cbmlmIChERVNDUklQVE9SUykge1xuICAkKHsgdGFyZ2V0OiAnT2JqZWN0JywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgICBfX2xvb2t1cFNldHRlcl9fOiBmdW5jdGlvbiBfX2xvb2t1cFNldHRlcl9fKFApIHtcbiAgICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgICB2YXIga2V5ID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgICAgIHZhciBkZXNjO1xuICAgICAgZG8ge1xuICAgICAgICBpZiAoZGVzYyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBrZXkpKSByZXR1cm4gZGVzYy5zZXQ7XG4gICAgICB9IHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpO1xuICAgIH1cbiAgfSk7XG59XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBvbkZyZWV6ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YScpLm9uRnJlZXplO1xudmFyIEZSRUVaSU5HID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZyZWV6aW5nJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LXByZXZlbnRleHRlbnNpb25zIC0tIHNhZmVcbnZhciAkcHJldmVudEV4dGVuc2lvbnMgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnM7XG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgJHByZXZlbnRFeHRlbnNpb25zKDEpOyB9KTtcblxuLy8gYE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9uc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcmV2ZW50ZXh0ZW5zaW9uc1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUywgc2hhbTogIUZSRUVaSU5HIH0sIHtcbiAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKGl0KSB7XG4gICAgcmV0dXJuICRwcmV2ZW50RXh0ZW5zaW9ucyAmJiBpc09iamVjdChpdCkgPyAkcHJldmVudEV4dGVuc2lvbnMob25GcmVlemUoaXQpKSA6IGl0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZUJ1aWx0SW5BY2Nlc3NvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4tYWNjZXNzb3InKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1vYmplY3QtZ2V0cHJvdG90eXBlb2YgLS0gc2FmZVxudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LXNldHByb3RvdHlwZW9mIC0tIHNhZmVcbnZhciBzZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZjtcbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xudmFyIFBST1RPID0gJ19fcHJvdG9fXyc7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLl9fcHJvdG9fX2AgYWNjZXNzb3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS5fX3Byb3RvX19cbmlmIChERVNDUklQVE9SUyAmJiBnZXRQcm90b3R5cGVPZiAmJiBzZXRQcm90b3R5cGVPZiAmJiAhKFBST1RPIGluIE9iamVjdFByb3RvdHlwZSkpIHRyeSB7XG4gIGRlZmluZUJ1aWx0SW5BY2Nlc3NvcihPYmplY3RQcm90b3R5cGUsIFBST1RPLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gX19wcm90b19fKCkge1xuICAgICAgcmV0dXJuIGdldFByb3RvdHlwZU9mKHRvT2JqZWN0KHRoaXMpKTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gX19wcm90b19fKHByb3RvKSB7XG4gICAgICB2YXIgTyA9IHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG4gICAgICBpZiAoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCB8fCAhaXNPYmplY3QoTykpIHJldHVybjtcbiAgICAgIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKTtcbiAgICB9XG4gIH0pO1xufSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgb25GcmVlemUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEnKS5vbkZyZWV6ZTtcbnZhciBGUkVFWklORyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mcmVlemluZycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW9iamVjdC1zZWFsIC0tIHNhZmVcbnZhciAkc2VhbCA9IE9iamVjdC5zZWFsO1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7ICRzZWFsKDEpOyB9KTtcblxuLy8gYE9iamVjdC5zZWFsYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnNlYWxcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMsIHNoYW06ICFGUkVFWklORyB9LCB7XG4gIHNlYWw6IGZ1bmN0aW9uIHNlYWwoaXQpIHtcbiAgICByZXR1cm4gJHNlYWwgJiYgaXNPYmplY3QoaXQpID8gJHNlYWwob25GcmVlemUoaXQpKSA6IGl0O1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG5cbi8vIGBPYmplY3Quc2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Quc2V0cHJvdG90eXBlb2ZcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgc2V0UHJvdG90eXBlT2Y6IHNldFByb3RvdHlwZU9mXG59KTtcbiIsInZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0Jyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtdG8tc3RyaW5nJyk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZ1xuaWYgKCFUT19TVFJJTkdfVEFHX1NVUFBPUlQpIHtcbiAgZGVmaW5lQnVpbHRJbihPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCB0b1N0cmluZywgeyB1bnNhZmU6IHRydWUgfSk7XG59XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkdmFsdWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC10by1hcnJheScpLnZhbHVlcztcblxuLy8gYE9iamVjdC52YWx1ZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QudmFsdWVzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKE8pIHtcbiAgICByZXR1cm4gJHZhbHVlcyhPKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9udW1iZXItcGFyc2UtZmxvYXQnKTtcblxuLy8gYHBhcnNlRmxvYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wYXJzZWZsb2F0LXN0cmluZ1xuJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiBwYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0IH0sIHtcbiAgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXRcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL251bWJlci1wYXJzZS1pbnQnKTtcblxuLy8gYHBhcnNlSW50YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcGFyc2VpbnQtc3RyaW5nLXJhZGl4XG4kKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6IHBhcnNlSW50ICE9ICRwYXJzZUludCB9LCB7XG4gIHBhcnNlSW50OiAkcGFyc2VJbnRcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wZXJmb3JtJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG5cbi8vIGBQcm9taXNlLmFsbFNldHRsZWRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLmFsbHNldHRsZWRcbiQoeyB0YXJnZXQ6ICdQcm9taXNlJywgc3RhdDogdHJ1ZSB9LCB7XG4gIGFsbFNldHRsZWQ6IGZ1bmN0aW9uIGFsbFNldHRsZWQoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mKEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcHJvbWlzZVJlc29sdmUgPSBhQ2FsbGFibGUoQy5yZXNvbHZlKTtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBjb3VudGVyID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gY291bnRlcisrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgY2FsbChwcm9taXNlUmVzb2x2ZSwgQywgcHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSB7IHN0YXR1czogJ2Z1bGZpbGxlZCcsIHZhbHVlOiB2YWx1ZSB9O1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbaW5kZXhdID0geyBzdGF0dXM6ICdyZWplY3RlZCcsIHJlYXNvbjogZXJyb3IgfTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lcnJvcikgcmVqZWN0KHJlc3VsdC52YWx1ZSk7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BlcmZvcm0nKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBQUk9NSVNFX1NUQVRJQ1NfSU5DT1JSRUNUX0lURVJBVElPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wcm9taXNlLXN0YXRpY3MtaW5jb3JyZWN0LWl0ZXJhdGlvbicpO1xuXG4vLyBgUHJvbWlzZS5hbGxgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLmFsbFxuJCh7IHRhcmdldDogJ1Byb21pc2UnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IFBST01JU0VfU1RBVElDU19JTkNPUlJFQ1RfSVRFUkFUSU9OIH0sIHtcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mKEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHByb21pc2VSZXNvbHZlID0gYUNhbGxhYmxlKEMucmVzb2x2ZSk7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICB2YXIgY291bnRlciA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIGl0ZXJhdGUoaXRlcmFibGUsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGNvdW50ZXIrKztcbiAgICAgICAgdmFyIGFscmVhZHlDYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgcmVtYWluaW5nKys7XG4gICAgICAgIGNhbGwoJHByb21pc2VSZXNvbHZlLCBDLCBwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGlmIChhbHJlYWR5Q2FsbGVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgdmFsdWVzW2luZGV4XSA9IHZhbHVlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZXJyb3IpIHJlamVjdChyZXN1bHQudmFsdWUpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BlcmZvcm0nKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxudmFyIFBST01JU0VfQU5ZX0VSUk9SID0gJ05vIG9uZSBwcm9taXNlIHJlc29sdmVkJztcblxuLy8gYFByb21pc2UuYW55YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5hbnlcbiQoeyB0YXJnZXQ6ICdQcm9taXNlJywgc3RhdDogdHJ1ZSB9LCB7XG4gIGFueTogZnVuY3Rpb24gYW55KGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBBZ2dyZWdhdGVFcnJvciA9IGdldEJ1aWx0SW4oJ0FnZ3JlZ2F0ZUVycm9yJyk7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mKEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcHJvbWlzZVJlc29sdmUgPSBhQ2FsbGFibGUoQy5yZXNvbHZlKTtcbiAgICAgIHZhciBlcnJvcnMgPSBbXTtcbiAgICAgIHZhciBjb3VudGVyID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgdmFyIGFscmVhZHlSZXNvbHZlZCA9IGZhbHNlO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gY291bnRlcisrO1xuICAgICAgICB2YXIgYWxyZWFkeVJlamVjdGVkID0gZmFsc2U7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBjYWxsKHByb21pc2VSZXNvbHZlLCBDLCBwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGlmIChhbHJlYWR5UmVqZWN0ZWQgfHwgYWxyZWFkeVJlc29sdmVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeVJlc29sdmVkID0gdHJ1ZTtcbiAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlSZWplY3RlZCB8fCBhbHJlYWR5UmVzb2x2ZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5UmVqZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgIGVycm9yc1tpbmRleF0gPSBlcnJvcjtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZWplY3QobmV3IEFnZ3JlZ2F0ZUVycm9yKGVycm9ycywgUFJPTUlTRV9BTllfRVJST1IpKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlamVjdChuZXcgQWdncmVnYXRlRXJyb3IoZXJyb3JzLCBQUk9NSVNFX0FOWV9FUlJPUikpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZXJyb3IpIHJlamVjdChyZXN1bHQudmFsdWUpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgRk9SQ0VEX1BST01JU0VfQ09OU1RSVUNUT1IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1jb25zdHJ1Y3Rvci1kZXRlY3Rpb24nKS5DT05TVFJVQ1RPUjtcbnZhciBOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1uYXRpdmUtY29uc3RydWN0b3InKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xuXG52YXIgTmF0aXZlUHJvbWlzZVByb3RvdHlwZSA9IE5hdGl2ZVByb21pc2VDb25zdHJ1Y3RvciAmJiBOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IucHJvdG90eXBlO1xuXG4vLyBgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2hgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnByb3RvdHlwZS5jYXRjaFxuJCh7IHRhcmdldDogJ1Byb21pc2UnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRURfUFJPTUlTRV9DT05TVFJVQ1RPUiwgcmVhbDogdHJ1ZSB9LCB7XG4gICdjYXRjaCc6IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICB9XG59KTtcblxuLy8gbWFrZXMgc3VyZSB0aGF0IG5hdGl2ZSBwcm9taXNlLWJhc2VkIEFQSXMgYFByb21pc2UjY2F0Y2hgIHByb3Blcmx5IHdvcmtzIHdpdGggcGF0Y2hlZCBgUHJvbWlzZSN0aGVuYFxuaWYgKCFJU19QVVJFICYmIGlzQ2FsbGFibGUoTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yKSkge1xuICB2YXIgbWV0aG9kID0gZ2V0QnVpbHRJbignUHJvbWlzZScpLnByb3RvdHlwZVsnY2F0Y2gnXTtcbiAgaWYgKE5hdGl2ZVByb21pc2VQcm90b3R5cGVbJ2NhdGNoJ10gIT09IG1ldGhvZCkge1xuICAgIGRlZmluZUJ1aWx0SW4oTmF0aXZlUHJvbWlzZVByb3RvdHlwZSwgJ2NhdGNoJywgbWV0aG9kLCB7IHVuc2FmZTogdHJ1ZSB9KTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgSVNfTk9ERSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgdGFzayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90YXNrJykuc2V0O1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9taWNyb3Rhc2snKTtcbnZhciBob3N0UmVwb3J0RXJyb3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hvc3QtcmVwb3J0LWVycm9ycycpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGVyZm9ybScpO1xudmFyIFF1ZXVlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3F1ZXVlJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIE5hdGl2ZVByb21pc2VDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wcm9taXNlLW5hdGl2ZS1jb25zdHJ1Y3RvcicpO1xudmFyIFByb21pc2VDb25zdHJ1Y3RvckRldGVjdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wcm9taXNlLWNvbnN0cnVjdG9yLWRldGVjdGlvbicpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcblxudmFyIFBST01JU0UgPSAnUHJvbWlzZSc7XG52YXIgRk9SQ0VEX1BST01JU0VfQ09OU1RSVUNUT1IgPSBQcm9taXNlQ29uc3RydWN0b3JEZXRlY3Rpb24uQ09OU1RSVUNUT1I7XG52YXIgTkFUSVZFX1BST01JU0VfUkVKRUNUSU9OX0VWRU5UID0gUHJvbWlzZUNvbnN0cnVjdG9yRGV0ZWN0aW9uLlJFSkVDVElPTl9FVkVOVDtcbnZhciBOQVRJVkVfUFJPTUlTRV9TVUJDTEFTU0lORyA9IFByb21pc2VDb25zdHJ1Y3RvckRldGVjdGlvbi5TVUJDTEFTU0lORztcbnZhciBnZXRJbnRlcm5hbFByb21pc2VTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFBST01JU0UpO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBOYXRpdmVQcm9taXNlUHJvdG90eXBlID0gTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yICYmIE5hdGl2ZVByb21pc2VDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG52YXIgUHJvbWlzZUNvbnN0cnVjdG9yID0gTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yO1xudmFyIFByb21pc2VQcm90b3R5cGUgPSBOYXRpdmVQcm9taXNlUHJvdG90eXBlO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcbnZhciBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eTtcblxudmFyIERJU1BBVENIX0VWRU5UID0gISEoZG9jdW1lbnQgJiYgZG9jdW1lbnQuY3JlYXRlRXZlbnQgJiYgZ2xvYmFsLmRpc3BhdGNoRXZlbnQpO1xudmFyIFVOSEFORExFRF9SRUpFQ1RJT04gPSAndW5oYW5kbGVkcmVqZWN0aW9uJztcbnZhciBSRUpFQ1RJT05fSEFORExFRCA9ICdyZWplY3Rpb25oYW5kbGVkJztcbnZhciBQRU5ESU5HID0gMDtcbnZhciBGVUxGSUxMRUQgPSAxO1xudmFyIFJFSkVDVEVEID0gMjtcbnZhciBIQU5ETEVEID0gMTtcbnZhciBVTkhBTkRMRUQgPSAyO1xuXG52YXIgSW50ZXJuYWwsIE93blByb21pc2VDYXBhYmlsaXR5LCBQcm9taXNlV3JhcHBlciwgbmF0aXZlVGhlbjtcblxuLy8gaGVscGVyc1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgaXNDYWxsYWJsZSh0aGVuID0gaXQudGhlbikgPyB0aGVuIDogZmFsc2U7XG59O1xuXG52YXIgY2FsbFJlYWN0aW9uID0gZnVuY3Rpb24gKHJlYWN0aW9uLCBzdGF0ZSkge1xuICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZTtcbiAgdmFyIG9rID0gc3RhdGUuc3RhdGUgPT0gRlVMRklMTEVEO1xuICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gIHZhciByZWplY3QgPSByZWFjdGlvbi5yZWplY3Q7XG4gIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgdHJ5IHtcbiAgICBpZiAoaGFuZGxlcikge1xuICAgICAgaWYgKCFvaykge1xuICAgICAgICBpZiAoc3RhdGUucmVqZWN0aW9uID09PSBVTkhBTkRMRUQpIG9uSGFuZGxlVW5oYW5kbGVkKHN0YXRlKTtcbiAgICAgICAgc3RhdGUucmVqZWN0aW9uID0gSEFORExFRDtcbiAgICAgIH1cbiAgICAgIGlmIChoYW5kbGVyID09PSB0cnVlKSByZXN1bHQgPSB2YWx1ZTtcbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7IC8vIGNhbiB0aHJvd1xuICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICBleGl0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgY2FsbCh0aGVuLCByZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmIChkb21haW4gJiYgIWV4aXRlZCkgZG9tYWluLmV4aXQoKTtcbiAgICByZWplY3QoZXJyb3IpO1xuICB9XG59O1xuXG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHN0YXRlLCBpc1JlamVjdCkge1xuICBpZiAoc3RhdGUubm90aWZpZWQpIHJldHVybjtcbiAgc3RhdGUubm90aWZpZWQgPSB0cnVlO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciByZWFjdGlvbnMgPSBzdGF0ZS5yZWFjdGlvbnM7XG4gICAgdmFyIHJlYWN0aW9uO1xuICAgIHdoaWxlIChyZWFjdGlvbiA9IHJlYWN0aW9ucy5nZXQoKSkge1xuICAgICAgY2FsbFJlYWN0aW9uKHJlYWN0aW9uLCBzdGF0ZSk7XG4gICAgfVxuICAgIHN0YXRlLm5vdGlmaWVkID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFzdGF0ZS5yZWplY3Rpb24pIG9uVW5oYW5kbGVkKHN0YXRlKTtcbiAgfSk7XG59O1xuXG52YXIgZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uIChuYW1lLCBwcm9taXNlLCByZWFzb24pIHtcbiAgdmFyIGV2ZW50LCBoYW5kbGVyO1xuICBpZiAoRElTUEFUQ0hfRVZFTlQpIHtcbiAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGV2ZW50LnByb21pc2UgPSBwcm9taXNlO1xuICAgIGV2ZW50LnJlYXNvbiA9IHJlYXNvbjtcbiAgICBldmVudC5pbml0RXZlbnQobmFtZSwgZmFsc2UsIHRydWUpO1xuICAgIGdsb2JhbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgfSBlbHNlIGV2ZW50ID0geyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHJlYXNvbiB9O1xuICBpZiAoIU5BVElWRV9QUk9NSVNFX1JFSkVDVElPTl9FVkVOVCAmJiAoaGFuZGxlciA9IGdsb2JhbFsnb24nICsgbmFtZV0pKSBoYW5kbGVyKGV2ZW50KTtcbiAgZWxzZSBpZiAobmFtZSA9PT0gVU5IQU5ETEVEX1JFSkVDVElPTikgaG9zdFJlcG9ydEVycm9ycygnVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgcmVhc29uKTtcbn07XG5cbnZhciBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICBjYWxsKHRhc2ssIGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gc3RhdGUuZmFjYWRlO1xuICAgIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlO1xuICAgIHZhciBJU19VTkhBTkRMRUQgPSBpc1VuaGFuZGxlZChzdGF0ZSk7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBpZiAoSVNfVU5IQU5ETEVEKSB7XG4gICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKElTX05PREUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGRpc3BhdGNoRXZlbnQoVU5IQU5ETEVEX1JFSkVDVElPTiwgcHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgc3RhdGUucmVqZWN0aW9uID0gSVNfTk9ERSB8fCBpc1VuaGFuZGxlZChzdGF0ZSkgPyBVTkhBTkRMRUQgOiBIQU5ETEVEO1xuICAgICAgaWYgKHJlc3VsdC5lcnJvcikgdGhyb3cgcmVzdWx0LnZhbHVlO1xuICAgIH1cbiAgfSk7XG59O1xuXG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgcmV0dXJuIHN0YXRlLnJlamVjdGlvbiAhPT0gSEFORExFRCAmJiAhc3RhdGUucGFyZW50O1xufTtcblxudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIGNhbGwodGFzaywgZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBzdGF0ZS5mYWNhZGU7XG4gICAgaWYgKElTX05PREUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFJFSkVDVElPTl9IQU5ETEVELCBwcm9taXNlLCBzdGF0ZS52YWx1ZSk7XG4gIH0pO1xufTtcblxudmFyIGJpbmQgPSBmdW5jdGlvbiAoZm4sIHN0YXRlLCB1bndyYXApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGZuKHN0YXRlLCB2YWx1ZSwgdW53cmFwKTtcbiAgfTtcbn07XG5cbnZhciBpbnRlcm5hbFJlamVjdCA9IGZ1bmN0aW9uIChzdGF0ZSwgdmFsdWUsIHVud3JhcCkge1xuICBpZiAoc3RhdGUuZG9uZSkgcmV0dXJuO1xuICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgaWYgKHVud3JhcCkgc3RhdGUgPSB1bndyYXA7XG4gIHN0YXRlLnZhbHVlID0gdmFsdWU7XG4gIHN0YXRlLnN0YXRlID0gUkVKRUNURUQ7XG4gIG5vdGlmeShzdGF0ZSwgdHJ1ZSk7XG59O1xuXG52YXIgaW50ZXJuYWxSZXNvbHZlID0gZnVuY3Rpb24gKHN0YXRlLCB2YWx1ZSwgdW53cmFwKSB7XG4gIGlmIChzdGF0ZS5kb25lKSByZXR1cm47XG4gIHN0YXRlLmRvbmUgPSB0cnVlO1xuICBpZiAodW53cmFwKSBzdGF0ZSA9IHVud3JhcDtcbiAgdHJ5IHtcbiAgICBpZiAoc3RhdGUuZmFjYWRlID09PSB2YWx1ZSkgdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgdmFyIHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKTtcbiAgICBpZiAodGhlbikge1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7IGRvbmU6IGZhbHNlIH07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2FsbCh0aGVuLCB2YWx1ZSxcbiAgICAgICAgICAgIGJpbmQoaW50ZXJuYWxSZXNvbHZlLCB3cmFwcGVyLCBzdGF0ZSksXG4gICAgICAgICAgICBiaW5kKGludGVybmFsUmVqZWN0LCB3cmFwcGVyLCBzdGF0ZSlcbiAgICAgICAgICApO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGludGVybmFsUmVqZWN0KHdyYXBwZXIsIGVycm9yLCBzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgc3RhdGUuc3RhdGUgPSBGVUxGSUxMRUQ7XG4gICAgICBub3RpZnkoc3RhdGUsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaW50ZXJuYWxSZWplY3QoeyBkb25lOiBmYWxzZSB9LCBlcnJvciwgc3RhdGUpO1xuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYgKEZPUkNFRF9QUk9NSVNFX0NPTlNUUlVDVE9SKSB7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gIFByb21pc2VDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsIFByb21pc2VQcm90b3R5cGUpO1xuICAgIGFDYWxsYWJsZShleGVjdXRvcik7XG4gICAgY2FsbChJbnRlcm5hbCwgdGhpcyk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGJpbmQoaW50ZXJuYWxSZXNvbHZlLCBzdGF0ZSksIGJpbmQoaW50ZXJuYWxSZWplY3QsIHN0YXRlKSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGludGVybmFsUmVqZWN0KHN0YXRlLCBlcnJvcik7XG4gICAgfVxuICB9O1xuXG4gIFByb21pc2VQcm90b3R5cGUgPSBQcm9taXNlQ29uc3RydWN0b3IucHJvdG90eXBlO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgdHlwZTogUFJPTUlTRSxcbiAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgbm90aWZpZWQ6IGZhbHNlLFxuICAgICAgcGFyZW50OiBmYWxzZSxcbiAgICAgIHJlYWN0aW9uczogbmV3IFF1ZXVlKCksXG4gICAgICByZWplY3Rpb246IGZhbHNlLFxuICAgICAgc3RhdGU6IFBFTkRJTkcsXG4gICAgICB2YWx1ZTogdW5kZWZpbmVkXG4gICAgfSk7XG4gIH07XG5cbiAgLy8gYFByb21pc2UucHJvdG90eXBlLnRoZW5gIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucHJvdG90eXBlLnRoZW5cbiAgSW50ZXJuYWwucHJvdG90eXBlID0gZGVmaW5lQnVpbHRJbihQcm9taXNlUHJvdG90eXBlLCAndGhlbicsIGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFByb21pc2VTdGF0ZSh0aGlzKTtcbiAgICB2YXIgcmVhY3Rpb24gPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgUHJvbWlzZUNvbnN0cnVjdG9yKSk7XG4gICAgc3RhdGUucGFyZW50ID0gdHJ1ZTtcbiAgICByZWFjdGlvbi5vayA9IGlzQ2FsbGFibGUob25GdWxmaWxsZWQpID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgIHJlYWN0aW9uLmZhaWwgPSBpc0NhbGxhYmxlKG9uUmVqZWN0ZWQpICYmIG9uUmVqZWN0ZWQ7XG4gICAgcmVhY3Rpb24uZG9tYWluID0gSVNfTk9ERSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgIGlmIChzdGF0ZS5zdGF0ZSA9PSBQRU5ESU5HKSBzdGF0ZS5yZWFjdGlvbnMuYWRkKHJlYWN0aW9uKTtcbiAgICBlbHNlIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICBjYWxsUmVhY3Rpb24ocmVhY3Rpb24sIHN0YXRlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgfSk7XG5cbiAgT3duUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgSW50ZXJuYWwoKTtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFByb21pc2VTdGF0ZShwcm9taXNlKTtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGJpbmQoaW50ZXJuYWxSZXNvbHZlLCBzdGF0ZSk7XG4gICAgdGhpcy5yZWplY3QgPSBiaW5kKGludGVybmFsUmVqZWN0LCBzdGF0ZSk7XG4gIH07XG5cbiAgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgICByZXR1cm4gQyA9PT0gUHJvbWlzZUNvbnN0cnVjdG9yIHx8IEMgPT09IFByb21pc2VXcmFwcGVyXG4gICAgICA/IG5ldyBPd25Qcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgOiBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gIH07XG5cbiAgaWYgKCFJU19QVVJFICYmIGlzQ2FsbGFibGUoTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yKSAmJiBOYXRpdmVQcm9taXNlUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKSB7XG4gICAgbmF0aXZlVGhlbiA9IE5hdGl2ZVByb21pc2VQcm90b3R5cGUudGhlbjtcblxuICAgIGlmICghTkFUSVZFX1BST01JU0VfU1VCQ0xBU1NJTkcpIHtcbiAgICAgIC8vIG1ha2UgYFByb21pc2UjdGhlbmAgcmV0dXJuIGEgcG9seWZpbGxlZCBgUHJvbWlzZWAgZm9yIG5hdGl2ZSBwcm9taXNlLWJhc2VkIEFQSXNcbiAgICAgIGRlZmluZUJ1aWx0SW4oTmF0aXZlUHJvbWlzZVByb3RvdHlwZSwgJ3RoZW4nLCBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlQ29uc3RydWN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGNhbGwobmF0aXZlVGhlbiwgdGhhdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSkudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCk7XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjQwXG4gICAgICB9LCB7IHVuc2FmZTogdHJ1ZSB9KTtcbiAgICB9XG5cbiAgICAvLyBtYWtlIGAuY29uc3RydWN0b3IgPT09IFByb21pc2VgIHdvcmsgZm9yIG5hdGl2ZSBwcm9taXNlLWJhc2VkIEFQSXNcbiAgICB0cnkge1xuICAgICAgZGVsZXRlIE5hdGl2ZVByb21pc2VQcm90b3R5cGUuY29uc3RydWN0b3I7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuXG4gICAgLy8gbWFrZSBgaW5zdGFuY2VvZiBQcm9taXNlYCB3b3JrIGZvciBuYXRpdmUgcHJvbWlzZS1iYXNlZCBBUElzXG4gICAgaWYgKHNldFByb3RvdHlwZU9mKSB7XG4gICAgICBzZXRQcm90b3R5cGVPZihOYXRpdmVQcm9taXNlUHJvdG90eXBlLCBQcm9taXNlUHJvdG90eXBlKTtcbiAgICB9XG4gIH1cbn1cblxuJCh7IGdsb2JhbDogdHJ1ZSwgY29uc3RydWN0b3I6IHRydWUsIHdyYXA6IHRydWUsIGZvcmNlZDogRk9SQ0VEX1BST01JU0VfQ09OU1RSVUNUT1IgfSwge1xuICBQcm9taXNlOiBQcm9taXNlQ29uc3RydWN0b3Jcbn0pO1xuXG5zZXRUb1N0cmluZ1RhZyhQcm9taXNlQ29uc3RydWN0b3IsIFBST01JU0UsIGZhbHNlLCB0cnVlKTtcbnNldFNwZWNpZXMoUFJPTUlTRSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1uYXRpdmUtY29uc3RydWN0b3InKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcblxudmFyIE5hdGl2ZVByb21pc2VQcm90b3R5cGUgPSBOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IgJiYgTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxuLy8gU2FmYXJpIGJ1ZyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjAwODI5XG52YXIgTk9OX0dFTkVSSUMgPSAhIU5hdGl2ZVByb21pc2VDb25zdHJ1Y3RvciAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB1bmljb3JuL25vLXRoZW5hYmxlIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIE5hdGl2ZVByb21pc2VQcm90b3R5cGVbJ2ZpbmFsbHknXS5jYWxsKHsgdGhlbjogZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9IH0sIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuLy8gYFByb21pc2UucHJvdG90eXBlLmZpbmFsbHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnByb3RvdHlwZS5maW5hbGx5XG4kKHsgdGFyZ2V0OiAnUHJvbWlzZScsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IE5PTl9HRU5FUklDIH0sIHtcbiAgJ2ZpbmFsbHknOiBmdW5jdGlvbiAob25GaW5hbGx5KSB7XG4gICAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgZ2V0QnVpbHRJbignUHJvbWlzZScpKTtcbiAgICB2YXIgaXNGdW5jdGlvbiA9IGlzQ2FsbGFibGUob25GaW5hbGx5KTtcbiAgICByZXR1cm4gdGhpcy50aGVuKFxuICAgICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiB4OyB9KTtcbiAgICAgIH0gOiBvbkZpbmFsbHksXG4gICAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgdGhyb3cgZTsgfSk7XG4gICAgICB9IDogb25GaW5hbGx5XG4gICAgKTtcbiAgfVxufSk7XG5cbi8vIG1ha2VzIHN1cmUgdGhhdCBuYXRpdmUgcHJvbWlzZS1iYXNlZCBBUElzIGBQcm9taXNlI2ZpbmFsbHlgIHByb3Blcmx5IHdvcmtzIHdpdGggcGF0Y2hlZCBgUHJvbWlzZSN0aGVuYFxuaWYgKCFJU19QVVJFICYmIGlzQ2FsbGFibGUoTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yKSkge1xuICB2YXIgbWV0aG9kID0gZ2V0QnVpbHRJbignUHJvbWlzZScpLnByb3RvdHlwZVsnZmluYWxseSddO1xuICBpZiAoTmF0aXZlUHJvbWlzZVByb3RvdHlwZVsnZmluYWxseSddICE9PSBtZXRob2QpIHtcbiAgICBkZWZpbmVCdWlsdEluKE5hdGl2ZVByb21pc2VQcm90b3R5cGUsICdmaW5hbGx5JywgbWV0aG9kLCB7IHVuc2FmZTogdHJ1ZSB9KTtcbiAgfVxufVxuIiwiLy8gVE9ETzogUmVtb3ZlIHRoaXMgbW9kdWxlIGZyb20gYGNvcmUtanNANGAgc2luY2UgaXQncyBzcGxpdCB0byBtb2R1bGVzIGxpc3RlZCBiZWxvd1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5wcm9taXNlLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnByb21pc2UuYWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnByb21pc2UuY2F0Y2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucHJvbWlzZS5yYWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnByb21pc2UucmVqZWN0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnByb21pc2UucmVzb2x2ZScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wZXJmb3JtJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgUFJPTUlTRV9TVEFUSUNTX0lOQ09SUkVDVF9JVEVSQVRJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1zdGF0aWNzLWluY29ycmVjdC1pdGVyYXRpb24nKTtcblxuLy8gYFByb21pc2UucmFjZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucmFjZVxuJCh7IHRhcmdldDogJ1Byb21pc2UnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IFBST01JU0VfU1RBVElDU19JTkNPUlJFQ1RfSVRFUkFUSU9OIH0sIHtcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYoQyk7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkcHJvbWlzZVJlc29sdmUgPSBhQ2FsbGFibGUoQy5yZXNvbHZlKTtcbiAgICAgIGl0ZXJhdGUoaXRlcmFibGUsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIGNhbGwoJHByb21pc2VSZXNvbHZlLCBDLCBwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZXJyb3IpIHJlamVjdChyZXN1bHQudmFsdWUpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIEZPUkNFRF9QUk9NSVNFX0NPTlNUUlVDVE9SID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtY29uc3RydWN0b3ItZGV0ZWN0aW9uJykuQ09OU1RSVUNUT1I7XG5cbi8vIGBQcm9taXNlLnJlamVjdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucmVqZWN0XG4kKHsgdGFyZ2V0OiAnUHJvbWlzZScsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEX1BST01JU0VfQ09OU1RSVUNUT1IgfSwge1xuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKSB7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mKHRoaXMpO1xuICAgIGNhbGwoY2FwYWJpbGl0eS5yZWplY3QsIHVuZGVmaW5lZCwgcik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIE5hdGl2ZVByb21pc2VDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wcm9taXNlLW5hdGl2ZS1jb25zdHJ1Y3RvcicpO1xudmFyIEZPUkNFRF9QUk9NSVNFX0NPTlNUUlVDVE9SID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtY29uc3RydWN0b3ItZGV0ZWN0aW9uJykuQ09OU1RSVUNUT1I7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlJyk7XG5cbnZhciBQcm9taXNlQ29uc3RydWN0b3JXcmFwcGVyID0gZ2V0QnVpbHRJbignUHJvbWlzZScpO1xudmFyIENIRUNLX1dSQVBQRVIgPSBJU19QVVJFICYmICFGT1JDRURfUFJPTUlTRV9DT05TVFJVQ1RPUjtcblxuLy8gYFByb21pc2UucmVzb2x2ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucmVzb2x2ZVxuJCh7IHRhcmdldDogJ1Byb21pc2UnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfHwgRk9SQ0VEX1BST01JU0VfQ09OU1RSVUNUT1IgfSwge1xuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQ0hFQ0tfV1JBUFBFUiAmJiB0aGlzID09PSBQcm9taXNlQ29uc3RydWN0b3JXcmFwcGVyID8gTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZnVuY3Rpb25BcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gTVMgRWRnZSBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG52YXIgT1BUSU9OQUxfQVJHVU1FTlRTX0xJU1QgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1yZWZsZWN0IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIFJlZmxlY3QuYXBwbHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4vLyBgUmVmbGVjdC5hcHBseWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3QuYXBwbHlcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBPUFRJT05BTF9BUkdVTUVOVFNfTElTVCB9LCB7XG4gIGFwcGx5OiBmdW5jdGlvbiBhcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdCkge1xuICAgIHJldHVybiBmdW5jdGlvbkFwcGx5KGFDYWxsYWJsZSh0YXJnZXQpLCB0aGlzQXJndW1lbnQsIGFuT2JqZWN0KGFyZ3VtZW50c0xpc3QpKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGFwcGx5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWFwcGx5Jyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kJyk7XG52YXIgYUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY29uc3RydWN0b3InKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBuYXRpdmVDb25zdHJ1Y3QgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ2NvbnN0cnVjdCcpO1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG52YXIgcHVzaCA9IFtdLnB1c2g7XG5cbi8vIGBSZWZsZWN0LmNvbnN0cnVjdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3QuY29uc3RydWN0XG4vLyBNUyBFZGdlIHN1cHBvcnRzIG9ubHkgMiBhcmd1bWVudHMgYW5kIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbi8vIEZGIE5pZ2h0bHkgc2V0cyB0aGlyZCBhcmd1bWVudCBhcyBgbmV3LnRhcmdldGAsIGJ1dCBkb2VzIG5vdCBjcmVhdGUgYHRoaXNgIGZyb20gaXRcbnZhciBORVdfVEFSR0VUX0JVRyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShuYXRpdmVDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCBbXSwgRikgaW5zdGFuY2VvZiBGKTtcbn0pO1xuXG52YXIgQVJHU19CVUcgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBuYXRpdmVDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG52YXIgRk9SQ0VEID0gTkVXX1RBUkdFVF9CVUcgfHwgQVJHU19CVUc7XG5cbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQsIHNoYW06IEZPUkNFRCB9LCB7XG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gY29uc3RydWN0KFRhcmdldCwgYXJncyAvKiAsIG5ld1RhcmdldCAqLykge1xuICAgIGFDb25zdHJ1Y3RvcihUYXJnZXQpO1xuICAgIGFuT2JqZWN0KGFyZ3MpO1xuICAgIHZhciBuZXdUYXJnZXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IFRhcmdldCA6IGFDb25zdHJ1Y3Rvcihhcmd1bWVudHNbMl0pO1xuICAgIGlmIChBUkdTX0JVRyAmJiAhTkVXX1RBUkdFVF9CVUcpIHJldHVybiBuYXRpdmVDb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzLCBuZXdUYXJnZXQpO1xuICAgIGlmIChUYXJnZXQgPT0gbmV3VGFyZ2V0KSB7XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIG9wdGltaXphdGlvbiBmb3IgMC00IGFyZ3VtZW50c1xuICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgVGFyZ2V0KCk7XG4gICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSk7XG4gICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgICB9XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIGxvdCBvZiBhcmd1bWVudHMgY2FzZVxuICAgICAgdmFyICRhcmdzID0gW251bGxdO1xuICAgICAgYXBwbHkocHVzaCwgJGFyZ3MsIGFyZ3MpO1xuICAgICAgcmV0dXJuIG5ldyAoYXBwbHkoYmluZCwgVGFyZ2V0LCAkYXJncykpKCk7XG4gICAgfVxuICAgIC8vIHdpdGggYWx0ZXJlZCBuZXdUYXJnZXQsIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGNvbnN0cnVjdG9yc1xuICAgIHZhciBwcm90byA9IG5ld1RhcmdldC5wcm90b3R5cGU7XG4gICAgdmFyIGluc3RhbmNlID0gY3JlYXRlKGlzT2JqZWN0KHByb3RvKSA/IHByb3RvIDogT2JqZWN0UHJvdG90eXBlKTtcbiAgICB2YXIgcmVzdWx0ID0gYXBwbHkoVGFyZ2V0LCBpbnN0YW5jZSwgYXJncyk7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiBpbnN0YW5jZTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIE1TIEVkZ2UgaGFzIGJyb2tlbiBSZWZsZWN0LmRlZmluZVByb3BlcnR5IC0gdGhyb3dpbmcgaW5zdGVhZCBvZiByZXR1cm5pbmcgZmFsc2VcbnZhciBFUlJPUl9JTlNURUFEX09GX0ZBTFNFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1yZWZsZWN0IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkoZGVmaW5lUHJvcGVydHlNb2R1bGUuZih7fSwgMSwgeyB2YWx1ZTogMSB9KSwgMSwgeyB2YWx1ZTogMiB9KTtcbn0pO1xuXG4vLyBgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3QuZGVmaW5lcHJvcGVydHlcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBFUlJPUl9JTlNURUFEX09GX0ZBTFNFLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBkZWZpbmVQcm9wZXJ0eTogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcykge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgdmFyIGtleSA9IHRvUHJvcGVydHlLZXkocHJvcGVydHlLZXkpO1xuICAgIGFuT2JqZWN0KGF0dHJpYnV0ZXMpO1xuICAgIHRyeSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKHRhcmdldCwga2V5LCBhdHRyaWJ1dGVzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcblxuLy8gYFJlZmxlY3QuZGVsZXRlUHJvcGVydHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LmRlbGV0ZXByb3BlcnR5XG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgICByZXR1cm4gZGVzY3JpcHRvciAmJiAhZGVzY3JpcHRvci5jb25maWd1cmFibGUgPyBmYWxzZSA6IGRlbGV0ZSB0YXJnZXRbcHJvcGVydHlLZXldO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxuLy8gYFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgb2JqZWN0R2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyJyk7XG5cbi8vIGBSZWZsZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5nZXRwcm90b3R5cGVvZlxuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlLCBzaGFtOiAhQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSIH0sIHtcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKHRhcmdldCkge1xuICAgIHJldHVybiBvYmplY3RHZXRQcm90b3R5cGVPZihhbk9iamVjdCh0YXJnZXQpKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc0RhdGFEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWRhdGEtZGVzY3JpcHRvcicpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcblxuLy8gYFJlZmxlY3QuZ2V0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5nZXRcbmZ1bmN0aW9uIGdldCh0YXJnZXQsIHByb3BlcnR5S2V5IC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiBhcmd1bWVudHNbMl07XG4gIHZhciBkZXNjcmlwdG9yLCBwcm90b3R5cGU7XG4gIGlmIChhbk9iamVjdCh0YXJnZXQpID09PSByZWNlaXZlcikgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZih0YXJnZXQsIHByb3BlcnR5S2V5KTtcbiAgaWYgKGRlc2NyaXB0b3IpIHJldHVybiBpc0RhdGFEZXNjcmlwdG9yKGRlc2NyaXB0b3IpXG4gICAgPyBkZXNjcmlwdG9yLnZhbHVlXG4gICAgOiBkZXNjcmlwdG9yLmdldCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogY2FsbChkZXNjcmlwdG9yLmdldCwgcmVjZWl2ZXIpO1xuICBpZiAoaXNPYmplY3QocHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHJldHVybiBnZXQocHJvdG90eXBlLCBwcm9wZXJ0eUtleSwgcmVjZWl2ZXIpO1xufVxuXG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBnZXQ6IGdldFxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gYFJlZmxlY3QuaGFzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5oYXNcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGhhczogZnVuY3Rpb24gaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICByZXR1cm4gcHJvcGVydHlLZXkgaW4gdGFyZ2V0O1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyICRpc0V4dGVuc2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLWV4dGVuc2libGUnKTtcblxuLy8gYFJlZmxlY3QuaXNFeHRlbnNpYmxlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5pc2V4dGVuc2libGVcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGlzRXh0ZW5zaWJsZTogZnVuY3Rpb24gaXNFeHRlbnNpYmxlKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcmV0dXJuICRpc0V4dGVuc2libGUodGFyZ2V0KTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG5cbi8vIGBSZWZsZWN0Lm93bktleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0Lm93bmtleXNcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIG93bktleXM6IG93bktleXNcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBGUkVFWklORyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mcmVlemluZycpO1xuXG4vLyBgUmVmbGVjdC5wcmV2ZW50RXh0ZW5zaW9uc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3QucHJldmVudGV4dGVuc2lvbnNcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSwgc2hhbTogIUZSRUVaSU5HIH0sIHtcbiAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBvYmplY3RQcmV2ZW50RXh0ZW5zaW9ucyA9IGdldEJ1aWx0SW4oJ09iamVjdCcsICdwcmV2ZW50RXh0ZW5zaW9ucycpO1xuICAgICAgaWYgKG9iamVjdFByZXZlbnRFeHRlbnNpb25zKSBvYmplY3RQcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYVBvc3NpYmxlUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlJyk7XG52YXIgb2JqZWN0U2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcblxuLy8gYFJlZmxlY3Quc2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LnNldHByb3RvdHlwZW9mXG5pZiAob2JqZWN0U2V0UHJvdG90eXBlT2YpICQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIHNldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICBhUG9zc2libGVQcm90b3R5cGUocHJvdG8pO1xuICAgIHRyeSB7XG4gICAgICBvYmplY3RTZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzRGF0YURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZGF0YS1kZXNjcmlwdG9yJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG4vLyBgUmVmbGVjdC5zZXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LnNldFxuZnVuY3Rpb24gc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgNCA/IHRhcmdldCA6IGFyZ3VtZW50c1szXTtcbiAgdmFyIG93bkRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIHZhciBleGlzdGluZ0Rlc2NyaXB0b3IsIHByb3RvdHlwZSwgc2V0dGVyO1xuICBpZiAoIW93bkRlc2NyaXB0b3IpIHtcbiAgICBpZiAoaXNPYmplY3QocHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHtcbiAgICAgIHJldHVybiBzZXQocHJvdG90eXBlLCBwcm9wZXJ0eUtleSwgViwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgICBvd25EZXNjcmlwdG9yID0gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDApO1xuICB9XG4gIGlmIChpc0RhdGFEZXNjcmlwdG9yKG93bkRlc2NyaXB0b3IpKSB7XG4gICAgaWYgKG93bkRlc2NyaXB0b3Iud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5KSkge1xuICAgICAgaWYgKGV4aXN0aW5nRGVzY3JpcHRvci5nZXQgfHwgZXhpc3RpbmdEZXNjcmlwdG9yLnNldCB8fCBleGlzdGluZ0Rlc2NyaXB0b3Iud3JpdGFibGUgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG4gICAgICBleGlzdGluZ0Rlc2NyaXB0b3IudmFsdWUgPSBWO1xuICAgICAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGV4aXN0aW5nRGVzY3JpcHRvcik7XG4gICAgfSBlbHNlIGRlZmluZVByb3BlcnR5TW9kdWxlLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgVikpO1xuICB9IGVsc2Uge1xuICAgIHNldHRlciA9IG93bkRlc2NyaXB0b3Iuc2V0O1xuICAgIGlmIChzZXR0ZXIgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZhbHNlO1xuICAgIGNhbGwoc2V0dGVyLCByZWNlaXZlciwgVik7XG4gIH0gcmV0dXJuIHRydWU7XG59XG5cbi8vIE1TIEVkZ2UgMTctMTggUmVmbGVjdC5zZXQgYWxsb3dzIHNldHRpbmcgdGhlIHByb3BlcnR5IHRvIG9iamVjdFxuLy8gd2l0aCBub24td3JpdGFibGUgcHJvcGVydHkgb24gdGhlIHByb3RvdHlwZVxudmFyIE1TX0VER0VfQlVHID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgQ29uc3RydWN0b3IgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG4gIHZhciBvYmplY3QgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG5ldyBDb25zdHJ1Y3RvcigpLCAnYScsIHsgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1yZWZsZWN0IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBSZWZsZWN0LnNldChDb25zdHJ1Y3Rvci5wcm90b3R5cGUsICdhJywgMSwgb2JqZWN0KSAhPT0gZmFsc2U7XG59KTtcblxuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IE1TX0VER0VfQlVHIH0sIHtcbiAgc2V0OiBzZXRcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG5cbiQoeyBnbG9iYWw6IHRydWUgfSwgeyBSZWZsZWN0OiB7fSB9KTtcblxuLy8gUmVmbGVjdFtAQHRvU3RyaW5nVGFnXSBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LUBAdG9zdHJpbmd0YWdcbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5SZWZsZWN0LCAnUmVmbGVjdCcsIHRydWUpO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcmVnZXhwJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgZ2V0UmVnRXhwRmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWdldC1mbGFncycpO1xudmFyIHN0aWNreUhlbHBlcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXN0aWNreS1oZWxwZXJzJyk7XG52YXIgcHJveHlBY2Nlc3NvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wcm94eS1hY2Nlc3NvcicpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGVuZm9yY2VJbnRlcm5hbFN0YXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJykuZW5mb3JjZTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgVU5TVVBQT1JURURfRE9UX0FMTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtdW5zdXBwb3J0ZWQtZG90LWFsbCcpO1xudmFyIFVOU1VQUE9SVEVEX05DRyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtdW5zdXBwb3J0ZWQtbmNnJyk7XG5cbnZhciBNQVRDSCA9IHdlbGxLbm93blN5bWJvbCgnbWF0Y2gnKTtcbnZhciBOYXRpdmVSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xudmFyIFJlZ0V4cFByb3RvdHlwZSA9IE5hdGl2ZVJlZ0V4cC5wcm90b3R5cGU7XG52YXIgU3ludGF4RXJyb3IgPSBnbG9iYWwuU3ludGF4RXJyb3I7XG52YXIgZXhlYyA9IHVuY3VycnlUaGlzKFJlZ0V4cFByb3RvdHlwZS5leGVjKTtcbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBzdHJpbmdJbmRleE9mID0gdW5jdXJyeVRoaXMoJycuaW5kZXhPZik7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG4vLyBUT0RPOiBVc2Ugb25seSBwcm9wZXIgUmVnRXhwSWRlbnRpZmllck5hbWVcbnZhciBJU19OQ0cgPSAvXlxcPzxbXlxcc1xcZCEjJSYqKzw9PkBeXVteXFxzISMlJiorPD0+QF5dKj4vO1xudmFyIHJlMSA9IC9hL2c7XG52YXIgcmUyID0gL2EvZztcblxuLy8gXCJuZXdcIiBzaG91bGQgY3JlYXRlIGEgbmV3IG9iamVjdCwgb2xkIHdlYmtpdCBidWdcbnZhciBDT1JSRUNUX05FVyA9IG5ldyBOYXRpdmVSZWdFeHAocmUxKSAhPT0gcmUxO1xuXG52YXIgTUlTU0VEX1NUSUNLWSA9IHN0aWNreUhlbHBlcnMuTUlTU0VEX1NUSUNLWTtcbnZhciBVTlNVUFBPUlRFRF9ZID0gc3RpY2t5SGVscGVycy5VTlNVUFBPUlRFRF9ZO1xuXG52YXIgQkFTRV9GT1JDRUQgPSBERVNDUklQVE9SUyAmJlxuICAoIUNPUlJFQ1RfTkVXIHx8IE1JU1NFRF9TVElDS1kgfHwgVU5TVVBQT1JURURfRE9UX0FMTCB8fCBVTlNVUFBPUlRFRF9OQ0cgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHJlMltNQVRDSF0gPSBmYWxzZTtcbiAgICAvLyBSZWdFeHAgY29uc3RydWN0b3IgY2FuIGFsdGVyIGZsYWdzIGFuZCBJc1JlZ0V4cCB3b3JrcyBjb3JyZWN0IHdpdGggQEBtYXRjaFxuICAgIHJldHVybiBOYXRpdmVSZWdFeHAocmUxKSAhPSByZTEgfHwgTmF0aXZlUmVnRXhwKHJlMikgPT0gcmUyIHx8IE5hdGl2ZVJlZ0V4cChyZTEsICdpJykgIT0gJy9hL2knO1xuICB9KSk7XG5cbnZhciBoYW5kbGVEb3RBbGwgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIHZhciBicmFja2V0cyA9IGZhbHNlO1xuICB2YXIgY2hyO1xuICBmb3IgKDsgaW5kZXggPD0gbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgY2hyID0gY2hhckF0KHN0cmluZywgaW5kZXgpO1xuICAgIGlmIChjaHIgPT09ICdcXFxcJykge1xuICAgICAgcmVzdWx0ICs9IGNociArIGNoYXJBdChzdHJpbmcsICsraW5kZXgpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmICghYnJhY2tldHMgJiYgY2hyID09PSAnLicpIHtcbiAgICAgIHJlc3VsdCArPSAnW1xcXFxzXFxcXFNdJztcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGNociA9PT0gJ1snKSB7XG4gICAgICAgIGJyYWNrZXRzID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoY2hyID09PSAnXScpIHtcbiAgICAgICAgYnJhY2tldHMgPSBmYWxzZTtcbiAgICAgIH0gcmVzdWx0ICs9IGNocjtcbiAgICB9XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciBoYW5kbGVOQ0cgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIHZhciBuYW1lZCA9IFtdO1xuICB2YXIgbmFtZXMgPSB7fTtcbiAgdmFyIGJyYWNrZXRzID0gZmFsc2U7XG4gIHZhciBuY2cgPSBmYWxzZTtcbiAgdmFyIGdyb3VwaWQgPSAwO1xuICB2YXIgZ3JvdXBuYW1lID0gJyc7XG4gIHZhciBjaHI7XG4gIGZvciAoOyBpbmRleCA8PSBsZW5ndGg7IGluZGV4KyspIHtcbiAgICBjaHIgPSBjaGFyQXQoc3RyaW5nLCBpbmRleCk7XG4gICAgaWYgKGNociA9PT0gJ1xcXFwnKSB7XG4gICAgICBjaHIgPSBjaHIgKyBjaGFyQXQoc3RyaW5nLCArK2luZGV4KTtcbiAgICB9IGVsc2UgaWYgKGNociA9PT0gJ10nKSB7XG4gICAgICBicmFja2V0cyA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoIWJyYWNrZXRzKSBzd2l0Y2ggKHRydWUpIHtcbiAgICAgIGNhc2UgY2hyID09PSAnWyc6XG4gICAgICAgIGJyYWNrZXRzID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGNociA9PT0gJygnOlxuICAgICAgICBpZiAoZXhlYyhJU19OQ0csIHN0cmluZ1NsaWNlKHN0cmluZywgaW5kZXggKyAxKSkpIHtcbiAgICAgICAgICBpbmRleCArPSAyO1xuICAgICAgICAgIG5jZyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ICs9IGNocjtcbiAgICAgICAgZ3JvdXBpZCsrO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIGNhc2UgY2hyID09PSAnPicgJiYgbmNnOlxuICAgICAgICBpZiAoZ3JvdXBuYW1lID09PSAnJyB8fCBoYXNPd24obmFtZXMsIGdyb3VwbmFtZSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ0ludmFsaWQgY2FwdHVyZSBncm91cCBuYW1lJyk7XG4gICAgICAgIH1cbiAgICAgICAgbmFtZXNbZ3JvdXBuYW1lXSA9IHRydWU7XG4gICAgICAgIG5hbWVkW25hbWVkLmxlbmd0aF0gPSBbZ3JvdXBuYW1lLCBncm91cGlkXTtcbiAgICAgICAgbmNnID0gZmFsc2U7XG4gICAgICAgIGdyb3VwbmFtZSA9ICcnO1xuICAgICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKG5jZykgZ3JvdXBuYW1lICs9IGNocjtcbiAgICBlbHNlIHJlc3VsdCArPSBjaHI7XG4gIH0gcmV0dXJuIFtyZXN1bHQsIG5hbWVkXTtcbn07XG5cbi8vIGBSZWdFeHBgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC1jb25zdHJ1Y3RvclxuaWYgKGlzRm9yY2VkKCdSZWdFeHAnLCBCQVNFX0ZPUkNFRCkpIHtcbiAgdmFyIFJlZ0V4cFdyYXBwZXIgPSBmdW5jdGlvbiBSZWdFeHAocGF0dGVybiwgZmxhZ3MpIHtcbiAgICB2YXIgdGhpc0lzUmVnRXhwID0gaXNQcm90b3R5cGVPZihSZWdFeHBQcm90b3R5cGUsIHRoaXMpO1xuICAgIHZhciBwYXR0ZXJuSXNSZWdFeHAgPSBpc1JlZ0V4cChwYXR0ZXJuKTtcbiAgICB2YXIgZmxhZ3NBcmVVbmRlZmluZWQgPSBmbGFncyA9PT0gdW5kZWZpbmVkO1xuICAgIHZhciBncm91cHMgPSBbXTtcbiAgICB2YXIgcmF3UGF0dGVybiA9IHBhdHRlcm47XG4gICAgdmFyIHJhd0ZsYWdzLCBkb3RBbGwsIHN0aWNreSwgaGFuZGxlZCwgcmVzdWx0LCBzdGF0ZTtcblxuICAgIGlmICghdGhpc0lzUmVnRXhwICYmIHBhdHRlcm5Jc1JlZ0V4cCAmJiBmbGFnc0FyZVVuZGVmaW5lZCAmJiBwYXR0ZXJuLmNvbnN0cnVjdG9yID09PSBSZWdFeHBXcmFwcGVyKSB7XG4gICAgICByZXR1cm4gcGF0dGVybjtcbiAgICB9XG5cbiAgICBpZiAocGF0dGVybklzUmVnRXhwIHx8IGlzUHJvdG90eXBlT2YoUmVnRXhwUHJvdG90eXBlLCBwYXR0ZXJuKSkge1xuICAgICAgcGF0dGVybiA9IHBhdHRlcm4uc291cmNlO1xuICAgICAgaWYgKGZsYWdzQXJlVW5kZWZpbmVkKSBmbGFncyA9IGdldFJlZ0V4cEZsYWdzKHJhd1BhdHRlcm4pO1xuICAgIH1cblxuICAgIHBhdHRlcm4gPSBwYXR0ZXJuID09PSB1bmRlZmluZWQgPyAnJyA6IHRvU3RyaW5nKHBhdHRlcm4pO1xuICAgIGZsYWdzID0gZmxhZ3MgPT09IHVuZGVmaW5lZCA/ICcnIDogdG9TdHJpbmcoZmxhZ3MpO1xuICAgIHJhd1BhdHRlcm4gPSBwYXR0ZXJuO1xuXG4gICAgaWYgKFVOU1VQUE9SVEVEX0RPVF9BTEwgJiYgJ2RvdEFsbCcgaW4gcmUxKSB7XG4gICAgICBkb3RBbGwgPSAhIWZsYWdzICYmIHN0cmluZ0luZGV4T2YoZmxhZ3MsICdzJykgPiAtMTtcbiAgICAgIGlmIChkb3RBbGwpIGZsYWdzID0gcmVwbGFjZShmbGFncywgL3MvZywgJycpO1xuICAgIH1cblxuICAgIHJhd0ZsYWdzID0gZmxhZ3M7XG5cbiAgICBpZiAoTUlTU0VEX1NUSUNLWSAmJiAnc3RpY2t5JyBpbiByZTEpIHtcbiAgICAgIHN0aWNreSA9ICEhZmxhZ3MgJiYgc3RyaW5nSW5kZXhPZihmbGFncywgJ3knKSA+IC0xO1xuICAgICAgaWYgKHN0aWNreSAmJiBVTlNVUFBPUlRFRF9ZKSBmbGFncyA9IHJlcGxhY2UoZmxhZ3MsIC95L2csICcnKTtcbiAgICB9XG5cbiAgICBpZiAoVU5TVVBQT1JURURfTkNHKSB7XG4gICAgICBoYW5kbGVkID0gaGFuZGxlTkNHKHBhdHRlcm4pO1xuICAgICAgcGF0dGVybiA9IGhhbmRsZWRbMF07XG4gICAgICBncm91cHMgPSBoYW5kbGVkWzFdO1xuICAgIH1cblxuICAgIHJlc3VsdCA9IGluaGVyaXRJZlJlcXVpcmVkKE5hdGl2ZVJlZ0V4cChwYXR0ZXJuLCBmbGFncyksIHRoaXNJc1JlZ0V4cCA/IHRoaXMgOiBSZWdFeHBQcm90b3R5cGUsIFJlZ0V4cFdyYXBwZXIpO1xuXG4gICAgaWYgKGRvdEFsbCB8fCBzdGlja3kgfHwgZ3JvdXBzLmxlbmd0aCkge1xuICAgICAgc3RhdGUgPSBlbmZvcmNlSW50ZXJuYWxTdGF0ZShyZXN1bHQpO1xuICAgICAgaWYgKGRvdEFsbCkge1xuICAgICAgICBzdGF0ZS5kb3RBbGwgPSB0cnVlO1xuICAgICAgICBzdGF0ZS5yYXcgPSBSZWdFeHBXcmFwcGVyKGhhbmRsZURvdEFsbChwYXR0ZXJuKSwgcmF3RmxhZ3MpO1xuICAgICAgfVxuICAgICAgaWYgKHN0aWNreSkgc3RhdGUuc3RpY2t5ID0gdHJ1ZTtcbiAgICAgIGlmIChncm91cHMubGVuZ3RoKSBzdGF0ZS5ncm91cHMgPSBncm91cHM7XG4gICAgfVxuXG4gICAgaWYgKHBhdHRlcm4gIT09IHJhd1BhdHRlcm4pIHRyeSB7XG4gICAgICAvLyBmYWlscyBpbiBvbGQgZW5naW5lcywgYnV0IHdlIGhhdmUgbm8gYWx0ZXJuYXRpdmVzIGZvciB1bnN1cHBvcnRlZCByZWdleCBzeW50YXhcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShyZXN1bHQsICdzb3VyY2UnLCByYXdQYXR0ZXJuID09PSAnJyA/ICcoPzopJyA6IHJhd1BhdHRlcm4pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgZm9yICh2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoTmF0aXZlUmVnRXhwKSwgaW5kZXggPSAwOyBrZXlzLmxlbmd0aCA+IGluZGV4Oykge1xuICAgIHByb3h5QWNjZXNzb3IoUmVnRXhwV3JhcHBlciwgTmF0aXZlUmVnRXhwLCBrZXlzW2luZGV4KytdKTtcbiAgfVxuXG4gIFJlZ0V4cFByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJlZ0V4cFdyYXBwZXI7XG4gIFJlZ0V4cFdyYXBwZXIucHJvdG90eXBlID0gUmVnRXhwUHJvdG90eXBlO1xuICBkZWZpbmVCdWlsdEluKGdsb2JhbCwgJ1JlZ0V4cCcsIFJlZ0V4cFdyYXBwZXIsIHsgY29uc3RydWN0b3I6IHRydWUgfSk7XG59XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0LXJlZ2V4cC1AQHNwZWNpZXNcbnNldFNwZWNpZXMoJ1JlZ0V4cCcpO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgVU5TVVBQT1JURURfRE9UX0FMTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtdW5zdXBwb3J0ZWQtZG90LWFsbCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBkZWZpbmVCdWlsdEluQWNjZXNzb3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluLWFjY2Vzc29yJyk7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpLmdldDtcblxudmFyIFJlZ0V4cFByb3RvdHlwZSA9IFJlZ0V4cC5wcm90b3R5cGU7XG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuLy8gYFJlZ0V4cC5wcm90b3R5cGUuZG90QWxsYCBnZXR0ZXJcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0LXJlZ2V4cC5wcm90b3R5cGUuZG90YWxsXG5pZiAoREVTQ1JJUFRPUlMgJiYgVU5TVVBQT1JURURfRE9UX0FMTCkge1xuICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoUmVnRXhwUHJvdG90eXBlLCAnZG90QWxsJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGRvdEFsbCgpIHtcbiAgICAgIGlmICh0aGlzID09PSBSZWdFeHBQcm90b3R5cGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAvLyBXZSBjYW4ndCB1c2UgSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IgYmVjYXVzZVxuICAgICAgLy8gd2UgZG9uJ3QgYWRkIG1ldGFkYXRhIGZvciByZWdleHBzIGNyZWF0ZWQgYnkgYSBsaXRlcmFsLlxuICAgICAgaWYgKGNsYXNzb2YodGhpcykgPT09ICdSZWdFeHAnKSB7XG4gICAgICAgIHJldHVybiAhIWdldEludGVybmFsU3RhdGUodGhpcykuZG90QWxsO1xuICAgICAgfVxuICAgICAgdGhyb3cgJFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCBSZWdFeHAgcmVxdWlyZWQnKTtcbiAgICB9XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYycpO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS5leGVjYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS5leGVjXG4kKHsgdGFyZ2V0OiAnUmVnRXhwJywgcHJvdG86IHRydWUsIGZvcmNlZDogLy4vLmV4ZWMgIT09IGV4ZWMgfSwge1xuICBleGVjOiBleGVjXG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVCdWlsdEluQWNjZXNzb3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluLWFjY2Vzc29yJyk7XG52YXIgcmVnRXhwRmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gYmFiZWwtbWluaWZ5IGFuZCBDbG9zdXJlIENvbXBpbGVyIHRyYW5zcGlsZXMgUmVnRXhwKCcuJywgJ2QnKSAtPiAvLi9kIGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbnZhciBSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xudmFyIFJlZ0V4cFByb3RvdHlwZSA9IFJlZ0V4cC5wcm90b3R5cGU7XG5cbnZhciBGT1JDRUQgPSBERVNDUklQVE9SUyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBJTkRJQ0VTX1NVUFBPUlQgPSB0cnVlO1xuICB0cnkge1xuICAgIFJlZ0V4cCgnLicsICdkJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgSU5ESUNFU19TVVBQT1JUID0gZmFsc2U7XG4gIH1cblxuICB2YXIgTyA9IHt9O1xuICAvLyBtb2Rlcm4gVjggYnVnXG4gIHZhciBjYWxscyA9ICcnO1xuICB2YXIgZXhwZWN0ZWQgPSBJTkRJQ0VTX1NVUFBPUlQgPyAnZGdpbXN5JyA6ICdnaW1zeSc7XG5cbiAgdmFyIGFkZEdldHRlciA9IGZ1bmN0aW9uIChrZXksIGNocikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbGxzICs9IGNocjtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gfSk7XG4gIH07XG5cbiAgdmFyIHBhaXJzID0ge1xuICAgIGRvdEFsbDogJ3MnLFxuICAgIGdsb2JhbDogJ2cnLFxuICAgIGlnbm9yZUNhc2U6ICdpJyxcbiAgICBtdWx0aWxpbmU6ICdtJyxcbiAgICBzdGlja3k6ICd5J1xuICB9O1xuXG4gIGlmIChJTkRJQ0VTX1NVUFBPUlQpIHBhaXJzLmhhc0luZGljZXMgPSAnZCc7XG5cbiAgZm9yICh2YXIga2V5IGluIHBhaXJzKSBhZGRHZXR0ZXIoa2V5LCBwYWlyc1trZXldKTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbiAgdmFyIHJlc3VsdCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoUmVnRXhwUHJvdG90eXBlLCAnZmxhZ3MnKS5nZXQuY2FsbChPKTtcblxuICByZXR1cm4gcmVzdWx0ICE9PSBleHBlY3RlZCB8fCBjYWxscyAhPT0gZXhwZWN0ZWQ7XG59KTtcblxuLy8gYFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NgIGdldHRlclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtcmVnZXhwLnByb3RvdHlwZS5mbGFnc1xuaWYgKEZPUkNFRCkgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKFJlZ0V4cFByb3RvdHlwZSwgJ2ZsYWdzJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogcmVnRXhwRmxhZ3Ncbn0pO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgTUlTU0VEX1NUSUNLWSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtc3RpY2t5LWhlbHBlcnMnKS5NSVNTRURfU1RJQ0tZO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBkZWZpbmVCdWlsdEluQWNjZXNzb3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluLWFjY2Vzc29yJyk7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpLmdldDtcblxudmFyIFJlZ0V4cFByb3RvdHlwZSA9IFJlZ0V4cC5wcm90b3R5cGU7XG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuLy8gYFJlZ0V4cC5wcm90b3R5cGUuc3RpY2t5YCBnZXR0ZXJcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0LXJlZ2V4cC5wcm90b3R5cGUuc3RpY2t5XG5pZiAoREVTQ1JJUFRPUlMgJiYgTUlTU0VEX1NUSUNLWSkge1xuICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoUmVnRXhwUHJvdG90eXBlLCAnc3RpY2t5Jywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIHN0aWNreSgpIHtcbiAgICAgIGlmICh0aGlzID09PSBSZWdFeHBQcm90b3R5cGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAvLyBXZSBjYW4ndCB1c2UgSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IgYmVjYXVzZVxuICAgICAgLy8gd2UgZG9uJ3QgYWRkIG1ldGFkYXRhIGZvciByZWdleHBzIGNyZWF0ZWQgYnkgYSBsaXRlcmFsLlxuICAgICAgaWYgKGNsYXNzb2YodGhpcykgPT09ICdSZWdFeHAnKSB7XG4gICAgICAgIHJldHVybiAhIWdldEludGVybmFsU3RhdGUodGhpcykuc3RpY2t5O1xuICAgICAgfVxuICAgICAgdGhyb3cgJFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCBSZWdFeHAgcmVxdWlyZWQnKTtcbiAgICB9XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGAgc2luY2UgaXQncyBtb3ZlZCB0byBlbnRyeSBwb2ludHNcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMnKTtcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcblxudmFyIERFTEVHQVRFU19UT19FWEVDID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZXhlY0NhbGxlZCA9IGZhbHNlO1xuICB2YXIgcmUgPSAvW2FjXS87XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7XG4gICAgZXhlY0NhbGxlZCA9IHRydWU7XG4gICAgcmV0dXJuIC8uLy5leGVjLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG4gIHJldHVybiByZS50ZXN0KCdhYmMnKSA9PT0gdHJ1ZSAmJiBleGVjQ2FsbGVkO1xufSgpO1xuXG52YXIgbmF0aXZlVGVzdCA9IC8uLy50ZXN0O1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS50ZXN0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50ZXN0XG4kKHsgdGFyZ2V0OiAnUmVnRXhwJywgcHJvdG86IHRydWUsIGZvcmNlZDogIURFTEVHQVRFU19UT19FWEVDIH0sIHtcbiAgdGVzdDogZnVuY3Rpb24gKFMpIHtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHZhciBzdHJpbmcgPSB0b1N0cmluZyhTKTtcbiAgICB2YXIgZXhlYyA9IFIuZXhlYztcbiAgICBpZiAoIWlzQ2FsbGFibGUoZXhlYykpIHJldHVybiBjYWxsKG5hdGl2ZVRlc3QsIFIsIHN0cmluZyk7XG4gICAgdmFyIHJlc3VsdCA9IGNhbGwoZXhlYywgUiwgc3RyaW5nKTtcbiAgICBpZiAocmVzdWx0ID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gICAgYW5PYmplY3QocmVzdWx0KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgUFJPUEVSX0ZVTkNUSU9OX05BTUUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpLlBST1BFUjtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyICR0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdldFJlZ0V4cEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1nZXQtZmxhZ3MnKTtcblxudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgUmVnRXhwUHJvdG90eXBlID0gUmVnRXhwLnByb3RvdHlwZTtcbnZhciBuYXRpdmVUb1N0cmluZyA9IFJlZ0V4cFByb3RvdHlwZVtUT19TVFJJTkddO1xuXG52YXIgTk9UX0dFTkVSSUMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IHJldHVybiBuYXRpdmVUb1N0cmluZy5jYWxsKHsgc291cmNlOiAnYScsIGZsYWdzOiAnYicgfSkgIT0gJy9hL2InOyB9KTtcbi8vIEZGNDQtIFJlZ0V4cCN0b1N0cmluZyBoYXMgYSB3cm9uZyBuYW1lXG52YXIgSU5DT1JSRUNUX05BTUUgPSBQUk9QRVJfRlVOQ1RJT05fTkFNRSAmJiBuYXRpdmVUb1N0cmluZy5uYW1lICE9IFRPX1NUUklORztcblxuLy8gYFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG5pZiAoTk9UX0dFTkVSSUMgfHwgSU5DT1JSRUNUX05BTUUpIHtcbiAgZGVmaW5lQnVpbHRJbihSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIHBhdHRlcm4gPSAkdG9TdHJpbmcoUi5zb3VyY2UpO1xuICAgIHZhciBmbGFncyA9ICR0b1N0cmluZyhnZXRSZWdFeHBGbGFncyhSKSk7XG4gICAgcmV0dXJuICcvJyArIHBhdHRlcm4gKyAnLycgKyBmbGFncztcbiAgfSwgeyB1bnNhZmU6IHRydWUgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY29sbGVjdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uJyk7XG52YXIgY29sbGVjdGlvblN0cm9uZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uLXN0cm9uZycpO1xuXG4vLyBgU2V0YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQtb2JqZWN0c1xuY29sbGVjdGlvbignU2V0JywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFNldCgpIHsgcmV0dXJuIGluaXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCBjb2xsZWN0aW9uU3Ryb25nKTtcbiIsIi8vIFRPRE86IFJlbW92ZSB0aGlzIG1vZHVsZSBmcm9tIGBjb3JlLWpzQDRgIHNpbmNlIGl0J3MgcmVwbGFjZWQgdG8gbW9kdWxlIGJlbG93XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnNldC5jb25zdHJ1Y3RvcicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmFuY2hvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuYW5jaG9yXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnYW5jaG9yJykgfSwge1xuICBhbmNob3I6IGZ1bmN0aW9uIGFuY2hvcihuYW1lKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnbmFtZScsIG5hbWUpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG5cbnZhciBGT1JDRUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLWFycmF5LXN0cmluZy1wcm90b3R5cGUtYXQgLS0gc2FmZVxuICByZXR1cm4gJ/CgrrcnLmF0KC0yKSAhPT0gJ1xcdUQ4NDInO1xufSk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmF0YCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXJlbGF0aXZlLWluZGV4aW5nLW1ldGhvZFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIGF0OiBmdW5jdGlvbiBhdChpbmRleCkge1xuICAgIHZhciBTID0gdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSk7XG4gICAgdmFyIGxlbiA9IFMubGVuZ3RoO1xuICAgIHZhciByZWxhdGl2ZUluZGV4ID0gdG9JbnRlZ2VyT3JJbmZpbml0eShpbmRleCk7XG4gICAgdmFyIGsgPSByZWxhdGl2ZUluZGV4ID49IDAgPyByZWxhdGl2ZUluZGV4IDogbGVuICsgcmVsYXRpdmVJbmRleDtcbiAgICByZXR1cm4gKGsgPCAwIHx8IGsgPj0gbGVuKSA/IHVuZGVmaW5lZCA6IGNoYXJBdChTLCBrKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuYmlnYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5iaWdcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdiaWcnKSB9LCB7XG4gIGJpZzogZnVuY3Rpb24gYmlnKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiaWcnLCAnJywgJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5ibGlua2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuYmxpbmtcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdibGluaycpIH0sIHtcbiAgYmxpbms6IGZ1bmN0aW9uIGJsaW5rKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdibGluaycsICcnLCAnJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmJvbGRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmJvbGRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdib2xkJykgfSwge1xuICBib2xkOiBmdW5jdGlvbiBib2xkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiJywgJycsICcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjb2RlQXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZScpLmNvZGVBdDtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmNvZGVwb2ludGF0XG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUgfSwge1xuICBjb2RlUG9pbnRBdDogZnVuY3Rpb24gY29kZVBvaW50QXQocG9zKSB7XG4gICAgcmV0dXJuIGNvZGVBdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBub3RBUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25vdC1hLXJlZ2V4cCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgY29ycmVjdElzUmVnRXhwTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1pcy1yZWdleHAtbG9naWMnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tc3RyaW5nLXByb3RvdHlwZS1lbmRzd2l0aCAtLSBzYWZlXG52YXIgbmF0aXZlRW5kc1dpdGggPSB1bmN1cnJ5VGhpcygnJy5lbmRzV2l0aCk7XG52YXIgc2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG52YXIgbWluID0gTWF0aC5taW47XG5cbnZhciBDT1JSRUNUX0lTX1JFR0VYUF9MT0dJQyA9IGNvcnJlY3RJc1JlZ0V4cExvZ2ljKCdlbmRzV2l0aCcpO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvcHVsbC83MDJcbnZhciBNRE5fUE9MWUZJTExfQlVHID0gIUlTX1BVUkUgJiYgIUNPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDICYmICEhZnVuY3Rpb24gKCkge1xuICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihTdHJpbmcucHJvdG90eXBlLCAnZW5kc1dpdGgnKTtcbiAgcmV0dXJuIGRlc2NyaXB0b3IgJiYgIWRlc2NyaXB0b3Iud3JpdGFibGU7XG59KCk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5lbmRzd2l0aFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFNRE5fUE9MWUZJTExfQlVHICYmICFDT1JSRUNUX0lTX1JFR0VYUF9MT0dJQyB9LCB7XG4gIGVuZHNXaXRoOiBmdW5jdGlvbiBlbmRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBlbmRQb3NpdGlvbiA9IEBsZW5ndGggKi8pIHtcbiAgICB2YXIgdGhhdCA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgIG5vdEFSZWdFeHAoc2VhcmNoU3RyaW5nKTtcbiAgICB2YXIgZW5kUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbGVuID0gdGhhdC5sZW5ndGg7XG4gICAgdmFyIGVuZCA9IGVuZFBvc2l0aW9uID09PSB1bmRlZmluZWQgPyBsZW4gOiBtaW4odG9MZW5ndGgoZW5kUG9zaXRpb24pLCBsZW4pO1xuICAgIHZhciBzZWFyY2ggPSB0b1N0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiBuYXRpdmVFbmRzV2l0aFxuICAgICAgPyBuYXRpdmVFbmRzV2l0aCh0aGF0LCBzZWFyY2gsIGVuZClcbiAgICAgIDogc2xpY2UodGhhdCwgZW5kIC0gc2VhcmNoLmxlbmd0aCwgZW5kKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5maXhlZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuZml4ZWRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdmaXhlZCcpIH0sIHtcbiAgZml4ZWQ6IGZ1bmN0aW9uIGZpeGVkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICd0dCcsICcnLCAnJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmZvbnRjb2xvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuZm9udGNvbG9yXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnZm9udGNvbG9yJykgfSwge1xuICBmb250Y29sb3I6IGZ1bmN0aW9uIGZvbnRjb2xvcihjb2xvcikge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ2NvbG9yJywgY29sb3IpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuZm9udHNpemVcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdmb250c2l6ZScpIH0sIHtcbiAgZm9udHNpemU6IGZ1bmN0aW9uIGZvbnRzaXplKHNpemUpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdzaXplJywgc2l6ZSk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG5cbnZhciAkUmFuZ2VFcnJvciA9IFJhbmdlRXJyb3I7XG52YXIgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLXN0cmluZy1mcm9tY29kZXBvaW50IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG52YXIgJGZyb21Db2RlUG9pbnQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludDtcbnZhciBqb2luID0gdW5jdXJyeVRoaXMoW10uam9pbik7XG5cbi8vIGxlbmd0aCBzaG91bGQgYmUgMSwgb2xkIEZGIHByb2JsZW1cbnZhciBJTkNPUlJFQ1RfTEVOR1RIID0gISEkZnJvbUNvZGVQb2ludCAmJiAkZnJvbUNvZGVQb2ludC5sZW5ndGggIT0gMTtcblxuLy8gYFN0cmluZy5mcm9tQ29kZVBvaW50YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLmZyb21jb2RlcG9pbnRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBzdGF0OiB0cnVlLCBhcml0eTogMSwgZm9yY2VkOiBJTkNPUlJFQ1RfTEVOR1RIIH0sIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgZnJvbUNvZGVQb2ludDogZnVuY3Rpb24gZnJvbUNvZGVQb2ludCh4KSB7XG4gICAgdmFyIGVsZW1lbnRzID0gW107XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBjb2RlO1xuICAgIHdoaWxlIChsZW5ndGggPiBpKSB7XG4gICAgICBjb2RlID0gK2FyZ3VtZW50c1tpKytdO1xuICAgICAgaWYgKHRvQWJzb2x1dGVJbmRleChjb2RlLCAweDEwRkZGRikgIT09IGNvZGUpIHRocm93ICRSYW5nZUVycm9yKGNvZGUgKyAnIGlzIG5vdCBhIHZhbGlkIGNvZGUgcG9pbnQnKTtcbiAgICAgIGVsZW1lbnRzW2ldID0gY29kZSA8IDB4MTAwMDBcbiAgICAgICAgPyBmcm9tQ2hhckNvZGUoY29kZSlcbiAgICAgICAgOiBmcm9tQ2hhckNvZGUoKChjb2RlIC09IDB4MTAwMDApID4+IDEwKSArIDB4RDgwMCwgY29kZSAlIDB4NDAwICsgMHhEQzAwKTtcbiAgICB9IHJldHVybiBqb2luKGVsZW1lbnRzLCAnJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgbm90QVJlZ0V4cCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ub3QtYS1yZWdleHAnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGNvcnJlY3RJc1JlZ0V4cExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtaXMtcmVnZXhwLWxvZ2ljJyk7XG5cbnZhciBzdHJpbmdJbmRleE9mID0gdW5jdXJyeVRoaXMoJycuaW5kZXhPZik7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlc1xuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFjb3JyZWN0SXNSZWdFeHBMb2dpYygnaW5jbHVkZXMnKSB9LCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICByZXR1cm4gISF+c3RyaW5nSW5kZXhPZihcbiAgICAgIHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpLFxuICAgICAgdG9TdHJpbmcobm90QVJlZ0V4cChzZWFyY2hTdHJpbmcpKSxcbiAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkXG4gICAgKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuaXRhbGljc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuaXRhbGljc1xuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ2l0YWxpY3MnKSB9LCB7XG4gIGl0YWxpY3M6IGZ1bmN0aW9uIGl0YWxpY3MoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2knLCAnJywgJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjaGFyQXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZScpLmNoYXJBdDtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgZGVmaW5lSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3ItZGVmaW5lJyk7XG52YXIgY3JlYXRlSXRlclJlc3VsdE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaXRlci1yZXN1bHQtb2JqZWN0Jyk7XG5cbnZhciBTVFJJTkdfSVRFUkFUT1IgPSAnU3RyaW5nIEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFNUUklOR19JVEVSQVRPUik7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS1AQGl0ZXJhdG9yXG5kZWZpbmVJdGVyYXRvcihTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogU1RSSU5HX0lURVJBVE9SLFxuICAgIHN0cmluZzogdG9TdHJpbmcoaXRlcmF0ZWQpLFxuICAgIGluZGV4OiAwXG4gIH0pO1xuLy8gYCVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSVzdHJpbmdpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gbmV4dCgpIHtcbiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgdmFyIHN0cmluZyA9IHN0YXRlLnN0cmluZztcbiAgdmFyIGluZGV4ID0gc3RhdGUuaW5kZXg7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IHN0cmluZy5sZW5ndGgpIHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KHVuZGVmaW5lZCwgdHJ1ZSk7XG4gIHBvaW50ID0gY2hhckF0KHN0cmluZywgaW5kZXgpO1xuICBzdGF0ZS5pbmRleCArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KHBvaW50LCBmYWxzZSk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5saW5rYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5saW5rXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnbGluaycpIH0sIHtcbiAgbGluazogZnVuY3Rpb24gbGluayh1cmwpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICdocmVmJywgdXJsKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBlcy14L25vLXN0cmluZy1wcm90b3R5cGUtbWF0Y2hhbGwgLS0gc2FmZSAqL1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1jcmVhdGUtY29uc3RydWN0b3InKTtcbnZhciBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyLXJlc3VsdC1vYmplY3QnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzTnVsbE9yVW5kZWZpbmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW51bGwtb3ItdW5kZWZpbmVkJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xudmFyIGdldFJlZ0V4cEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1nZXQtZmxhZ3MnKTtcbnZhciBnZXRNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1ldGhvZCcpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbnZhciBNQVRDSF9BTEwgPSB3ZWxsS25vd25TeW1ib2woJ21hdGNoQWxsJyk7XG52YXIgUkVHRVhQX1NUUklORyA9ICdSZWdFeHAgU3RyaW5nJztcbnZhciBSRUdFWFBfU1RSSU5HX0lURVJBVE9SID0gUkVHRVhQX1NUUklORyArICcgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoUkVHRVhQX1NUUklOR19JVEVSQVRPUik7XG52YXIgUmVnRXhwUHJvdG90eXBlID0gUmVnRXhwLnByb3RvdHlwZTtcbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xudmFyIHN0cmluZ0luZGV4T2YgPSB1bmN1cnJ5VGhpcygnJy5pbmRleE9mKTtcbnZhciBuYXRpdmVNYXRjaEFsbCA9IHVuY3VycnlUaGlzKCcnLm1hdGNoQWxsKTtcblxudmFyIFdPUktTX1dJVEhfTk9OX0dMT0JBTF9SRUdFWCA9ICEhbmF0aXZlTWF0Y2hBbGwgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgbmF0aXZlTWF0Y2hBbGwoJ2EnLCAvLi8pO1xufSk7XG5cbnZhciAkUmVnRXhwU3RyaW5nSXRlcmF0b3IgPSBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yKGZ1bmN0aW9uIFJlZ0V4cFN0cmluZ0l0ZXJhdG9yKHJlZ2V4cCwgc3RyaW5nLCAkZ2xvYmFsLCBmdWxsVW5pY29kZSkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBSRUdFWFBfU1RSSU5HX0lURVJBVE9SLFxuICAgIHJlZ2V4cDogcmVnZXhwLFxuICAgIHN0cmluZzogc3RyaW5nLFxuICAgIGdsb2JhbDogJGdsb2JhbCxcbiAgICB1bmljb2RlOiBmdWxsVW5pY29kZSxcbiAgICBkb25lOiBmYWxzZVxuICB9KTtcbn0sIFJFR0VYUF9TVFJJTkcsIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gIGlmIChzdGF0ZS5kb25lKSByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdCh1bmRlZmluZWQsIHRydWUpO1xuICB2YXIgUiA9IHN0YXRlLnJlZ2V4cDtcbiAgdmFyIFMgPSBzdGF0ZS5zdHJpbmc7XG4gIHZhciBtYXRjaCA9IHJlZ0V4cEV4ZWMoUiwgUyk7XG4gIGlmIChtYXRjaCA9PT0gbnVsbCkge1xuICAgIHN0YXRlLmRvbmUgPSB0cnVlO1xuICAgIHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KHVuZGVmaW5lZCwgdHJ1ZSk7XG4gIH1cbiAgaWYgKHN0YXRlLmdsb2JhbCkge1xuICAgIGlmICh0b1N0cmluZyhtYXRjaFswXSkgPT09ICcnKSBSLmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChSLmxhc3RJbmRleCksIHN0YXRlLnVuaWNvZGUpO1xuICAgIHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KG1hdGNoLCBmYWxzZSk7XG4gIH1cbiAgc3RhdGUuZG9uZSA9IHRydWU7XG4gIHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KG1hdGNoLCBmYWxzZSk7XG59KTtcblxudmFyICRtYXRjaEFsbCA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgdmFyIFIgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIFMgPSB0b1N0cmluZyhzdHJpbmcpO1xuICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3RvcihSLCBSZWdFeHApO1xuICB2YXIgZmxhZ3MgPSB0b1N0cmluZyhnZXRSZWdFeHBGbGFncyhSKSk7XG4gIHZhciBtYXRjaGVyLCAkZ2xvYmFsLCBmdWxsVW5pY29kZTtcbiAgbWF0Y2hlciA9IG5ldyBDKEMgPT09IFJlZ0V4cCA/IFIuc291cmNlIDogUiwgZmxhZ3MpO1xuICAkZ2xvYmFsID0gISF+c3RyaW5nSW5kZXhPZihmbGFncywgJ2cnKTtcbiAgZnVsbFVuaWNvZGUgPSAhIX5zdHJpbmdJbmRleE9mKGZsYWdzLCAndScpO1xuICBtYXRjaGVyLmxhc3RJbmRleCA9IHRvTGVuZ3RoKFIubGFzdEluZGV4KTtcbiAgcmV0dXJuIG5ldyAkUmVnRXhwU3RyaW5nSXRlcmF0b3IobWF0Y2hlciwgUywgJGdsb2JhbCwgZnVsbFVuaWNvZGUpO1xufTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUubWF0Y2hBbGxgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLm1hdGNoYWxsXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogV09SS1NfV0lUSF9OT05fR0xPQkFMX1JFR0VYIH0sIHtcbiAgbWF0Y2hBbGw6IGZ1bmN0aW9uIG1hdGNoQWxsKHJlZ2V4cCkge1xuICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICB2YXIgZmxhZ3MsIFMsIG1hdGNoZXIsIHJ4O1xuICAgIGlmICghaXNOdWxsT3JVbmRlZmluZWQocmVnZXhwKSkge1xuICAgICAgaWYgKGlzUmVnRXhwKHJlZ2V4cCkpIHtcbiAgICAgICAgZmxhZ3MgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGdldFJlZ0V4cEZsYWdzKHJlZ2V4cCkpKTtcbiAgICAgICAgaWYgKCF+c3RyaW5nSW5kZXhPZihmbGFncywgJ2cnKSkgdGhyb3cgJFR5cGVFcnJvcignYC5tYXRjaEFsbGAgZG9lcyBub3QgYWxsb3cgbm9uLWdsb2JhbCByZWdleGVzJyk7XG4gICAgICB9XG4gICAgICBpZiAoV09SS1NfV0lUSF9OT05fR0xPQkFMX1JFR0VYKSByZXR1cm4gbmF0aXZlTWF0Y2hBbGwoTywgcmVnZXhwKTtcbiAgICAgIG1hdGNoZXIgPSBnZXRNZXRob2QocmVnZXhwLCBNQVRDSF9BTEwpO1xuICAgICAgaWYgKG1hdGNoZXIgPT09IHVuZGVmaW5lZCAmJiBJU19QVVJFICYmIGNsYXNzb2YocmVnZXhwKSA9PSAnUmVnRXhwJykgbWF0Y2hlciA9ICRtYXRjaEFsbDtcbiAgICAgIGlmIChtYXRjaGVyKSByZXR1cm4gY2FsbChtYXRjaGVyLCByZWdleHAsIE8pO1xuICAgIH0gZWxzZSBpZiAoV09SS1NfV0lUSF9OT05fR0xPQkFMX1JFR0VYKSByZXR1cm4gbmF0aXZlTWF0Y2hBbGwoTywgcmVnZXhwKTtcbiAgICBTID0gdG9TdHJpbmcoTyk7XG4gICAgcnggPSBuZXcgUmVnRXhwKHJlZ2V4cCwgJ2cnKTtcbiAgICByZXR1cm4gSVNfUFVSRSA/IGNhbGwoJG1hdGNoQWxsLCByeCwgUykgOiByeFtNQVRDSF9BTExdKFMpO1xuICB9XG59KTtcblxuSVNfUFVSRSB8fCBNQVRDSF9BTEwgaW4gUmVnRXhwUHJvdG90eXBlIHx8IGRlZmluZUJ1aWx0SW4oUmVnRXhwUHJvdG90eXBlLCBNQVRDSF9BTEwsICRtYXRjaEFsbCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzTnVsbE9yVW5kZWZpbmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW51bGwtb3ItdW5kZWZpbmVkJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBnZXRNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1ldGhvZCcpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcblxuLy8gQEBtYXRjaCBsb2dpY1xuZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMoJ21hdGNoJywgZnVuY3Rpb24gKE1BVENILCBuYXRpdmVNYXRjaCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUubWF0Y2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5tYXRjaFxuICAgIGZ1bmN0aW9uIG1hdGNoKHJlZ2V4cCkge1xuICAgICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgdmFyIG1hdGNoZXIgPSBpc051bGxPclVuZGVmaW5lZChyZWdleHApID8gdW5kZWZpbmVkIDogZ2V0TWV0aG9kKHJlZ2V4cCwgTUFUQ0gpO1xuICAgICAgcmV0dXJuIG1hdGNoZXIgPyBjYWxsKG1hdGNoZXIsIHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbTUFUQ0hdKHRvU3RyaW5nKE8pKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBtYXRjaFxuICAgIGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHRoaXMpO1xuICAgICAgdmFyIFMgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZShuYXRpdmVNYXRjaCwgcngsIFMpO1xuXG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIGlmICghcnguZ2xvYmFsKSByZXR1cm4gcmVnRXhwRXhlYyhyeCwgUyk7XG5cbiAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIEEgPSBbXTtcbiAgICAgIHZhciBuID0gMDtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICB3aGlsZSAoKHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpKSAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgbWF0Y2hTdHIgPSB0b1N0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBBW25dID0gbWF0Y2hTdHI7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICAgIG4rKztcbiAgICAgIH1cbiAgICAgIHJldHVybiBuID09PSAwID8gbnVsbCA6IEE7XG4gICAgfVxuICBdO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkcGFkRW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1wYWQnKS5lbmQ7XG52YXIgV0VCS0lUX0JVRyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcGFkLXdlYmtpdC1idWcnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUucGFkRW5kYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5wYWRlbmRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBXRUJLSVRfQlVHIH0sIHtcbiAgcGFkRW5kOiBmdW5jdGlvbiBwYWRFbmQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkRW5kKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRwYWRTdGFydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcGFkJykuc3RhcnQ7XG52YXIgV0VCS0lUX0JVRyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcGFkLXdlYmtpdC1idWcnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUucGFkU3RhcnRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnBhZHN0YXJ0XG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogV0VCS0lUX0JVRyB9LCB7XG4gIHBhZFN0YXJ0OiBmdW5jdGlvbiBwYWRTdGFydChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWRTdGFydCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xuXG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xudmFyIGpvaW4gPSB1bmN1cnJ5VGhpcyhbXS5qb2luKTtcblxuLy8gYFN0cmluZy5yYXdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucmF3XG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgc3RhdDogdHJ1ZSB9LCB7XG4gIHJhdzogZnVuY3Rpb24gcmF3KHRlbXBsYXRlKSB7XG4gICAgdmFyIHJhd1RlbXBsYXRlID0gdG9JbmRleGVkT2JqZWN0KHRvT2JqZWN0KHRlbXBsYXRlKS5yYXcpO1xuICAgIHZhciBsaXRlcmFsU2VnbWVudHMgPSBsZW5ndGhPZkFycmF5TGlrZShyYXdUZW1wbGF0ZSk7XG4gICAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGVsZW1lbnRzID0gW107XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChsaXRlcmFsU2VnbWVudHMgPiBpKSB7XG4gICAgICBwdXNoKGVsZW1lbnRzLCB0b1N0cmluZyhyYXdUZW1wbGF0ZVtpKytdKSk7XG4gICAgICBpZiAoaSA9PT0gbGl0ZXJhbFNlZ21lbnRzKSByZXR1cm4gam9pbihlbGVtZW50cywgJycpO1xuICAgICAgaWYgKGkgPCBhcmd1bWVudHNMZW5ndGgpIHB1c2goZWxlbWVudHMsIHRvU3RyaW5nKGFyZ3VtZW50c1tpXSkpO1xuICAgIH1cbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXJlcGVhdCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGVhdFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlIH0sIHtcbiAgcmVwZWF0OiByZXBlYXRcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNOdWxsT3JVbmRlZmluZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQnKTtcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1yZWdleHAnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBnZXRNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1ldGhvZCcpO1xudmFyIGdldFJlZ0V4cEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1nZXQtZmxhZ3MnKTtcbnZhciBnZXRTdWJzdGl0dXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LXN1YnN0aXR1dGlvbicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgUkVQTEFDRSA9IHdlbGxLbm93blN5bWJvbCgncmVwbGFjZScpO1xudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG52YXIgaW5kZXhPZiA9IHVuY3VycnlUaGlzKCcnLmluZGV4T2YpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbnZhciBtYXggPSBNYXRoLm1heDtcblxudmFyIHN0cmluZ0luZGV4T2YgPSBmdW5jdGlvbiAoc3RyaW5nLCBzZWFyY2hWYWx1ZSwgZnJvbUluZGV4KSB7XG4gIGlmIChmcm9tSW5kZXggPiBzdHJpbmcubGVuZ3RoKSByZXR1cm4gLTE7XG4gIGlmIChzZWFyY2hWYWx1ZSA9PT0gJycpIHJldHVybiBmcm9tSW5kZXg7XG4gIHJldHVybiBpbmRleE9mKHN0cmluZywgc2VhcmNoVmFsdWUsIGZyb21JbmRleCk7XG59O1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlQWxsYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlYWxsXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUgfSwge1xuICByZXBsYWNlQWxsOiBmdW5jdGlvbiByZXBsYWNlQWxsKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpIHtcbiAgICB2YXIgTyA9IHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG4gICAgdmFyIElTX1JFR19FWFAsIGZsYWdzLCByZXBsYWNlciwgc3RyaW5nLCBzZWFyY2hTdHJpbmcsIGZ1bmN0aW9uYWxSZXBsYWNlLCBzZWFyY2hMZW5ndGgsIGFkdmFuY2VCeSwgcmVwbGFjZW1lbnQ7XG4gICAgdmFyIHBvc2l0aW9uID0gMDtcbiAgICB2YXIgZW5kT2ZMYXN0TWF0Y2ggPSAwO1xuICAgIHZhciByZXN1bHQgPSAnJztcbiAgICBpZiAoIWlzTnVsbE9yVW5kZWZpbmVkKHNlYXJjaFZhbHVlKSkge1xuICAgICAgSVNfUkVHX0VYUCA9IGlzUmVnRXhwKHNlYXJjaFZhbHVlKTtcbiAgICAgIGlmIChJU19SRUdfRVhQKSB7XG4gICAgICAgIGZsYWdzID0gdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZShnZXRSZWdFeHBGbGFncyhzZWFyY2hWYWx1ZSkpKTtcbiAgICAgICAgaWYgKCF+aW5kZXhPZihmbGFncywgJ2cnKSkgdGhyb3cgJFR5cGVFcnJvcignYC5yZXBsYWNlQWxsYCBkb2VzIG5vdCBhbGxvdyBub24tZ2xvYmFsIHJlZ2V4ZXMnKTtcbiAgICAgIH1cbiAgICAgIHJlcGxhY2VyID0gZ2V0TWV0aG9kKHNlYXJjaFZhbHVlLCBSRVBMQUNFKTtcbiAgICAgIGlmIChyZXBsYWNlcikge1xuICAgICAgICByZXR1cm4gY2FsbChyZXBsYWNlciwgc2VhcmNoVmFsdWUsIE8sIHJlcGxhY2VWYWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKElTX1BVUkUgJiYgSVNfUkVHX0VYUCkge1xuICAgICAgICByZXR1cm4gcmVwbGFjZSh0b1N0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHN0cmluZyA9IHRvU3RyaW5nKE8pO1xuICAgIHNlYXJjaFN0cmluZyA9IHRvU3RyaW5nKHNlYXJjaFZhbHVlKTtcbiAgICBmdW5jdGlvbmFsUmVwbGFjZSA9IGlzQ2FsbGFibGUocmVwbGFjZVZhbHVlKTtcbiAgICBpZiAoIWZ1bmN0aW9uYWxSZXBsYWNlKSByZXBsYWNlVmFsdWUgPSB0b1N0cmluZyhyZXBsYWNlVmFsdWUpO1xuICAgIHNlYXJjaExlbmd0aCA9IHNlYXJjaFN0cmluZy5sZW5ndGg7XG4gICAgYWR2YW5jZUJ5ID0gbWF4KDEsIHNlYXJjaExlbmd0aCk7XG4gICAgcG9zaXRpb24gPSBzdHJpbmdJbmRleE9mKHN0cmluZywgc2VhcmNoU3RyaW5nLCAwKTtcbiAgICB3aGlsZSAocG9zaXRpb24gIT09IC0xKSB7XG4gICAgICByZXBsYWNlbWVudCA9IGZ1bmN0aW9uYWxSZXBsYWNlXG4gICAgICAgID8gdG9TdHJpbmcocmVwbGFjZVZhbHVlKHNlYXJjaFN0cmluZywgcG9zaXRpb24sIHN0cmluZykpXG4gICAgICAgIDogZ2V0U3Vic3RpdHV0aW9uKHNlYXJjaFN0cmluZywgc3RyaW5nLCBwb3NpdGlvbiwgW10sIHVuZGVmaW5lZCwgcmVwbGFjZVZhbHVlKTtcbiAgICAgIHJlc3VsdCArPSBzdHJpbmdTbGljZShzdHJpbmcsIGVuZE9mTGFzdE1hdGNoLCBwb3NpdGlvbikgKyByZXBsYWNlbWVudDtcbiAgICAgIGVuZE9mTGFzdE1hdGNoID0gcG9zaXRpb24gKyBzZWFyY2hMZW5ndGg7XG4gICAgICBwb3NpdGlvbiA9IHN0cmluZ0luZGV4T2Yoc3RyaW5nLCBzZWFyY2hTdHJpbmcsIHBvc2l0aW9uICsgYWR2YW5jZUJ5KTtcbiAgICB9XG4gICAgaWYgKGVuZE9mTGFzdE1hdGNoIDwgc3RyaW5nLmxlbmd0aCkge1xuICAgICAgcmVzdWx0ICs9IHN0cmluZ1NsaWNlKHN0cmluZywgZW5kT2ZMYXN0TWF0Y2gpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc051bGxPclVuZGVmaW5lZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1udWxsLW9yLXVuZGVmaW5lZCcpO1xudmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcbnZhciBnZXRTdWJzdGl0dXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LXN1YnN0aXR1dGlvbicpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFJFUExBQ0UgPSB3ZWxsS25vd25TeW1ib2woJ3JlcGxhY2UnKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBjb25jYXQgPSB1bmN1cnJ5VGhpcyhbXS5jb25jYXQpO1xudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcbnZhciBzdHJpbmdJbmRleE9mID0gdW5jdXJyeVRoaXMoJycuaW5kZXhPZik7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbnZhciBtYXliZVRvU3RyaW5nID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gaXQgOiBTdHJpbmcoaXQpO1xufTtcblxuLy8gSUUgPD0gMTEgcmVwbGFjZXMgJDAgd2l0aCB0aGUgd2hvbGUgbWF0Y2gsIGFzIGlmIGl0IHdhcyAkJlxuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjAyNDY2Ni9nZXR0aW5nLWllLXRvLXJlcGxhY2UtYS1yZWdleC13aXRoLXRoZS1saXRlcmFsLXN0cmluZy0wXG52YXIgUkVQTEFDRV9LRUVQU18kMCA9IChmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWdleHAvcHJlZmVyLWVzY2FwZS1yZXBsYWNlbWVudC1kb2xsYXItY2hhciAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gJ2EnLnJlcGxhY2UoLy4vLCAnJDAnKSA9PT0gJyQwJztcbn0pKCk7XG5cbi8vIFNhZmFyaSA8PSAxMy4wLjMoPykgc3Vic3RpdHV0ZXMgbnRoIGNhcHR1cmUgd2hlcmUgbj5tIHdpdGggYW4gZW1wdHkgc3RyaW5nXG52YXIgUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkUgPSAoZnVuY3Rpb24gKCkge1xuICBpZiAoLy4vW1JFUExBQ0VdKSB7XG4gICAgcmV0dXJuIC8uL1tSRVBMQUNFXSgnYScsICckMCcpID09PSAnJztcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59KSgpO1xuXG52YXIgUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUgPSAvLi87XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHJlc3VsdC5ncm91cHMgPSB7IGE6ICc3JyB9O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWdleHAvbm8tdXNlbGVzcy1kb2xsYXItcmVwbGFjZW1lbnRzIC0tIGZhbHNlIHBvc2l0aXZlXG4gIHJldHVybiAnJy5yZXBsYWNlKHJlLCAnJDxhPicpICE9PSAnNyc7XG59KTtcblxuLy8gQEByZXBsYWNlIGxvZ2ljXG5maXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYygncmVwbGFjZScsIGZ1bmN0aW9uIChfLCBuYXRpdmVSZXBsYWNlLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgdmFyIFVOU0FGRV9TVUJTVElUVVRFID0gUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkUgPyAnJCcgOiAnJDAnO1xuXG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUucmVwbGFjZWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGxhY2VcbiAgICBmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgIHZhciByZXBsYWNlciA9IGlzTnVsbE9yVW5kZWZpbmVkKHNlYXJjaFZhbHVlKSA/IHVuZGVmaW5lZCA6IGdldE1ldGhvZChzZWFyY2hWYWx1ZSwgUkVQTEFDRSk7XG4gICAgICByZXR1cm4gcmVwbGFjZXJcbiAgICAgICAgPyBjYWxsKHJlcGxhY2VyLCBzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgICA6IGNhbGwobmF0aXZlUmVwbGFjZSwgdG9TdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAcmVwbGFjZVxuICAgIGZ1bmN0aW9uIChzdHJpbmcsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QodGhpcyk7XG4gICAgICB2YXIgUyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICAgIGlmIChcbiAgICAgICAgdHlwZW9mIHJlcGxhY2VWYWx1ZSA9PSAnc3RyaW5nJyAmJlxuICAgICAgICBzdHJpbmdJbmRleE9mKHJlcGxhY2VWYWx1ZSwgVU5TQUZFX1NVQlNUSVRVVEUpID09PSAtMSAmJlxuICAgICAgICBzdHJpbmdJbmRleE9mKHJlcGxhY2VWYWx1ZSwgJyQ8JykgPT09IC0xXG4gICAgICApIHtcbiAgICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZShuYXRpdmVSZXBsYWNlLCByeCwgUywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgZnVuY3Rpb25hbFJlcGxhY2UgPSBpc0NhbGxhYmxlKHJlcGxhY2VWYWx1ZSk7XG4gICAgICBpZiAoIWZ1bmN0aW9uYWxSZXBsYWNlKSByZXBsYWNlVmFsdWUgPSB0b1N0cmluZyhyZXBsYWNlVmFsdWUpO1xuXG4gICAgICB2YXIgZ2xvYmFsID0gcnguZ2xvYmFsO1xuICAgICAgaWYgKGdsb2JhbCkge1xuICAgICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkgYnJlYWs7XG5cbiAgICAgICAgcHVzaChyZXN1bHRzLCByZXN1bHQpO1xuICAgICAgICBpZiAoIWdsb2JhbCkgYnJlYWs7XG5cbiAgICAgICAgdmFyIG1hdGNoU3RyID0gdG9TdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGFjY3VtdWxhdGVkUmVzdWx0ID0gJyc7XG4gICAgICB2YXIgbmV4dFNvdXJjZVBvc2l0aW9uID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQgPSByZXN1bHRzW2ldO1xuXG4gICAgICAgIHZhciBtYXRjaGVkID0gdG9TdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gbWF4KG1pbih0b0ludGVnZXJPckluZmluaXR5KHJlc3VsdC5pbmRleCksIFMubGVuZ3RoKSwgMCk7XG4gICAgICAgIHZhciBjYXB0dXJlcyA9IFtdO1xuICAgICAgICAvLyBOT1RFOiBUaGlzIGlzIGVxdWl2YWxlbnQgdG9cbiAgICAgICAgLy8gICBjYXB0dXJlcyA9IHJlc3VsdC5zbGljZSgxKS5tYXAobWF5YmVUb1N0cmluZylcbiAgICAgICAgLy8gYnV0IGZvciBzb21lIHJlYXNvbiBgbmF0aXZlU2xpY2UuY2FsbChyZXN1bHQsIDEsIHJlc3VsdC5sZW5ndGgpYCAoY2FsbGVkIGluXG4gICAgICAgIC8vIHRoZSBzbGljZSBwb2x5ZmlsbCB3aGVuIHNsaWNpbmcgbmF0aXZlIGFycmF5cykgXCJkb2Vzbid0IHdvcmtcIiBpbiBzYWZhcmkgOSBhbmRcbiAgICAgICAgLy8gY2F1c2VzIGEgY3Jhc2ggKGh0dHBzOi8vcGFzdGViaW4uY29tL04yMVF6ZVFBKSB3aGVuIHRyeWluZyB0byBkZWJ1ZyBpdC5cbiAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCByZXN1bHQubGVuZ3RoOyBqKyspIHB1c2goY2FwdHVyZXMsIG1heWJlVG9TdHJpbmcocmVzdWx0W2pdKSk7XG4gICAgICAgIHZhciBuYW1lZENhcHR1cmVzID0gcmVzdWx0Lmdyb3VwcztcbiAgICAgICAgaWYgKGZ1bmN0aW9uYWxSZXBsYWNlKSB7XG4gICAgICAgICAgdmFyIHJlcGxhY2VyQXJncyA9IGNvbmNhdChbbWF0Y2hlZF0sIGNhcHR1cmVzLCBwb3NpdGlvbiwgUyk7XG4gICAgICAgICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkgcHVzaChyZXBsYWNlckFyZ3MsIG5hbWVkQ2FwdHVyZXMpO1xuICAgICAgICAgIHZhciByZXBsYWNlbWVudCA9IHRvU3RyaW5nKGFwcGx5KHJlcGxhY2VWYWx1ZSwgdW5kZWZpbmVkLCByZXBsYWNlckFyZ3MpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXBsYWNlbWVudCA9IGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBTLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvc2l0aW9uID49IG5leHRTb3VyY2VQb3NpdGlvbikge1xuICAgICAgICAgIGFjY3VtdWxhdGVkUmVzdWx0ICs9IHN0cmluZ1NsaWNlKFMsIG5leHRTb3VyY2VQb3NpdGlvbiwgcG9zaXRpb24pICsgcmVwbGFjZW1lbnQ7XG4gICAgICAgICAgbmV4dFNvdXJjZVBvc2l0aW9uID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFjY3VtdWxhdGVkUmVzdWx0ICsgc3RyaW5nU2xpY2UoUywgbmV4dFNvdXJjZVBvc2l0aW9uKTtcbiAgICB9XG4gIF07XG59LCAhUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgfHwgIVJFUExBQ0VfS0VFUFNfJDAgfHwgUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc051bGxPclVuZGVmaW5lZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1udWxsLW9yLXVuZGVmaW5lZCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgc2FtZVZhbHVlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NhbWUtdmFsdWUnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBnZXRNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1ldGhvZCcpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcblxuLy8gQEBzZWFyY2ggbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdzZWFyY2gnLCBmdW5jdGlvbiAoU0VBUkNILCBuYXRpdmVTZWFyY2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNlYXJjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNlYXJjaFxuICAgIGZ1bmN0aW9uIHNlYXJjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgIHZhciBzZWFyY2hlciA9IGlzTnVsbE9yVW5kZWZpbmVkKHJlZ2V4cCkgPyB1bmRlZmluZWQgOiBnZXRNZXRob2QocmVnZXhwLCBTRUFSQ0gpO1xuICAgICAgcmV0dXJuIHNlYXJjaGVyID8gY2FsbChzZWFyY2hlciwgcmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtTRUFSQ0hdKHRvU3RyaW5nKE8pKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc2VhcmNoXG4gICAgZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QodGhpcyk7XG4gICAgICB2YXIgUyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZVNlYXJjaCwgcngsIFMpO1xuXG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciBwcmV2aW91c0xhc3RJbmRleCA9IHJ4Lmxhc3RJbmRleDtcbiAgICAgIGlmICghc2FtZVZhbHVlKHByZXZpb3VzTGFzdEluZGV4LCAwKSkgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgIGlmICghc2FtZVZhbHVlKHJ4Lmxhc3RJbmRleCwgcHJldmlvdXNMYXN0SW5kZXgpKSByeC5sYXN0SW5kZXggPSBwcmV2aW91c0xhc3RJbmRleDtcbiAgICAgIHJldHVybiByZXN1bHQgPT09IG51bGwgPyAtMSA6IHJlc3VsdC5pbmRleDtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5zbWFsbGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc21hbGxcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdzbWFsbCcpIH0sIHtcbiAgc21hbGw6IGZ1bmN0aW9uIHNtYWxsKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzbWFsbCcsICcnLCAnJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFwcGx5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWFwcGx5Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzTnVsbE9yVW5kZWZpbmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW51bGwtb3ItdW5kZWZpbmVkJyk7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcmVnZXhwJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZS1zaW1wbGUnKTtcbnZhciBjYWxsUmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMnKTtcbnZhciBzdGlja3lIZWxwZXJzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1zdGlja3ktaGVscGVycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBVTlNVUFBPUlRFRF9ZID0gc3RpY2t5SGVscGVycy5VTlNVUFBPUlRFRF9ZO1xudmFyIE1BWF9VSU5UMzIgPSAweEZGRkZGRkZGO1xudmFyIG1pbiA9IE1hdGgubWluO1xudmFyICRwdXNoID0gW10ucHVzaDtcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoLy4vLmV4ZWMpO1xudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcygkcHVzaCk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbi8vIENocm9tZSA1MSBoYXMgYSBidWdneSBcInNwbGl0XCIgaW1wbGVtZW50YXRpb24gd2hlbiBSZWdFeHAjZXhlYyAhPT0gbmF0aXZlRXhlY1xuLy8gV2VleCBKUyBoYXMgZnJvemVuIGJ1aWx0LWluIHByb3RvdHlwZXMsIHNvIHVzZSB0cnkgLyBjYXRjaCB3cmFwcGVyXG52YXIgU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby1lbXB0eS1ncm91cCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICB2YXIgcmUgPSAvKD86KS87XG4gIHZhciBvcmlnaW5hbEV4ZWMgPSByZS5leGVjO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gb3JpZ2luYWxFeGVjLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gIHZhciByZXN1bHQgPSAnYWInLnNwbGl0KHJlKTtcbiAgcmV0dXJuIHJlc3VsdC5sZW5ndGggIT09IDIgfHwgcmVzdWx0WzBdICE9PSAnYScgfHwgcmVzdWx0WzFdICE9PSAnYic7XG59KTtcblxuLy8gQEBzcGxpdCBsb2dpY1xuZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMoJ3NwbGl0JywgZnVuY3Rpb24gKFNQTElULCBuYXRpdmVTcGxpdCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHZhciBpbnRlcm5hbFNwbGl0O1xuICBpZiAoXG4gICAgJ2FiYmMnLnNwbGl0KC8oYikqLylbMV0gPT0gJ2MnIHx8XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby1lbXB0eS1ncm91cCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICAgICd0ZXN0Jy5zcGxpdCgvKD86KS8sIC0xKS5sZW5ndGggIT0gNCB8fFxuICAgICdhYicuc3BsaXQoLyg/OmFiKSovKS5sZW5ndGggIT0gMiB8fFxuICAgICcuJy5zcGxpdCgvKC4/KSguPykvKS5sZW5ndGggIT0gNCB8fFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWdleHAvbm8tZW1wdHktY2FwdHVyaW5nLWdyb3VwLCByZWdleHAvbm8tZW1wdHktZ3JvdXAgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgICAnLicuc3BsaXQoLygpKCkvKS5sZW5ndGggPiAxIHx8XG4gICAgJycuc3BsaXQoLy4/LykubGVuZ3RoXG4gICkge1xuICAgIC8vIGJhc2VkIG9uIGVzNS1zaGltIGltcGxlbWVudGF0aW9uLCBuZWVkIHRvIHJld29yayBpdFxuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIHN0cmluZyA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgICAgdmFyIGxpbSA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAobGltID09PSAwKSByZXR1cm4gW107XG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQpIHJldHVybiBbc3RyaW5nXTtcbiAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICBpZiAoIWlzUmVnRXhwKHNlcGFyYXRvcikpIHtcbiAgICAgICAgcmV0dXJuIGNhbGwobmF0aXZlU3BsaXQsIHN0cmluZywgc2VwYXJhdG9yLCBsaW0pO1xuICAgICAgfVxuICAgICAgdmFyIG91dHB1dCA9IFtdO1xuICAgICAgdmFyIGZsYWdzID0gKHNlcGFyYXRvci5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnN0aWNreSA/ICd5JyA6ICcnKTtcbiAgICAgIHZhciBsYXN0TGFzdEluZGV4ID0gMDtcbiAgICAgIC8vIE1ha2UgYGdsb2JhbGAgYW5kIGF2b2lkIGBsYXN0SW5kZXhgIGlzc3VlcyBieSB3b3JraW5nIHdpdGggYSBjb3B5XG4gICAgICB2YXIgc2VwYXJhdG9yQ29weSA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyAnZycpO1xuICAgICAgdmFyIG1hdGNoLCBsYXN0SW5kZXgsIGxhc3RMZW5ndGg7XG4gICAgICB3aGlsZSAobWF0Y2ggPSBjYWxsKHJlZ2V4cEV4ZWMsIHNlcGFyYXRvckNvcHksIHN0cmluZykpIHtcbiAgICAgICAgbGFzdEluZGV4ID0gc2VwYXJhdG9yQ29weS5sYXN0SW5kZXg7XG4gICAgICAgIGlmIChsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KSB7XG4gICAgICAgICAgcHVzaChvdXRwdXQsIHN0cmluZ1NsaWNlKHN0cmluZywgbGFzdExhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAgICBpZiAobWF0Y2gubGVuZ3RoID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0cmluZy5sZW5ndGgpIGFwcGx5KCRwdXNoLCBvdXRwdXQsIGFycmF5U2xpY2UobWF0Y2gsIDEpKTtcbiAgICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSBsYXN0SW5kZXg7XG4gICAgICAgICAgaWYgKG91dHB1dC5sZW5ndGggPj0gbGltKSBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VwYXJhdG9yQ29weS5sYXN0SW5kZXggPT09IG1hdGNoLmluZGV4KSBzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleCsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICB9XG4gICAgICBpZiAobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nLmxlbmd0aCkge1xuICAgICAgICBpZiAobGFzdExlbmd0aCB8fCAhZXhlYyhzZXBhcmF0b3JDb3B5LCAnJykpIHB1c2gob3V0cHV0LCAnJyk7XG4gICAgICB9IGVsc2UgcHVzaChvdXRwdXQsIHN0cmluZ1NsaWNlKHN0cmluZywgbGFzdExhc3RJbmRleCkpO1xuICAgICAgcmV0dXJuIG91dHB1dC5sZW5ndGggPiBsaW0gPyBhcnJheVNsaWNlKG91dHB1dCwgMCwgbGltKSA6IG91dHB1dDtcbiAgICB9O1xuICAvLyBDaGFrcmEsIFY4XG4gIH0gZWxzZSBpZiAoJzAnLnNwbGl0KHVuZGVmaW5lZCwgMCkubGVuZ3RoKSB7XG4gICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICByZXR1cm4gc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDAgPyBbXSA6IGNhbGwobmF0aXZlU3BsaXQsIHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH07XG4gIH0gZWxzZSBpbnRlcm5hbFNwbGl0ID0gbmF0aXZlU3BsaXQ7XG5cbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5zcGxpdGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNwbGl0XG4gICAgZnVuY3Rpb24gc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgdmFyIHNwbGl0dGVyID0gaXNOdWxsT3JVbmRlZmluZWQoc2VwYXJhdG9yKSA/IHVuZGVmaW5lZCA6IGdldE1ldGhvZChzZXBhcmF0b3IsIFNQTElUKTtcbiAgICAgIHJldHVybiBzcGxpdHRlclxuICAgICAgICA/IGNhbGwoc3BsaXR0ZXIsIHNlcGFyYXRvciwgTywgbGltaXQpXG4gICAgICAgIDogY2FsbChpbnRlcm5hbFNwbGl0LCB0b1N0cmluZyhPKSwgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc3BsaXRcbiAgICAvL1xuICAgIC8vIE5PVEU6IFRoaXMgY2Fubm90IGJlIHByb3Blcmx5IHBvbHlmaWxsZWQgaW4gZW5naW5lcyB0aGF0IGRvbid0IHN1cHBvcnRcbiAgICAvLyB0aGUgJ3knIGZsYWcuXG4gICAgZnVuY3Rpb24gKHN0cmluZywgbGltaXQpIHtcbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHRoaXMpO1xuICAgICAgdmFyIFMgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZShpbnRlcm5hbFNwbGl0LCByeCwgUywgbGltaXQsIGludGVybmFsU3BsaXQgIT09IG5hdGl2ZVNwbGl0KTtcblxuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3RvcihyeCwgUmVnRXhwKTtcblxuICAgICAgdmFyIHVuaWNvZGVNYXRjaGluZyA9IHJ4LnVuaWNvZGU7XG4gICAgICB2YXIgZmxhZ3MgPSAocnguaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocngubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyeC51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChVTlNVUFBPUlRFRF9ZID8gJ2cnIDogJ3knKTtcblxuICAgICAgLy8gXig/ICsgcnggKyApIGlzIG5lZWRlZCwgaW4gY29tYmluYXRpb24gd2l0aCBzb21lIFMgc2xpY2luZywgdG9cbiAgICAgIC8vIHNpbXVsYXRlIHRoZSAneScgZmxhZy5cbiAgICAgIHZhciBzcGxpdHRlciA9IG5ldyBDKFVOU1VQUE9SVEVEX1kgPyAnXig/OicgKyByeC5zb3VyY2UgKyAnKScgOiByeCwgZmxhZ3MpO1xuICAgICAgdmFyIGxpbSA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAobGltID09PSAwKSByZXR1cm4gW107XG4gICAgICBpZiAoUy5sZW5ndGggPT09IDApIHJldHVybiBjYWxsUmVnRXhwRXhlYyhzcGxpdHRlciwgUykgPT09IG51bGwgPyBbU10gOiBbXTtcbiAgICAgIHZhciBwID0gMDtcbiAgICAgIHZhciBxID0gMDtcbiAgICAgIHZhciBBID0gW107XG4gICAgICB3aGlsZSAocSA8IFMubGVuZ3RoKSB7XG4gICAgICAgIHNwbGl0dGVyLmxhc3RJbmRleCA9IFVOU1VQUE9SVEVEX1kgPyAwIDogcTtcbiAgICAgICAgdmFyIHogPSBjYWxsUmVnRXhwRXhlYyhzcGxpdHRlciwgVU5TVVBQT1JURURfWSA/IHN0cmluZ1NsaWNlKFMsIHEpIDogUyk7XG4gICAgICAgIHZhciBlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgeiA9PT0gbnVsbCB8fFxuICAgICAgICAgIChlID0gbWluKHRvTGVuZ3RoKHNwbGl0dGVyLmxhc3RJbmRleCArIChVTlNVUFBPUlRFRF9ZID8gcSA6IDApKSwgUy5sZW5ndGgpKSA9PT0gcFxuICAgICAgICApIHtcbiAgICAgICAgICBxID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHEsIHVuaWNvZGVNYXRjaGluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHVzaChBLCBzdHJpbmdTbGljZShTLCBwLCBxKSk7XG4gICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IHoubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICBwdXNoKEEsIHpbaV0pO1xuICAgICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIH1cbiAgICAgICAgICBxID0gcCA9IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHB1c2goQSwgc3RyaW5nU2xpY2UoUywgcCkpO1xuICAgICAgcmV0dXJuIEE7XG4gICAgfVxuICBdO1xufSwgIVNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQywgVU5TVVBQT1JURURfWSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgbm90QVJlZ0V4cCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ub3QtYS1yZWdleHAnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIGNvcnJlY3RJc1JlZ0V4cExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtaXMtcmVnZXhwLWxvZ2ljJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLXN0cmluZy1wcm90b3R5cGUtc3RhcnRzd2l0aCAtLSBzYWZlXG52YXIgbmF0aXZlU3RhcnRzV2l0aCA9IHVuY3VycnlUaGlzKCcnLnN0YXJ0c1dpdGgpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG52YXIgQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMgPSBjb3JyZWN0SXNSZWdFeHBMb2dpYygnc3RhcnRzV2l0aCcpO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvcHVsbC83MDJcbnZhciBNRE5fUE9MWUZJTExfQlVHID0gIUlTX1BVUkUgJiYgIUNPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDICYmICEhZnVuY3Rpb24gKCkge1xuICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihTdHJpbmcucHJvdG90eXBlLCAnc3RhcnRzV2l0aCcpO1xuICByZXR1cm4gZGVzY3JpcHRvciAmJiAhZGVzY3JpcHRvci53cml0YWJsZTtcbn0oKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc3RhcnRzd2l0aFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFNRE5fUE9MWUZJTExfQlVHICYmICFDT1JSRUNUX0lTX1JFR0VYUF9MT0dJQyB9LCB7XG4gIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgdmFyIHRoYXQgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpKTtcbiAgICBub3RBUmVnRXhwKHNlYXJjaFN0cmluZyk7XG4gICAgdmFyIGluZGV4ID0gdG9MZW5ndGgobWluKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0aGF0Lmxlbmd0aCkpO1xuICAgIHZhciBzZWFyY2ggPSB0b1N0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiBuYXRpdmVTdGFydHNXaXRoXG4gICAgICA/IG5hdGl2ZVN0YXJ0c1dpdGgodGhhdCwgc2VhcmNoLCBpbmRleClcbiAgICAgIDogc3RyaW5nU2xpY2UodGhhdCwgaW5kZXgsIGluZGV4ICsgc2VhcmNoLmxlbmd0aCkgPT09IHNlYXJjaDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuc3RyaWtlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zdHJpa2VcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdzdHJpa2UnKSB9LCB7XG4gIHN0cmlrZTogZnVuY3Rpb24gc3RyaWtlKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdHJpa2UnLCAnJywgJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5zdWJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnN1YlxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ3N1YicpIH0sIHtcbiAgc3ViOiBmdW5jdGlvbiBzdWIoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1YicsICcnLCAnJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcblxudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9wcmVmZXItc3RyaW5nLXNsaWNlLCBlcy14L25vLXN0cmluZy1wcm90b3R5cGUtc3Vic3RyIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG52YXIgRk9SQ0VEID0gIScnLnN1YnN0ciB8fCAnYWInLnN1YnN0cigtMSkgIT09ICdiJztcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuc3Vic3RyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zdWJzdHJcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBzdWJzdHI6IGZ1bmN0aW9uIHN1YnN0cihzdGFydCwgbGVuZ3RoKSB7XG4gICAgdmFyIHRoYXQgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpKTtcbiAgICB2YXIgc2l6ZSA9IHRoYXQubGVuZ3RoO1xuICAgIHZhciBpbnRTdGFydCA9IHRvSW50ZWdlck9ySW5maW5pdHkoc3RhcnQpO1xuICAgIHZhciBpbnRMZW5ndGgsIGludEVuZDtcbiAgICBpZiAoaW50U3RhcnQgPT09IEluZmluaXR5KSBpbnRTdGFydCA9IDA7XG4gICAgaWYgKGludFN0YXJ0IDwgMCkgaW50U3RhcnQgPSBtYXgoc2l6ZSArIGludFN0YXJ0LCAwKTtcbiAgICBpbnRMZW5ndGggPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHNpemUgOiB0b0ludGVnZXJPckluZmluaXR5KGxlbmd0aCk7XG4gICAgaWYgKGludExlbmd0aCA8PSAwIHx8IGludExlbmd0aCA9PT0gSW5maW5pdHkpIHJldHVybiAnJztcbiAgICBpbnRFbmQgPSBtaW4oaW50U3RhcnQgKyBpbnRMZW5ndGgsIHNpemUpO1xuICAgIHJldHVybiBpbnRTdGFydCA+PSBpbnRFbmQgPyAnJyA6IHN0cmluZ1NsaWNlKHRoYXQsIGludFN0YXJ0LCBpbnRFbmQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5zdXBgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnN1cFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ3N1cCcpIH0sIHtcbiAgc3VwOiBmdW5jdGlvbiBzdXAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1cCcsICcnLCAnJyk7XG4gIH1cbn0pO1xuIiwiLy8gVE9ETzogUmVtb3ZlIHRoaXMgbGluZSBmcm9tIGBjb3JlLWpzQDRgXG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy50cmltLXJpZ2h0Jyk7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0cmltRW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltLWVuZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS50cmltRW5kYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltZW5kXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1zdHJpbmctcHJvdG90eXBlLXRyaW1zdGFydC10cmltZW5kIC0tIHNhZmVcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgbmFtZTogJ3RyaW1FbmQnLCBmb3JjZWQ6ICcnLnRyaW1FbmQgIT09IHRyaW1FbmQgfSwge1xuICB0cmltRW5kOiB0cmltRW5kXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHRyaW1TdGFydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbS1zdGFydCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS50cmltTGVmdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbWxlZnRcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLXN0cmluZy1wcm90b3R5cGUtdHJpbWxlZnQtdHJpbXJpZ2h0IC0tIHNhZmVcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgbmFtZTogJ3RyaW1TdGFydCcsIGZvcmNlZDogJycudHJpbUxlZnQgIT09IHRyaW1TdGFydCB9LCB7XG4gIHRyaW1MZWZ0OiB0cmltU3RhcnRcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdHJpbUVuZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbS1lbmQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUudHJpbVJpZ2h0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltZW5kXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1zdHJpbmctcHJvdG90eXBlLXRyaW1sZWZ0LXRyaW1yaWdodCAtLSBzYWZlXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIG5hbWU6ICd0cmltRW5kJywgZm9yY2VkOiAnJy50cmltUmlnaHQgIT09IHRyaW1FbmQgfSwge1xuICB0cmltUmlnaHQ6IHRyaW1FbmRcbn0pO1xuIiwiLy8gVE9ETzogUmVtb3ZlIHRoaXMgbGluZSBmcm9tIGBjb3JlLWpzQDRgXG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy50cmltLWxlZnQnKTtcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHRyaW1TdGFydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbS1zdGFydCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS50cmltU3RhcnRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1zdGFydFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tc3RyaW5nLXByb3RvdHlwZS10cmltc3RhcnQtdHJpbWVuZCAtLSBzYWZlXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIG5hbWU6ICd0cmltU3RhcnQnLCBmb3JjZWQ6ICcnLnRyaW1TdGFydCAhPT0gdHJpbVN0YXJ0IH0sIHtcbiAgdHJpbVN0YXJ0OiB0cmltU3RhcnRcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIGZvcmNlZFN0cmluZ1RyaW1NZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0tZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnRyaW1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1cbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdUcmltTWV0aG9kKCd0cmltJykgfSwge1xuICB0cmltOiBmdW5jdGlvbiB0cmltKCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzKTtcbiAgfVxufSk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLWRlZmluZScpO1xuXG4vLyBgU3ltYm9sLmFzeW5jSXRlcmF0b3JgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5hc3luY2l0ZXJhdG9yXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ2FzeW5jSXRlcmF0b3InKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3ltYm9sLWNvbnN0cnVjdG9yLWRldGVjdGlvbicpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xudmFyICR0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBuYXRpdmVPYmplY3RDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLWV4dGVybmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBkZWZpbmVQcm9wZXJ0aWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcycpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtd3JhcHBlZCcpO1xudmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC1kZWZpbmUnKTtcbnZhciBkZWZpbmVTeW1ib2xUb1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtZGVmaW5lLXRvLXByaW1pdGl2ZScpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZvckVhY2g7XG5cbnZhciBISURERU4gPSBzaGFyZWRLZXkoJ2hpZGRlbicpO1xudmFyIFNZTUJPTCA9ICdTeW1ib2wnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihTWU1CT0wpO1xuXG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgU3ltYm9sUHJvdG90eXBlID0gJFN5bWJvbCAmJiAkU3ltYm9sW1BST1RPVFlQRV07XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBRT2JqZWN0ID0gZ2xvYmFsLlFPYmplY3Q7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG52YXIgbmF0aXZlRGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwuZjtcbnZhciBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmY7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xuXG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvdHlwZVN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpO1xuXG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbnZhciBVU0VfU0VUVEVSID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzY3JpcHRvciA9IERFU0NSSVBUT1JTICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdENyZWF0ZShuYXRpdmVEZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eSh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoTywgUCwgQXR0cmlidXRlcykge1xuICB2YXIgT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciA9IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3RQcm90b3R5cGUsIFApO1xuICBpZiAoT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvcikgZGVsZXRlIE9iamVjdFByb3RvdHlwZVtQXTtcbiAgbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gIGlmIChPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yICYmIE8gIT09IE9iamVjdFByb3RvdHlwZSkge1xuICAgIG5hdGl2ZURlZmluZVByb3BlcnR5KE9iamVjdFByb3RvdHlwZSwgUCwgT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvcik7XG4gIH1cbn0gOiBuYXRpdmVEZWZpbmVQcm9wZXJ0eTtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnLCBkZXNjcmlwdGlvbikge1xuICB2YXIgc3ltYm9sID0gQWxsU3ltYm9sc1t0YWddID0gbmF0aXZlT2JqZWN0Q3JlYXRlKFN5bWJvbFByb3RvdHlwZSk7XG4gIHNldEludGVybmFsU3RhdGUoc3ltYm9sLCB7XG4gICAgdHlwZTogU1lNQk9MLFxuICAgIHRhZzogdGFnLFxuICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvblxuICB9KTtcbiAgaWYgKCFERVNDUklQVE9SUykgc3ltYm9sLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gIHJldHVybiBzeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBpZiAoTyA9PT0gT2JqZWN0UHJvdG90eXBlKSAkZGVmaW5lUHJvcGVydHkoT2JqZWN0UHJvdG90eXBlU3ltYm9scywgUCwgQXR0cmlidXRlcyk7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5ID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChoYXNPd24oQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghQXR0cmlidXRlcy5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhc093bihPLCBISURERU4pKSBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBISURERU4sIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB7fSkpO1xuICAgICAgT1tISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzT3duKE8sIEhJRERFTikgJiYgT1tISURERU5dW2tleV0pIE9bSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBBdHRyaWJ1dGVzID0gbmF0aXZlT2JqZWN0Q3JlYXRlKEF0dHJpYnV0ZXMsIHsgZW51bWVyYWJsZTogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjcmlwdG9yKE8sIGtleSwgQXR0cmlidXRlcyk7XG4gIH0gcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIGtleSwgQXR0cmlidXRlcyk7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBwcm9wZXJ0aWVzID0gdG9JbmRleGVkT2JqZWN0KFByb3BlcnRpZXMpO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMocHJvcGVydGllcykuY29uY2F0KCRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMocHJvcGVydGllcykpO1xuICAkZm9yRWFjaChrZXlzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFERVNDUklQVE9SUyB8fCBjYWxsKCRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgcHJvcGVydGllcywga2V5KSkgJGRlZmluZVByb3BlcnR5KE8sIGtleSwgcHJvcGVydGllc1trZXldKTtcbiAgfSk7XG4gIHJldHVybiBPO1xufTtcblxudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gbmF0aXZlT2JqZWN0Q3JlYXRlKE8pIDogJGRlZmluZVByb3BlcnRpZXMobmF0aXZlT2JqZWN0Q3JlYXRlKE8pLCBQcm9wZXJ0aWVzKTtcbn07XG5cbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XG4gIHZhciBQID0gdG9Qcm9wZXJ0eUtleShWKTtcbiAgdmFyIGVudW1lcmFibGUgPSBjYWxsKG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlLCB0aGlzLCBQKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvdHlwZSAmJiBoYXNPd24oQWxsU3ltYm9scywgUCkgJiYgIWhhc093bihPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBQKSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gZW51bWVyYWJsZSB8fCAhaGFzT3duKHRoaXMsIFApIHx8ICFoYXNPd24oQWxsU3ltYm9scywgUCkgfHwgaGFzT3duKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW1BdXG4gICAgPyBlbnVtZXJhYmxlIDogdHJ1ZTtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgdmFyIGl0ID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICB2YXIga2V5ID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90b3R5cGUgJiYgaGFzT3duKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhc093bihPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBkZXNjcmlwdG9yID0gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpO1xuICBpZiAoZGVzY3JpcHRvciAmJiBoYXNPd24oQWxsU3ltYm9scywga2V5KSAmJiAhKGhhc093bihpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKSB7XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZGVzY3JpcHRvcjtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICB2YXIgbmFtZXMgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKHRvSW5kZXhlZE9iamVjdChPKSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgJGZvckVhY2gobmFtZXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIWhhc093bihBbGxTeW1ib2xzLCBrZXkpICYmICFoYXNPd24oaGlkZGVuS2V5cywga2V5KSkgcHVzaChyZXN1bHQsIGtleSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiAoTykge1xuICB2YXIgSVNfT0JKRUNUX1BST1RPVFlQRSA9IE8gPT09IE9iamVjdFByb3RvdHlwZTtcbiAgdmFyIG5hbWVzID0gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyhJU19PQkpFQ1RfUFJPVE9UWVBFID8gT2JqZWN0UHJvdG90eXBlU3ltYm9scyA6IHRvSW5kZXhlZE9iamVjdChPKSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgJGZvckVhY2gobmFtZXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoaGFzT3duKEFsbFN5bWJvbHMsIGtleSkgJiYgKCFJU19PQkpFQ1RfUFJPVE9UWVBFIHx8IGhhc093bihPYmplY3RQcm90b3R5cGUsIGtleSkpKSB7XG4gICAgICBwdXNoKHJlc3VsdCwgQWxsU3ltYm9sc1trZXldKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gYFN5bWJvbGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLWNvbnN0cnVjdG9yXG5pZiAoIU5BVElWRV9TWU1CT0wpIHtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICBpZiAoaXNQcm90b3R5cGVPZihTeW1ib2xQcm90b3R5cGUsIHRoaXMpKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvcicpO1xuICAgIHZhciBkZXNjcmlwdGlvbiA9ICFhcmd1bWVudHMubGVuZ3RoIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogJHRvU3RyaW5nKGFyZ3VtZW50c1swXSk7XG4gICAgdmFyIHRhZyA9IHVpZChkZXNjcmlwdGlvbik7XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvdHlwZSkgY2FsbChzZXR0ZXIsIE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmIChoYXNPd24odGhpcywgSElEREVOKSAmJiBoYXNPd24odGhpc1tISURERU5dLCB0YWcpKSB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzY3JpcHRvcih0aGlzLCB0YWcsIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIFVTRV9TRVRURVIpIHNldFN5bWJvbERlc2NyaXB0b3IoT2JqZWN0UHJvdG90eXBlLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6IHNldHRlciB9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcsIGRlc2NyaXB0aW9uKTtcbiAgfTtcblxuICBTeW1ib2xQcm90b3R5cGUgPSAkU3ltYm9sW1BST1RPVFlQRV07XG5cbiAgZGVmaW5lQnVpbHRJbihTeW1ib2xQcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnRhZztcbiAgfSk7XG5cbiAgZGVmaW5lQnVpbHRJbigkU3ltYm9sLCAnd2l0aG91dFNldHRlcicsIGZ1bmN0aW9uIChkZXNjcmlwdGlvbikge1xuICAgIHJldHVybiB3cmFwKHVpZChkZXNjcmlwdGlvbiksIGRlc2NyaXB0aW9uKTtcbiAgfSk7XG5cbiAgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZiA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgZGVmaW5lUHJvcGVydGllc01vZHVsZS5mID0gJGRlZmluZVByb3BlcnRpZXM7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mID0gZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsLmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2VsbEtub3duU3ltYm9sKG5hbWUpLCBuYW1lKTtcbiAgfTtcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1TeW1ib2wtZGVzY3JpcHRpb25cbiAgICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShTeW1ib2xQcm90b3R5cGUsICdkZXNjcmlwdGlvbicsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gZGVzY3JpcHRpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLmRlc2NyaXB0aW9uO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghSVNfUFVSRSkge1xuICAgICAgZGVmaW5lQnVpbHRJbihPYmplY3RQcm90b3R5cGUsICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgeyB1bnNhZmU6IHRydWUgfSk7XG4gICAgfVxuICB9XG59XG5cbiQoeyBnbG9iYWw6IHRydWUsIGNvbnN0cnVjdG9yOiB0cnVlLCB3cmFwOiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MLCBzaGFtOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIFN5bWJvbDogJFN5bWJvbFxufSk7XG5cbiRmb3JFYWNoKG9iamVjdEtleXMoV2VsbEtub3duU3ltYm9sc1N0b3JlKSwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgZGVmaW5lV2VsbEtub3duU3ltYm9sKG5hbWUpO1xufSk7XG5cbiQoeyB0YXJnZXQ6IFNZTUJPTCwgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBVU0VfU0VUVEVSID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IFVTRV9TRVRURVIgPSBmYWxzZTsgfVxufSk7XG5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICAvLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnNcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yXG59KTtcblxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wgfSwge1xuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzXG59KTtcblxuLy8gYFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLUBAdG9wcmltaXRpdmVcbmRlZmluZVN5bWJvbFRvUHJpbWl0aXZlKCk7XG5cbi8vIGBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddYCBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLUBAdG9zdHJpbmd0YWdcbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsIFNZTUJPTCk7XG5cbmhpZGRlbktleXNbSElEREVOXSA9IHRydWU7XG4iLCIvLyBgU3ltYm9sLnByb3RvdHlwZS5kZXNjcmlwdGlvbmAgZ2V0dGVyXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUuZGVzY3JpcHRpb25cbid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG5cbnZhciBOYXRpdmVTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIFN5bWJvbFByb3RvdHlwZSA9IE5hdGl2ZVN5bWJvbCAmJiBOYXRpdmVTeW1ib2wucHJvdG90eXBlO1xuXG5pZiAoREVTQ1JJUFRPUlMgJiYgaXNDYWxsYWJsZShOYXRpdmVTeW1ib2wpICYmICghKCdkZXNjcmlwdGlvbicgaW4gU3ltYm9sUHJvdG90eXBlKSB8fFxuICAvLyBTYWZhcmkgMTIgYnVnXG4gIE5hdGl2ZVN5bWJvbCgpLmRlc2NyaXB0aW9uICE9PSB1bmRlZmluZWRcbikpIHtcbiAgdmFyIEVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZSA9IHt9O1xuICAvLyB3cmFwIFN5bWJvbCBjb25zdHJ1Y3RvciBmb3IgY29ycmVjdCB3b3JrIHdpdGggdW5kZWZpbmVkIGRlc2NyaXB0aW9uXG4gIHZhciBTeW1ib2xXcmFwcGVyID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIHZhciBkZXNjcmlwdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPCAxIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogdG9TdHJpbmcoYXJndW1lbnRzWzBdKTtcbiAgICB2YXIgcmVzdWx0ID0gaXNQcm90b3R5cGVPZihTeW1ib2xQcm90b3R5cGUsIHRoaXMpXG4gICAgICA/IG5ldyBOYXRpdmVTeW1ib2woZGVzY3JpcHRpb24pXG4gICAgICAvLyBpbiBFZGdlIDEzLCBTdHJpbmcoU3ltYm9sKHVuZGVmaW5lZCkpID09PSAnU3ltYm9sKHVuZGVmaW5lZCknXG4gICAgICA6IGRlc2NyaXB0aW9uID09PSB1bmRlZmluZWQgPyBOYXRpdmVTeW1ib2woKSA6IE5hdGl2ZVN5bWJvbChkZXNjcmlwdGlvbik7XG4gICAgaWYgKGRlc2NyaXB0aW9uID09PSAnJykgRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlW3Jlc3VsdF0gPSB0cnVlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhTeW1ib2xXcmFwcGVyLCBOYXRpdmVTeW1ib2wpO1xuICBTeW1ib2xXcmFwcGVyLnByb3RvdHlwZSA9IFN5bWJvbFByb3RvdHlwZTtcbiAgU3ltYm9sUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ltYm9sV3JhcHBlcjtcblxuICB2YXIgTkFUSVZFX1NZTUJPTCA9IFN0cmluZyhOYXRpdmVTeW1ib2woJ3Rlc3QnKSkgPT0gJ1N5bWJvbCh0ZXN0KSc7XG4gIHZhciB0aGlzU3ltYm9sVmFsdWUgPSB1bmN1cnJ5VGhpcyhTeW1ib2xQcm90b3R5cGUudmFsdWVPZik7XG4gIHZhciBzeW1ib2xEZXNjcmlwdGl2ZVN0cmluZyA9IHVuY3VycnlUaGlzKFN5bWJvbFByb3RvdHlwZS50b1N0cmluZyk7XG4gIHZhciByZWdleHAgPSAvXlN5bWJvbFxcKCguKilcXClbXildKyQvO1xuICB2YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xuICB2YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbiAgZGVmaW5lUHJvcGVydHkoU3ltYm9sUHJvdG90eXBlLCAnZGVzY3JpcHRpb24nLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZGVzY3JpcHRpb24oKSB7XG4gICAgICB2YXIgc3ltYm9sID0gdGhpc1N5bWJvbFZhbHVlKHRoaXMpO1xuICAgICAgaWYgKGhhc093bihFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmUsIHN5bWJvbCkpIHJldHVybiAnJztcbiAgICAgIHZhciBzdHJpbmcgPSBzeW1ib2xEZXNjcmlwdGl2ZVN0cmluZyhzeW1ib2wpO1xuICAgICAgdmFyIGRlc2MgPSBOQVRJVkVfU1lNQk9MID8gc3RyaW5nU2xpY2Uoc3RyaW5nLCA3LCAtMSkgOiByZXBsYWNlKHN0cmluZywgcmVnZXhwLCAnJDEnKTtcbiAgICAgIHJldHVybiBkZXNjID09PSAnJyA/IHVuZGVmaW5lZCA6IGRlc2M7XG4gICAgfVxuICB9KTtcblxuICAkKHsgZ2xvYmFsOiB0cnVlLCBjb25zdHJ1Y3RvcjogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgICBTeW1ib2w6IFN5bWJvbFdyYXBwZXJcbiAgfSk7XG59XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIE5BVElWRV9TWU1CT0xfUkVHSVNUUlkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3ltYm9sLXJlZ2lzdHJ5LWRldGVjdGlvbicpO1xuXG52YXIgU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3RyaW5nLXRvLXN5bWJvbC1yZWdpc3RyeScpO1xudmFyIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC10by1zdHJpbmctcmVnaXN0cnknKTtcblxuLy8gYFN5bWJvbC5mb3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuZm9yXG4kKHsgdGFyZ2V0OiAnU3ltYm9sJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTF9SRUdJU1RSWSB9LCB7XG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHN0cmluZyA9IHRvU3RyaW5nKGtleSk7XG4gICAgaWYgKGhhc093bihTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5LCBzdHJpbmcpKSByZXR1cm4gU3RyaW5nVG9TeW1ib2xSZWdpc3RyeVtzdHJpbmddO1xuICAgIHZhciBzeW1ib2wgPSBnZXRCdWlsdEluKCdTeW1ib2wnKShzdHJpbmcpO1xuICAgIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnlbc3RyaW5nXSA9IHN5bWJvbDtcbiAgICBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5W3N5bWJvbF0gPSBzdHJpbmc7XG4gICAgcmV0dXJuIHN5bWJvbDtcbiAgfVxufSk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLWRlZmluZScpO1xuXG4vLyBgU3ltYm9sLmhhc0luc3RhbmNlYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuaGFzaW5zdGFuY2VcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnaGFzSW5zdGFuY2UnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtZGVmaW5lJyk7XG5cbi8vIGBTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuaXNjb25jYXRzcHJlYWRhYmxlXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ2lzQ29uY2F0U3ByZWFkYWJsZScpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC1kZWZpbmUnKTtcblxuLy8gYFN5bWJvbC5pdGVyYXRvcmAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLml0ZXJhdG9yXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG4iLCIvLyBUT0RPOiBSZW1vdmUgdGhpcyBtb2R1bGUgZnJvbSBgY29yZS1qc0A0YCBzaW5jZSBpdCdzIHNwbGl0IHRvIG1vZHVsZXMgbGlzdGVkIGJlbG93XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wuZm9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5rZXktZm9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmpzb24uc3RyaW5naWZ5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtc3ltYm9sJyk7XG52YXIgdHJ5VG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHJ5LXRvLXN0cmluZycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBOQVRJVkVfU1lNQk9MX1JFR0lTVFJZID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N5bWJvbC1yZWdpc3RyeS1kZXRlY3Rpb24nKTtcblxudmFyIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC10by1zdHJpbmctcmVnaXN0cnknKTtcblxuLy8gYFN5bWJvbC5rZXlGb3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wua2V5Zm9yXG4kKHsgdGFyZ2V0OiAnU3ltYm9sJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTF9SRUdJU1RSWSB9LCB7XG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHRyeVRvU3RyaW5nKHN5bSkgKyAnIGlzIG5vdCBhIHN5bWJvbCcpO1xuICAgIGlmIChoYXNPd24oU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSwgc3ltKSkgcmV0dXJuIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnlbc3ltXTtcbiAgfVxufSk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLWRlZmluZScpO1xuXG4vLyBgU3ltYm9sLm1hdGNoQWxsYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wubWF0Y2hhbGxcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnbWF0Y2hBbGwnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtZGVmaW5lJyk7XG5cbi8vIGBTeW1ib2wubWF0Y2hgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5tYXRjaFxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdtYXRjaCcpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC1kZWZpbmUnKTtcblxuLy8gYFN5bWJvbC5yZXBsYWNlYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucmVwbGFjZVxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdyZXBsYWNlJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLWRlZmluZScpO1xuXG4vLyBgU3ltYm9sLnNlYXJjaGAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnNlYXJjaFxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdzZWFyY2gnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtZGVmaW5lJyk7XG5cbi8vIGBTeW1ib2wuc3BlY2llc2Agd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnNwZWNpZXNcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC1kZWZpbmUnKTtcblxuLy8gYFN5bWJvbC5zcGxpdGAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnNwbGl0XG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3NwbGl0Jyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLWRlZmluZScpO1xudmFyIGRlZmluZVN5bWJvbFRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N5bWJvbC1kZWZpbmUtdG8tcHJpbWl0aXZlJyk7XG5cbi8vIGBTeW1ib2wudG9QcmltaXRpdmVgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC50b3ByaW1pdGl2ZVxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xuXG4vLyBgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3ByaW1pdGl2ZVxuZGVmaW5lU3ltYm9sVG9QcmltaXRpdmUoKTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC1kZWZpbmUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xuXG4vLyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wudG9zdHJpbmd0YWdcbmRlZmluZVdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcblxuLy8gYFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11gIHByb3BlcnR5XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3N0cmluZ3RhZ1xuc2V0VG9TdHJpbmdUYWcoZ2V0QnVpbHRJbignU3ltYm9sJyksICdTeW1ib2wnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtZGVmaW5lJyk7XG5cbi8vIGBTeW1ib2wudW5zY29wYWJsZXNgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC51bnNjb3BhYmxlc1xuZGVmaW5lV2VsbEtub3duU3ltYm9sKCd1bnNjb3BhYmxlcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcmVsYXRpdmUtaW5kZXhpbmctbWV0aG9kXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdhdCcsIGZ1bmN0aW9uIGF0KGluZGV4KSB7XG4gIHZhciBPID0gYVR5cGVkQXJyYXkodGhpcyk7XG4gIHZhciBsZW4gPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgdmFyIHJlbGF0aXZlSW5kZXggPSB0b0ludGVnZXJPckluZmluaXR5KGluZGV4KTtcbiAgdmFyIGsgPSByZWxhdGl2ZUluZGV4ID49IDAgPyByZWxhdGl2ZUluZGV4IDogbGVuICsgcmVsYXRpdmVJbmRleDtcbiAgcmV0dXJuIChrIDwgMCB8fCBrID49IGxlbikgPyB1bmRlZmluZWQgOiBPW2tdO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJEFycmF5Q29weVdpdGhpbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1jb3B5LXdpdGhpbicpO1xuXG52YXIgdSRBcnJheUNvcHlXaXRoaW4gPSB1bmN1cnJ5VGhpcygkQXJyYXlDb3B5V2l0aGluKTtcbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuY29weVdpdGhpbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuY29weXdpdGhpblxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnY29weVdpdGhpbicsIGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCAvKiAsIGVuZCAqLykge1xuICByZXR1cm4gdSRBcnJheUNvcHlXaXRoaW4oYVR5cGVkQXJyYXkodGhpcyksIHRhcmdldCwgc3RhcnQsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRldmVyeSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5ldmVyeTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5ldmVyeWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuZXZlcnlcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2V2ZXJ5JywgZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgcmV0dXJuICRldmVyeShhVHlwZWRBcnJheSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGZpbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZmlsbCcpO1xudmFyIHRvQmlnSW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWJpZy1pbnQnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG52YXIgc2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbi8vIFY4IH4gQ2hyb21lIDwgNTksIFNhZmFyaSA8IDE0LjEsIEZGIDwgNTUsIEVkZ2UgPD0xOFxudmFyIENPTlZFUlNJT05fQlVHID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgY291bnQgPSAwO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby10eXBlZC1hcnJheXMgLS0gc2FmZVxuICBuZXcgSW50OEFycmF5KDIpLmZpbGwoeyB2YWx1ZU9mOiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb3VudCsrOyB9IH0pO1xuICByZXR1cm4gY291bnQgIT09IDE7XG59KTtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuZmlsbGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuZmlsbFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnZmlsbCcsIGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCwgZW5kICovKSB7XG4gIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICBhVHlwZWRBcnJheSh0aGlzKTtcbiAgdmFyIGFjdHVhbFZhbHVlID0gc2xpY2UoY2xhc3NvZih0aGlzKSwgMCwgMykgPT09ICdCaWcnID8gdG9CaWdJbnQodmFsdWUpIDogK3ZhbHVlO1xuICByZXR1cm4gY2FsbCgkZmlsbCwgdGhpcywgYWN0dWFsVmFsdWUsIGxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xufSwgQ09OVkVSU0lPTl9CVUcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmlsdGVyO1xudmFyIGZyb21TcGVjaWVzQW5kTGlzdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1mcm9tLXNwZWNpZXMtYW5kLWxpc3QnKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmZpbHRlclxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnZmlsdGVyJywgZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gIHZhciBsaXN0ID0gJGZpbHRlcihhVHlwZWRBcnJheSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICByZXR1cm4gZnJvbVNwZWNpZXNBbmRMaXN0KHRoaXMsIGxpc3QpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGZpbmRJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5maW5kSW5kZXg7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuZmluZEluZGV4YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5maW5kaW5kZXhcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2ZpbmRJbmRleCcsIGZ1bmN0aW9uIGZpbmRJbmRleChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkZmluZEluZGV4KGFUeXBlZEFycmF5KHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRmaW5kTGFzdEluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbi1mcm9tLWxhc3QnKS5maW5kTGFzdEluZGV4O1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmZpbmRMYXN0SW5kZXhgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtYXJyYXktZmluZC1mcm9tLWxhc3RcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2ZpbmRMYXN0SW5kZXgnLCBmdW5jdGlvbiBmaW5kTGFzdEluZGV4KHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgcmV0dXJuICRmaW5kTGFzdEluZGV4KGFUeXBlZEFycmF5KHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRmaW5kTGFzdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24tZnJvbS1sYXN0JykuZmluZExhc3Q7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuZmluZExhc3RgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtYXJyYXktZmluZC1mcm9tLWxhc3RcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2ZpbmRMYXN0JywgZnVuY3Rpb24gZmluZExhc3QocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICByZXR1cm4gJGZpbmRMYXN0KGFUeXBlZEFycmF5KHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZpbmQ7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuZmluZFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnZmluZCcsIGZ1bmN0aW9uIGZpbmQocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICByZXR1cm4gJGZpbmQoYVR5cGVkQXJyYXkodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBGbG9hdDMyQXJyYXlgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXR5cGVkYXJyYXktb2JqZWN0c1xuY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yKCdGbG9hdDMyJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBGbG9hdDY0QXJyYXlgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXR5cGVkYXJyYXktb2JqZWN0c1xuY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yKCdGbG9hdDY0JywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0NjRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZm9yRWFjaDtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5mb3JlYWNoXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdmb3JFYWNoJywgZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAkZm9yRWFjaChhVHlwZWRBcnJheSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgVFlQRURfQVJSQVlTX0NPTlNUUlVDVE9SU19SRVFVSVJFU19XUkFQUEVSUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcnMtcmVxdWlyZS13cmFwcGVycycpO1xudmFyIGV4cG9ydFR5cGVkQXJyYXlTdGF0aWNNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpLmV4cG9ydFR5cGVkQXJyYXlTdGF0aWNNZXRob2Q7XG52YXIgdHlwZWRBcnJheUZyb20gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktZnJvbScpO1xuXG4vLyBgJVR5cGVkQXJyYXklLmZyb21gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUuZnJvbVxuZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZCgnZnJvbScsIHR5cGVkQXJyYXlGcm9tLCBUWVBFRF9BUlJBWVNfQ09OU1RSVUNUT1JTX1JFUVVJUkVTX1dSQVBQRVJTKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkaW5jbHVkZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmNsdWRlcztcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuaW5jbHVkZXNcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2luY2x1ZGVzJywgZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICByZXR1cm4gJGluY2x1ZGVzKGFUeXBlZEFycmF5KHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkaW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluZGV4T2Y7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuaW5kZXhvZlxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnaW5kZXhPZicsIGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICByZXR1cm4gJGluZGV4T2YoYVR5cGVkQXJyYXkodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwidmFyIGNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcicpO1xuXG4vLyBgSW50MTZBcnJheWAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdHlwZWRhcnJheS1vYmplY3RzXG5jcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IoJ0ludDE2JywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwidmFyIGNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcicpO1xuXG4vLyBgSW50MzJBcnJheWAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdHlwZWRhcnJheS1vYmplY3RzXG5jcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IoJ0ludDMyJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwidmFyIGNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcicpO1xuXG4vLyBgSW50OEFycmF5YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10eXBlZGFycmF5LW9iamVjdHNcbmNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcignSW50OCcsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIEFycmF5SXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvcicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5O1xudmFyIGFycmF5VmFsdWVzID0gdW5jdXJyeVRoaXMoQXJyYXlJdGVyYXRvcnMudmFsdWVzKTtcbnZhciBhcnJheUtleXMgPSB1bmN1cnJ5VGhpcyhBcnJheUl0ZXJhdG9ycy5rZXlzKTtcbnZhciBhcnJheUVudHJpZXMgPSB1bmN1cnJ5VGhpcyhBcnJheUl0ZXJhdG9ycy5lbnRyaWVzKTtcbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcbnZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gVWludDhBcnJheSAmJiBVaW50OEFycmF5LnByb3RvdHlwZTtcblxudmFyIEdFTkVSSUMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBUeXBlZEFycmF5UHJvdG90eXBlW0lURVJBVE9SXS5jYWxsKFsxXSk7XG59KTtcblxudmFyIElURVJBVE9SX0lTX1ZBTFVFUyA9ICEhVHlwZWRBcnJheVByb3RvdHlwZVxuICAmJiBUeXBlZEFycmF5UHJvdG90eXBlLnZhbHVlc1xuICAmJiBUeXBlZEFycmF5UHJvdG90eXBlW0lURVJBVE9SXSA9PT0gVHlwZWRBcnJheVByb3RvdHlwZS52YWx1ZXNcbiAgJiYgVHlwZWRBcnJheVByb3RvdHlwZS52YWx1ZXMubmFtZSA9PT0gJ3ZhbHVlcyc7XG5cbnZhciB0eXBlZEFycmF5VmFsdWVzID0gZnVuY3Rpb24gdmFsdWVzKCkge1xuICByZXR1cm4gYXJyYXlWYWx1ZXMoYVR5cGVkQXJyYXkodGhpcykpO1xufTtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuZW50cmllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuZW50cmllc1xuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnZW50cmllcycsIGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gIHJldHVybiBhcnJheUVudHJpZXMoYVR5cGVkQXJyYXkodGhpcykpO1xufSwgR0VORVJJQyk7XG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5rZXlzXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdrZXlzJywgZnVuY3Rpb24ga2V5cygpIHtcbiAgcmV0dXJuIGFycmF5S2V5cyhhVHlwZWRBcnJheSh0aGlzKSk7XG59LCBHRU5FUklDKTtcbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnZhbHVlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUudmFsdWVzXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCd2YWx1ZXMnLCB0eXBlZEFycmF5VmFsdWVzLCBHRU5FUklDIHx8ICFJVEVSQVRPUl9JU19WQUxVRVMsIHsgbmFtZTogJ3ZhbHVlcycgfSk7XG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUtQEBpdGVyYXRvclxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZChJVEVSQVRPUiwgdHlwZWRBcnJheVZhbHVlcywgR0VORVJJQyB8fCAhSVRFUkFUT1JfSVNfVkFMVUVTLCB7IG5hbWU6ICd2YWx1ZXMnIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG52YXIgJGpvaW4gPSB1bmN1cnJ5VGhpcyhbXS5qb2luKTtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuam9pbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuam9pblxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnam9pbicsIGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gIHJldHVybiAkam9pbihhVHlwZWRBcnJheSh0aGlzKSwgc2VwYXJhdG9yKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIGFwcGx5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWFwcGx5Jyk7XG52YXIgJGxhc3RJbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWxhc3QtaW5kZXgtb2YnKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5sYXN0SW5kZXhPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUubGFzdGluZGV4b2ZcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2xhc3RJbmRleE9mJywgZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgcmV0dXJuIGFwcGx5KCRsYXN0SW5kZXhPZiwgYVR5cGVkQXJyYXkodGhpcyksIGxlbmd0aCA+IDEgPyBbc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzWzFdXSA6IFtzZWFyY2hFbGVtZW50XSk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkbWFwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLm1hcDtcbnZhciB0eXBlZEFycmF5U3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLm1hcFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnbWFwJywgZnVuY3Rpb24gbWFwKG1hcGZuIC8qICwgdGhpc0FyZyAqLykge1xuICByZXR1cm4gJG1hcChhVHlwZWRBcnJheSh0aGlzKSwgbWFwZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBmdW5jdGlvbiAoTywgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIG5ldyAodHlwZWRBcnJheVNwZWNpZXNDb25zdHJ1Y3RvcihPKSkobGVuZ3RoKTtcbiAgfSk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciBUWVBFRF9BUlJBWVNfQ09OU1RSVUNUT1JTX1JFUVVJUkVTX1dSQVBQRVJTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9ycy1yZXF1aXJlLXdyYXBwZXJzJyk7XG5cbnZhciBhVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheUNvbnN0cnVjdG9yO1xudmFyIGV4cG9ydFR5cGVkQXJyYXlTdGF0aWNNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlTdGF0aWNNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUub2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUub2ZcbmV4cG9ydFR5cGVkQXJyYXlTdGF0aWNNZXRob2QoJ29mJywgZnVuY3Rpb24gb2YoLyogLi4uaXRlbXMgKi8pIHtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciByZXN1bHQgPSBuZXcgKGFUeXBlZEFycmF5Q29uc3RydWN0b3IodGhpcykpKGxlbmd0aCk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleCsrXTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0sIFRZUEVEX0FSUkFZU19DT05TVFJVQ1RPUlNfUkVRVUlSRVNfV1JBUFBFUlMpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRyZWR1Y2VSaWdodCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1yZWR1Y2UnKS5yaWdodDtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5yZWR1Y2VSaWdodGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUucmVkdWNlcmlnaHRcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3JlZHVjZVJpZ2h0JywgZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgcmV0dXJuICRyZWR1Y2VSaWdodChhVHlwZWRBcnJheSh0aGlzKSwgY2FsbGJhY2tmbiwgbGVuZ3RoLCBsZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktcmVkdWNlJykubGVmdDtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5yZWR1Y2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnJlZHVjZVxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgncmVkdWNlJywgZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHJldHVybiAkcmVkdWNlKGFUeXBlZEFycmF5KHRoaXMpLCBjYWxsYmFja2ZuLCBsZW5ndGgsIGxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnJldmVyc2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnJldmVyc2VcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3JldmVyc2UnLCBmdW5jdGlvbiByZXZlcnNlKCkge1xuICB2YXIgdGhhdCA9IHRoaXM7XG4gIHZhciBsZW5ndGggPSBhVHlwZWRBcnJheSh0aGF0KS5sZW5ndGg7XG4gIHZhciBtaWRkbGUgPSBmbG9vcihsZW5ndGggLyAyKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIHZhbHVlO1xuICB3aGlsZSAoaW5kZXggPCBtaWRkbGUpIHtcbiAgICB2YWx1ZSA9IHRoYXRbaW5kZXhdO1xuICAgIHRoYXRbaW5kZXgrK10gPSB0aGF0Wy0tbGVuZ3RoXTtcbiAgICB0aGF0W2xlbmd0aF0gPSB2YWx1ZTtcbiAgfSByZXR1cm4gdGhhdDtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIHRvT2Zmc2V0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9mZnNldCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xudmFyIEludDhBcnJheSA9IGdsb2JhbC5JbnQ4QXJyYXk7XG52YXIgSW50OEFycmF5UHJvdG90eXBlID0gSW50OEFycmF5ICYmIEludDhBcnJheS5wcm90b3R5cGU7XG52YXIgJHNldCA9IEludDhBcnJheVByb3RvdHlwZSAmJiBJbnQ4QXJyYXlQcm90b3R5cGUuc2V0O1xudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG52YXIgV09SS1NfV0lUSF9PQkpFQ1RTX0FORF9HRUVSSUNfT05fVFlQRURfQVJSQVlTID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tdHlwZWQtYXJyYXlzIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHZhciBhcnJheSA9IG5ldyBVaW50OENsYW1wZWRBcnJheSgyKTtcbiAgY2FsbCgkc2V0LCBhcnJheSwgeyBsZW5ndGg6IDEsIDA6IDMgfSwgMSk7XG4gIHJldHVybiBhcnJheVsxXSAhPT0gMztcbn0pO1xuXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0xMTI5NCBhbmQgb3RoZXJcbnZhciBUT19PQkpFQ1RfQlVHID0gV09SS1NfV0lUSF9PQkpFQ1RTX0FORF9HRUVSSUNfT05fVFlQRURfQVJSQVlTICYmIEFycmF5QnVmZmVyVmlld0NvcmUuTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBhcnJheSA9IG5ldyBJbnQ4QXJyYXkoMik7XG4gIGFycmF5LnNldCgxKTtcbiAgYXJyYXkuc2V0KCcyJywgMSk7XG4gIHJldHVybiBhcnJheVswXSAhPT0gMCB8fCBhcnJheVsxXSAhPT0gMjtcbn0pO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5zZXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnNldFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnc2V0JywgZnVuY3Rpb24gc2V0KGFycmF5TGlrZSAvKiAsIG9mZnNldCAqLykge1xuICBhVHlwZWRBcnJheSh0aGlzKTtcbiAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAxKTtcbiAgdmFyIHNyYyA9IHRvSW5kZXhlZE9iamVjdChhcnJheUxpa2UpO1xuICBpZiAoV09SS1NfV0lUSF9PQkpFQ1RTX0FORF9HRUVSSUNfT05fVFlQRURfQVJSQVlTKSByZXR1cm4gY2FsbCgkc2V0LCB0aGlzLCBzcmMsIG9mZnNldCk7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgdmFyIGxlbiA9IGxlbmd0aE9mQXJyYXlMaWtlKHNyYyk7XG4gIHZhciBpbmRleCA9IDA7XG4gIGlmIChsZW4gKyBvZmZzZXQgPiBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIGxlbmd0aCcpO1xuICB3aGlsZSAoaW5kZXggPCBsZW4pIHRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdO1xufSwgIVdPUktTX1dJVEhfT0JKRUNUU19BTkRfR0VFUklDX09OX1RZUEVEX0FSUkFZUyB8fCBUT19PQkpFQ1RfQlVHKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciB0eXBlZEFycmF5U3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGFycmF5U2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2UnKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG52YXIgRk9SQ0VEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby10eXBlZC1hcnJheXMgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgbmV3IEludDhBcnJheSgxKS5zbGljZSgpO1xufSk7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnNsaWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5zbGljZVxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnc2xpY2UnLCBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gIHZhciBsaXN0ID0gYXJyYXlTbGljZShhVHlwZWRBcnJheSh0aGlzKSwgc3RhcnQsIGVuZCk7XG4gIHZhciBDID0gdHlwZWRBcnJheVNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICB2YXIgcmVzdWx0ID0gbmV3IEMobGVuZ3RoKTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gbGlzdFtpbmRleCsrXTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0sIEZPUkNFRCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJHNvbWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuc29tZTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5zb21lYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5zb21lXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdzb21lJywgZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICByZXR1cm4gJHNvbWUoYVR5cGVkQXJyYXkodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgaW50ZXJuYWxTb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNvcnQnKTtcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciBGRiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtZmYtdmVyc2lvbicpO1xudmFyIElFX09SX0VER0UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWllLW9yLWVkZ2UnKTtcbnZhciBWOCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xudmFyIFdFQktJVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtd2Via2l0LXZlcnNpb24nKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xudmFyIFVpbnQxNkFycmF5ID0gZ2xvYmFsLlVpbnQxNkFycmF5O1xudmFyIG5hdGl2ZVNvcnQgPSBVaW50MTZBcnJheSAmJiB1bmN1cnJ5VGhpcyhVaW50MTZBcnJheS5wcm90b3R5cGUuc29ydCk7XG5cbi8vIFdlYktpdFxudmFyIEFDQ0VQVF9JTkNPUlJFQ1RfQVJHVU1FTlRTID0gISFuYXRpdmVTb3J0ICYmICEoZmFpbHMoZnVuY3Rpb24gKCkge1xuICBuYXRpdmVTb3J0KG5ldyBVaW50MTZBcnJheSgyKSwgbnVsbCk7XG59KSAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIG5hdGl2ZVNvcnQobmV3IFVpbnQxNkFycmF5KDIpLCB7fSk7XG59KSk7XG5cbnZhciBTVEFCTEVfU09SVCA9ICEhbmF0aXZlU29ydCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBmZWF0dXJlIGRldGVjdGlvbiBjYW4gYmUgdG9vIHNsb3csIHNvIGNoZWNrIGVuZ2luZXMgdmVyc2lvbnNcbiAgaWYgKFY4KSByZXR1cm4gVjggPCA3NDtcbiAgaWYgKEZGKSByZXR1cm4gRkYgPCA2NztcbiAgaWYgKElFX09SX0VER0UpIHJldHVybiB0cnVlO1xuICBpZiAoV0VCS0lUKSByZXR1cm4gV0VCS0lUIDwgNjAyO1xuXG4gIHZhciBhcnJheSA9IG5ldyBVaW50MTZBcnJheSg1MTYpO1xuICB2YXIgZXhwZWN0ZWQgPSBBcnJheSg1MTYpO1xuICB2YXIgaW5kZXgsIG1vZDtcblxuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCA1MTY7IGluZGV4KyspIHtcbiAgICBtb2QgPSBpbmRleCAlIDQ7XG4gICAgYXJyYXlbaW5kZXhdID0gNTE1IC0gaW5kZXg7XG4gICAgZXhwZWN0ZWRbaW5kZXhdID0gaW5kZXggLSAyICogbW9kICsgMztcbiAgfVxuXG4gIG5hdGl2ZVNvcnQoYXJyYXksIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIChhIC8gNCB8IDApIC0gKGIgLyA0IHwgMCk7XG4gIH0pO1xuXG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IDUxNjsgaW5kZXgrKykge1xuICAgIGlmIChhcnJheVtpbmRleF0gIT09IGV4cGVjdGVkW2luZGV4XSkgcmV0dXJuIHRydWU7XG4gIH1cbn0pO1xuXG52YXIgZ2V0U29ydENvbXBhcmUgPSBmdW5jdGlvbiAoY29tcGFyZWZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoeCwgeSkge1xuICAgIGlmIChjb21wYXJlZm4gIT09IHVuZGVmaW5lZCkgcmV0dXJuICtjb21wYXJlZm4oeCwgeSkgfHwgMDtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgIGlmICh5ICE9PSB5KSByZXR1cm4gLTE7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgICBpZiAoeCAhPT0geCkgcmV0dXJuIDE7XG4gICAgaWYgKHggPT09IDAgJiYgeSA9PT0gMCkgcmV0dXJuIDEgLyB4ID4gMCAmJiAxIC8geSA8IDAgPyAxIDogLTE7XG4gICAgcmV0dXJuIHggPiB5O1xuICB9O1xufTtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuc29ydGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuc29ydFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnc29ydCcsIGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gIGlmIChjb21wYXJlZm4gIT09IHVuZGVmaW5lZCkgYUNhbGxhYmxlKGNvbXBhcmVmbik7XG4gIGlmIChTVEFCTEVfU09SVCkgcmV0dXJuIG5hdGl2ZVNvcnQodGhpcywgY29tcGFyZWZuKTtcblxuICByZXR1cm4gaW50ZXJuYWxTb3J0KGFUeXBlZEFycmF5KHRoaXMpLCBnZXRTb3J0Q29tcGFyZShjb21wYXJlZm4pKTtcbn0sICFTVEFCTEVfU09SVCB8fCBBQ0NFUFRfSU5DT1JSRUNUX0FSR1VNRU5UUyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdHlwZWRBcnJheVNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuc3ViYXJyYXlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnN1YmFycmF5XG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdzdWJhcnJheScsIGZ1bmN0aW9uIHN1YmFycmF5KGJlZ2luLCBlbmQpIHtcbiAgdmFyIE8gPSBhVHlwZWRBcnJheSh0aGlzKTtcbiAgdmFyIGxlbmd0aCA9IE8ubGVuZ3RoO1xuICB2YXIgYmVnaW5JbmRleCA9IHRvQWJzb2x1dGVJbmRleChiZWdpbiwgbGVuZ3RoKTtcbiAgdmFyIEMgPSB0eXBlZEFycmF5U3BlY2llc0NvbnN0cnVjdG9yKE8pO1xuICByZXR1cm4gbmV3IEMoXG4gICAgTy5idWZmZXIsXG4gICAgTy5ieXRlT2Zmc2V0ICsgYmVnaW5JbmRleCAqIE8uQllURVNfUEVSX0VMRU1FTlQsXG4gICAgdG9MZW5ndGgoKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKSkgLSBiZWdpbkluZGV4KVxuICApO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGFwcGx5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWFwcGx5Jyk7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlJyk7XG5cbnZhciBJbnQ4QXJyYXkgPSBnbG9iYWwuSW50OEFycmF5O1xudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xudmFyICR0b0xvY2FsZVN0cmluZyA9IFtdLnRvTG9jYWxlU3RyaW5nO1xuXG4vLyBpT1MgU2FmYXJpIDYueCBmYWlscyBoZXJlXG52YXIgVE9fTE9DQUxFX1NUUklOR19CVUcgPSAhIUludDhBcnJheSAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICR0b0xvY2FsZVN0cmluZy5jYWxsKG5ldyBJbnQ4QXJyYXkoMSkpO1xufSk7XG5cbnZhciBGT1JDRUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBbMSwgMl0udG9Mb2NhbGVTdHJpbmcoKSAhPSBuZXcgSW50OEFycmF5KFsxLCAyXSkudG9Mb2NhbGVTdHJpbmcoKTtcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIEludDhBcnJheS5wcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcuY2FsbChbMSwgMl0pO1xufSk7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS50b2xvY2FsZXN0cmluZ1xuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgndG9Mb2NhbGVTdHJpbmcnLCBmdW5jdGlvbiB0b0xvY2FsZVN0cmluZygpIHtcbiAgcmV0dXJuIGFwcGx5KFxuICAgICR0b0xvY2FsZVN0cmluZyxcbiAgICBUT19MT0NBTEVfU1RSSU5HX0JVRyA/IGFycmF5U2xpY2UoYVR5cGVkQXJyYXkodGhpcykpIDogYVR5cGVkQXJyYXkodGhpcyksXG4gICAgYXJyYXlTbGljZShhcmd1bWVudHMpXG4gICk7XG59LCBGT1JDRUQpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbnZhciBVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXk7XG52YXIgVWludDhBcnJheVByb3RvdHlwZSA9IFVpbnQ4QXJyYXkgJiYgVWludDhBcnJheS5wcm90b3R5cGUgfHwge307XG52YXIgYXJyYXlUb1N0cmluZyA9IFtdLnRvU3RyaW5nO1xudmFyIGpvaW4gPSB1bmN1cnJ5VGhpcyhbXS5qb2luKTtcblxuaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb1N0cmluZy5jYWxsKHt9KTsgfSkpIHtcbiAgYXJyYXlUb1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBqb2luKHRoaXMpO1xuICB9O1xufVxuXG52YXIgSVNfTk9UX0FSUkFZX01FVEhPRCA9IFVpbnQ4QXJyYXlQcm90b3R5cGUudG9TdHJpbmcgIT0gYXJyYXlUb1N0cmluZztcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnRvc3RyaW5nXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCd0b1N0cmluZycsIGFycmF5VG9TdHJpbmcsIElTX05PVF9BUlJBWV9NRVRIT0QpO1xuIiwidmFyIGNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcicpO1xuXG4vLyBgVWludDE2QXJyYXlgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXR5cGVkYXJyYXktb2JqZWN0c1xuY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yKCdVaW50MTYnLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwidmFyIGNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcicpO1xuXG4vLyBgVWludDMyQXJyYXlgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXR5cGVkYXJyYXktb2JqZWN0c1xuY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yKCdVaW50MzInLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwidmFyIGNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcicpO1xuXG4vLyBgVWludDhBcnJheWAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdHlwZWRhcnJheS1vYmplY3RzXG5jcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IoJ1VpbnQ4JywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwidmFyIGNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcicpO1xuXG4vLyBgVWludDhDbGFtcGVkQXJyYXlgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXR5cGVkYXJyYXktb2JqZWN0c1xuY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yKCdVaW50OCcsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OENsYW1wZWRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSwgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcblxudmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoLy4vLmV4ZWMpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xuXG52YXIgaGV4MiA9IC9eW1xcZGEtZl17Mn0kL2k7XG52YXIgaGV4NCA9IC9eW1xcZGEtZl17NH0kL2k7XG5cbi8vIGB1bmVzY2FwZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXVuZXNjYXBlLXN0cmluZ1xuJCh7IGdsb2JhbDogdHJ1ZSB9LCB7XG4gIHVuZXNjYXBlOiBmdW5jdGlvbiB1bmVzY2FwZShzdHJpbmcpIHtcbiAgICB2YXIgc3RyID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgdmFyIGxlbmd0aCA9IHN0ci5sZW5ndGg7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgY2hyLCBwYXJ0O1xuICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgY2hyID0gY2hhckF0KHN0ciwgaW5kZXgrKyk7XG4gICAgICBpZiAoY2hyID09PSAnJScpIHtcbiAgICAgICAgaWYgKGNoYXJBdChzdHIsIGluZGV4KSA9PT0gJ3UnKSB7XG4gICAgICAgICAgcGFydCA9IHN0cmluZ1NsaWNlKHN0ciwgaW5kZXggKyAxLCBpbmRleCArIDUpO1xuICAgICAgICAgIGlmIChleGVjKGhleDQsIHBhcnQpKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gZnJvbUNoYXJDb2RlKHBhcnNlSW50KHBhcnQsIDE2KSk7XG4gICAgICAgICAgICBpbmRleCArPSA1O1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhcnQgPSBzdHJpbmdTbGljZShzdHIsIGluZGV4LCBpbmRleCArIDIpO1xuICAgICAgICAgIGlmIChleGVjKGhleDIsIHBhcnQpKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gZnJvbUNoYXJDb2RlKHBhcnNlSW50KHBhcnQsIDE2KSk7XG4gICAgICAgICAgICBpbmRleCArPSAyO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXN1bHQgKz0gY2hyO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGRlZmluZUJ1aWx0SW5zID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbnMnKTtcbnZhciBJbnRlcm5hbE1ldGFkYXRhTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLW1ldGFkYXRhJyk7XG52YXIgY29sbGVjdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uJyk7XG52YXIgY29sbGVjdGlvbldlYWsgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNFeHRlbnNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1leHRlbnNpYmxlJyk7XG52YXIgZW5mb3JjZUludGVybmFsU3RhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKS5lbmZvcmNlO1xudmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWFrLW1hcC1iYXNpYy1kZXRlY3Rpb24nKTtcblxudmFyIElTX0lFMTEgPSAhZ2xvYmFsLkFjdGl2ZVhPYmplY3QgJiYgJ0FjdGl2ZVhPYmplY3QnIGluIGdsb2JhbDtcbnZhciBJbnRlcm5hbFdlYWtNYXA7XG5cbnZhciB3cmFwcGVyID0gZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtNYXAoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gIH07XG59O1xuXG4vLyBgV2Vha01hcGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtd2Vha21hcC1jb25zdHJ1Y3RvclxudmFyICRXZWFrTWFwID0gY29sbGVjdGlvbignV2Vha01hcCcsIHdyYXBwZXIsIGNvbGxlY3Rpb25XZWFrKTtcblxuLy8gSUUxMSBXZWFrTWFwIGZyb3plbiBrZXlzIGZpeFxuLy8gV2UgY2FuJ3QgdXNlIGZlYXR1cmUgZGV0ZWN0aW9uIGJlY2F1c2UgaXQgY3Jhc2ggc29tZSBvbGQgSUUgYnVpbGRzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNDg1XG5pZiAoTkFUSVZFX1dFQUtfTUFQICYmIElTX0lFMTEpIHtcbiAgSW50ZXJuYWxXZWFrTWFwID0gY29sbGVjdGlvbldlYWsuZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgJ1dlYWtNYXAnLCB0cnVlKTtcbiAgSW50ZXJuYWxNZXRhZGF0YU1vZHVsZS5lbmFibGUoKTtcbiAgdmFyIFdlYWtNYXBQcm90b3R5cGUgPSAkV2Vha01hcC5wcm90b3R5cGU7XG4gIHZhciBuYXRpdmVEZWxldGUgPSB1bmN1cnJ5VGhpcyhXZWFrTWFwUHJvdG90eXBlWydkZWxldGUnXSk7XG4gIHZhciBuYXRpdmVIYXMgPSB1bmN1cnJ5VGhpcyhXZWFrTWFwUHJvdG90eXBlLmhhcyk7XG4gIHZhciBuYXRpdmVHZXQgPSB1bmN1cnJ5VGhpcyhXZWFrTWFwUHJvdG90eXBlLmdldCk7XG4gIHZhciBuYXRpdmVTZXQgPSB1bmN1cnJ5VGhpcyhXZWFrTWFwUHJvdG90eXBlLnNldCk7XG4gIGRlZmluZUJ1aWx0SW5zKFdlYWtNYXBQcm90b3R5cGUsIHtcbiAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKGlzT2JqZWN0KGtleSkgJiYgIWlzRXh0ZW5zaWJsZShrZXkpKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGVuZm9yY2VJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgICAgICBpZiAoIXN0YXRlLmZyb3plbikgc3RhdGUuZnJvemVuID0gbmV3IEludGVybmFsV2Vha01hcCgpO1xuICAgICAgICByZXR1cm4gbmF0aXZlRGVsZXRlKHRoaXMsIGtleSkgfHwgc3RhdGUuZnJvemVuWydkZWxldGUnXShrZXkpO1xuICAgICAgfSByZXR1cm4gbmF0aXZlRGVsZXRlKHRoaXMsIGtleSk7XG4gICAgfSxcbiAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgIGlmIChpc09iamVjdChrZXkpICYmICFpc0V4dGVuc2libGUoa2V5KSkge1xuICAgICAgICB2YXIgc3RhdGUgPSBlbmZvcmNlSW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgICAgaWYgKCFzdGF0ZS5mcm96ZW4pIHN0YXRlLmZyb3plbiA9IG5ldyBJbnRlcm5hbFdlYWtNYXAoKTtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUhhcyh0aGlzLCBrZXkpIHx8IHN0YXRlLmZyb3plbi5oYXMoa2V5KTtcbiAgICAgIH0gcmV0dXJuIG5hdGl2ZUhhcyh0aGlzLCBrZXkpO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICBpZiAoaXNPYmplY3Qoa2V5KSAmJiAhaXNFeHRlbnNpYmxlKGtleSkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZW5mb3JjZUludGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIGlmICghc3RhdGUuZnJvemVuKSBzdGF0ZS5mcm96ZW4gPSBuZXcgSW50ZXJuYWxXZWFrTWFwKCk7XG4gICAgICAgIHJldHVybiBuYXRpdmVIYXModGhpcywga2V5KSA/IG5hdGl2ZUdldCh0aGlzLCBrZXkpIDogc3RhdGUuZnJvemVuLmdldChrZXkpO1xuICAgICAgfSByZXR1cm4gbmF0aXZlR2V0KHRoaXMsIGtleSk7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoaXNPYmplY3Qoa2V5KSAmJiAhaXNFeHRlbnNpYmxlKGtleSkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZW5mb3JjZUludGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIGlmICghc3RhdGUuZnJvemVuKSBzdGF0ZS5mcm96ZW4gPSBuZXcgSW50ZXJuYWxXZWFrTWFwKCk7XG4gICAgICAgIG5hdGl2ZUhhcyh0aGlzLCBrZXkpID8gbmF0aXZlU2V0KHRoaXMsIGtleSwgdmFsdWUpIDogc3RhdGUuZnJvemVuLnNldChrZXksIHZhbHVlKTtcbiAgICAgIH0gZWxzZSBuYXRpdmVTZXQodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH0pO1xufVxuIiwiLy8gVE9ETzogUmVtb3ZlIHRoaXMgbW9kdWxlIGZyb20gYGNvcmUtanNANGAgc2luY2UgaXQncyByZXBsYWNlZCB0byBtb2R1bGUgYmVsb3dcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMud2Vhay1tYXAuY29uc3RydWN0b3InKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjb2xsZWN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24nKTtcbnZhciBjb2xsZWN0aW9uV2VhayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uLXdlYWsnKTtcblxuLy8gYFdlYWtTZXRgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXdlYWtzZXQtY29uc3RydWN0b3JcbmNvbGxlY3Rpb24oJ1dlYWtTZXQnLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha1NldCgpIHsgcmV0dXJuIGluaXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCBjb2xsZWN0aW9uV2Vhayk7XG4iLCIvLyBUT0RPOiBSZW1vdmUgdGhpcyBtb2R1bGUgZnJvbSBgY29yZS1qc0A0YCBzaW5jZSBpdCdzIHJlcGxhY2VkIHRvIG1vZHVsZSBiZWxvd1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy53ZWFrLXNldC5jb25zdHJ1Y3RvcicpO1xuIiwiLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYWdncmVnYXRlLWVycm9yJyk7XG4iLCIvLyBUT0RPOiBSZW1vdmUgZnJvbSBgY29yZS1qc0A0YFxucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5hdCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gVE9ETzogcmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRmaWx0ZXJSZWplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmlsdGVyUmVqZWN0O1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyT3V0YCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWFycmF5LWZpbHRlcmluZ1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIGZpbHRlck91dDogZnVuY3Rpb24gZmlsdGVyT3V0KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmaWx0ZXJSZWplY3QodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxuYWRkVG9VbnNjb3BhYmxlcygnZmlsdGVyT3V0Jyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkZmlsdGVyUmVqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZpbHRlclJlamVjdDtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlclJlamVjdGAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1hcnJheS1maWx0ZXJpbmdcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBmaWx0ZXJSZWplY3Q6IGZ1bmN0aW9uIGZpbHRlclJlamVjdChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZmlsdGVyUmVqZWN0KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2ZpbHRlclJlamVjdCcpO1xuIiwiLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuZmluZC1sYXN0LWluZGV4Jyk7XG4iLCIvLyBUT0RPOiBSZW1vdmUgZnJvbSBgY29yZS1qc0A0YFxucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5maW5kLWxhc3QnKTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZyb21Bc3luYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mcm9tLWFzeW5jJyk7XG5cbi8vIGBBcnJheS5mcm9tQXN5bmNgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtYXJyYXktZnJvbS1hc3luY1xuJCh7IHRhcmdldDogJ0FycmF5Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgZnJvbUFzeW5jOiBmcm9tQXN5bmNcbn0pO1xuIiwiLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgJGdyb3VwVG9NYXAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZ3JvdXAtdG8tbWFwJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZ3JvdXBCeVRvTWFwYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWFycmF5LWdyb3VwaW5nXG4vLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjM2NTQxXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgbmFtZTogJ2dyb3VwVG9NYXAnLCBmb3JjZWQ6ICFhcnJheU1ldGhvZElzU3RyaWN0KCdncm91cEJ5VG9NYXAnKSB9LCB7XG4gIGdyb3VwQnlUb01hcDogJGdyb3VwVG9NYXBcbn0pO1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdncm91cEJ5VG9NYXAnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgXG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkZ3JvdXAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZ3JvdXAnKTtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmdyb3VwQnlgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtYXJyYXktZ3JvdXBpbmdcbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yMzY1NDFcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFhcnJheU1ldGhvZElzU3RyaWN0KCdncm91cEJ5JykgfSwge1xuICBncm91cEJ5OiBmdW5jdGlvbiBncm91cEJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIHRoaXNBcmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gJGdyb3VwKHRoaXMsIGNhbGxiYWNrZm4sIHRoaXNBcmcpO1xuICB9XG59KTtcblxuYWRkVG9VbnNjb3BhYmxlcygnZ3JvdXBCeScpO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciAkZ3JvdXBUb01hcCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1ncm91cC10by1tYXAnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5ncm91cFRvTWFwYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWFycmF5LWdyb3VwaW5nXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSB9LCB7XG4gIGdyb3VwVG9NYXA6ICRncm91cFRvTWFwXG59KTtcblxuYWRkVG9VbnNjb3BhYmxlcygnZ3JvdXBUb01hcCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGdyb3VwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWdyb3VwJyk7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5ncm91cGAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1hcnJheS1ncm91cGluZ1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUgfSwge1xuICBncm91cDogZnVuY3Rpb24gZ3JvdXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgdGhpc0FyZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHJldHVybiAkZ3JvdXAodGhpcywgY2FsbGJhY2tmbiwgdGhpc0FyZyk7XG4gIH1cbn0pO1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdncm91cCcpO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1vYmplY3QtaXNmcm96ZW4gLS0gc2FmZVxudmFyIGlzRnJvemVuID0gT2JqZWN0LmlzRnJvemVuO1xuXG52YXIgaXNGcm96ZW5TdHJpbmdBcnJheSA9IGZ1bmN0aW9uIChhcnJheSwgYWxsb3dVbmRlZmluZWQpIHtcbiAgaWYgKCFpc0Zyb3plbiB8fCAhaXNBcnJheShhcnJheSkgfHwgIWlzRnJvemVuKGFycmF5KSkgcmV0dXJuIGZhbHNlO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICB2YXIgZWxlbWVudDtcbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgZWxlbWVudCA9IGFycmF5W2luZGV4KytdO1xuICAgIGlmICghKHR5cGVvZiBlbGVtZW50ID09ICdzdHJpbmcnIHx8IChhbGxvd1VuZGVmaW5lZCAmJiBlbGVtZW50ID09PSB1bmRlZmluZWQpKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSByZXR1cm4gbGVuZ3RoICE9PSAwO1xufTtcblxuLy8gYEFycmF5LmlzVGVtcGxhdGVPYmplY3RgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtYXJyYXktaXMtdGVtcGxhdGUtb2JqZWN0XG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBzdGF0OiB0cnVlLCBzaGFtOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBpc1RlbXBsYXRlT2JqZWN0OiBmdW5jdGlvbiBpc1RlbXBsYXRlT2JqZWN0KHZhbHVlKSB7XG4gICAgaWYgKCFpc0Zyb3plblN0cmluZ0FycmF5KHZhbHVlLCB0cnVlKSkgcmV0dXJuIGZhbHNlO1xuICAgIHZhciByYXcgPSB2YWx1ZS5yYXc7XG4gICAgcmV0dXJuIHJhdy5sZW5ndGggPT09IHZhbHVlLmxlbmd0aCAmJiBpc0Zyb3plblN0cmluZ0FycmF5KHJhdywgZmFsc2UpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgXG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgZGVmaW5lQnVpbHRJbkFjY2Vzc29yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbi1hY2Nlc3NvcicpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleGAgZ2V0dGVyXG4vLyBodHRwczovL2dpdGh1Yi5jb20va2VpdGhhbXVzL3Byb3Bvc2FsLWFycmF5LWxhc3RcbmlmIChERVNDUklQVE9SUykge1xuICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoQXJyYXkucHJvdG90eXBlLCAnbGFzdEluZGV4Jywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGxhc3RJbmRleCgpIHtcbiAgICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgICB2YXIgbGVuID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgICByZXR1cm4gbGVuID09IDAgPyAwIDogbGVuIC0gMTtcbiAgICB9XG4gIH0pO1xuXG4gIGFkZFRvVW5zY29wYWJsZXMoJ2xhc3RJbmRleCcpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBkZWZpbmVCdWlsdEluQWNjZXNzb3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluLWFjY2Vzc29yJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4YCBhY2Nlc3NvclxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2tlaXRoYW11cy9wcm9wb3NhbC1hcnJheS1sYXN0XG5pZiAoREVTQ1JJUFRPUlMpIHtcbiAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKEFycmF5LnByb3RvdHlwZSwgJ2xhc3RJdGVtJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGxhc3RJdGVtKCkge1xuICAgICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICAgIHZhciBsZW4gPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgICAgIHJldHVybiBsZW4gPT0gMCA/IHVuZGVmaW5lZCA6IE9bbGVuIC0gMV07XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIGxhc3RJdGVtKHZhbHVlKSB7XG4gICAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgICAgdmFyIGxlbiA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICAgICAgcmV0dXJuIE9bbGVuID09IDAgPyAwIDogbGVuIC0gMV0gPSB2YWx1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIGFkZFRvVW5zY29wYWJsZXMoJ2xhc3RJdGVtJyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBhcnJheVRvUmV2ZXJzZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktdG8tcmV2ZXJzZWQnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xuXG52YXIgJEFycmF5ID0gQXJyYXk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUudG9SZXZlcnNlZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvcHJvcG9zYWwtY2hhbmdlLWFycmF5LWJ5LWNvcHkvI3NlYy1hcnJheS5wcm90b3R5cGUudG9SZXZlcnNlZFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUgfSwge1xuICB0b1JldmVyc2VkOiBmdW5jdGlvbiB0b1JldmVyc2VkKCkge1xuICAgIHJldHVybiBhcnJheVRvUmV2ZXJzZWQodG9JbmRleGVkT2JqZWN0KHRoaXMpLCAkQXJyYXkpO1xuICB9XG59KTtcblxuYWRkVG9VbnNjb3BhYmxlcygndG9SZXZlcnNlZCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBhcnJheUZyb21Db25zdHJ1Y3RvckFuZExpc3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZnJvbS1jb25zdHJ1Y3Rvci1hbmQtbGlzdCcpO1xudmFyIGdldFZpcnR1YWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW50cnktdmlydHVhbCcpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbnZhciAkQXJyYXkgPSBBcnJheTtcbnZhciBzb3J0ID0gdW5jdXJyeVRoaXMoZ2V0VmlydHVhbCgnQXJyYXknKS5zb3J0KTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS50b1NvcnRlZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvcHJvcG9zYWwtY2hhbmdlLWFycmF5LWJ5LWNvcHkvI3NlYy1hcnJheS5wcm90b3R5cGUudG9Tb3J0ZWRcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlIH0sIHtcbiAgdG9Tb3J0ZWQ6IGZ1bmN0aW9uIHRvU29ydGVkKGNvbXBhcmVGbikge1xuICAgIGlmIChjb21wYXJlRm4gIT09IHVuZGVmaW5lZCkgYUNhbGxhYmxlKGNvbXBhcmVGbik7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QodGhpcyk7XG4gICAgdmFyIEEgPSBhcnJheUZyb21Db25zdHJ1Y3RvckFuZExpc3QoJEFycmF5LCBPKTtcbiAgICByZXR1cm4gc29ydChBLCBjb21wYXJlRm4pO1xuICB9XG59KTtcblxuYWRkVG9VbnNjb3BhYmxlcygndG9Tb3J0ZWQnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgZG9lc05vdEV4Y2VlZFNhZmVJbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvZXMtbm90LWV4Y2VlZC1zYWZlLWludGVnZXInKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xuXG52YXIgJEFycmF5ID0gQXJyYXk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBBcnJheS5wcm90b3R5cGUudG9TcGxpY2VkYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9wcm9wb3NhbC1jaGFuZ2UtYXJyYXktYnktY29weS8jc2VjLWFycmF5LnByb3RvdHlwZS50b1NwbGljZWRcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlIH0sIHtcbiAgdG9TcGxpY2VkOiBmdW5jdGlvbiB0b1NwbGljZWQoc3RhcnQsIGRlbGV0ZUNvdW50IC8qICwgLi4uaXRlbXMgKi8pIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgdmFyIGFjdHVhbFN0YXJ0ID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICAgIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBrID0gMDtcbiAgICB2YXIgaW5zZXJ0Q291bnQsIGFjdHVhbERlbGV0ZUNvdW50LCBuZXdMZW4sIEE7XG4gICAgaWYgKGFyZ3VtZW50c0xlbmd0aCA9PT0gMCkge1xuICAgICAgaW5zZXJ0Q291bnQgPSBhY3R1YWxEZWxldGVDb3VudCA9IDA7XG4gICAgfSBlbHNlIGlmIChhcmd1bWVudHNMZW5ndGggPT09IDEpIHtcbiAgICAgIGluc2VydENvdW50ID0gMDtcbiAgICAgIGFjdHVhbERlbGV0ZUNvdW50ID0gbGVuIC0gYWN0dWFsU3RhcnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc2VydENvdW50ID0gYXJndW1lbnRzTGVuZ3RoIC0gMjtcbiAgICAgIGFjdHVhbERlbGV0ZUNvdW50ID0gbWluKG1heCh0b0ludGVnZXJPckluZmluaXR5KGRlbGV0ZUNvdW50KSwgMCksIGxlbiAtIGFjdHVhbFN0YXJ0KTtcbiAgICB9XG4gICAgbmV3TGVuID0gZG9lc05vdEV4Y2VlZFNhZmVJbnRlZ2VyKGxlbiArIGluc2VydENvdW50IC0gYWN0dWFsRGVsZXRlQ291bnQpO1xuICAgIEEgPSAkQXJyYXkobmV3TGVuKTtcblxuICAgIGZvciAoOyBrIDwgYWN0dWFsU3RhcnQ7IGsrKykgQVtrXSA9IE9ba107XG4gICAgZm9yICg7IGsgPCBhY3R1YWxTdGFydCArIGluc2VydENvdW50OyBrKyspIEFba10gPSBhcmd1bWVudHNbayAtIGFjdHVhbFN0YXJ0ICsgMl07XG4gICAgZm9yICg7IGsgPCBuZXdMZW47IGsrKykgQVtrXSA9IE9bayArIGFjdHVhbERlbGV0ZUNvdW50IC0gaW5zZXJ0Q291bnRdO1xuXG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuXG5hZGRUb1Vuc2NvcGFibGVzKCd0b1NwbGljZWQnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgdW5pcXVlQnkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktdW5pcXVlLWJ5Jyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUudW5pcXVlQnlgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtYXJyYXktdW5pcXVlXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgdW5pcXVlQnk6IHVuaXF1ZUJ5XG59KTtcblxuYWRkVG9VbnNjb3BhYmxlcygndW5pcXVlQnknKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFycmF5V2l0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS13aXRoJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG5cbnZhciAkQXJyYXkgPSBBcnJheTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS53aXRoYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9wcm9wb3NhbC1jaGFuZ2UtYXJyYXktYnktY29weS8jc2VjLWFycmF5LnByb3RvdHlwZS53aXRoXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSB9LCB7XG4gICd3aXRoJzogZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSkge1xuICAgIHJldHVybiBhcnJheVdpdGgodG9JbmRleGVkT2JqZWN0KHRoaXMpLCAkQXJyYXksIGluZGV4LCB2YWx1ZSk7XG4gIH1cbn0pO1xuIiwiLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWl0ZXJhdG9yLWhlbHBlcnNcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGluZGV4ZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXN5bmMtaXRlcmF0b3ItaW5kZXhlZCcpO1xuXG4kKHsgdGFyZ2V0OiAnQXN5bmNJdGVyYXRvcicsIG5hbWU6ICdpbmRleGVkJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIGFzSW5kZXhlZFBhaXJzOiBpbmRleGVkXG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWl0ZXJhdG9yLWhlbHBlcnNcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBBc3luY0l0ZXJhdG9yUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FzeW5jLWl0ZXJhdG9yLXByb3RvdHlwZScpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcblxudmFyIEFzeW5jSXRlcmF0b3JDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoKSB7XG4gIGFuSW5zdGFuY2UodGhpcywgQXN5bmNJdGVyYXRvclByb3RvdHlwZSk7XG59O1xuXG5Bc3luY0l0ZXJhdG9yQ29uc3RydWN0b3IucHJvdG90eXBlID0gQXN5bmNJdGVyYXRvclByb3RvdHlwZTtcblxuaWYgKCFoYXNPd24oQXN5bmNJdGVyYXRvclByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRykpIHtcbiAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KEFzeW5jSXRlcmF0b3JQcm90b3R5cGUsIFRPX1NUUklOR19UQUcsICdBc3luY0l0ZXJhdG9yJyk7XG59XG5cbmlmIChJU19QVVJFIHx8ICFoYXNPd24oQXN5bmNJdGVyYXRvclByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJykgfHwgQXN5bmNJdGVyYXRvclByb3RvdHlwZS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7XG4gIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShBc3luY0l0ZXJhdG9yUHJvdG90eXBlLCAnY29uc3RydWN0b3InLCBBc3luY0l0ZXJhdG9yQ29uc3RydWN0b3IpO1xufVxuXG4kKHsgZ2xvYmFsOiB0cnVlLCBjb25zdHJ1Y3RvcjogdHJ1ZSwgZm9yY2VkOiBJU19QVVJFIH0sIHtcbiAgQXN5bmNJdGVyYXRvcjogQXN5bmNJdGVyYXRvckNvbnN0cnVjdG9yXG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWl0ZXJhdG9yLWhlbHBlcnNcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGdldEl0ZXJhdG9yRGlyZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1kaXJlY3QnKTtcbnZhciBub3RBTmFOID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25vdC1hLW5hbicpO1xudmFyIHRvUG9zaXRpdmVJbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXBvc2l0aXZlLWludGVnZXInKTtcbnZhciBjcmVhdGVBc3luY0l0ZXJhdG9yUHJveHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXN5bmMtaXRlcmF0b3ItY3JlYXRlLXByb3h5Jyk7XG52YXIgY3JlYXRlSXRlclJlc3VsdE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaXRlci1yZXN1bHQtb2JqZWN0Jyk7XG5cbnZhciBBc3luY0l0ZXJhdG9yUHJveHkgPSBjcmVhdGVBc3luY0l0ZXJhdG9yUHJveHkoZnVuY3Rpb24gKFByb21pc2UpIHtcbiAgdmFyIHN0YXRlID0gdGhpcztcblxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciBkb25lQW5kUmVqZWN0ID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgICAgIHJlamVjdChlcnJvcik7XG4gICAgfTtcblxuICAgIHZhciBsb29wID0gZnVuY3Rpb24gKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKGFuT2JqZWN0KGNhbGwoc3RhdGUubmV4dCwgc3RhdGUuaXRlcmF0b3IpKSkudGhlbihmdW5jdGlvbiAoc3RlcCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoYW5PYmplY3Qoc3RlcCkuZG9uZSkge1xuICAgICAgICAgICAgICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgcmVzb2x2ZShjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KHVuZGVmaW5lZCwgdHJ1ZSkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS5yZW1haW5pbmcpIHtcbiAgICAgICAgICAgICAgc3RhdGUucmVtYWluaW5nLS07XG4gICAgICAgICAgICAgIGxvb3AoKTtcbiAgICAgICAgICAgIH0gZWxzZSByZXNvbHZlKGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3Qoc3RlcC52YWx1ZSwgZmFsc2UpKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHsgZG9uZUFuZFJlamVjdChlcnIpOyB9XG4gICAgICAgIH0sIGRvbmVBbmRSZWplY3QpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHsgZG9uZUFuZFJlamVjdChlcnJvcik7IH1cbiAgICB9O1xuXG4gICAgbG9vcCgpO1xuICB9KTtcbn0pO1xuXG4kKHsgdGFyZ2V0OiAnQXN5bmNJdGVyYXRvcicsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBkcm9wOiBmdW5jdGlvbiBkcm9wKGxpbWl0KSB7XG4gICAgcmV0dXJuIG5ldyBBc3luY0l0ZXJhdG9yUHJveHkoZ2V0SXRlcmF0b3JEaXJlY3QodGhpcyksIHtcbiAgICAgIHJlbWFpbmluZzogdG9Qb3NpdGl2ZUludGVnZXIobm90QU5hTigrbGltaXQpKVxuICAgIH0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWl0ZXJhdG9yLWhlbHBlcnNcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRldmVyeSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hc3luYy1pdGVyYXRvci1pdGVyYXRpb24nKS5ldmVyeTtcblxuJCh7IHRhcmdldDogJ0FzeW5jSXRlcmF0b3InLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGZuKSB7XG4gICAgcmV0dXJuICRldmVyeSh0aGlzLCBmbik7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtaXRlcmF0b3ItaGVscGVyc1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBnZXRJdGVyYXRvckRpcmVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItZGlyZWN0Jyk7XG52YXIgY3JlYXRlQXN5bmNJdGVyYXRvclByb3h5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FzeW5jLWl0ZXJhdG9yLWNyZWF0ZS1wcm94eScpO1xudmFyIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWl0ZXItcmVzdWx0LW9iamVjdCcpO1xudmFyIGNsb3NlQXN5bmNJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXN5bmMtaXRlcmF0b3ItY2xvc2UnKTtcblxudmFyIEFzeW5jSXRlcmF0b3JQcm94eSA9IGNyZWF0ZUFzeW5jSXRlcmF0b3JQcm94eShmdW5jdGlvbiAoUHJvbWlzZSkge1xuICB2YXIgc3RhdGUgPSB0aGlzO1xuICB2YXIgaXRlcmF0b3IgPSBzdGF0ZS5pdGVyYXRvcjtcbiAgdmFyIGZpbHRlcmVyID0gc3RhdGUuZmlsdGVyZXI7XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgZG9uZUFuZFJlamVjdCA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgc3RhdGUuZG9uZSA9IHRydWU7XG4gICAgICByZWplY3QoZXJyb3IpO1xuICAgIH07XG5cbiAgICB2YXIgaWZBYnJ1cHRDbG9zZUFzeW5jSXRlcmF0b3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIGNsb3NlQXN5bmNJdGVyYXRpb24oaXRlcmF0b3IsIGRvbmVBbmRSZWplY3QsIGVycm9yLCBkb25lQW5kUmVqZWN0KTtcbiAgICB9O1xuXG4gICAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0cnkge1xuICAgICAgICBQcm9taXNlLnJlc29sdmUoYW5PYmplY3QoY2FsbChzdGF0ZS5uZXh0LCBpdGVyYXRvcikpKS50aGVuKGZ1bmN0aW9uIChzdGVwKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChhbk9iamVjdChzdGVwKS5kb25lKSB7XG4gICAgICAgICAgICAgIHN0YXRlLmRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICByZXNvbHZlKGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QodW5kZWZpbmVkLCB0cnVlKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBzdGVwLnZhbHVlO1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIFByb21pc2UucmVzb2x2ZShmaWx0ZXJlcih2YWx1ZSkpLnRoZW4oZnVuY3Rpb24gKHNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICBzZWxlY3RlZCA/IHJlc29sdmUoY3JlYXRlSXRlclJlc3VsdE9iamVjdCh2YWx1ZSwgZmFsc2UpKSA6IGxvb3AoKTtcbiAgICAgICAgICAgICAgICB9LCBpZkFicnVwdENsb3NlQXN5bmNJdGVyYXRvcik7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yMykgeyBpZkFicnVwdENsb3NlQXN5bmNJdGVyYXRvcihlcnJvcjMpOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IyKSB7IGRvbmVBbmRSZWplY3QoZXJyb3IyKTsgfVxuICAgICAgICB9LCBkb25lQW5kUmVqZWN0KTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7IGRvbmVBbmRSZWplY3QoZXJyb3IpOyB9XG4gICAgfTtcblxuICAgIGxvb3AoKTtcbiAgfSk7XG59KTtcblxuJCh7IHRhcmdldDogJ0FzeW5jSXRlcmF0b3InLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoZmlsdGVyZXIpIHtcbiAgICByZXR1cm4gbmV3IEFzeW5jSXRlcmF0b3JQcm94eShnZXRJdGVyYXRvckRpcmVjdCh0aGlzKSwge1xuICAgICAgZmlsdGVyZXI6IGFDYWxsYWJsZShmaWx0ZXJlcilcbiAgICB9KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1pdGVyYXRvci1oZWxwZXJzXG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hc3luYy1pdGVyYXRvci1pdGVyYXRpb24nKS5maW5kO1xuXG4kKHsgdGFyZ2V0OiAnQXN5bmNJdGVyYXRvcicsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGZuKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGZuKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1pdGVyYXRvci1oZWxwZXJzXG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGdldEl0ZXJhdG9yRGlyZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1kaXJlY3QnKTtcbnZhciBjcmVhdGVBc3luY0l0ZXJhdG9yUHJveHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXN5bmMtaXRlcmF0b3ItY3JlYXRlLXByb3h5Jyk7XG52YXIgY3JlYXRlSXRlclJlc3VsdE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaXRlci1yZXN1bHQtb2JqZWN0Jyk7XG52YXIgZ2V0QXN5bmNJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYXN5bmMtaXRlcmF0b3InKTtcbnZhciBjbG9zZUFzeW5jSXRlcmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FzeW5jLWl0ZXJhdG9yLWNsb3NlJyk7XG5cbnZhciBBc3luY0l0ZXJhdG9yUHJveHkgPSBjcmVhdGVBc3luY0l0ZXJhdG9yUHJveHkoZnVuY3Rpb24gKFByb21pc2UpIHtcbiAgdmFyIHN0YXRlID0gdGhpcztcbiAgdmFyIGl0ZXJhdG9yID0gc3RhdGUuaXRlcmF0b3I7XG4gIHZhciBtYXBwZXIgPSBzdGF0ZS5tYXBwZXI7XG4gIHZhciBpbm5lckl0ZXJhdG9yO1xuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIGRvbmVBbmRSZWplY3QgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIHN0YXRlLmRvbmUgPSB0cnVlO1xuICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICB9O1xuXG4gICAgdmFyIGlmQWJydXB0Q2xvc2VBc3luY0l0ZXJhdG9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICBjbG9zZUFzeW5jSXRlcmF0aW9uKGl0ZXJhdG9yLCBkb25lQW5kUmVqZWN0LCBlcnJvciwgZG9uZUFuZFJlamVjdCk7XG4gICAgfTtcblxuICAgIHZhciBvdXRlckxvb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0cnkge1xuICAgICAgICBQcm9taXNlLnJlc29sdmUoYW5PYmplY3QoY2FsbChzdGF0ZS5uZXh0LCBpdGVyYXRvcikpKS50aGVuKGZ1bmN0aW9uIChzdGVwKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChhbk9iamVjdChzdGVwKS5kb25lKSB7XG4gICAgICAgICAgICAgIHN0YXRlLmRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICByZXNvbHZlKGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QodW5kZWZpbmVkLCB0cnVlKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBzdGVwLnZhbHVlO1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIFByb21pc2UucmVzb2x2ZShtYXBwZXIodmFsdWUpKS50aGVuKGZ1bmN0aW9uIChtYXBwZWQpIHtcbiAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmlubmVySXRlcmF0b3IgPSBpbm5lckl0ZXJhdG9yID0gZ2V0QXN5bmNJdGVyYXRvcihtYXBwZWQpO1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5pbm5lck5leHQgPSBhQ2FsbGFibGUoaW5uZXJJdGVyYXRvci5uZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgaW5uZXJMb29wKCk7XG4gICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcjQpIHsgaWZBYnJ1cHRDbG9zZUFzeW5jSXRlcmF0b3IoZXJyb3I0KTsgfVxuICAgICAgICAgICAgICAgIH0sIGlmQWJydXB0Q2xvc2VBc3luY0l0ZXJhdG9yKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IzKSB7IGlmQWJydXB0Q2xvc2VBc3luY0l0ZXJhdG9yKGVycm9yMyk7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlcnJvcjIpIHsgZG9uZUFuZFJlamVjdChlcnJvcjIpOyB9XG4gICAgICAgIH0sIGRvbmVBbmRSZWplY3QpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHsgZG9uZUFuZFJlamVjdChlcnJvcik7IH1cbiAgICB9O1xuXG4gICAgdmFyIGlubmVyTG9vcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpbm5lckl0ZXJhdG9yID0gc3RhdGUuaW5uZXJJdGVyYXRvcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIFByb21pc2UucmVzb2x2ZShhbk9iamVjdChjYWxsKHN0YXRlLmlubmVyTmV4dCwgaW5uZXJJdGVyYXRvcikpKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGlmIChhbk9iamVjdChyZXN1bHQpLmRvbmUpIHtcbiAgICAgICAgICAgICAgICBzdGF0ZS5pbm5lckl0ZXJhdG9yID0gc3RhdGUuaW5uZXJOZXh0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBvdXRlckxvb3AoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHJlc29sdmUoY3JlYXRlSXRlclJlc3VsdE9iamVjdChyZXN1bHQudmFsdWUsIGZhbHNlKSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcjEpIHsgaWZBYnJ1cHRDbG9zZUFzeW5jSXRlcmF0b3IoZXJyb3IxKTsgfVxuICAgICAgICAgIH0sIGlmQWJydXB0Q2xvc2VBc3luY0l0ZXJhdG9yKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsgaWZBYnJ1cHRDbG9zZUFzeW5jSXRlcmF0b3IoZXJyb3IpOyB9XG4gICAgICB9IGVsc2Ugb3V0ZXJMb29wKCk7XG4gICAgfTtcblxuICAgIGlubmVyTG9vcCgpO1xuICB9KTtcbn0pO1xuXG4kKHsgdGFyZ2V0OiAnQXN5bmNJdGVyYXRvcicsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBmbGF0TWFwOiBmdW5jdGlvbiBmbGF0TWFwKG1hcHBlcikge1xuICAgIHJldHVybiBuZXcgQXN5bmNJdGVyYXRvclByb3h5KGdldEl0ZXJhdG9yRGlyZWN0KHRoaXMpLCB7XG4gICAgICBtYXBwZXI6IGFDYWxsYWJsZShtYXBwZXIpLFxuICAgICAgaW5uZXJJdGVyYXRvcjogbnVsbCxcbiAgICAgIGlubmVyTmV4dDogbnVsbFxuICAgIH0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWl0ZXJhdG9yLWhlbHBlcnNcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FzeW5jLWl0ZXJhdG9yLWl0ZXJhdGlvbicpLmZvckVhY2g7XG5cbiQoeyB0YXJnZXQ6ICdBc3luY0l0ZXJhdG9yJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgICByZXR1cm4gJGZvckVhY2godGhpcywgZm4pO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWl0ZXJhdG9yLWhlbHBlcnNcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIEFzeW5jSXRlcmF0b3JQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXN5bmMtaXRlcmF0b3ItcHJvdG90eXBlJyk7XG52YXIgZ2V0QXN5bmNJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYXN5bmMtaXRlcmF0b3InKTtcbnZhciBnZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3InKTtcbnZhciBnZXRJdGVyYXRvckRpcmVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItZGlyZWN0Jyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgQXN5bmNGcm9tU3luY0l0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FzeW5jLWZyb20tc3luYy1pdGVyYXRvcicpO1xudmFyIFdyYXBBc3luY0l0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FzeW5jLWl0ZXJhdG9yLXdyYXAnKTtcblxudmFyIEFTWU5DX0lURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdhc3luY0l0ZXJhdG9yJyk7XG5cbiQoeyB0YXJnZXQ6ICdBc3luY0l0ZXJhdG9yJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgZnJvbTogZnVuY3Rpb24gZnJvbShPKSB7XG4gICAgdmFyIG9iamVjdCA9IHRvT2JqZWN0KE8pO1xuICAgIHZhciB1c2luZ0l0ZXJhdG9yID0gZ2V0TWV0aG9kKG9iamVjdCwgQVNZTkNfSVRFUkFUT1IpO1xuICAgIHZhciBpdGVyYXRvcjtcbiAgICBpZiAodXNpbmdJdGVyYXRvcikge1xuICAgICAgaXRlcmF0b3IgPSBnZXRBc3luY0l0ZXJhdG9yKG9iamVjdCwgdXNpbmdJdGVyYXRvcik7XG4gICAgICBpZiAoaXNQcm90b3R5cGVPZihBc3luY0l0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvcikpIHJldHVybiBpdGVyYXRvcjtcbiAgICB9XG4gICAgaWYgKGl0ZXJhdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHVzaW5nSXRlcmF0b3IgPSBnZXRJdGVyYXRvck1ldGhvZChvYmplY3QpO1xuICAgICAgaWYgKHVzaW5nSXRlcmF0b3IpIGl0ZXJhdG9yID0gbmV3IEFzeW5jRnJvbVN5bmNJdGVyYXRvcihnZXRJdGVyYXRvcihvYmplY3QsIHVzaW5nSXRlcmF0b3IpKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBXcmFwQXN5bmNJdGVyYXRvcihnZXRJdGVyYXRvckRpcmVjdChpdGVyYXRvciAhPT0gdW5kZWZpbmVkID8gaXRlcmF0b3IgOiBvYmplY3QpKTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1pdGVyYXRvci1oZWxwZXJzXG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpbmRleGVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FzeW5jLWl0ZXJhdG9yLWluZGV4ZWQnKTtcblxuJCh7IHRhcmdldDogJ0FzeW5jSXRlcmF0b3InLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgaW5kZXhlZDogaW5kZXhlZFxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1pdGVyYXRvci1oZWxwZXJzXG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGdldEl0ZXJhdG9yRGlyZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1kaXJlY3QnKTtcbnZhciBjcmVhdGVBc3luY0l0ZXJhdG9yUHJveHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXN5bmMtaXRlcmF0b3ItY3JlYXRlLXByb3h5Jyk7XG52YXIgY3JlYXRlSXRlclJlc3VsdE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaXRlci1yZXN1bHQtb2JqZWN0Jyk7XG52YXIgY2xvc2VBc3luY0l0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hc3luYy1pdGVyYXRvci1jbG9zZScpO1xuXG52YXIgQXN5bmNJdGVyYXRvclByb3h5ID0gY3JlYXRlQXN5bmNJdGVyYXRvclByb3h5KGZ1bmN0aW9uIChQcm9taXNlKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXM7XG4gIHZhciBpdGVyYXRvciA9IHN0YXRlLml0ZXJhdG9yO1xuICB2YXIgbWFwcGVyID0gc3RhdGUubWFwcGVyO1xuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIGRvbmVBbmRSZWplY3QgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIHN0YXRlLmRvbmUgPSB0cnVlO1xuICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICB9O1xuXG4gICAgdmFyIGlmQWJydXB0Q2xvc2VBc3luY0l0ZXJhdG9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICBjbG9zZUFzeW5jSXRlcmF0aW9uKGl0ZXJhdG9yLCBkb25lQW5kUmVqZWN0LCBlcnJvciwgZG9uZUFuZFJlamVjdCk7XG4gICAgfTtcblxuICAgIFByb21pc2UucmVzb2x2ZShhbk9iamVjdChjYWxsKHN0YXRlLm5leHQsIGl0ZXJhdG9yKSkpLnRoZW4oZnVuY3Rpb24gKHN0ZXApIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChhbk9iamVjdChzdGVwKS5kb25lKSB7XG4gICAgICAgICAgc3RhdGUuZG9uZSA9IHRydWU7XG4gICAgICAgICAgcmVzb2x2ZShjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KHVuZGVmaW5lZCwgdHJ1ZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IHN0ZXAudmFsdWU7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIFByb21pc2UucmVzb2x2ZShtYXBwZXIodmFsdWUpKS50aGVuKGZ1bmN0aW9uIChtYXBwZWQpIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZShjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KG1hcHBlZCwgZmFsc2UpKTtcbiAgICAgICAgICAgIH0sIGlmQWJydXB0Q2xvc2VBc3luY0l0ZXJhdG9yKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcjIpIHsgaWZBYnJ1cHRDbG9zZUFzeW5jSXRlcmF0b3IoZXJyb3IyKTsgfVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikgeyBkb25lQW5kUmVqZWN0KGVycm9yKTsgfVxuICAgIH0sIGRvbmVBbmRSZWplY3QpO1xuICB9KTtcbn0pO1xuXG4kKHsgdGFyZ2V0OiAnQXN5bmNJdGVyYXRvcicsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBtYXA6IGZ1bmN0aW9uIG1hcChtYXBwZXIpIHtcbiAgICByZXR1cm4gbmV3IEFzeW5jSXRlcmF0b3JQcm94eShnZXRJdGVyYXRvckRpcmVjdCh0aGlzKSwge1xuICAgICAgbWFwcGVyOiBhQ2FsbGFibGUobWFwcGVyKVxuICAgIH0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWl0ZXJhdG9yLWhlbHBlcnNcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBnZXRJdGVyYXRvckRpcmVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItZGlyZWN0Jyk7XG52YXIgY2xvc2VBc3luY0l0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hc3luYy1pdGVyYXRvci1jbG9zZScpO1xuXG52YXIgUHJvbWlzZSA9IGdldEJ1aWx0SW4oJ1Byb21pc2UnKTtcbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4kKHsgdGFyZ2V0OiAnQXN5bmNJdGVyYXRvcicsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShyZWR1Y2VyIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgdmFyIHJlY29yZCA9IGdldEl0ZXJhdG9yRGlyZWN0KHRoaXMpO1xuICAgIHZhciBpdGVyYXRvciA9IHJlY29yZC5pdGVyYXRvcjtcbiAgICB2YXIgbmV4dCA9IHJlY29yZC5uZXh0O1xuICAgIHZhciBub0luaXRpYWwgPSBhcmd1bWVudHMubGVuZ3RoIDwgMjtcbiAgICB2YXIgYWNjdW11bGF0b3IgPSBub0luaXRpYWwgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMV07XG4gICAgYUNhbGxhYmxlKHJlZHVjZXIpO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBpZkFicnVwdENsb3NlQXN5bmNJdGVyYXRvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICBjbG9zZUFzeW5jSXRlcmF0aW9uKGl0ZXJhdG9yLCByZWplY3QsIGVycm9yLCByZWplY3QpO1xuICAgICAgfTtcblxuICAgICAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKGFuT2JqZWN0KGNhbGwobmV4dCwgaXRlcmF0b3IpKSkudGhlbihmdW5jdGlvbiAoc3RlcCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgaWYgKGFuT2JqZWN0KHN0ZXApLmRvbmUpIHtcbiAgICAgICAgICAgICAgICBub0luaXRpYWwgPyByZWplY3QoJFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGl0ZXJhdG9yIHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpKSA6IHJlc29sdmUoYWNjdW11bGF0b3IpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHN0ZXAudmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKG5vSW5pdGlhbCkge1xuICAgICAgICAgICAgICAgICAgbm9Jbml0aWFsID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICBhY2N1bXVsYXRvciA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgbG9vcCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB0cnkge1xuICAgICAgICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKHJlZHVjZXIoYWNjdW11bGF0b3IsIHZhbHVlKSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGFjY3VtdWxhdG9yID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICBsb29wKCk7XG4gICAgICAgICAgICAgICAgICB9LCBpZkFicnVwdENsb3NlQXN5bmNJdGVyYXRvcik7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IzKSB7IGlmQWJydXB0Q2xvc2VBc3luY0l0ZXJhdG9yKGVycm9yMyk7IH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IyKSB7IHJlamVjdChlcnJvcjIpOyB9XG4gICAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsgcmVqZWN0KGVycm9yKTsgfVxuICAgICAgfTtcblxuICAgICAgbG9vcCgpO1xuICAgIH0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWl0ZXJhdG9yLWhlbHBlcnNcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRzb21lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FzeW5jLWl0ZXJhdG9yLWl0ZXJhdGlvbicpLnNvbWU7XG5cbiQoeyB0YXJnZXQ6ICdBc3luY0l0ZXJhdG9yJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIHNvbWU6IGZ1bmN0aW9uIHNvbWUoZm4pIHtcbiAgICByZXR1cm4gJHNvbWUodGhpcywgZm4pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWl0ZXJhdG9yLWhlbHBlcnNcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGdldEl0ZXJhdG9yRGlyZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1kaXJlY3QnKTtcbnZhciBub3RBTmFOID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25vdC1hLW5hbicpO1xudmFyIHRvUG9zaXRpdmVJbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXBvc2l0aXZlLWludGVnZXInKTtcbnZhciBjcmVhdGVBc3luY0l0ZXJhdG9yUHJveHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXN5bmMtaXRlcmF0b3ItY3JlYXRlLXByb3h5Jyk7XG52YXIgY3JlYXRlSXRlclJlc3VsdE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaXRlci1yZXN1bHQtb2JqZWN0Jyk7XG5cbnZhciBBc3luY0l0ZXJhdG9yUHJveHkgPSBjcmVhdGVBc3luY0l0ZXJhdG9yUHJveHkoZnVuY3Rpb24gKFByb21pc2UpIHtcbiAgdmFyIHN0YXRlID0gdGhpcztcbiAgdmFyIGl0ZXJhdG9yID0gc3RhdGUuaXRlcmF0b3I7XG4gIHZhciByZXR1cm5NZXRob2Q7XG5cbiAgaWYgKCFzdGF0ZS5yZW1haW5pbmctLSkge1xuICAgIHZhciByZXN1bHREb25lID0gY3JlYXRlSXRlclJlc3VsdE9iamVjdCh1bmRlZmluZWQsIHRydWUpO1xuICAgIHN0YXRlLmRvbmUgPSB0cnVlO1xuICAgIHJldHVybk1ldGhvZCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0dXJuTWV0aG9kICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY2FsbChyZXR1cm5NZXRob2QsIGl0ZXJhdG9yLCB1bmRlZmluZWQpKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdERvbmU7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdERvbmU7XG4gIH0gcmV0dXJuIFByb21pc2UucmVzb2x2ZShjYWxsKHN0YXRlLm5leHQsIGl0ZXJhdG9yKSkudGhlbihmdW5jdGlvbiAoc3RlcCkge1xuICAgIGlmIChhbk9iamVjdChzdGVwKS5kb25lKSB7XG4gICAgICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgfSByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdChzdGVwLnZhbHVlLCBmYWxzZSk7XG4gIH0pLnRoZW4obnVsbCwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgc3RhdGUuZG9uZSA9IHRydWU7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH0pO1xufSk7XG5cbiQoeyB0YXJnZXQ6ICdBc3luY0l0ZXJhdG9yJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIHRha2U6IGZ1bmN0aW9uIHRha2UobGltaXQpIHtcbiAgICByZXR1cm4gbmV3IEFzeW5jSXRlcmF0b3JQcm94eShnZXRJdGVyYXRvckRpcmVjdCh0aGlzKSwge1xuICAgICAgcmVtYWluaW5nOiB0b1Bvc2l0aXZlSW50ZWdlcihub3RBTmFOKCtsaW1pdCkpXG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtaXRlcmF0b3ItaGVscGVyc1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHRvQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXN5bmMtaXRlcmF0b3ItaXRlcmF0aW9uJykudG9BcnJheTtcblxuJCh7IHRhcmdldDogJ0FzeW5jSXRlcmF0b3InLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgdG9BcnJheTogZnVuY3Rpb24gdG9BcnJheSgpIHtcbiAgICByZXR1cm4gJHRvQXJyYXkodGhpcywgdW5kZWZpbmVkLCBbXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgZXMteC9uby1iaWdpbnQgLS0gc2FmZSAqL1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgTnVtZXJpY1JhbmdlSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbnVtZXJpYy1yYW5nZS1pdGVyYXRvcicpO1xuXG4vLyBgQmlnSW50LnJhbmdlYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLU51bWJlci5yYW5nZVxuaWYgKHR5cGVvZiBCaWdJbnQgPT0gJ2Z1bmN0aW9uJykge1xuICAkKHsgdGFyZ2V0OiAnQmlnSW50Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgICByYW5nZTogZnVuY3Rpb24gcmFuZ2Uoc3RhcnQsIGVuZCwgb3B0aW9uKSB7XG4gICAgICByZXR1cm4gbmV3IE51bWVyaWNSYW5nZUl0ZXJhdG9yKHN0YXJ0LCBlbmQsIG9wdGlvbiwgJ2JpZ2ludCcsIEJpZ0ludCgwKSwgQmlnSW50KDEpKTtcbiAgICB9XG4gIH0pO1xufVxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciBnZXRDb21wb3NpdGVLZXlOb2RlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbXBvc2l0ZS1rZXknKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG5cbnZhciAkT2JqZWN0ID0gT2JqZWN0O1xuXG52YXIgaW5pdGlhbGl6ZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBmcmVlemUgPSBnZXRCdWlsdEluKCdPYmplY3QnLCAnZnJlZXplJyk7XG4gIHJldHVybiBmcmVlemUgPyBmcmVlemUoY3JlYXRlKG51bGwpKSA6IGNyZWF0ZShudWxsKTtcbn07XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXJpY2hlci1rZXlzL3RyZWUvbWFzdGVyL2NvbXBvc2l0ZUtleVxuJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgY29tcG9zaXRlS2V5OiBmdW5jdGlvbiBjb21wb3NpdGVLZXkoKSB7XG4gICAgcmV0dXJuIGFwcGx5KGdldENvbXBvc2l0ZUtleU5vZGUsICRPYmplY3QsIGFyZ3VtZW50cykuZ2V0KCdvYmplY3QnLCBpbml0aWFsaXplcik7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0Q29tcG9zaXRlS2V5Tm9kZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb21wb3NpdGUta2V5Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1yaWNoZXIta2V5cy90cmVlL21hc3Rlci9jb21wb3NpdGVLZXlcbiQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIGNvbXBvc2l0ZVN5bWJvbDogZnVuY3Rpb24gY29tcG9zaXRlU3ltYm9sKCkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDEgJiYgdHlwZW9mIGFyZ3VtZW50c1swXSA9PSAnc3RyaW5nJykgcmV0dXJuIGdldEJ1aWx0SW4oJ1N5bWJvbCcpWydmb3InXShhcmd1bWVudHNbMF0pO1xuICAgIHJldHVybiBhcHBseShnZXRDb21wb3NpdGVLZXlOb2RlLCBudWxsLCBhcmd1bWVudHMpLmdldCgnc3ltYm9sJywgZ2V0QnVpbHRJbignU3ltYm9sJykpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyICRpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBjbGFzc1JlZ0V4cCA9IC9eXFxzKmNsYXNzXFxiLztcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoY2xhc3NSZWdFeHAuZXhlYyk7XG5cbnZhciBpc0NsYXNzQ29uc3RydWN0b3IgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdHJ5IHtcbiAgICAvLyBgRnVuY3Rpb24jdG9TdHJpbmdgIHRocm93cyBvbiBzb21lIGJ1aWx0LWl0IGZ1bmN0aW9uIGluIHNvbWUgbGVnYWN5IGVuZ2luZXNcbiAgICAvLyAoZm9yIGV4YW1wbGUsIGBET01RdWFkYCBhbmQgc2ltaWxhciBpbiBGRjQxLSlcbiAgICBpZiAoIURFU0NSSVBUT1JTIHx8ICFleGVjKGNsYXNzUmVnRXhwLCBpbnNwZWN0U291cmNlKGFyZ3VtZW50KSkpIHJldHVybiBmYWxzZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICB2YXIgcHJvdG90eXBlID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGFyZ3VtZW50LCAncHJvdG90eXBlJyk7XG4gIHJldHVybiAhIXByb3RvdHlwZSAmJiBoYXNPd24ocHJvdG90eXBlLCAnd3JpdGFibGUnKSAmJiAhcHJvdG90eXBlLndyaXRhYmxlO1xufTtcblxuLy8gYEZ1bmN0aW9uLmlzQ2FsbGFibGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2NhaXRwL1RDMzktUHJvcG9zYWxzL2Jsb2IvdHJ1bmsvdGMzOS1yZWZsZWN0LWlzY29uc3RydWN0b3ItaXNjYWxsYWJsZS5tZFxuJCh7IHRhcmdldDogJ0Z1bmN0aW9uJywgc3RhdDogdHJ1ZSwgc2hhbTogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgaXNDYWxsYWJsZTogZnVuY3Rpb24gaXNDYWxsYWJsZShhcmd1bWVudCkge1xuICAgIHJldHVybiAkaXNDYWxsYWJsZShhcmd1bWVudCkgJiYgIWlzQ2xhc3NDb25zdHJ1Y3Rvcihhcmd1bWVudCk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jb25zdHJ1Y3RvcicpO1xuXG4vLyBgRnVuY3Rpb24uaXNDb25zdHJ1Y3RvcmAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vY2FpdHAvVEMzOS1Qcm9wb3NhbHMvYmxvYi90cnVuay90YzM5LXJlZmxlY3QtaXNjb25zdHJ1Y3Rvci1pc2NhbGxhYmxlLm1kXG4kKHsgdGFyZ2V0OiAnRnVuY3Rpb24nLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBpc0NvbnN0cnVjdG9yOiBpc0NvbnN0cnVjdG9yXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG5cbi8vIGBGdW5jdGlvbi5wcm90b3R5cGUudW5UaGlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcy1jaG9pL3Byb3Bvc2FsLWZ1bmN0aW9uLXVuLXRoaXNcbiQoeyB0YXJnZXQ6ICdGdW5jdGlvbicsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICB1blRoaXM6IGZ1bmN0aW9uIHVuVGhpcygpIHtcbiAgICByZXR1cm4gdW5jdXJyeVRoaXMoYUNhbGxhYmxlKHRoaXMpKTtcbiAgfVxufSk7XG4iLCIvLyBUT0RPOiBSZW1vdmUgZnJvbSBgY29yZS1qc0A0YFxucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5nbG9iYWwtdGhpcycpO1xuIiwiLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWl0ZXJhdG9yLWhlbHBlcnNcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGluZGV4ZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3ItaW5kZXhlZCcpO1xuXG4kKHsgdGFyZ2V0OiAnSXRlcmF0b3InLCBuYW1lOiAnaW5kZXhlZCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBhc0luZGV4ZWRQYWlyczogaW5kZXhlZFxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1pdGVyYXRvci1oZWxwZXJzXG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJykuSXRlcmF0b3JQcm90b3R5cGU7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xuXG52YXIgTmF0aXZlSXRlcmF0b3IgPSBnbG9iYWwuSXRlcmF0b3I7XG5cbi8vIEZGNTYtIGhhdmUgbm9uLXN0YW5kYXJkIGdsb2JhbCBoZWxwZXIgYEl0ZXJhdG9yYFxudmFyIEZPUkNFRCA9IElTX1BVUkVcbiAgfHwgIWlzQ2FsbGFibGUoTmF0aXZlSXRlcmF0b3IpXG4gIHx8IE5hdGl2ZUl0ZXJhdG9yLnByb3RvdHlwZSAhPT0gSXRlcmF0b3JQcm90b3R5cGVcbiAgLy8gRkY0NC0gbm9uLXN0YW5kYXJkIGBJdGVyYXRvcmAgcGFzc2VzIHByZXZpb3VzIHRlc3RzXG4gIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7IE5hdGl2ZUl0ZXJhdG9yKHt9KTsgfSk7XG5cbnZhciBJdGVyYXRvckNvbnN0cnVjdG9yID0gZnVuY3Rpb24gSXRlcmF0b3IoKSB7XG4gIGFuSW5zdGFuY2UodGhpcywgSXRlcmF0b3JQcm90b3R5cGUpO1xufTtcblxuaWYgKCFoYXNPd24oSXRlcmF0b3JQcm90b3R5cGUsIFRPX1NUUklOR19UQUcpKSB7XG4gIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShJdGVyYXRvclByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgJ0l0ZXJhdG9yJyk7XG59XG5cbmlmIChGT1JDRUQgfHwgIWhhc093bihJdGVyYXRvclByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJykgfHwgSXRlcmF0b3JQcm90b3R5cGUuY29uc3RydWN0b3IgPT09IE9iamVjdCkge1xuICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoSXRlcmF0b3JQcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIEl0ZXJhdG9yQ29uc3RydWN0b3IpO1xufVxuXG5JdGVyYXRvckNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IEl0ZXJhdG9yUHJvdG90eXBlO1xuXG4kKHsgZ2xvYmFsOiB0cnVlLCBjb25zdHJ1Y3RvcjogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBJdGVyYXRvcjogSXRlcmF0b3JDb25zdHJ1Y3RvclxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1pdGVyYXRvci1oZWxwZXJzXG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBnZXRJdGVyYXRvckRpcmVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItZGlyZWN0Jyk7XG52YXIgbm90QU5hTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ub3QtYS1uYW4nKTtcbnZhciB0b1Bvc2l0aXZlSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wb3NpdGl2ZS1pbnRlZ2VyJyk7XG52YXIgY3JlYXRlSXRlcmF0b3JQcm94eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1jcmVhdGUtcHJveHknKTtcblxudmFyIEl0ZXJhdG9yUHJveHkgPSBjcmVhdGVJdGVyYXRvclByb3h5KGZ1bmN0aW9uICgpIHtcbiAgdmFyIGl0ZXJhdG9yID0gdGhpcy5pdGVyYXRvcjtcbiAgdmFyIG5leHQgPSB0aGlzLm5leHQ7XG4gIHZhciByZXN1bHQsIGRvbmU7XG4gIHdoaWxlICh0aGlzLnJlbWFpbmluZykge1xuICAgIHRoaXMucmVtYWluaW5nLS07XG4gICAgcmVzdWx0ID0gYW5PYmplY3QoY2FsbChuZXh0LCBpdGVyYXRvcikpO1xuICAgIGRvbmUgPSB0aGlzLmRvbmUgPSAhIXJlc3VsdC5kb25lO1xuICAgIGlmIChkb25lKSByZXR1cm47XG4gIH1cbiAgcmVzdWx0ID0gYW5PYmplY3QoY2FsbChuZXh0LCBpdGVyYXRvcikpO1xuICBkb25lID0gdGhpcy5kb25lID0gISFyZXN1bHQuZG9uZTtcbiAgaWYgKCFkb25lKSByZXR1cm4gcmVzdWx0LnZhbHVlO1xufSk7XG5cbiQoeyB0YXJnZXQ6ICdJdGVyYXRvcicsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBkcm9wOiBmdW5jdGlvbiBkcm9wKGxpbWl0KSB7XG4gICAgcmV0dXJuIG5ldyBJdGVyYXRvclByb3h5KGdldEl0ZXJhdG9yRGlyZWN0KHRoaXMpLCB7XG4gICAgICByZW1haW5pbmc6IHRvUG9zaXRpdmVJbnRlZ2VyKG5vdEFOYU4oK2xpbWl0KSlcbiAgICB9KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1pdGVyYXRvci1oZWxwZXJzXG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGdldEl0ZXJhdG9yRGlyZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1kaXJlY3QnKTtcblxuJCh7IHRhcmdldDogJ0l0ZXJhdG9yJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShmbikge1xuICAgIHZhciByZWNvcmQgPSBnZXRJdGVyYXRvckRpcmVjdCh0aGlzKTtcbiAgICBhQ2FsbGFibGUoZm4pO1xuICAgIHJldHVybiAhaXRlcmF0ZShyZWNvcmQsIGZ1bmN0aW9uICh2YWx1ZSwgc3RvcCkge1xuICAgICAgaWYgKCFmbih2YWx1ZSkpIHJldHVybiBzdG9wKCk7XG4gICAgfSwgeyBJU19SRUNPUkQ6IHRydWUsIElOVEVSUlVQVEVEOiB0cnVlIH0pLnN0b3BwZWQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtaXRlcmF0b3ItaGVscGVyc1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBnZXRJdGVyYXRvckRpcmVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItZGlyZWN0Jyk7XG52YXIgY3JlYXRlSXRlcmF0b3JQcm94eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1jcmVhdGUtcHJveHknKTtcbnZhciBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NhbGwtd2l0aC1zYWZlLWl0ZXJhdGlvbi1jbG9zaW5nJyk7XG5cbnZhciBJdGVyYXRvclByb3h5ID0gY3JlYXRlSXRlcmF0b3JQcm94eShmdW5jdGlvbiAoKSB7XG4gIHZhciBpdGVyYXRvciA9IHRoaXMuaXRlcmF0b3I7XG4gIHZhciBmaWx0ZXJlciA9IHRoaXMuZmlsdGVyZXI7XG4gIHZhciBuZXh0ID0gdGhpcy5uZXh0O1xuICB2YXIgcmVzdWx0LCBkb25lLCB2YWx1ZTtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICByZXN1bHQgPSBhbk9iamVjdChjYWxsKG5leHQsIGl0ZXJhdG9yKSk7XG4gICAgZG9uZSA9IHRoaXMuZG9uZSA9ICEhcmVzdWx0LmRvbmU7XG4gICAgaWYgKGRvbmUpIHJldHVybjtcbiAgICB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICBpZiAoY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyhpdGVyYXRvciwgZmlsdGVyZXIsIHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICB9XG59KTtcblxuJCh7IHRhcmdldDogJ0l0ZXJhdG9yJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGZpbHRlcmVyKSB7XG4gICAgcmV0dXJuIG5ldyBJdGVyYXRvclByb3h5KGdldEl0ZXJhdG9yRGlyZWN0KHRoaXMpLCB7XG4gICAgICBmaWx0ZXJlcjogYUNhbGxhYmxlKGZpbHRlcmVyKVxuICAgIH0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWl0ZXJhdG9yLWhlbHBlcnNcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgZ2V0SXRlcmF0b3JEaXJlY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLWRpcmVjdCcpO1xuXG4kKHsgdGFyZ2V0OiAnSXRlcmF0b3InLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgZmluZDogZnVuY3Rpb24gZmluZChmbikge1xuICAgIHZhciByZWNvcmQgPSBnZXRJdGVyYXRvckRpcmVjdCh0aGlzKTtcbiAgICBhQ2FsbGFibGUoZm4pO1xuICAgIHJldHVybiBpdGVyYXRlKHJlY29yZCwgZnVuY3Rpb24gKHZhbHVlLCBzdG9wKSB7XG4gICAgICBpZiAoZm4odmFsdWUpKSByZXR1cm4gc3RvcCh2YWx1ZSk7XG4gICAgfSwgeyBJU19SRUNPUkQ6IHRydWUsIElOVEVSUlVQVEVEOiB0cnVlIH0pLnJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1pdGVyYXRvci1oZWxwZXJzXG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGdldEl0ZXJhdG9yRGlyZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1kaXJlY3QnKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgY3JlYXRlSXRlcmF0b3JQcm94eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1jcmVhdGUtcHJveHknKTtcbnZhciBpdGVyYXRvckNsb3NlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG52YXIgSXRlcmF0b3JQcm94eSA9IGNyZWF0ZUl0ZXJhdG9yUHJveHkoZnVuY3Rpb24gKCkge1xuICB2YXIgaXRlcmF0b3IgPSB0aGlzLml0ZXJhdG9yO1xuICB2YXIgbWFwcGVyID0gdGhpcy5tYXBwZXI7XG4gIHZhciByZXN1bHQsIG1hcHBlZCwgaXRlcmF0b3JNZXRob2QsIGlubmVySXRlcmF0b3I7XG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBpZiAoaW5uZXJJdGVyYXRvciA9IHRoaXMuaW5uZXJJdGVyYXRvcikgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IGFuT2JqZWN0KGNhbGwodGhpcy5pbm5lck5leHQsIGlubmVySXRlcmF0b3IpKTtcbiAgICAgIGlmICghcmVzdWx0LmRvbmUpIHJldHVybiByZXN1bHQudmFsdWU7XG4gICAgICB0aGlzLmlubmVySXRlcmF0b3IgPSB0aGlzLmlubmVyTmV4dCA9IG51bGw7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHsgaXRlcmF0b3JDbG9zZShpdGVyYXRvciwgJ3Rocm93JywgZXJyb3IpOyB9XG5cbiAgICByZXN1bHQgPSBhbk9iamVjdChjYWxsKHRoaXMubmV4dCwgaXRlcmF0b3IpKTtcblxuICAgIGlmICh0aGlzLmRvbmUgPSAhIXJlc3VsdC5kb25lKSByZXR1cm47XG5cbiAgICB0cnkge1xuICAgICAgbWFwcGVkID0gbWFwcGVyKHJlc3VsdC52YWx1ZSk7XG4gICAgICBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKG1hcHBlZCk7XG5cbiAgICAgIGlmICghaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgdGhyb3cgJFR5cGVFcnJvcignLmZsYXRNYXAgY2FsbGJhY2sgc2hvdWxkIHJldHVybiBhbiBpdGVyYWJsZSBvYmplY3QnKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pbm5lckl0ZXJhdG9yID0gaW5uZXJJdGVyYXRvciA9IGFuT2JqZWN0KGNhbGwoaXRlcmF0b3JNZXRob2QsIG1hcHBlZCkpO1xuICAgICAgdGhpcy5pbm5lck5leHQgPSBhQ2FsbGFibGUoaW5uZXJJdGVyYXRvci5uZXh0KTtcbiAgICB9IGNhdGNoIChlcnJvcikgeyBpdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCAndGhyb3cnLCBlcnJvcik7IH1cbiAgfVxufSk7XG5cbiQoeyB0YXJnZXQ6ICdJdGVyYXRvcicsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBmbGF0TWFwOiBmdW5jdGlvbiBmbGF0TWFwKG1hcHBlcikge1xuICAgIHJldHVybiBuZXcgSXRlcmF0b3JQcm94eShnZXRJdGVyYXRvckRpcmVjdCh0aGlzKSwge1xuICAgICAgbWFwcGVyOiBhQ2FsbGFibGUobWFwcGVyKSxcbiAgICAgIGlubmVySXRlcmF0b3I6IG51bGwsXG4gICAgICBpbm5lck5leHQ6IG51bGxcbiAgICB9KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1pdGVyYXRvci1oZWxwZXJzXG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBnZXRJdGVyYXRvckRpcmVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItZGlyZWN0Jyk7XG5cbiQoeyB0YXJnZXQ6ICdJdGVyYXRvcicsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gICAgaXRlcmF0ZShnZXRJdGVyYXRvckRpcmVjdCh0aGlzKSwgZm4sIHsgSVNfUkVDT1JEOiB0cnVlIH0pO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWl0ZXJhdG9yLWhlbHBlcnNcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJykuSXRlcmF0b3JQcm90b3R5cGU7XG52YXIgY3JlYXRlSXRlcmF0b3JQcm94eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1jcmVhdGUtcHJveHknKTtcbnZhciBnZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3InKTtcbnZhciBnZXRJdGVyYXRvckRpcmVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItZGlyZWN0Jyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG52YXIgSXRlcmF0b3JQcm94eSA9IGNyZWF0ZUl0ZXJhdG9yUHJveHkoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gY2FsbCh0aGlzLm5leHQsIHRoaXMuaXRlcmF0b3IpO1xufSwgdHJ1ZSk7XG5cbiQoeyB0YXJnZXQ6ICdJdGVyYXRvcicsIHN0YXQ6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIGZyb206IGZ1bmN0aW9uIGZyb20oTykge1xuICAgIHZhciBvYmplY3QgPSB0b09iamVjdChPKTtcbiAgICB2YXIgdXNpbmdJdGVyYXRvciA9IGdldEl0ZXJhdG9yTWV0aG9kKG9iamVjdCk7XG4gICAgdmFyIGl0ZXJhdG9yO1xuICAgIGlmICh1c2luZ0l0ZXJhdG9yKSB7XG4gICAgICBpdGVyYXRvciA9IGdldEl0ZXJhdG9yKG9iamVjdCwgdXNpbmdJdGVyYXRvcik7XG4gICAgICBpZiAoaXNQcm90b3R5cGVPZihJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3IpKSByZXR1cm4gaXRlcmF0b3I7XG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZXJhdG9yID0gb2JqZWN0O1xuICAgIH0gcmV0dXJuIG5ldyBJdGVyYXRvclByb3h5KGdldEl0ZXJhdG9yRGlyZWN0KGl0ZXJhdG9yKSk7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtaXRlcmF0b3ItaGVscGVyc1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaW5kZXhlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1pbmRleGVkJyk7XG5cbiQoeyB0YXJnZXQ6ICdJdGVyYXRvcicsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBpbmRleGVkOiBpbmRleGVkXG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWl0ZXJhdG9yLWhlbHBlcnNcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZ2V0SXRlcmF0b3JEaXJlY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLWRpcmVjdCcpO1xudmFyIGNyZWF0ZUl0ZXJhdG9yUHJveHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3ItY3JlYXRlLXByb3h5Jyk7XG52YXIgY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jYWxsLXdpdGgtc2FmZS1pdGVyYXRpb24tY2xvc2luZycpO1xuXG52YXIgSXRlcmF0b3JQcm94eSA9IGNyZWF0ZUl0ZXJhdG9yUHJveHkoZnVuY3Rpb24gKCkge1xuICB2YXIgaXRlcmF0b3IgPSB0aGlzLml0ZXJhdG9yO1xuICB2YXIgcmVzdWx0ID0gYW5PYmplY3QoY2FsbCh0aGlzLm5leHQsIGl0ZXJhdG9yKSk7XG4gIHZhciBkb25lID0gdGhpcy5kb25lID0gISFyZXN1bHQuZG9uZTtcbiAgaWYgKCFkb25lKSByZXR1cm4gY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyhpdGVyYXRvciwgdGhpcy5tYXBwZXIsIHJlc3VsdC52YWx1ZSk7XG59KTtcblxuJCh7IHRhcmdldDogJ0l0ZXJhdG9yJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIG1hcDogZnVuY3Rpb24gbWFwKG1hcHBlcikge1xuICAgIHJldHVybiBuZXcgSXRlcmF0b3JQcm94eShnZXRJdGVyYXRvckRpcmVjdCh0aGlzKSwge1xuICAgICAgbWFwcGVyOiBhQ2FsbGFibGUobWFwcGVyKVxuICAgIH0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWl0ZXJhdG9yLWhlbHBlcnNcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgZ2V0SXRlcmF0b3JEaXJlY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLWRpcmVjdCcpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuJCh7IHRhcmdldDogJ0l0ZXJhdG9yJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKHJlZHVjZXIgLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICB2YXIgcmVjb3JkID0gZ2V0SXRlcmF0b3JEaXJlY3QodGhpcyk7XG4gICAgYUNhbGxhYmxlKHJlZHVjZXIpO1xuICAgIHZhciBub0luaXRpYWwgPSBhcmd1bWVudHMubGVuZ3RoIDwgMjtcbiAgICB2YXIgYWNjdW11bGF0b3IgPSBub0luaXRpYWwgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMV07XG4gICAgaXRlcmF0ZShyZWNvcmQsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKG5vSW5pdGlhbCkge1xuICAgICAgICBub0luaXRpYWwgPSBmYWxzZTtcbiAgICAgICAgYWNjdW11bGF0b3IgPSB2YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjY3VtdWxhdG9yID0gcmVkdWNlcihhY2N1bXVsYXRvciwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0sIHsgSVNfUkVDT1JEOiB0cnVlIH0pO1xuICAgIGlmIChub0luaXRpYWwpIHRocm93ICRUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBpdGVyYXRvciB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtaXRlcmF0b3ItaGVscGVyc1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBnZXRJdGVyYXRvckRpcmVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItZGlyZWN0Jyk7XG5cbiQoeyB0YXJnZXQ6ICdJdGVyYXRvcicsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBzb21lOiBmdW5jdGlvbiBzb21lKGZuKSB7XG4gICAgdmFyIHJlY29yZCA9IGdldEl0ZXJhdG9yRGlyZWN0KHRoaXMpO1xuICAgIGFDYWxsYWJsZShmbik7XG4gICAgcmV0dXJuIGl0ZXJhdGUocmVjb3JkLCBmdW5jdGlvbiAodmFsdWUsIHN0b3ApIHtcbiAgICAgIGlmIChmbih2YWx1ZSkpIHJldHVybiBzdG9wKCk7XG4gICAgfSwgeyBJU19SRUNPUkQ6IHRydWUsIElOVEVSUlVQVEVEOiB0cnVlIH0pLnN0b3BwZWQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtaXRlcmF0b3ItaGVscGVyc1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZ2V0SXRlcmF0b3JEaXJlY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLWRpcmVjdCcpO1xudmFyIG5vdEFOYU4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbm90LWEtbmFuJyk7XG52YXIgdG9Qb3NpdGl2ZUludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcG9zaXRpdmUtaW50ZWdlcicpO1xudmFyIGNyZWF0ZUl0ZXJhdG9yUHJveHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3ItY3JlYXRlLXByb3h5Jyk7XG52YXIgaXRlcmF0b3JDbG9zZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1jbG9zZScpO1xuXG52YXIgSXRlcmF0b3JQcm94eSA9IGNyZWF0ZUl0ZXJhdG9yUHJveHkoZnVuY3Rpb24gKCkge1xuICB2YXIgaXRlcmF0b3IgPSB0aGlzLml0ZXJhdG9yO1xuICBpZiAoIXRoaXMucmVtYWluaW5nLS0pIHtcbiAgICB0aGlzLmRvbmUgPSB0cnVlO1xuICAgIHJldHVybiBpdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCAnbm9ybWFsJywgdW5kZWZpbmVkKTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gYW5PYmplY3QoY2FsbCh0aGlzLm5leHQsIGl0ZXJhdG9yKSk7XG4gIHZhciBkb25lID0gdGhpcy5kb25lID0gISFyZXN1bHQuZG9uZTtcbiAgaWYgKCFkb25lKSByZXR1cm4gcmVzdWx0LnZhbHVlO1xufSk7XG5cbiQoeyB0YXJnZXQ6ICdJdGVyYXRvcicsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICB0YWtlOiBmdW5jdGlvbiB0YWtlKGxpbWl0KSB7XG4gICAgcmV0dXJuIG5ldyBJdGVyYXRvclByb3h5KGdldEl0ZXJhdG9yRGlyZWN0KHRoaXMpLCB7XG4gICAgICByZW1haW5pbmc6IHRvUG9zaXRpdmVJbnRlZ2VyKG5vdEFOYU4oK2xpbWl0KSlcbiAgICB9KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1pdGVyYXRvci1oZWxwZXJzXG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBnZXRJdGVyYXRvckRpcmVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItZGlyZWN0Jyk7XG5cbnZhciBwdXNoID0gW10ucHVzaDtcblxuJCh7IHRhcmdldDogJ0l0ZXJhdG9yJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIHRvQXJyYXk6IGZ1bmN0aW9uIHRvQXJyYXkoKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIGl0ZXJhdGUoZ2V0SXRlcmF0b3JEaXJlY3QodGhpcyksIHB1c2gsIHsgdGhhdDogcmVzdWx0LCBJU19SRUNPUkQ6IHRydWUgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1pdGVyYXRvci1oZWxwZXJzXG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBBc3luY0Zyb21TeW5jSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXN5bmMtZnJvbS1zeW5jLWl0ZXJhdG9yJyk7XG52YXIgV3JhcEFzeW5jSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXN5bmMtaXRlcmF0b3Itd3JhcCcpO1xudmFyIGdldEl0ZXJhdG9yRGlyZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1kaXJlY3QnKTtcblxuJCh7IHRhcmdldDogJ0l0ZXJhdG9yJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIHRvQXN5bmM6IGZ1bmN0aW9uIHRvQXN5bmMoKSB7XG4gICAgcmV0dXJuIG5ldyBXcmFwQXN5bmNJdGVyYXRvcihnZXRJdGVyYXRvckRpcmVjdChuZXcgQXN5bmNGcm9tU3luY0l0ZXJhdG9yKHRoaXMpKSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZGVsZXRlQWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24tZGVsZXRlLWFsbCcpO1xuXG4vLyBgTWFwLnByb3RvdHlwZS5kZWxldGVBbGxgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtY29sbGVjdGlvbi1tZXRob2RzXG4kKHsgdGFyZ2V0OiAnTWFwJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIGRlbGV0ZUFsbDogZGVsZXRlQWxsXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGVtcGxhY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWFwLWVtcGxhY2UnKTtcblxuLy8gYE1hcC5wcm90b3R5cGUuZW1wbGFjZWAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGh1bWJzdXBlcC9wcm9wb3NhbC11cHNlcnRcbiQoeyB0YXJnZXQ6ICdNYXAnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgZW1wbGFjZTogZW1wbGFjZVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGdldE1hcEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tYXAtaXRlcmF0b3InKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxuLy8gYE1hcC5wcm90b3R5cGUuZXZlcnlgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtY29sbGVjdGlvbi1tZXRob2RzXG4kKHsgdGFyZ2V0OiAnTWFwJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHZhciBtYXAgPSBhbk9iamVjdCh0aGlzKTtcbiAgICB2YXIgaXRlcmF0b3IgPSBnZXRNYXBJdGVyYXRvcihtYXApO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgcmV0dXJuICFpdGVyYXRlKGl0ZXJhdG9yLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSwgc3RvcCkge1xuICAgICAgaWYgKCFib3VuZEZ1bmN0aW9uKHZhbHVlLCBrZXksIG1hcCkpIHJldHVybiBzdG9wKCk7XG4gICAgfSwgeyBBU19FTlRSSUVTOiB0cnVlLCBJU19JVEVSQVRPUjogdHJ1ZSwgSU5URVJSVVBURUQ6IHRydWUgfSkuc3RvcHBlZDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIGdldE1hcEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tYXAtaXRlcmF0b3InKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxuLy8gYE1hcC5wcm90b3R5cGUuZmlsdGVyYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ01hcCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHZhciBtYXAgPSBhbk9iamVjdCh0aGlzKTtcbiAgICB2YXIgaXRlcmF0b3IgPSBnZXRNYXBJdGVyYXRvcihtYXApO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyIG5ld01hcCA9IG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKG1hcCwgZ2V0QnVpbHRJbignTWFwJykpKSgpO1xuICAgIHZhciBzZXR0ZXIgPSBhQ2FsbGFibGUobmV3TWFwLnNldCk7XG4gICAgaXRlcmF0ZShpdGVyYXRvciwgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgIGlmIChib3VuZEZ1bmN0aW9uKHZhbHVlLCBrZXksIG1hcCkpIGNhbGwoc2V0dGVyLCBuZXdNYXAsIGtleSwgdmFsdWUpO1xuICAgIH0sIHsgQVNfRU5UUklFUzogdHJ1ZSwgSVNfSVRFUkFUT1I6IHRydWUgfSk7XG4gICAgcmV0dXJuIG5ld01hcDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGdldE1hcEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tYXAtaXRlcmF0b3InKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxuLy8gYE1hcC5wcm90b3R5cGUuZmluZEtleWAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdNYXAnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgZmluZEtleTogZnVuY3Rpb24gZmluZEtleShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHZhciBtYXAgPSBhbk9iamVjdCh0aGlzKTtcbiAgICB2YXIgaXRlcmF0b3IgPSBnZXRNYXBJdGVyYXRvcihtYXApO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgcmV0dXJuIGl0ZXJhdGUoaXRlcmF0b3IsIGZ1bmN0aW9uIChrZXksIHZhbHVlLCBzdG9wKSB7XG4gICAgICBpZiAoYm91bmRGdW5jdGlvbih2YWx1ZSwga2V5LCBtYXApKSByZXR1cm4gc3RvcChrZXkpO1xuICAgIH0sIHsgQVNfRU5UUklFUzogdHJ1ZSwgSVNfSVRFUkFUT1I6IHRydWUsIElOVEVSUlVQVEVEOiB0cnVlIH0pLnJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGdldE1hcEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tYXAtaXRlcmF0b3InKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxuLy8gYE1hcC5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdNYXAnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgZmluZDogZnVuY3Rpb24gZmluZChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHZhciBtYXAgPSBhbk9iamVjdCh0aGlzKTtcbiAgICB2YXIgaXRlcmF0b3IgPSBnZXRNYXBJdGVyYXRvcihtYXApO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgcmV0dXJuIGl0ZXJhdGUoaXRlcmF0b3IsIGZ1bmN0aW9uIChrZXksIHZhbHVlLCBzdG9wKSB7XG4gICAgICBpZiAoYm91bmRGdW5jdGlvbih2YWx1ZSwga2V5LCBtYXApKSByZXR1cm4gc3RvcCh2YWx1ZSk7XG4gICAgfSwgeyBBU19FTlRSSUVTOiB0cnVlLCBJU19JVEVSQVRPUjogdHJ1ZSwgSU5URVJSVVBURUQ6IHRydWUgfSkucmVzdWx0O1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZyb20gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi1mcm9tJyk7XG5cbi8vIGBNYXAuZnJvbWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1tYXAuZnJvbVxuJCh7IHRhcmdldDogJ01hcCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIGZyb206IGZyb21cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBnZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3InKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcblxuLy8gYE1hcC5ncm91cEJ5YCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ01hcCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIGdyb3VwQnk6IGZ1bmN0aW9uIGdyb3VwQnkoaXRlcmFibGUsIGtleURlcml2YXRpdmUpIHtcbiAgICBhQ2FsbGFibGUoa2V5RGVyaXZhdGl2ZSk7XG4gICAgdmFyIGl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoaXRlcmFibGUpO1xuICAgIHZhciBuZXdNYXAgPSBuZXcgdGhpcygpO1xuICAgIHZhciBoYXMgPSBhQ2FsbGFibGUobmV3TWFwLmhhcyk7XG4gICAgdmFyIGdldCA9IGFDYWxsYWJsZShuZXdNYXAuZ2V0KTtcbiAgICB2YXIgc2V0ID0gYUNhbGxhYmxlKG5ld01hcC5zZXQpO1xuICAgIGl0ZXJhdGUoaXRlcmF0b3IsIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICB2YXIgZGVyaXZlZEtleSA9IGtleURlcml2YXRpdmUoZWxlbWVudCk7XG4gICAgICBpZiAoIWNhbGwoaGFzLCBuZXdNYXAsIGRlcml2ZWRLZXkpKSBjYWxsKHNldCwgbmV3TWFwLCBkZXJpdmVkS2V5LCBbZWxlbWVudF0pO1xuICAgICAgZWxzZSBwdXNoKGNhbGwoZ2V0LCBuZXdNYXAsIGRlcml2ZWRLZXkpLCBlbGVtZW50KTtcbiAgICB9LCB7IElTX0lURVJBVE9SOiB0cnVlIH0pO1xuICAgIHJldHVybiBuZXdNYXA7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZ2V0TWFwSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1hcC1pdGVyYXRvcicpO1xudmFyIHNhbWVWYWx1ZVplcm8gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2FtZS12YWx1ZS16ZXJvJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG5cbi8vIGBNYXAucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ01hcCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoRWxlbWVudCkge1xuICAgIHJldHVybiBpdGVyYXRlKGdldE1hcEl0ZXJhdG9yKGFuT2JqZWN0KHRoaXMpKSwgZnVuY3Rpb24gKGtleSwgdmFsdWUsIHN0b3ApIHtcbiAgICAgIGlmIChzYW1lVmFsdWVaZXJvKHZhbHVlLCBzZWFyY2hFbGVtZW50KSkgcmV0dXJuIHN0b3AoKTtcbiAgICB9LCB7IEFTX0VOVFJJRVM6IHRydWUsIElTX0lURVJBVE9SOiB0cnVlLCBJTlRFUlJVUFRFRDogdHJ1ZSB9KS5zdG9wcGVkO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG5cbi8vIGBNYXAua2V5QnlgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtY29sbGVjdGlvbi1tZXRob2RzXG4kKHsgdGFyZ2V0OiAnTWFwJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAga2V5Qnk6IGZ1bmN0aW9uIGtleUJ5KGl0ZXJhYmxlLCBrZXlEZXJpdmF0aXZlKSB7XG4gICAgdmFyIG5ld01hcCA9IG5ldyB0aGlzKCk7XG4gICAgYUNhbGxhYmxlKGtleURlcml2YXRpdmUpO1xuICAgIHZhciBzZXR0ZXIgPSBhQ2FsbGFibGUobmV3TWFwLnNldCk7XG4gICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgIGNhbGwoc2V0dGVyLCBuZXdNYXAsIGtleURlcml2YXRpdmUoZWxlbWVudCksIGVsZW1lbnQpO1xuICAgIH0pO1xuICAgIHJldHVybiBuZXdNYXA7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZ2V0TWFwSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1hcC1pdGVyYXRvcicpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xuXG4vLyBgTWFwLnByb3RvdHlwZS5rZXlPZmAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdNYXAnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAga2V5T2Y6IGZ1bmN0aW9uIGtleU9mKHNlYXJjaEVsZW1lbnQpIHtcbiAgICByZXR1cm4gaXRlcmF0ZShnZXRNYXBJdGVyYXRvcihhbk9iamVjdCh0aGlzKSksIGZ1bmN0aW9uIChrZXksIHZhbHVlLCBzdG9wKSB7XG4gICAgICBpZiAodmFsdWUgPT09IHNlYXJjaEVsZW1lbnQpIHJldHVybiBzdG9wKGtleSk7XG4gICAgfSwgeyBBU19FTlRSSUVTOiB0cnVlLCBJU19JVEVSQVRPUjogdHJ1ZSwgSU5URVJSVVBURUQ6IHRydWUgfSkucmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgZ2V0TWFwSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1hcC1pdGVyYXRvcicpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xuXG4vLyBgTWFwLnByb3RvdHlwZS5tYXBLZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ01hcCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBtYXBLZXlzOiBmdW5jdGlvbiBtYXBLZXlzKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIG1hcCA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHZhciBpdGVyYXRvciA9IGdldE1hcEl0ZXJhdG9yKG1hcCk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgbmV3TWFwID0gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IobWFwLCBnZXRCdWlsdEluKCdNYXAnKSkpKCk7XG4gICAgdmFyIHNldHRlciA9IGFDYWxsYWJsZShuZXdNYXAuc2V0KTtcbiAgICBpdGVyYXRlKGl0ZXJhdG9yLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgY2FsbChzZXR0ZXIsIG5ld01hcCwgYm91bmRGdW5jdGlvbih2YWx1ZSwga2V5LCBtYXApLCB2YWx1ZSk7XG4gICAgfSwgeyBBU19FTlRSSUVTOiB0cnVlLCBJU19JVEVSQVRPUjogdHJ1ZSB9KTtcbiAgICByZXR1cm4gbmV3TWFwO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgZ2V0TWFwSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1hcC1pdGVyYXRvcicpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xuXG4vLyBgTWFwLnByb3RvdHlwZS5tYXBWYWx1ZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtY29sbGVjdGlvbi1tZXRob2RzXG4kKHsgdGFyZ2V0OiAnTWFwJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIG1hcFZhbHVlczogZnVuY3Rpb24gbWFwVmFsdWVzKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIG1hcCA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHZhciBpdGVyYXRvciA9IGdldE1hcEl0ZXJhdG9yKG1hcCk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgbmV3TWFwID0gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IobWFwLCBnZXRCdWlsdEluKCdNYXAnKSkpKCk7XG4gICAgdmFyIHNldHRlciA9IGFDYWxsYWJsZShuZXdNYXAuc2V0KTtcbiAgICBpdGVyYXRlKGl0ZXJhdG9yLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgY2FsbChzZXR0ZXIsIG5ld01hcCwga2V5LCBib3VuZEZ1bmN0aW9uKHZhbHVlLCBrZXksIG1hcCkpO1xuICAgIH0sIHsgQVNfRU5UUklFUzogdHJ1ZSwgSVNfSVRFUkFUT1I6IHRydWUgfSk7XG4gICAgcmV0dXJuIG5ld01hcDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xuXG4vLyBgTWFwLnByb3RvdHlwZS5tZXJnZWAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdNYXAnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgYXJpdHk6IDEsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIG1lcmdlOiBmdW5jdGlvbiBtZXJnZShpdGVyYWJsZSAvKiAuLi5pdGVyYWJsZXMgKi8pIHtcbiAgICB2YXIgbWFwID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIHNldHRlciA9IGFDYWxsYWJsZShtYXAuc2V0KTtcbiAgICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBhcmd1bWVudHNMZW5ndGgpIHtcbiAgICAgIGl0ZXJhdGUoYXJndW1lbnRzW2krK10sIHNldHRlciwgeyB0aGF0OiBtYXAsIEFTX0VOVFJJRVM6IHRydWUgfSk7XG4gICAgfVxuICAgIHJldHVybiBtYXA7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi1vZicpO1xuXG4vLyBgTWFwLm9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLW1hcC5vZlxuJCh7IHRhcmdldDogJ01hcCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIG9mOiBvZlxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGdldE1hcEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tYXAtaXRlcmF0b3InKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbi8vIGBNYXAucHJvdG90eXBlLnJlZHVjZWAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdNYXAnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHZhciBtYXAgPSBhbk9iamVjdCh0aGlzKTtcbiAgICB2YXIgaXRlcmF0b3IgPSBnZXRNYXBJdGVyYXRvcihtYXApO1xuICAgIHZhciBub0luaXRpYWwgPSBhcmd1bWVudHMubGVuZ3RoIDwgMjtcbiAgICB2YXIgYWNjdW11bGF0b3IgPSBub0luaXRpYWwgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMV07XG4gICAgYUNhbGxhYmxlKGNhbGxiYWNrZm4pO1xuICAgIGl0ZXJhdGUoaXRlcmF0b3IsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAobm9Jbml0aWFsKSB7XG4gICAgICAgIG5vSW5pdGlhbCA9IGZhbHNlO1xuICAgICAgICBhY2N1bXVsYXRvciA9IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWNjdW11bGF0b3IgPSBjYWxsYmFja2ZuKGFjY3VtdWxhdG9yLCB2YWx1ZSwga2V5LCBtYXApO1xuICAgICAgfVxuICAgIH0sIHsgQVNfRU5UUklFUzogdHJ1ZSwgSVNfSVRFUkFUT1I6IHRydWUgfSk7XG4gICAgaWYgKG5vSW5pdGlhbCkgdGhyb3cgJFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IG1hcCB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBnZXRNYXBJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWFwLWl0ZXJhdG9yJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG5cbi8vIGBTZXQucHJvdG90eXBlLnNvbWVgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtY29sbGVjdGlvbi1tZXRob2RzXG4kKHsgdGFyZ2V0OiAnTWFwJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgbWFwID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIGl0ZXJhdG9yID0gZ2V0TWFwSXRlcmF0b3IobWFwKTtcbiAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIHJldHVybiBpdGVyYXRlKGl0ZXJhdG9yLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSwgc3RvcCkge1xuICAgICAgaWYgKGJvdW5kRnVuY3Rpb24odmFsdWUsIGtleSwgbWFwKSkgcmV0dXJuIHN0b3AoKTtcbiAgICB9LCB7IEFTX0VOVFJJRVM6IHRydWUsIElTX0lURVJBVE9SOiB0cnVlLCBJTlRFUlJVUFRFRDogdHJ1ZSB9KS5zdG9wcGVkO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IHJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgXG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1cHNlcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWFwLXVwc2VydCcpO1xuXG4vLyBgTWFwLnByb3RvdHlwZS51cGRhdGVPckluc2VydGAgbWV0aG9kIChyZXBsYWNlZCBieSBgTWFwLnByb3RvdHlwZS5lbXBsYWNlYClcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90aHVtYnN1cGVwL3Byb3Bvc2FsLXVwc2VydFxuJCh7IHRhcmdldDogJ01hcCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBuYW1lOiAndXBzZXJ0JywgZm9yY2VkOiB0cnVlIH0sIHtcbiAgdXBkYXRlT3JJbnNlcnQ6IHVwc2VydFxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuLy8gYFNldC5wcm90b3R5cGUudXBkYXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ01hcCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShrZXksIGNhbGxiYWNrIC8qICwgdGh1bmsgKi8pIHtcbiAgICB2YXIgbWFwID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIGdldCA9IGFDYWxsYWJsZShtYXAuZ2V0KTtcbiAgICB2YXIgaGFzID0gYUNhbGxhYmxlKG1hcC5oYXMpO1xuICAgIHZhciBzZXQgPSBhQ2FsbGFibGUobWFwLnNldCk7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYUNhbGxhYmxlKGNhbGxiYWNrKTtcbiAgICB2YXIgaXNQcmVzZW50SW5NYXAgPSBjYWxsKGhhcywgbWFwLCBrZXkpO1xuICAgIGlmICghaXNQcmVzZW50SW5NYXAgJiYgbGVuZ3RoIDwgMykge1xuICAgICAgdGhyb3cgJFR5cGVFcnJvcignVXBkYXRpbmcgYWJzZW50IHZhbHVlJyk7XG4gICAgfVxuICAgIHZhciB2YWx1ZSA9IGlzUHJlc2VudEluTWFwID8gY2FsbChnZXQsIG1hcCwga2V5KSA6IGFDYWxsYWJsZShsZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKShrZXksIG1hcCk7XG4gICAgY2FsbChzZXQsIG1hcCwga2V5LCBjYWxsYmFjayh2YWx1ZSwga2V5LCBtYXApKTtcbiAgICByZXR1cm4gbWFwO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IHJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgXG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1cHNlcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWFwLXVwc2VydCcpO1xuXG4vLyBgTWFwLnByb3RvdHlwZS51cHNlcnRgIG1ldGhvZCAocmVwbGFjZWQgYnkgYE1hcC5wcm90b3R5cGUuZW1wbGFjZWApXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGh1bWJzdXBlcC9wcm9wb3NhbC11cHNlcnRcbiQoeyB0YXJnZXQ6ICdNYXAnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgdXBzZXJ0OiB1cHNlcnRcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBtYXggPSBNYXRoLm1heDtcblxuLy8gYE1hdGguY2xhbXBgIG1ldGhvZFxuLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBjbGFtcDogZnVuY3Rpb24gY2xhbXAoeCwgbG93ZXIsIHVwcGVyKSB7XG4gICAgcmV0dXJuIG1pbih1cHBlciwgbWF4KGxvd2VyLCB4KSk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbi8vIGBNYXRoLkRFR19QRVJfUkFEYCBjb25zdGFudFxuLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlLCBub25Db25maWd1cmFibGU6IHRydWUsIG5vbldyaXRhYmxlOiB0cnVlIH0sIHtcbiAgREVHX1BFUl9SQUQ6IE1hdGguUEkgLyAxODBcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbnZhciBSQURfUEVSX0RFRyA9IDE4MCAvIE1hdGguUEk7XG5cbi8vIGBNYXRoLmRlZ3JlZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBkZWdyZWVzOiBmdW5jdGlvbiBkZWdyZWVzKHJhZGlhbnMpIHtcbiAgICByZXR1cm4gcmFkaWFucyAqIFJBRF9QRVJfREVHO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG52YXIgc2NhbGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC1zY2FsZScpO1xudmFyIGZyb3VuZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLWZyb3VuZCcpO1xuXG4vLyBgTWF0aC5mc2NhbGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBmc2NhbGU6IGZ1bmN0aW9uIGZzY2FsZSh4LCBpbkxvdywgaW5IaWdoLCBvdXRMb3csIG91dEhpZ2gpIHtcbiAgICByZXR1cm4gZnJvdW5kKHNjYWxlKHgsIGluTG93LCBpbkhpZ2gsIG91dExvdywgb3V0SGlnaCkpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBgTWF0aC5pYWRkaGAgbWV0aG9kXG4vLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xuLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgaWFkZGg6IGZ1bmN0aW9uIGlhZGRoKHgwLCB4MSwgeTAsIHkxKSB7XG4gICAgdmFyICR4MCA9IHgwID4+PiAwO1xuICAgIHZhciAkeDEgPSB4MSA+Pj4gMDtcbiAgICB2YXIgJHkwID0geTAgPj4+IDA7XG4gICAgcmV0dXJuICR4MSArICh5MSA+Pj4gMCkgKyAoKCR4MCAmICR5MCB8ICgkeDAgfCAkeTApICYgfigkeDAgKyAkeTAgPj4+IDApKSA+Pj4gMzEpIHwgMDtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gYE1hdGguaW11bGhgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIGltdWxoOiBmdW5jdGlvbiBpbXVsaCh1LCB2KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4RkZGRjtcbiAgICB2YXIgJHUgPSArdTtcbiAgICB2YXIgJHYgPSArdjtcbiAgICB2YXIgdTAgPSAkdSAmIFVJTlQxNjtcbiAgICB2YXIgdjAgPSAkdiAmIFVJTlQxNjtcbiAgICB2YXIgdTEgPSAkdSA+PiAxNjtcbiAgICB2YXIgdjEgPSAkdiA+PiAxNjtcbiAgICB2YXIgdCA9ICh1MSAqIHYwID4+PiAwKSArICh1MCAqIHYwID4+PiAxNik7XG4gICAgcmV0dXJuIHUxICogdjEgKyAodCA+PiAxNikgKyAoKHUwICogdjEgPj4+IDApICsgKHQgJiBVSU5UMTYpID4+IDE2KTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gYE1hdGguaXN1YmhgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIGlzdWJoOiBmdW5jdGlvbiBpc3ViaCh4MCwgeDEsIHkwLCB5MSkge1xuICAgIHZhciAkeDAgPSB4MCA+Pj4gMDtcbiAgICB2YXIgJHgxID0geDEgPj4+IDA7XG4gICAgdmFyICR5MCA9IHkwID4+PiAwO1xuICAgIHJldHVybiAkeDEgLSAoeTEgPj4+IDApIC0gKCh+JHgwICYgJHkwIHwgfigkeDAgXiAkeTApICYgJHgwIC0gJHkwID4+PiAwKSA+Pj4gMzEpIHwgMDtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gYE1hdGguUkFEX1BFUl9ERUdgIGNvbnN0YW50XG4vLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIG5vbkNvbmZpZ3VyYWJsZTogdHJ1ZSwgbm9uV3JpdGFibGU6IHRydWUgfSwge1xuICBSQURfUEVSX0RFRzogMTgwIC8gTWF0aC5QSVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxudmFyIERFR19QRVJfUkFEID0gTWF0aC5QSSAvIDE4MDtcblxuLy8gYE1hdGgucmFkaWFuc2AgbWV0aG9kXG4vLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIHJhZGlhbnM6IGZ1bmN0aW9uIHJhZGlhbnMoZGVncmVlcykge1xuICAgIHJldHVybiBkZWdyZWVzICogREVHX1BFUl9SQUQ7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgc2NhbGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC1zY2FsZScpO1xuXG4vLyBgTWF0aC5zY2FsZWAgbWV0aG9kXG4vLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIHNjYWxlOiBzY2FsZVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBudW1iZXJJc0Zpbml0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9udW1iZXItaXMtZmluaXRlJyk7XG52YXIgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1jcmVhdGUtY29uc3RydWN0b3InKTtcbnZhciBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyLXJlc3VsdC1vYmplY3QnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBTRUVERURfUkFORE9NID0gJ1NlZWRlZCBSYW5kb20nO1xudmFyIFNFRURFRF9SQU5ET01fR0VORVJBVE9SID0gU0VFREVEX1JBTkRPTSArICcgR2VuZXJhdG9yJztcbnZhciBTRUVEX1RZUEVfRVJST1IgPSAnTWF0aC5zZWVkZWRQUk5HKCkgYXJndW1lbnQgc2hvdWxkIGhhdmUgYSBcInNlZWRcIiBmaWVsZCB3aXRoIGEgZmluaXRlIHZhbHVlLic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihTRUVERURfUkFORE9NX0dFTkVSQVRPUik7XG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxudmFyICRTZWVkZWRSYW5kb21HZW5lcmF0b3IgPSBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yKGZ1bmN0aW9uIFNlZWRlZFJhbmRvbUdlbmVyYXRvcihzZWVkKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IFNFRURFRF9SQU5ET01fR0VORVJBVE9SLFxuICAgIHNlZWQ6IHNlZWQgJSAyMTQ3NDgzNjQ3XG4gIH0pO1xufSwgU0VFREVEX1JBTkRPTSwgZnVuY3Rpb24gbmV4dCgpIHtcbiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgdmFyIHNlZWQgPSBzdGF0ZS5zZWVkID0gKHN0YXRlLnNlZWQgKiAxMTAzNTE1MjQ1ICsgMTIzNDUpICUgMjE0NzQ4MzY0NztcbiAgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QoKHNlZWQgJiAxMDczNzQxODIzKSAvIDEwNzM3NDE4MjMsIGZhbHNlKTtcbn0pO1xuXG4vLyBgTWF0aC5zZWVkZWRQUk5HYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXNlZWRlZC1yYW5kb21cbi8vIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXNlZWRlZC1yYW5kb20vYmxvYi83OGI4MjU4ODM1YjU3ZmMyMTAwZDA3NjE1MWFiNTA2YmMzMjAyYWU2L2RlbW8uaHRtbFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBzZWVkZWRQUk5HOiBmdW5jdGlvbiBzZWVkZWRQUk5HKGl0KSB7XG4gICAgdmFyIHNlZWQgPSBhbk9iamVjdChpdCkuc2VlZDtcbiAgICBpZiAoIW51bWJlcklzRmluaXRlKHNlZWQpKSB0aHJvdyAkVHlwZUVycm9yKFNFRURfVFlQRV9FUlJPUik7XG4gICAgcmV0dXJuIG5ldyAkU2VlZGVkUmFuZG9tR2VuZXJhdG9yKHNlZWQpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBgTWF0aC5zaWduYml0YCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLU1hdGguc2lnbmJpdFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBzaWduYml0OiBmdW5jdGlvbiBzaWduYml0KHgpIHtcbiAgICB2YXIgbiA9ICt4O1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgcmV0dXJuIG4gPT0gbiAmJiBuID09IDAgPyAxIC8gbiA9PSAtSW5maW5pdHkgOiBuIDwgMDtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gYE1hdGgudW11bGhgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIHVtdWxoOiBmdW5jdGlvbiB1bXVsaCh1LCB2KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4RkZGRjtcbiAgICB2YXIgJHUgPSArdTtcbiAgICB2YXIgJHYgPSArdjtcbiAgICB2YXIgdTAgPSAkdSAmIFVJTlQxNjtcbiAgICB2YXIgdjAgPSAkdiAmIFVJTlQxNjtcbiAgICB2YXIgdTEgPSAkdSA+Pj4gMTY7XG4gICAgdmFyIHYxID0gJHYgPj4+IDE2O1xuICAgIHZhciB0ID0gKHUxICogdjAgPj4+IDApICsgKHUwICogdjAgPj4+IDE2KTtcbiAgICByZXR1cm4gdTEgKiB2MSArICh0ID4+PiAxNikgKyAoKHUwICogdjEgPj4+IDApICsgKHQgJiBVSU5UMTYpID4+PiAxNik7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgcGFyc2VJbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbnVtYmVyLXBhcnNlLWludCcpO1xuXG52YXIgSU5WQUxJRF9OVU1CRVJfUkVQUkVTRU5UQVRJT04gPSAnSW52YWxpZCBudW1iZXIgcmVwcmVzZW50YXRpb24nO1xudmFyIElOVkFMSURfUkFESVggPSAnSW52YWxpZCByYWRpeCc7XG52YXIgJFJhbmdlRXJyb3IgPSBSYW5nZUVycm9yO1xudmFyICRTeW50YXhFcnJvciA9IFN5bnRheEVycm9yO1xudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG52YXIgdmFsaWQgPSAvXltcXGRhLXpdKyQvO1xudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgZXhlYyA9IHVuY3VycnlUaGlzKHZhbGlkLmV4ZWMpO1xudmFyIG51bWJlclRvU3RyaW5nID0gdW5jdXJyeVRoaXMoMS4wLnRvU3RyaW5nKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxuLy8gYE51bWJlci5mcm9tU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW51bWJlci1mcm9tc3RyaW5nXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgZnJvbVN0cmluZzogZnVuY3Rpb24gZnJvbVN0cmluZyhzdHJpbmcsIHJhZGl4KSB7XG4gICAgdmFyIHNpZ24gPSAxO1xuICAgIHZhciBSLCBtYXRoTnVtO1xuICAgIGlmICh0eXBlb2Ygc3RyaW5nICE9ICdzdHJpbmcnKSB0aHJvdyAkVHlwZUVycm9yKElOVkFMSURfTlVNQkVSX1JFUFJFU0VOVEFUSU9OKTtcbiAgICBpZiAoIXN0cmluZy5sZW5ndGgpIHRocm93ICRTeW50YXhFcnJvcihJTlZBTElEX05VTUJFUl9SRVBSRVNFTlRBVElPTik7XG4gICAgaWYgKGNoYXJBdChzdHJpbmcsIDApID09ICctJykge1xuICAgICAgc2lnbiA9IC0xO1xuICAgICAgc3RyaW5nID0gc3RyaW5nU2xpY2Uoc3RyaW5nLCAxKTtcbiAgICAgIGlmICghc3RyaW5nLmxlbmd0aCkgdGhyb3cgJFN5bnRheEVycm9yKElOVkFMSURfTlVNQkVSX1JFUFJFU0VOVEFUSU9OKTtcbiAgICB9XG4gICAgUiA9IHJhZGl4ID09PSB1bmRlZmluZWQgPyAxMCA6IHRvSW50ZWdlck9ySW5maW5pdHkocmFkaXgpO1xuICAgIGlmIChSIDwgMiB8fCBSID4gMzYpIHRocm93ICRSYW5nZUVycm9yKElOVkFMSURfUkFESVgpO1xuICAgIGlmICghZXhlYyh2YWxpZCwgc3RyaW5nKSB8fCBudW1iZXJUb1N0cmluZyhtYXRoTnVtID0gcGFyc2VJbnQoc3RyaW5nLCBSKSwgUikgIT09IHN0cmluZykge1xuICAgICAgdGhyb3cgJFN5bnRheEVycm9yKElOVkFMSURfTlVNQkVSX1JFUFJFU0VOVEFUSU9OKTtcbiAgICB9XG4gICAgcmV0dXJuIHNpZ24gKiBtYXRoTnVtO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIE51bWVyaWNSYW5nZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL251bWVyaWMtcmFuZ2UtaXRlcmF0b3InKTtcblxuLy8gYE51bWJlci5yYW5nZWAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1OdW1iZXIucmFuZ2VcbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICByYW5nZTogZnVuY3Rpb24gcmFuZ2Uoc3RhcnQsIGVuZCwgb3B0aW9uKSB7XG4gICAgcmV0dXJuIG5ldyBOdW1lcmljUmFuZ2VJdGVyYXRvcihzdGFydCwgZW5kLCBvcHRpb24sICdudW1iZXInLCAwLCAxKTtcbiAgfVxufSk7XG4iLCIvLyBUT0RPOiBSZW1vdmUgZnJvbSBgY29yZS1qc0A0YFxucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuaGFzLW93bicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIE9iamVjdEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pdGVyYXRvcicpO1xuXG4vLyBgT2JqZWN0Lml0ZXJhdGVFbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC1pdGVyYXRpb25cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBpdGVyYXRlRW50cmllczogZnVuY3Rpb24gaXRlcmF0ZUVudHJpZXMob2JqZWN0KSB7XG4gICAgcmV0dXJuIG5ldyBPYmplY3RJdGVyYXRvcihvYmplY3QsICdlbnRyaWVzJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIE9iamVjdEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pdGVyYXRvcicpO1xuXG4vLyBgT2JqZWN0Lml0ZXJhdGVLZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC1pdGVyYXRpb25cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBpdGVyYXRlS2V5czogZnVuY3Rpb24gaXRlcmF0ZUtleXMob2JqZWN0KSB7XG4gICAgcmV0dXJuIG5ldyBPYmplY3RJdGVyYXRvcihvYmplY3QsICdrZXlzJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIE9iamVjdEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pdGVyYXRvcicpO1xuXG4vLyBgT2JqZWN0Lml0ZXJhdGVWYWx1ZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LWl0ZXJhdGlvblxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIGl0ZXJhdGVWYWx1ZXM6IGZ1bmN0aW9uIGl0ZXJhdGVWYWx1ZXMob2JqZWN0KSB7XG4gICAgcmV0dXJuIG5ldyBPYmplY3RJdGVyYXRvcihvYmplY3QsICd2YWx1ZXMnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYnNlcnZhYmxlXG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNOdWxsT3JVbmRlZmluZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBnZXRNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1ldGhvZCcpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgZGVmaW5lQnVpbHRJbnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWlucycpO1xudmFyIGRlZmluZUJ1aWx0SW5BY2Nlc3NvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4tYWNjZXNzb3InKTtcbnZhciBob3N0UmVwb3J0RXJyb3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hvc3QtcmVwb3J0LWVycm9ycycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBPQlNFUlZBQkxFX0ZPUkNFRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYnNlcnZhYmxlLWZvcmNlZCcpO1xuXG52YXIgJCRPQlNFUlZBQkxFID0gd2VsbEtub3duU3ltYm9sKCdvYnNlcnZhYmxlJyk7XG52YXIgT0JTRVJWQUJMRSA9ICdPYnNlcnZhYmxlJztcbnZhciBTVUJTQ1JJUFRJT04gPSAnU3Vic2NyaXB0aW9uJztcbnZhciBTVUJTQ1JJUFRJT05fT0JTRVJWRVIgPSAnU3Vic2NyaXB0aW9uT2JzZXJ2ZXInO1xudmFyIGdldHRlckZvciA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRPYnNlcnZhYmxlSW50ZXJuYWxTdGF0ZSA9IGdldHRlckZvcihPQlNFUlZBQkxFKTtcbnZhciBnZXRTdWJzY3JpcHRpb25JbnRlcm5hbFN0YXRlID0gZ2V0dGVyRm9yKFNVQlNDUklQVElPTik7XG52YXIgZ2V0U3Vic2NyaXB0aW9uT2JzZXJ2ZXJJbnRlcm5hbFN0YXRlID0gZ2V0dGVyRm9yKFNVQlNDUklQVElPTl9PQlNFUlZFUik7XG5cbnZhciBTdWJzY3JpcHRpb25TdGF0ZSA9IGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICB0aGlzLm9ic2VydmVyID0gYW5PYmplY3Qob2JzZXJ2ZXIpO1xuICB0aGlzLmNsZWFudXAgPSB1bmRlZmluZWQ7XG4gIHRoaXMuc3Vic2NyaXB0aW9uT2JzZXJ2ZXIgPSB1bmRlZmluZWQ7XG59O1xuXG5TdWJzY3JpcHRpb25TdGF0ZS5wcm90b3R5cGUgPSB7XG4gIHR5cGU6IFNVQlNDUklQVElPTixcbiAgY2xlYW46IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY2xlYW51cCA9IHRoaXMuY2xlYW51cDtcbiAgICBpZiAoY2xlYW51cCkge1xuICAgICAgdGhpcy5jbGVhbnVwID0gdW5kZWZpbmVkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2xlYW51cCgpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaG9zdFJlcG9ydEVycm9ycyhlcnJvcik7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBjbG9zZTogZnVuY3Rpb24gKCkge1xuICAgIGlmICghREVTQ1JJUFRPUlMpIHtcbiAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLmZhY2FkZTtcbiAgICAgIHZhciBzdWJzY3JpcHRpb25PYnNlcnZlciA9IHRoaXMuc3Vic2NyaXB0aW9uT2JzZXJ2ZXI7XG4gICAgICBzdWJzY3JpcHRpb24uY2xvc2VkID0gdHJ1ZTtcbiAgICAgIGlmIChzdWJzY3JpcHRpb25PYnNlcnZlcikgc3Vic2NyaXB0aW9uT2JzZXJ2ZXIuY2xvc2VkID0gdHJ1ZTtcbiAgICB9IHRoaXMub2JzZXJ2ZXIgPSB1bmRlZmluZWQ7XG4gIH0sXG4gIGlzQ2xvc2VkOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMub2JzZXJ2ZXIgPT09IHVuZGVmaW5lZDtcbiAgfVxufTtcblxudmFyIFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChvYnNlcnZlciwgc3Vic2NyaWJlcikge1xuICB2YXIgc3Vic2NyaXB0aW9uU3RhdGUgPSBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIG5ldyBTdWJzY3JpcHRpb25TdGF0ZShvYnNlcnZlcikpO1xuICB2YXIgc3RhcnQ7XG4gIGlmICghREVTQ1JJUFRPUlMpIHRoaXMuY2xvc2VkID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgaWYgKHN0YXJ0ID0gZ2V0TWV0aG9kKG9ic2VydmVyLCAnc3RhcnQnKSkgY2FsbChzdGFydCwgb2JzZXJ2ZXIsIHRoaXMpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGhvc3RSZXBvcnRFcnJvcnMoZXJyb3IpO1xuICB9XG4gIGlmIChzdWJzY3JpcHRpb25TdGF0ZS5pc0Nsb3NlZCgpKSByZXR1cm47XG4gIHZhciBzdWJzY3JpcHRpb25PYnNlcnZlciA9IHN1YnNjcmlwdGlvblN0YXRlLnN1YnNjcmlwdGlvbk9ic2VydmVyID0gbmV3IFN1YnNjcmlwdGlvbk9ic2VydmVyKHN1YnNjcmlwdGlvblN0YXRlKTtcbiAgdHJ5IHtcbiAgICB2YXIgY2xlYW51cCA9IHN1YnNjcmliZXIoc3Vic2NyaXB0aW9uT2JzZXJ2ZXIpO1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBjbGVhbnVwO1xuICAgIGlmICghaXNOdWxsT3JVbmRlZmluZWQoY2xlYW51cCkpIHN1YnNjcmlwdGlvblN0YXRlLmNsZWFudXAgPSBpc0NhbGxhYmxlKGNsZWFudXAudW5zdWJzY3JpYmUpXG4gICAgICA/IGZ1bmN0aW9uICgpIHsgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7IH1cbiAgICAgIDogYUNhbGxhYmxlKGNsZWFudXApO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHN1YnNjcmlwdGlvbk9ic2VydmVyLmVycm9yKGVycm9yKTtcbiAgICByZXR1cm47XG4gIH0gaWYgKHN1YnNjcmlwdGlvblN0YXRlLmlzQ2xvc2VkKCkpIHN1YnNjcmlwdGlvblN0YXRlLmNsZWFuKCk7XG59O1xuXG5TdWJzY3JpcHRpb24ucHJvdG90eXBlID0gZGVmaW5lQnVpbHRJbnMoe30sIHtcbiAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgIHZhciBzdWJzY3JpcHRpb25TdGF0ZSA9IGdldFN1YnNjcmlwdGlvbkludGVybmFsU3RhdGUodGhpcyk7XG4gICAgaWYgKCFzdWJzY3JpcHRpb25TdGF0ZS5pc0Nsb3NlZCgpKSB7XG4gICAgICBzdWJzY3JpcHRpb25TdGF0ZS5jbG9zZSgpO1xuICAgICAgc3Vic2NyaXB0aW9uU3RhdGUuY2xlYW4oKTtcbiAgICB9XG4gIH1cbn0pO1xuXG5pZiAoREVTQ1JJUFRPUlMpIGRlZmluZUJ1aWx0SW5BY2Nlc3NvcihTdWJzY3JpcHRpb24ucHJvdG90eXBlLCAnY2xvc2VkJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gY2xvc2VkKCkge1xuICAgIHJldHVybiBnZXRTdWJzY3JpcHRpb25JbnRlcm5hbFN0YXRlKHRoaXMpLmlzQ2xvc2VkKCk7XG4gIH1cbn0pO1xuXG52YXIgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uU3RhdGUpIHtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogU1VCU0NSSVBUSU9OX09CU0VSVkVSLFxuICAgIHN1YnNjcmlwdGlvblN0YXRlOiBzdWJzY3JpcHRpb25TdGF0ZVxuICB9KTtcbiAgaWYgKCFERVNDUklQVE9SUykgdGhpcy5jbG9zZWQgPSBmYWxzZTtcbn07XG5cblN1YnNjcmlwdGlvbk9ic2VydmVyLnByb3RvdHlwZSA9IGRlZmluZUJ1aWx0SW5zKHt9LCB7XG4gIG5leHQ6IGZ1bmN0aW9uIG5leHQodmFsdWUpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uU3RhdGUgPSBnZXRTdWJzY3JpcHRpb25PYnNlcnZlckludGVybmFsU3RhdGUodGhpcykuc3Vic2NyaXB0aW9uU3RhdGU7XG4gICAgaWYgKCFzdWJzY3JpcHRpb25TdGF0ZS5pc0Nsb3NlZCgpKSB7XG4gICAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb25TdGF0ZS5vYnNlcnZlcjtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBuZXh0TWV0aG9kID0gZ2V0TWV0aG9kKG9ic2VydmVyLCAnbmV4dCcpO1xuICAgICAgICBpZiAobmV4dE1ldGhvZCkgY2FsbChuZXh0TWV0aG9kLCBvYnNlcnZlciwgdmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaG9zdFJlcG9ydEVycm9ycyhlcnJvcik7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBlcnJvcjogZnVuY3Rpb24gZXJyb3IodmFsdWUpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uU3RhdGUgPSBnZXRTdWJzY3JpcHRpb25PYnNlcnZlckludGVybmFsU3RhdGUodGhpcykuc3Vic2NyaXB0aW9uU3RhdGU7XG4gICAgaWYgKCFzdWJzY3JpcHRpb25TdGF0ZS5pc0Nsb3NlZCgpKSB7XG4gICAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb25TdGF0ZS5vYnNlcnZlcjtcbiAgICAgIHN1YnNjcmlwdGlvblN0YXRlLmNsb3NlKCk7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgZXJyb3JNZXRob2QgPSBnZXRNZXRob2Qob2JzZXJ2ZXIsICdlcnJvcicpO1xuICAgICAgICBpZiAoZXJyb3JNZXRob2QpIGNhbGwoZXJyb3JNZXRob2QsIG9ic2VydmVyLCB2YWx1ZSk7XG4gICAgICAgIGVsc2UgaG9zdFJlcG9ydEVycm9ycyh2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgaG9zdFJlcG9ydEVycm9ycyhlcnIpO1xuICAgICAgfSBzdWJzY3JpcHRpb25TdGF0ZS5jbGVhbigpO1xuICAgIH1cbiAgfSxcbiAgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgIHZhciBzdWJzY3JpcHRpb25TdGF0ZSA9IGdldFN1YnNjcmlwdGlvbk9ic2VydmVySW50ZXJuYWxTdGF0ZSh0aGlzKS5zdWJzY3JpcHRpb25TdGF0ZTtcbiAgICBpZiAoIXN1YnNjcmlwdGlvblN0YXRlLmlzQ2xvc2VkKCkpIHtcbiAgICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvblN0YXRlLm9ic2VydmVyO1xuICAgICAgc3Vic2NyaXB0aW9uU3RhdGUuY2xvc2UoKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBjb21wbGV0ZU1ldGhvZCA9IGdldE1ldGhvZChvYnNlcnZlciwgJ2NvbXBsZXRlJyk7XG4gICAgICAgIGlmIChjb21wbGV0ZU1ldGhvZCkgY2FsbChjb21wbGV0ZU1ldGhvZCwgb2JzZXJ2ZXIpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaG9zdFJlcG9ydEVycm9ycyhlcnJvcik7XG4gICAgICB9IHN1YnNjcmlwdGlvblN0YXRlLmNsZWFuKCk7XG4gICAgfVxuICB9XG59KTtcblxuaWYgKERFU0NSSVBUT1JTKSBkZWZpbmVCdWlsdEluQWNjZXNzb3IoU3Vic2NyaXB0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLCAnY2xvc2VkJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gY2xvc2VkKCkge1xuICAgIHJldHVybiBnZXRTdWJzY3JpcHRpb25PYnNlcnZlckludGVybmFsU3RhdGUodGhpcykuc3Vic2NyaXB0aW9uU3RhdGUuaXNDbG9zZWQoKTtcbiAgfVxufSk7XG5cbnZhciAkT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uIE9ic2VydmFibGUoc3Vic2NyaWJlcikge1xuICBhbkluc3RhbmNlKHRoaXMsIE9ic2VydmFibGVQcm90b3R5cGUpO1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBPQlNFUlZBQkxFLFxuICAgIHN1YnNjcmliZXI6IGFDYWxsYWJsZShzdWJzY3JpYmVyKVxuICB9KTtcbn07XG5cbnZhciBPYnNlcnZhYmxlUHJvdG90eXBlID0gJE9ic2VydmFibGUucHJvdG90eXBlO1xuXG5kZWZpbmVCdWlsdElucyhPYnNlcnZhYmxlUHJvdG90eXBlLCB7XG4gIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb24oaXNDYWxsYWJsZShvYnNlcnZlcikgPyB7XG4gICAgICBuZXh0OiBvYnNlcnZlcixcbiAgICAgIGVycm9yOiBsZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLFxuICAgICAgY29tcGxldGU6IGxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWRcbiAgICB9IDogaXNPYmplY3Qob2JzZXJ2ZXIpID8gb2JzZXJ2ZXIgOiB7fSwgZ2V0T2JzZXJ2YWJsZUludGVybmFsU3RhdGUodGhpcykuc3Vic2NyaWJlcik7XG4gIH1cbn0pO1xuXG5kZWZpbmVCdWlsdEluKE9ic2VydmFibGVQcm90b3R5cGUsICQkT0JTRVJWQUJMRSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbiQoeyBnbG9iYWw6IHRydWUsIGNvbnN0cnVjdG9yOiB0cnVlLCBmb3JjZWQ6IE9CU0VSVkFCTEVfRk9SQ0VEIH0sIHtcbiAgT2JzZXJ2YWJsZTogJE9ic2VydmFibGVcbn0pO1xuXG5zZXRTcGVjaWVzKE9CU0VSVkFCTEUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNvbnN0cnVjdG9yJyk7XG52YXIgZ2V0SXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yJyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBPQlNFUlZBQkxFX0ZPUkNFRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYnNlcnZhYmxlLWZvcmNlZCcpO1xuXG52YXIgJCRPQlNFUlZBQkxFID0gd2VsbEtub3duU3ltYm9sKCdvYnNlcnZhYmxlJyk7XG5cbi8vIGBPYnNlcnZhYmxlLmZyb21gIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JzZXJ2YWJsZVxuJCh7IHRhcmdldDogJ09ic2VydmFibGUnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IE9CU0VSVkFCTEVfRk9SQ0VEIH0sIHtcbiAgZnJvbTogZnVuY3Rpb24gZnJvbSh4KSB7XG4gICAgdmFyIEMgPSBpc0NvbnN0cnVjdG9yKHRoaXMpID8gdGhpcyA6IGdldEJ1aWx0SW4oJ09ic2VydmFibGUnKTtcbiAgICB2YXIgb2JzZXJ2YWJsZU1ldGhvZCA9IGdldE1ldGhvZChhbk9iamVjdCh4KSwgJCRPQlNFUlZBQkxFKTtcbiAgICBpZiAob2JzZXJ2YWJsZU1ldGhvZCkge1xuICAgICAgdmFyIG9ic2VydmFibGUgPSBhbk9iamVjdChjYWxsKG9ic2VydmFibGVNZXRob2QsIHgpKTtcbiAgICAgIHJldHVybiBvYnNlcnZhYmxlLmNvbnN0cnVjdG9yID09PSBDID8gb2JzZXJ2YWJsZSA6IG5ldyBDKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZS5zdWJzY3JpYmUob2JzZXJ2ZXIpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHZhciBpdGVyYXRvciA9IGdldEl0ZXJhdG9yKHgpO1xuICAgIHJldHVybiBuZXcgQyhmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgIGl0ZXJhdGUoaXRlcmF0b3IsIGZ1bmN0aW9uIChpdCwgc3RvcCkge1xuICAgICAgICBvYnNlcnZlci5uZXh0KGl0KTtcbiAgICAgICAgaWYgKG9ic2VydmVyLmNsb3NlZCkgcmV0dXJuIHN0b3AoKTtcbiAgICAgIH0sIHsgSVNfSVRFUkFUT1I6IHRydWUsIElOVEVSUlVQVEVEOiB0cnVlIH0pO1xuICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICB9KTtcbiAgfVxufSk7XG4iLCIvLyBUT0RPOiBSZW1vdmUgdGhpcyBtb2R1bGUgZnJvbSBgY29yZS1qc0A0YCBzaW5jZSBpdCdzIHNwbGl0IHRvIG1vZHVsZXMgbGlzdGVkIGJlbG93XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5vYnNlcnZhYmxlLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzbmV4dC5vYnNlcnZhYmxlLmZyb20nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXNuZXh0Lm9ic2VydmFibGUub2YnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgaXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jb25zdHJ1Y3RvcicpO1xudmFyIE9CU0VSVkFCTEVfRk9SQ0VEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29ic2VydmFibGUtZm9yY2VkJyk7XG5cbnZhciBBcnJheSA9IGdldEJ1aWx0SW4oJ0FycmF5Jyk7XG5cbi8vIGBPYnNlcnZhYmxlLm9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9ic2VydmFibGVcbiQoeyB0YXJnZXQ6ICdPYnNlcnZhYmxlJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBPQlNFUlZBQkxFX0ZPUkNFRCB9LCB7XG4gIG9mOiBmdW5jdGlvbiBvZigpIHtcbiAgICB2YXIgQyA9IGlzQ29uc3RydWN0b3IodGhpcykgPyB0aGlzIDogZ2V0QnVpbHRJbignT2JzZXJ2YWJsZScpO1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBpdGVtcyA9IEFycmF5KGxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIGl0ZW1zW2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleCsrXTtcbiAgICByZXR1cm4gbmV3IEMoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG9ic2VydmVyLm5leHQoaXRlbXNbaV0pO1xuICAgICAgICBpZiAob2JzZXJ2ZXIuY2xvc2VkKSByZXR1cm47XG4gICAgICB9IG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucHJvbWlzZS5hbGwtc2V0dGxlZC5qcycpO1xuIiwiLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucHJvbWlzZS5hbnknKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgXG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wZXJmb3JtJyk7XG5cbi8vIGBQcm9taXNlLnRyeWAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLXRyeVxuJCh7IHRhcmdldDogJ1Byb21pc2UnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICAndHJ5JzogZnVuY3Rpb24gKGNhbGxiYWNrZm4pIHtcbiAgICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mKHRoaXMpO1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGNhbGxiYWNrZm4pO1xuICAgIChyZXN1bHQuZXJyb3IgPyBwcm9taXNlQ2FwYWJpbGl0eS5yZWplY3QgOiBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlKShyZXN1bHQudmFsdWUpO1xuICAgIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsIi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgXG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBSZWZsZWN0TWV0YWRhdGFNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVmbGVjdC1tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG52YXIgdG9NZXRhZGF0YUtleSA9IFJlZmxlY3RNZXRhZGF0YU1vZHVsZS50b0tleTtcbnZhciBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhID0gUmVmbGVjdE1ldGFkYXRhTW9kdWxlLnNldDtcblxuLy8gYFJlZmxlY3QuZGVmaW5lTWV0YWRhdGFgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3JidWNrdG9uL3JlZmxlY3QtbWV0YWRhdGFcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGRlZmluZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWZpbmVNZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gICAgdmFyIHRhcmdldEtleSA9IGFyZ3VtZW50cy5sZW5ndGggPCA0ID8gdW5kZWZpbmVkIDogdG9NZXRhZGF0YUtleShhcmd1bWVudHNbM10pO1xuICAgIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsIGFuT2JqZWN0KHRhcmdldCksIHRhcmdldEtleSk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgUmVmbGVjdE1ldGFkYXRhTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZmxlY3QtbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxudmFyIHRvTWV0YWRhdGFLZXkgPSBSZWZsZWN0TWV0YWRhdGFNb2R1bGUudG9LZXk7XG52YXIgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IFJlZmxlY3RNZXRhZGF0YU1vZHVsZS5nZXRNYXA7XG52YXIgc3RvcmUgPSBSZWZsZWN0TWV0YWRhdGFNb2R1bGUuc3RvcmU7XG5cbi8vIGBSZWZsZWN0LmRlbGV0ZU1ldGFkYXRhYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yYnVja3Rvbi9yZWZsZWN0LW1ldGFkYXRhXG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBkZWxldGVNZXRhZGF0YTogZnVuY3Rpb24gZGVsZXRlTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICAgIHZhciB0YXJnZXRLZXkgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YWRhdGFLZXkoYXJndW1lbnRzWzJdKTtcbiAgICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKGFuT2JqZWN0KHRhcmdldCksIHRhcmdldEtleSwgZmFsc2UpO1xuICAgIGlmIChtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkIHx8ICFtZXRhZGF0YU1hcFsnZGVsZXRlJ10obWV0YWRhdGFLZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKG1ldGFkYXRhTWFwLnNpemUpIHJldHVybiB0cnVlO1xuICAgIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpO1xuICAgIHRhcmdldE1ldGFkYXRhWydkZWxldGUnXSh0YXJnZXRLZXkpO1xuICAgIHJldHVybiAhIXRhcmdldE1ldGFkYXRhLnNpemUgfHwgc3RvcmVbJ2RlbGV0ZSddKHRhcmdldCk7XG4gIH1cbn0pO1xuIiwiLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIFJlZmxlY3RNZXRhZGF0YU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWZsZWN0LW1ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciAkYXJyYXlVbmlxdWVCeSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS11bmlxdWUtYnknKTtcblxudmFyIGFycmF5VW5pcXVlQnkgPSB1bmN1cnJ5VGhpcygkYXJyYXlVbmlxdWVCeSk7XG52YXIgY29uY2F0ID0gdW5jdXJyeVRoaXMoW10uY29uY2F0KTtcbnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IFJlZmxlY3RNZXRhZGF0YU1vZHVsZS5rZXlzO1xudmFyIHRvTWV0YWRhdGFLZXkgPSBSZWZsZWN0TWV0YWRhdGFNb2R1bGUudG9LZXk7XG5cbnZhciBvcmRpbmFyeU1ldGFkYXRhS2V5cyA9IGZ1bmN0aW9uIChPLCBQKSB7XG4gIHZhciBvS2V5cyA9IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKE8sIFApO1xuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIGlmIChwYXJlbnQgPT09IG51bGwpIHJldHVybiBvS2V5cztcbiAgdmFyIHBLZXlzID0gb3JkaW5hcnlNZXRhZGF0YUtleXMocGFyZW50LCBQKTtcbiAgcmV0dXJuIHBLZXlzLmxlbmd0aCA/IG9LZXlzLmxlbmd0aCA/IGFycmF5VW5pcXVlQnkoY29uY2F0KG9LZXlzLCBwS2V5cykpIDogcEtleXMgOiBvS2V5cztcbn07XG5cbi8vIGBSZWZsZWN0LmdldE1ldGFkYXRhS2V5c2AgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vcmJ1Y2t0b24vcmVmbGVjdC1tZXRhZGF0YVxuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgZ2V0TWV0YWRhdGFLZXlzOiBmdW5jdGlvbiBnZXRNZXRhZGF0YUtleXModGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gICAgdmFyIHRhcmdldEtleSA9IGFyZ3VtZW50cy5sZW5ndGggPCAyID8gdW5kZWZpbmVkIDogdG9NZXRhZGF0YUtleShhcmd1bWVudHNbMV0pO1xuICAgIHJldHVybiBvcmRpbmFyeU1ldGFkYXRhS2V5cyhhbk9iamVjdCh0YXJnZXQpLCB0YXJnZXRLZXkpO1xuICB9XG59KTtcbiIsIi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgXG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBSZWZsZWN0TWV0YWRhdGFNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVmbGVjdC1tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG5cbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gUmVmbGVjdE1ldGFkYXRhTW9kdWxlLmhhcztcbnZhciBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gUmVmbGVjdE1ldGFkYXRhTW9kdWxlLmdldDtcbnZhciB0b01ldGFkYXRhS2V5ID0gUmVmbGVjdE1ldGFkYXRhTW9kdWxlLnRvS2V5O1xuXG52YXIgb3JkaW5hcnlHZXRNZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgaGFzT3duID0gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gIGlmIChoYXNPd24pIHJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICByZXR1cm4gcGFyZW50ICE9PSBudWxsID8gb3JkaW5hcnlHZXRNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKSA6IHVuZGVmaW5lZDtcbn07XG5cbi8vIGBSZWZsZWN0LmdldE1ldGFkYXRhYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yYnVja3Rvbi9yZWZsZWN0LW1ldGFkYXRhXG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBnZXRNZXRhZGF0YTogZnVuY3Rpb24gZ2V0TWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICAgIHZhciB0YXJnZXRLZXkgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YWRhdGFLZXkoYXJndW1lbnRzWzJdKTtcbiAgICByZXR1cm4gb3JkaW5hcnlHZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KSwgdGFyZ2V0S2V5KTtcbiAgfVxufSk7XG4iLCIvLyBUT0RPOiBSZW1vdmUgZnJvbSBgY29yZS1qc0A0YFxudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgUmVmbGVjdE1ldGFkYXRhTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZmxlY3QtbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gUmVmbGVjdE1ldGFkYXRhTW9kdWxlLmtleXM7XG52YXIgdG9NZXRhZGF0YUtleSA9IFJlZmxlY3RNZXRhZGF0YU1vZHVsZS50b0tleTtcblxuLy8gYFJlZmxlY3QuZ2V0T3duTWV0YWRhdGFLZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yYnVja3Rvbi9yZWZsZWN0LW1ldGFkYXRhXG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBnZXRPd25NZXRhZGF0YUtleXM6IGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhS2V5cyh0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgICB2YXIgdGFyZ2V0S2V5ID0gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyB1bmRlZmluZWQgOiB0b01ldGFkYXRhS2V5KGFyZ3VtZW50c1sxXSk7XG4gICAgcmV0dXJuIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKGFuT2JqZWN0KHRhcmdldCksIHRhcmdldEtleSk7XG4gIH1cbn0pO1xuIiwiLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIFJlZmxlY3RNZXRhZGF0YU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWZsZWN0LW1ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbnZhciBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gUmVmbGVjdE1ldGFkYXRhTW9kdWxlLmdldDtcbnZhciB0b01ldGFkYXRhS2V5ID0gUmVmbGVjdE1ldGFkYXRhTW9kdWxlLnRvS2V5O1xuXG4vLyBgUmVmbGVjdC5nZXRPd25NZXRhZGF0YWAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vcmJ1Y2t0b24vcmVmbGVjdC1tZXRhZGF0YVxuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgZ2V0T3duTWV0YWRhdGE6IGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgICB2YXIgdGFyZ2V0S2V5ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFkYXRhS2V5KGFyZ3VtZW50c1syXSk7XG4gICAgcmV0dXJuIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldCksIHRhcmdldEtleSk7XG4gIH1cbn0pO1xuIiwiLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIFJlZmxlY3RNZXRhZGF0YU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWZsZWN0LW1ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcblxudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBSZWZsZWN0TWV0YWRhdGFNb2R1bGUuaGFzO1xudmFyIHRvTWV0YWRhdGFLZXkgPSBSZWZsZWN0TWV0YWRhdGFNb2R1bGUudG9LZXk7XG5cbnZhciBvcmRpbmFyeUhhc01ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgaWYgKGhhc093bikgcmV0dXJuIHRydWU7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbCA/IG9yZGluYXJ5SGFzTWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCkgOiBmYWxzZTtcbn07XG5cbi8vIGBSZWZsZWN0Lmhhc01ldGFkYXRhYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yYnVja3Rvbi9yZWZsZWN0LW1ldGFkYXRhXG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBoYXNNZXRhZGF0YTogZnVuY3Rpb24gaGFzTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICAgIHZhciB0YXJnZXRLZXkgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YWRhdGFLZXkoYXJndW1lbnRzWzJdKTtcbiAgICByZXR1cm4gb3JkaW5hcnlIYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KSwgdGFyZ2V0S2V5KTtcbiAgfVxufSk7XG4iLCIvLyBUT0RPOiBSZW1vdmUgZnJvbSBgY29yZS1qc0A0YFxudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgUmVmbGVjdE1ldGFkYXRhTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZmxlY3QtbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBSZWZsZWN0TWV0YWRhdGFNb2R1bGUuaGFzO1xudmFyIHRvTWV0YWRhdGFLZXkgPSBSZWZsZWN0TWV0YWRhdGFNb2R1bGUudG9LZXk7XG5cbi8vIGBSZWZsZWN0Lmhhc093bk1ldGFkYXRhYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yYnVja3Rvbi9yZWZsZWN0LW1ldGFkYXRhXG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBoYXNPd25NZXRhZGF0YTogZnVuY3Rpb24gaGFzT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICAgIHZhciB0YXJnZXRLZXkgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YWRhdGFLZXkoYXJndW1lbnRzWzJdKTtcbiAgICByZXR1cm4gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KSwgdGFyZ2V0S2V5KTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBSZWZsZWN0TWV0YWRhdGFNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVmbGVjdC1tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG52YXIgdG9NZXRhZGF0YUtleSA9IFJlZmxlY3RNZXRhZGF0YU1vZHVsZS50b0tleTtcbnZhciBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhID0gUmVmbGVjdE1ldGFkYXRhTW9kdWxlLnNldDtcblxuLy8gYFJlZmxlY3QubWV0YWRhdGFgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3JidWNrdG9uL3JlZmxlY3QtbWV0YWRhdGFcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIG1ldGFkYXRhOiBmdW5jdGlvbiBtZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBkZWNvcmF0b3IodGFyZ2V0LCBrZXkpIHtcbiAgICAgIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsIGFuT2JqZWN0KHRhcmdldCksIHRvTWV0YWRhdGFLZXkoa2V5KSk7XG4gICAgfTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBhZGRBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi1hZGQtYWxsJyk7XG5cbi8vIGBTZXQucHJvdG90eXBlLmFkZEFsbGAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdTZXQnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgYWRkQWxsOiBhZGRBbGxcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZGVsZXRlQWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24tZGVsZXRlLWFsbCcpO1xuXG4vLyBgU2V0LnByb3RvdHlwZS5kZWxldGVBbGxgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtY29sbGVjdGlvbi1tZXRob2RzXG4kKHsgdGFyZ2V0OiAnU2V0JywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIGRlbGV0ZUFsbDogZGVsZXRlQWxsXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xuXG4vLyBgU2V0LnByb3RvdHlwZS5kaWZmZXJlbmNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXNldC1tZXRob2RzXG4kKHsgdGFyZ2V0OiAnU2V0JywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIGRpZmZlcmVuY2U6IGZ1bmN0aW9uIGRpZmZlcmVuY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgc2V0ID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIG5ld1NldCA9IG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKHNldCwgZ2V0QnVpbHRJbignU2V0JykpKShzZXQpO1xuICAgIHZhciByZW1vdmVyID0gYUNhbGxhYmxlKG5ld1NldFsnZGVsZXRlJ10pO1xuICAgIGl0ZXJhdGUoaXRlcmFibGUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgY2FsbChyZW1vdmVyLCBuZXdTZXQsIHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gbmV3U2V0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgZ2V0U2V0SXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LXNldC1pdGVyYXRvcicpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xuXG4vLyBgU2V0LnByb3RvdHlwZS5ldmVyeWAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdTZXQnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIHNldCA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHZhciBpdGVyYXRvciA9IGdldFNldEl0ZXJhdG9yKHNldCk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICByZXR1cm4gIWl0ZXJhdGUoaXRlcmF0b3IsIGZ1bmN0aW9uICh2YWx1ZSwgc3RvcCkge1xuICAgICAgaWYgKCFib3VuZEZ1bmN0aW9uKHZhbHVlLCB2YWx1ZSwgc2V0KSkgcmV0dXJuIHN0b3AoKTtcbiAgICB9LCB7IElTX0lURVJBVE9SOiB0cnVlLCBJTlRFUlJVUFRFRDogdHJ1ZSB9KS5zdG9wcGVkO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgZ2V0U2V0SXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LXNldC1pdGVyYXRvcicpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xuXG4vLyBgU2V0LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtY29sbGVjdGlvbi1tZXRob2RzXG4kKHsgdGFyZ2V0OiAnU2V0JywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIHNldCA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHZhciBpdGVyYXRvciA9IGdldFNldEl0ZXJhdG9yKHNldCk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgbmV3U2V0ID0gbmV3IChzcGVjaWVzQ29uc3RydWN0b3Ioc2V0LCBnZXRCdWlsdEluKCdTZXQnKSkpKCk7XG4gICAgdmFyIGFkZGVyID0gYUNhbGxhYmxlKG5ld1NldC5hZGQpO1xuICAgIGl0ZXJhdGUoaXRlcmF0b3IsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKGJvdW5kRnVuY3Rpb24odmFsdWUsIHZhbHVlLCBzZXQpKSBjYWxsKGFkZGVyLCBuZXdTZXQsIHZhbHVlKTtcbiAgICB9LCB7IElTX0lURVJBVE9SOiB0cnVlIH0pO1xuICAgIHJldHVybiBuZXdTZXQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBnZXRTZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtc2V0LWl0ZXJhdG9yJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG5cbi8vIGBTZXQucHJvdG90eXBlLmZpbmRgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtY29sbGVjdGlvbi1tZXRob2RzXG4kKHsgdGFyZ2V0OiAnU2V0JywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIGZpbmQ6IGZ1bmN0aW9uIGZpbmQoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgc2V0ID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIGl0ZXJhdG9yID0gZ2V0U2V0SXRlcmF0b3Ioc2V0KTtcbiAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIHJldHVybiBpdGVyYXRlKGl0ZXJhdG9yLCBmdW5jdGlvbiAodmFsdWUsIHN0b3ApIHtcbiAgICAgIGlmIChib3VuZEZ1bmN0aW9uKHZhbHVlLCB2YWx1ZSwgc2V0KSkgcmV0dXJuIHN0b3AodmFsdWUpO1xuICAgIH0sIHsgSVNfSVRFUkFUT1I6IHRydWUsIElOVEVSUlVQVEVEOiB0cnVlIH0pLnJlc3VsdDtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24tZnJvbScpO1xuXG4vLyBgU2V0LmZyb21gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtc2V0LmZyb21cbiQoeyB0YXJnZXQ6ICdTZXQnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBmcm9tOiBmcm9tXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xuXG4vLyBgU2V0LnByb3RvdHlwZS5pbnRlcnNlY3Rpb25gIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc2V0LW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdTZXQnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgaW50ZXJzZWN0aW9uOiBmdW5jdGlvbiBpbnRlcnNlY3Rpb24oaXRlcmFibGUpIHtcbiAgICB2YXIgc2V0ID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIG5ld1NldCA9IG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKHNldCwgZ2V0QnVpbHRJbignU2V0JykpKSgpO1xuICAgIHZhciBoYXNDaGVjayA9IGFDYWxsYWJsZShzZXQuaGFzKTtcbiAgICB2YXIgYWRkZXIgPSBhQ2FsbGFibGUobmV3U2V0LmFkZCk7XG4gICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAoY2FsbChoYXNDaGVjaywgc2V0LCB2YWx1ZSkpIGNhbGwoYWRkZXIsIG5ld1NldCwgdmFsdWUpO1xuICAgIH0pO1xuICAgIHJldHVybiBuZXdTZXQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxuLy8gYFNldC5wcm90b3R5cGUuaXNEaXNqb2ludEZyb21gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXQtbWV0aG9kcy8jU2V0LnByb3RvdHlwZS5pc0Rpc2pvaW50RnJvbVxuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBpc0Rpc2pvaW50RnJvbTogZnVuY3Rpb24gaXNEaXNqb2ludEZyb20oaXRlcmFibGUpIHtcbiAgICB2YXIgc2V0ID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIGhhc0NoZWNrID0gYUNhbGxhYmxlKHNldC5oYXMpO1xuICAgIHJldHVybiAhaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHZhbHVlLCBzdG9wKSB7XG4gICAgICBpZiAoY2FsbChoYXNDaGVjaywgc2V0LCB2YWx1ZSkgPT09IHRydWUpIHJldHVybiBzdG9wKCk7XG4gICAgfSwgeyBJTlRFUlJVUFRFRDogdHJ1ZSB9KS5zdG9wcGVkO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZ2V0SXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG5cbi8vIGBTZXQucHJvdG90eXBlLmlzU3Vic2V0T2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXQtbWV0aG9kcy8jU2V0LnByb3RvdHlwZS5pc1N1YnNldE9mXG4kKHsgdGFyZ2V0OiAnU2V0JywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIGlzU3Vic2V0T2Y6IGZ1bmN0aW9uIGlzU3Vic2V0T2YoaXRlcmFibGUpIHtcbiAgICB2YXIgaXRlcmF0b3IgPSBnZXRJdGVyYXRvcih0aGlzKTtcbiAgICB2YXIgb3RoZXJTZXQgPSBhbk9iamVjdChpdGVyYWJsZSk7XG4gICAgdmFyIGhhc0NoZWNrID0gb3RoZXJTZXQuaGFzO1xuICAgIGlmICghaXNDYWxsYWJsZShoYXNDaGVjaykpIHtcbiAgICAgIG90aGVyU2V0ID0gbmV3IChnZXRCdWlsdEluKCdTZXQnKSkoaXRlcmFibGUpO1xuICAgICAgaGFzQ2hlY2sgPSBhQ2FsbGFibGUob3RoZXJTZXQuaGFzKTtcbiAgICB9XG4gICAgcmV0dXJuICFpdGVyYXRlKGl0ZXJhdG9yLCBmdW5jdGlvbiAodmFsdWUsIHN0b3ApIHtcbiAgICAgIGlmIChjYWxsKGhhc0NoZWNrLCBvdGhlclNldCwgdmFsdWUpID09PSBmYWxzZSkgcmV0dXJuIHN0b3AoKTtcbiAgICB9LCB7IElTX0lURVJBVE9SOiB0cnVlLCBJTlRFUlJVUFRFRDogdHJ1ZSB9KS5zdG9wcGVkO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG5cbi8vIGBTZXQucHJvdG90eXBlLmlzU3VwZXJzZXRPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldC1tZXRob2RzLyNTZXQucHJvdG90eXBlLmlzU3VwZXJzZXRPZlxuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBpc1N1cGVyc2V0T2Y6IGZ1bmN0aW9uIGlzU3VwZXJzZXRPZihpdGVyYWJsZSkge1xuICAgIHZhciBzZXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgICB2YXIgaGFzQ2hlY2sgPSBhQ2FsbGFibGUoc2V0Lmhhcyk7XG4gICAgcmV0dXJuICFpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAodmFsdWUsIHN0b3ApIHtcbiAgICAgIGlmIChjYWxsKGhhc0NoZWNrLCBzZXQsIHZhbHVlKSA9PT0gZmFsc2UpIHJldHVybiBzdG9wKCk7XG4gICAgfSwgeyBJTlRFUlJVUFRFRDogdHJ1ZSB9KS5zdG9wcGVkO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGdldFNldEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1zZXQtaXRlcmF0b3InKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxudmFyIGFycmF5Sm9pbiA9IHVuY3VycnlUaGlzKFtdLmpvaW4pO1xudmFyIHB1c2ggPSBbXS5wdXNoO1xuXG4vLyBgU2V0LnByb3RvdHlwZS5qb2luYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikge1xuICAgIHZhciBzZXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgICB2YXIgaXRlcmF0b3IgPSBnZXRTZXRJdGVyYXRvcihzZXQpO1xuICAgIHZhciBzZXAgPSBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCA/ICcsJyA6IHRvU3RyaW5nKHNlcGFyYXRvcik7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIGl0ZXJhdGUoaXRlcmF0b3IsIHB1c2gsIHsgdGhhdDogcmVzdWx0LCBJU19JVEVSQVRPUjogdHJ1ZSB9KTtcbiAgICByZXR1cm4gYXJyYXlKb2luKHJlc3VsdCwgc2VwKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIGdldFNldEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1zZXQtaXRlcmF0b3InKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxuLy8gYFNldC5wcm90b3R5cGUubWFwYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHZhciBzZXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgICB2YXIgaXRlcmF0b3IgPSBnZXRTZXRJdGVyYXRvcihzZXQpO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyIG5ld1NldCA9IG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKHNldCwgZ2V0QnVpbHRJbignU2V0JykpKSgpO1xuICAgIHZhciBhZGRlciA9IGFDYWxsYWJsZShuZXdTZXQuYWRkKTtcbiAgICBpdGVyYXRlKGl0ZXJhdG9yLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGNhbGwoYWRkZXIsIG5ld1NldCwgYm91bmRGdW5jdGlvbih2YWx1ZSwgdmFsdWUsIHNldCkpO1xuICAgIH0sIHsgSVNfSVRFUkFUT1I6IHRydWUgfSk7XG4gICAgcmV0dXJuIG5ld1NldDtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uLW9mJyk7XG5cbi8vIGBTZXQub2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtc2V0Lm9mXG4kKHsgdGFyZ2V0OiAnU2V0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgb2Y6IG9mXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZ2V0U2V0SXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LXNldC1pdGVyYXRvcicpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuLy8gYFNldC5wcm90b3R5cGUucmVkdWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgdmFyIHNldCA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHZhciBpdGVyYXRvciA9IGdldFNldEl0ZXJhdG9yKHNldCk7XG4gICAgdmFyIG5vSW5pdGlhbCA9IGFyZ3VtZW50cy5sZW5ndGggPCAyO1xuICAgIHZhciBhY2N1bXVsYXRvciA9IG5vSW5pdGlhbCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXTtcbiAgICBhQ2FsbGFibGUoY2FsbGJhY2tmbik7XG4gICAgaXRlcmF0ZShpdGVyYXRvciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAobm9Jbml0aWFsKSB7XG4gICAgICAgIG5vSW5pdGlhbCA9IGZhbHNlO1xuICAgICAgICBhY2N1bXVsYXRvciA9IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWNjdW11bGF0b3IgPSBjYWxsYmFja2ZuKGFjY3VtdWxhdG9yLCB2YWx1ZSwgdmFsdWUsIHNldCk7XG4gICAgICB9XG4gICAgfSwgeyBJU19JVEVSQVRPUjogdHJ1ZSB9KTtcbiAgICBpZiAobm9Jbml0aWFsKSB0aHJvdyAkVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgc2V0IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGdldFNldEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1zZXQtaXRlcmF0b3InKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxuLy8gYFNldC5wcm90b3R5cGUuc29tZWAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdTZXQnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHZhciBzZXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgICB2YXIgaXRlcmF0b3IgPSBnZXRTZXRJdGVyYXRvcihzZXQpO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgcmV0dXJuIGl0ZXJhdGUoaXRlcmF0b3IsIGZ1bmN0aW9uICh2YWx1ZSwgc3RvcCkge1xuICAgICAgaWYgKGJvdW5kRnVuY3Rpb24odmFsdWUsIHZhbHVlLCBzZXQpKSByZXR1cm4gc3RvcCgpO1xuICAgIH0sIHsgSVNfSVRFUkFUT1I6IHRydWUsIElOVEVSUlVQVEVEOiB0cnVlIH0pLnN0b3BwZWQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG5cbi8vIGBTZXQucHJvdG90eXBlLnN5bW1ldHJpY0RpZmZlcmVuY2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc2V0LW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdTZXQnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgc3ltbWV0cmljRGlmZmVyZW5jZTogZnVuY3Rpb24gc3ltbWV0cmljRGlmZmVyZW5jZShpdGVyYWJsZSkge1xuICAgIHZhciBzZXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgICB2YXIgbmV3U2V0ID0gbmV3IChzcGVjaWVzQ29uc3RydWN0b3Ioc2V0LCBnZXRCdWlsdEluKCdTZXQnKSkpKHNldCk7XG4gICAgdmFyIHJlbW92ZXIgPSBhQ2FsbGFibGUobmV3U2V0WydkZWxldGUnXSk7XG4gICAgdmFyIGFkZGVyID0gYUNhbGxhYmxlKG5ld1NldC5hZGQpO1xuICAgIGl0ZXJhdGUoaXRlcmFibGUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgY2FsbChyZW1vdmVyLCBuZXdTZXQsIHZhbHVlKSB8fCBjYWxsKGFkZGVyLCBuZXdTZXQsIHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gbmV3U2V0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xuXG4vLyBgU2V0LnByb3RvdHlwZS51bmlvbmAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zZXQtbWV0aG9kc1xuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICB1bmlvbjogZnVuY3Rpb24gdW5pb24oaXRlcmFibGUpIHtcbiAgICB2YXIgc2V0ID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIG5ld1NldCA9IG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKHNldCwgZ2V0QnVpbHRJbignU2V0JykpKShzZXQpO1xuICAgIGl0ZXJhdGUoaXRlcmFibGUsIGFDYWxsYWJsZShuZXdTZXQuYWRkKSwgeyB0aGF0OiBuZXdTZXQgfSk7XG4gICAgcmV0dXJuIG5ld1NldDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBUT0RPOiBSZW1vdmUgZnJvbSBgY29yZS1qc0A0YFxudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY2hhckF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUnKS5jaGFyQXQ7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBhdDogZnVuY3Rpb24gYXQoaW5kZXgpIHtcbiAgICB2YXIgUyA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgIHZhciBsZW4gPSBTLmxlbmd0aDtcbiAgICB2YXIgcmVsYXRpdmVJbmRleCA9IHRvSW50ZWdlck9ySW5maW5pdHkoaW5kZXgpO1xuICAgIHZhciBrID0gcmVsYXRpdmVJbmRleCA+PSAwID8gcmVsYXRpdmVJbmRleCA6IGxlbiArIHJlbGF0aXZlSW5kZXg7XG4gICAgcmV0dXJuIChrIDwgMCB8fCBrID49IGxlbikgPyB1bmRlZmluZWQgOiBjaGFyQXQoUywgayk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1jcmVhdGUtY29uc3RydWN0b3InKTtcbnZhciBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyLXJlc3VsdC1vYmplY3QnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBTdHJpbmdNdWx0aWJ5dGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZScpO1xuXG52YXIgY29kZUF0ID0gU3RyaW5nTXVsdGlieXRlTW9kdWxlLmNvZGVBdDtcbnZhciBjaGFyQXQgPSBTdHJpbmdNdWx0aWJ5dGVNb2R1bGUuY2hhckF0O1xudmFyIFNUUklOR19JVEVSQVRPUiA9ICdTdHJpbmcgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoU1RSSU5HX0lURVJBVE9SKTtcblxuLy8gVE9ETzogdW5pZnkgd2l0aCBTdHJpbmcjQEBpdGVyYXRvclxudmFyICRTdHJpbmdJdGVyYXRvciA9IGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoZnVuY3Rpb24gU3RyaW5nSXRlcmF0b3Ioc3RyaW5nKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IFNUUklOR19JVEVSQVRPUixcbiAgICBzdHJpbmc6IHN0cmluZyxcbiAgICBpbmRleDogMFxuICB9KTtcbn0sICdTdHJpbmcnLCBmdW5jdGlvbiBuZXh0KCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgc3RyaW5nID0gc3RhdGUuc3RyaW5nO1xuICB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleDtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gc3RyaW5nLmxlbmd0aCkgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QodW5kZWZpbmVkLCB0cnVlKTtcbiAgcG9pbnQgPSBjaGFyQXQoc3RyaW5nLCBpbmRleCk7XG4gIHN0YXRlLmluZGV4ICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QoeyBjb2RlUG9pbnQ6IGNvZGVBdChwb2ludCwgMCksIHBvc2l0aW9uOiBpbmRleCB9LCBmYWxzZSk7XG59KTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50c2AgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcHJvdG90eXBlLWNvZGVwb2ludHNcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgY29kZVBvaW50czogZnVuY3Rpb24gY29kZVBvaW50cygpIHtcbiAgICByZXR1cm4gbmV3ICRTdHJpbmdJdGVyYXRvcih0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpKSk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKEFycmF5UHJvdG90eXBlLnB1c2gpO1xudmFyIGpvaW4gPSB1bmN1cnJ5VGhpcyhBcnJheVByb3RvdHlwZS5qb2luKTtcblxuLy8gYFN0cmluZy5jb29rZWRgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLWNvb2tlZFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHN0YXQ6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIGNvb2tlZDogZnVuY3Rpb24gY29va2VkKHRlbXBsYXRlIC8qICwgLi4uc3Vic3RpdHV0aW9ucyAqLykge1xuICAgIHZhciBjb29rZWRUZW1wbGF0ZSA9IHRvSW5kZXhlZE9iamVjdCh0ZW1wbGF0ZSk7XG4gICAgdmFyIGxpdGVyYWxTZWdtZW50cyA9IGxlbmd0aE9mQXJyYXlMaWtlKGNvb2tlZFRlbXBsYXRlKTtcbiAgICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgZWxlbWVudHMgPSBbXTtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGxpdGVyYWxTZWdtZW50cyA+IGkpIHtcbiAgICAgIHZhciBuZXh0VmFsID0gY29va2VkVGVtcGxhdGVbaSsrXTtcbiAgICAgIGlmIChuZXh0VmFsID09PSB1bmRlZmluZWQpIHRocm93ICRUeXBlRXJyb3IoJ0luY29ycmVjdCB0ZW1wbGF0ZScpO1xuICAgICAgcHVzaChlbGVtZW50cywgdG9TdHJpbmcobmV4dFZhbCkpO1xuICAgICAgaWYgKGkgPT09IGxpdGVyYWxTZWdtZW50cykgcmV0dXJuIGpvaW4oZWxlbWVudHMsICcnKTtcbiAgICAgIGlmIChpIDwgYXJndW1lbnRzTGVuZ3RoKSBwdXNoKGVsZW1lbnRzLCB0b1N0cmluZyhhcmd1bWVudHNbaV0pKTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLm1hdGNoLWFsbCcpO1xuIiwiLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UtYWxsJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLWRlZmluZScpO1xuXG4vLyBgU3ltYm9sLmFzeW5jRGlzcG9zZWAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXVzaW5nLXN0YXRlbWVudFxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdhc3luY0Rpc3Bvc2UnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtZGVmaW5lJyk7XG5cbi8vIGBTeW1ib2wuZGlzcG9zZWAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXVzaW5nLXN0YXRlbWVudFxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdkaXNwb3NlJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLWRlZmluZScpO1xuXG4vLyBgU3ltYm9sLm1hdGNoZXJgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wYXR0ZXJuLW1hdGNoaW5nXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ21hdGNoZXInKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtZGVmaW5lJyk7XG5cbi8vIGBTeW1ib2wubWV0YWRhdGFLZXlgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1kZWNvcmF0b3ItbWV0YWRhdGFcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnbWV0YWRhdGFLZXknKTtcbiIsIi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgXG52YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLWRlZmluZScpO1xuXG4vLyBgU3ltYm9sLm1ldGFkYXRhYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZGVjb3JhdG9yc1xuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdtZXRhZGF0YScpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC1kZWZpbmUnKTtcblxuLy8gYFN5bWJvbC5vYnNlcnZhYmxlYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JzZXJ2YWJsZVxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdvYnNlcnZhYmxlJyk7XG4iLCIvLyBUT0RPOiByZW1vdmUgZnJvbSBgY29yZS1qc0A0YFxudmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC1kZWZpbmUnKTtcblxuLy8gYFN5bWJvbC5wYXR0ZXJuTWF0Y2hgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wYXR0ZXJuLW1hdGNoaW5nXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3BhdHRlcm5NYXRjaCcpO1xuIiwiLy8gVE9ETzogcmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbnZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtZGVmaW5lJyk7XG5cbmRlZmluZVdlbGxLbm93blN5bWJvbCgncmVwbGFjZUFsbCcpO1xuIiwiLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuYXQnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgXG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGZpbHRlclJlamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5maWx0ZXJSZWplY3Q7XG52YXIgZnJvbVNwZWNpZXNBbmRMaXN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWZyb20tc3BlY2llcy1hbmQtbGlzdCcpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmZpbHRlck91dGAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1hcnJheS1maWx0ZXJpbmdcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2ZpbHRlck91dCcsIGZ1bmN0aW9uIGZpbHRlck91dChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICB2YXIgbGlzdCA9ICRmaWx0ZXJSZWplY3QoYVR5cGVkQXJyYXkodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgcmV0dXJuIGZyb21TcGVjaWVzQW5kTGlzdCh0aGlzLCBsaXN0KTtcbn0sIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRmaWx0ZXJSZWplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmlsdGVyUmVqZWN0O1xudmFyIGZyb21TcGVjaWVzQW5kTGlzdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1mcm9tLXNwZWNpZXMtYW5kLWxpc3QnKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5maWx0ZXJSZWplY3RgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtYXJyYXktZmlsdGVyaW5nXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdmaWx0ZXJSZWplY3QnLCBmdW5jdGlvbiBmaWx0ZXJSZWplY3QoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgdmFyIGxpc3QgPSAkZmlsdGVyUmVqZWN0KGFUeXBlZEFycmF5KHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIHJldHVybiBmcm9tU3BlY2llc0FuZExpc3QodGhpcywgbGlzdCk7XG59LCB0cnVlKTtcbiIsIi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgXG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbmQtbGFzdC1pbmRleCcpO1xuIiwiLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmluZC1sYXN0Jyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBUT0RPOiBSZW1vdmUgZnJvbSBgY29yZS1qc0A0YFxudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgYUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY29uc3RydWN0b3InKTtcbnZhciBhcnJheUZyb21Bc3luYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mcm9tLWFzeW5jJyk7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgYXJyYXlGcm9tQ29uc3RydWN0b3JBbmRMaXN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZyb20tY29uc3RydWN0b3ItYW5kLWxpc3QnKTtcblxudmFyIGFUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5Q29uc3RydWN0b3I7XG52YXIgZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5mcm9tQXN5bmNgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtYXJyYXktZnJvbS1hc3luY1xuZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZCgnZnJvbUFzeW5jJywgZnVuY3Rpb24gZnJvbUFzeW5jKGFzeW5jSXRlbXMgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICB2YXIgQyA9IHRoaXM7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgbWFwZm4gPSBhcmd1bWVudHNMZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICB2YXIgdGhpc0FyZyA9IGFyZ3VtZW50c0xlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHJldHVybiBuZXcgKGdldEJ1aWx0SW4oJ1Byb21pc2UnKSkoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICBhQ29uc3RydWN0b3IoQyk7XG4gICAgcmVzb2x2ZShhcnJheUZyb21Bc3luYyhhc3luY0l0ZW1zLCBtYXBmbiwgdGhpc0FyZykpO1xuICB9KS50aGVuKGZ1bmN0aW9uIChsaXN0KSB7XG4gICAgcmV0dXJuIGFycmF5RnJvbUNvbnN0cnVjdG9yQW5kTGlzdChhVHlwZWRBcnJheUNvbnN0cnVjdG9yKEMpLCBsaXN0KTtcbiAgfSk7XG59LCB0cnVlKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgXG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGdyb3VwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWdyb3VwJyk7XG52YXIgdHlwZWRBcnJheVNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuZ3JvdXBCeWAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1hcnJheS1ncm91cGluZ1xuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnZ3JvdXBCeScsIGZ1bmN0aW9uIGdyb3VwQnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgdmFyIHRoaXNBcmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgcmV0dXJuICRncm91cChhVHlwZWRBcnJheSh0aGlzKSwgY2FsbGJhY2tmbiwgdGhpc0FyZywgdHlwZWRBcnJheVNwZWNpZXNDb25zdHJ1Y3Rvcik7XG59LCB0cnVlKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhcnJheVRvUmV2ZXJzZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktdG8tcmV2ZXJzZWQnKTtcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xudmFyIGdldFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IEFycmF5QnVmZmVyVmlld0NvcmUuZ2V0VHlwZWRBcnJheUNvbnN0cnVjdG9yO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS50b1JldmVyc2VkYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9wcm9wb3NhbC1jaGFuZ2UtYXJyYXktYnktY29weS8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUudG9SZXZlcnNlZFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgndG9SZXZlcnNlZCcsIGZ1bmN0aW9uIHRvUmV2ZXJzZWQoKSB7XG4gIHJldHVybiBhcnJheVRvUmV2ZXJzZWQoYVR5cGVkQXJyYXkodGhpcyksIGdldFR5cGVkQXJyYXlDb25zdHJ1Y3Rvcih0aGlzKSk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGFycmF5RnJvbUNvbnN0cnVjdG9yQW5kTGlzdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mcm9tLWNvbnN0cnVjdG9yLWFuZC1saXN0Jyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZ2V0VHlwZWRBcnJheUNvbnN0cnVjdG9yID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5nZXRUeXBlZEFycmF5Q29uc3RydWN0b3I7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcbnZhciBzb3J0ID0gdW5jdXJyeVRoaXMoQXJyYXlCdWZmZXJWaWV3Q29yZS5UeXBlZEFycmF5UHJvdG90eXBlLnNvcnQpO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS50b1NvcnRlZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvcHJvcG9zYWwtY2hhbmdlLWFycmF5LWJ5LWNvcHkvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnRvU29ydGVkXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCd0b1NvcnRlZCcsIGZ1bmN0aW9uIHRvU29ydGVkKGNvbXBhcmVGbikge1xuICBpZiAoY29tcGFyZUZuICE9PSB1bmRlZmluZWQpIGFDYWxsYWJsZShjb21wYXJlRm4pO1xuICB2YXIgTyA9IGFUeXBlZEFycmF5KHRoaXMpO1xuICB2YXIgQSA9IGFycmF5RnJvbUNvbnN0cnVjdG9yQW5kTGlzdChnZXRUeXBlZEFycmF5Q29uc3RydWN0b3IoTyksIE8pO1xuICByZXR1cm4gc29ydChBLCBjb21wYXJlRm4pO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBUT0RPOiBSZW1vdmUgZnJvbSBgY29yZS1qc0A0YFxudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgaXNCaWdJbnRBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1iaWctaW50LWFycmF5Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9CaWdJbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYmlnLWludCcpO1xudmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZ2V0VHlwZWRBcnJheUNvbnN0cnVjdG9yID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5nZXRUeXBlZEFycmF5Q29uc3RydWN0b3I7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gc29tZSBlYXJseSBpbXBsZW1lbnRhdGlvbnMsIGxpa2UgV2ViS2l0LCBkb2VzIG5vdCBmb2xsb3cgdGhlIGZpbmFsIHNlbWFudGljXG52YXIgUFJPUEVSX09SREVSID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tdHlwZWQtYXJyYXlzIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHZhciBhcnJheSA9IG5ldyBJbnQ4QXJyYXkoWzFdKTtcblxuICB2YXIgc3BsaWNlZCA9IGFycmF5LnRvU3BsaWNlZCgxLCAwLCB7XG4gICAgdmFsdWVPZjogZnVuY3Rpb24gKCkge1xuICAgICAgYXJyYXlbMF0gPSAyO1xuICAgICAgcmV0dXJuIDM7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gc3BsaWNlZFswXSAhPT0gMiB8fCBzcGxpY2VkWzFdICE9PSAzO1xufSk7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnRvU3BsaWNlZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvcHJvcG9zYWwtY2hhbmdlLWFycmF5LWJ5LWNvcHkvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnRvU3BsaWNlZFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgndG9TcGxpY2VkJywgZnVuY3Rpb24gdG9TcGxpY2VkKHN0YXJ0LCBkZWxldGVDb3VudCAvKiAsIC4uLml0ZW1zICovKSB7XG4gIHZhciBPID0gYVR5cGVkQXJyYXkodGhpcyk7XG4gIHZhciBDID0gZ2V0VHlwZWRBcnJheUNvbnN0cnVjdG9yKE8pO1xuICB2YXIgbGVuID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gIHZhciBhY3R1YWxTdGFydCA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBrID0gMDtcbiAgdmFyIGluc2VydENvdW50LCBhY3R1YWxEZWxldGVDb3VudCwgdGhpc0lzQmlnSW50QXJyYXksIGNvbnZlcnRlZEl0ZW1zLCB2YWx1ZSwgbmV3TGVuLCBBO1xuICBpZiAoYXJndW1lbnRzTGVuZ3RoID09PSAwKSB7XG4gICAgaW5zZXJ0Q291bnQgPSBhY3R1YWxEZWxldGVDb3VudCA9IDA7XG4gIH0gZWxzZSBpZiAoYXJndW1lbnRzTGVuZ3RoID09PSAxKSB7XG4gICAgaW5zZXJ0Q291bnQgPSAwO1xuICAgIGFjdHVhbERlbGV0ZUNvdW50ID0gbGVuIC0gYWN0dWFsU3RhcnQ7XG4gIH0gZWxzZSB7XG4gICAgYWN0dWFsRGVsZXRlQ291bnQgPSBtaW4obWF4KHRvSW50ZWdlck9ySW5maW5pdHkoZGVsZXRlQ291bnQpLCAwKSwgbGVuIC0gYWN0dWFsU3RhcnQpO1xuICAgIGluc2VydENvdW50ID0gYXJndW1lbnRzTGVuZ3RoIC0gMjtcbiAgICBpZiAoaW5zZXJ0Q291bnQpIHtcbiAgICAgIGNvbnZlcnRlZEl0ZW1zID0gbmV3IEMoaW5zZXJ0Q291bnQpO1xuICAgICAgdGhpc0lzQmlnSW50QXJyYXkgPSBpc0JpZ0ludEFycmF5KGNvbnZlcnRlZEl0ZW1zKTtcbiAgICAgIGZvciAodmFyIGkgPSAyOyBpIDwgYXJndW1lbnRzTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFsdWUgPSBhcmd1bWVudHNbaV07XG4gICAgICAgIC8vIEZGMzAtIHR5cGVkIGFycmF5cyBkb2Vzbid0IHByb3Blcmx5IGNvbnZlcnQgb2JqZWN0cyB0byB0eXBlZCBhcnJheSB2YWx1ZXNcbiAgICAgICAgY29udmVydGVkSXRlbXNbaSAtIDJdID0gdGhpc0lzQmlnSW50QXJyYXkgPyB0b0JpZ0ludCh2YWx1ZSkgOiArdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIG5ld0xlbiA9IGxlbiArIGluc2VydENvdW50IC0gYWN0dWFsRGVsZXRlQ291bnQ7XG4gIEEgPSBuZXcgQyhuZXdMZW4pO1xuXG4gIGZvciAoOyBrIDwgYWN0dWFsU3RhcnQ7IGsrKykgQVtrXSA9IE9ba107XG4gIGZvciAoOyBrIDwgYWN0dWFsU3RhcnQgKyBpbnNlcnRDb3VudDsgaysrKSBBW2tdID0gY29udmVydGVkSXRlbXNbayAtIGFjdHVhbFN0YXJ0XTtcbiAgZm9yICg7IGsgPCBuZXdMZW47IGsrKykgQVtrXSA9IE9bayArIGFjdHVhbERlbGV0ZUNvdW50IC0gaW5zZXJ0Q291bnRdO1xuXG4gIHJldHVybiBBO1xufSwgIVBST1BFUl9PUkRFUik7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGFycmF5VW5pcXVlQnkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktdW5pcXVlLWJ5Jyk7XG52YXIgZnJvbVNwZWNpZXNBbmRMaXN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWZyb20tc3BlY2llcy1hbmQtbGlzdCcpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG52YXIgYXJyYXlVbmlxdWVCeSA9IHVuY3VycnlUaGlzKCRhcnJheVVuaXF1ZUJ5KTtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUudW5pcXVlQnlgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtYXJyYXktdW5pcXVlXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCd1bmlxdWVCeScsIGZ1bmN0aW9uIHVuaXF1ZUJ5KHJlc29sdmVyKSB7XG4gIHJldHVybiBmcm9tU3BlY2llc0FuZExpc3QodGhpcywgYXJyYXlVbmlxdWVCeShhVHlwZWRBcnJheSh0aGlzKSwgcmVzb2x2ZXIpKTtcbn0sIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFycmF5V2l0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS13aXRoJyk7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgaXNCaWdJbnRBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1iaWctaW50LWFycmF5Jyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgdG9CaWdJbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYmlnLWludCcpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGdldFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IEFycmF5QnVmZmVyVmlld0NvcmUuZ2V0VHlwZWRBcnJheUNvbnN0cnVjdG9yO1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbnZhciBQUk9QRVJfT1JERVIgPSAhIWZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbCwgZXMteC9uby10eXBlZC1hcnJheXMgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgICBuZXcgSW50OEFycmF5KDEpWyd3aXRoJ10oMiwgeyB2YWx1ZU9mOiBmdW5jdGlvbiAoKSB7IHRocm93IDg7IH0gfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgLy8gc29tZSBlYXJseSBpbXBsZW1lbnRhdGlvbnMsIGxpa2UgV2ViS2l0LCBkb2VzIG5vdCBmb2xsb3cgdGhlIGZpbmFsIHNlbWFudGljXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtY2hhbmdlLWFycmF5LWJ5LWNvcHkvcHVsbC84NlxuICAgIHJldHVybiBlcnJvciA9PT0gODtcbiAgfVxufSgpO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS53aXRoYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9wcm9wb3NhbC1jaGFuZ2UtYXJyYXktYnktY29weS8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUud2l0aFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnd2l0aCcsIHsgJ3dpdGgnOiBmdW5jdGlvbiAoaW5kZXgsIHZhbHVlKSB7XG4gIHZhciBPID0gYVR5cGVkQXJyYXkodGhpcyk7XG4gIHZhciByZWxhdGl2ZUluZGV4ID0gdG9JbnRlZ2VyT3JJbmZpbml0eShpbmRleCk7XG4gIHZhciBhY3R1YWxWYWx1ZSA9IGlzQmlnSW50QXJyYXkoTykgPyB0b0JpZ0ludCh2YWx1ZSkgOiArdmFsdWU7XG4gIHJldHVybiBhcnJheVdpdGgoTywgZ2V0VHlwZWRBcnJheUNvbnN0cnVjdG9yKE8pLCByZWxhdGl2ZUluZGV4LCBhY3R1YWxWYWx1ZSk7XG59IH1bJ3dpdGgnXSwgIVBST1BFUl9PUkRFUik7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBkZWxldGVBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi1kZWxldGUtYWxsJyk7XG5cbi8vIGBXZWFrTWFwLnByb3RvdHlwZS5kZWxldGVBbGxgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtY29sbGVjdGlvbi1tZXRob2RzXG4kKHsgdGFyZ2V0OiAnV2Vha01hcCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBkZWxldGVBbGw6IGRlbGV0ZUFsbFxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBlbXBsYWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hcC1lbXBsYWNlJyk7XG5cbi8vIGBXZWFrTWFwLnByb3RvdHlwZS5lbXBsYWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXVwc2VydFxuJCh7IHRhcmdldDogJ1dlYWtNYXAnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgZW1wbGFjZTogZW1wbGFjZVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24tZnJvbScpO1xuXG4vLyBgV2Vha01hcC5mcm9tYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWttYXAuZnJvbVxuJCh7IHRhcmdldDogJ1dlYWtNYXAnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBmcm9tOiBmcm9tXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIG9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24tb2YnKTtcblxuLy8gYFdlYWtNYXAub2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha21hcC5vZlxuJCh7IHRhcmdldDogJ1dlYWtNYXAnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBvZjogb2Zcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gVE9ETzogcmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVwc2VydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXAtdXBzZXJ0Jyk7XG5cbi8vIGBXZWFrTWFwLnByb3RvdHlwZS51cHNlcnRgIG1ldGhvZCAocmVwbGFjZWQgYnkgYFdlYWtNYXAucHJvdG90eXBlLmVtcGxhY2VgKVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtdXBzZXJ0XG4kKHsgdGFyZ2V0OiAnV2Vha01hcCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICB1cHNlcnQ6IHVwc2VydFxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBhZGRBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi1hZGQtYWxsJyk7XG5cbi8vIGBXZWFrU2V0LnByb3RvdHlwZS5hZGRBbGxgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtY29sbGVjdGlvbi1tZXRob2RzXG4kKHsgdGFyZ2V0OiAnV2Vha1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBhZGRBbGw6IGFkZEFsbFxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBkZWxldGVBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi1kZWxldGUtYWxsJyk7XG5cbi8vIGBXZWFrU2V0LnByb3RvdHlwZS5kZWxldGVBbGxgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtY29sbGVjdGlvbi1tZXRob2RzXG4kKHsgdGFyZ2V0OiAnV2Vha1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBkZWxldGVBbGw6IGRlbGV0ZUFsbFxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24tZnJvbScpO1xuXG4vLyBgV2Vha1NldC5mcm9tYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWtzZXQuZnJvbVxuJCh7IHRhcmdldDogJ1dlYWtTZXQnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBmcm9tOiBmcm9tXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIG9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24tb2YnKTtcblxuLy8gYFdlYWtTZXQub2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha3NldC5vZlxuJCh7IHRhcmdldDogJ1dlYWtTZXQnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBvZjogb2Zcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdmFsaWRhdGUtYXJndW1lbnRzLWxlbmd0aCcpO1xudmFyIGN0b2kgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYmFzZTY0LW1hcCcpLmN0b2k7XG5cbnZhciBkaXNhbGxvd2VkID0gL1teXFxkKy9hLXpdL2k7XG52YXIgd2hpdGVzcGFjZXMgPSAvW1xcdFxcblxcZlxcciBdKy9nO1xudmFyIGZpbmFsRXEgPSAvWz1dKyQvO1xuXG52YXIgJGF0b2IgPSBnZXRCdWlsdEluKCdhdG9iJyk7XG52YXIgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoZGlzYWxsb3dlZC5leGVjKTtcblxudmFyIE5PX1NQQUNFU19JR05PUkUgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkYXRvYignICcpICE9PSAnJztcbn0pO1xuXG52YXIgTk9fRU5DT0RJTkdfQ0hFQ0sgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAkYXRvYignYScpO1xufSk7XG5cbnZhciBOT19BUkdfUkVDRUlWSU5HX0NIRUNLID0gIU5PX1NQQUNFU19JR05PUkUgJiYgIU5PX0VOQ09ESU5HX0NIRUNLICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICRhdG9iKCk7XG59KTtcblxudmFyIFdST05HX0FSSVRZID0gIU5PX1NQQUNFU19JR05PUkUgJiYgIU5PX0VOQ09ESU5HX0NIRUNLICYmICRhdG9iLmxlbmd0aCAhPT0gMTtcblxuLy8gYGF0b2JgIG1ldGhvZFxuLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvd2ViYXBwYXBpcy5odG1sI2RvbS1hdG9iXG4kKHsgZ2xvYmFsOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCBmb3JjZWQ6IE5PX1NQQUNFU19JR05PUkUgfHwgTk9fRU5DT0RJTkdfQ0hFQ0sgfHwgTk9fQVJHX1JFQ0VJVklOR19DSEVDSyB8fCBXUk9OR19BUklUWSB9LCB7XG4gIGF0b2I6IGZ1bmN0aW9uIGF0b2IoZGF0YSkge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIGlmIChOT19BUkdfUkVDRUlWSU5HX0NIRUNLIHx8IFdST05HX0FSSVRZKSByZXR1cm4gJGF0b2IoZGF0YSk7XG4gICAgdmFyIHN0cmluZyA9IHJlcGxhY2UodG9TdHJpbmcoZGF0YSksIHdoaXRlc3BhY2VzLCAnJyk7XG4gICAgdmFyIG91dHB1dCA9ICcnO1xuICAgIHZhciBwb3NpdGlvbiA9IDA7XG4gICAgdmFyIGJjID0gMDtcbiAgICB2YXIgY2hyLCBicztcbiAgICBpZiAoc3RyaW5nLmxlbmd0aCAlIDQgPT0gMCkge1xuICAgICAgc3RyaW5nID0gcmVwbGFjZShzdHJpbmcsIGZpbmFsRXEsICcnKTtcbiAgICB9XG4gICAgaWYgKHN0cmluZy5sZW5ndGggJSA0ID09IDEgfHwgZXhlYyhkaXNhbGxvd2VkLCBzdHJpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgKGdldEJ1aWx0SW4oJ0RPTUV4Y2VwdGlvbicpKSgnVGhlIHN0cmluZyBpcyBub3QgY29ycmVjdGx5IGVuY29kZWQnLCAnSW52YWxpZENoYXJhY3RlckVycm9yJyk7XG4gICAgfVxuICAgIHdoaWxlIChjaHIgPSBjaGFyQXQoc3RyaW5nLCBwb3NpdGlvbisrKSkge1xuICAgICAgaWYgKGhhc093bihjdG9pLCBjaHIpKSB7XG4gICAgICAgIGJzID0gYmMgJSA0ID8gYnMgKiA2NCArIGN0b2lbY2hyXSA6IGN0b2lbY2hyXTtcbiAgICAgICAgaWYgKGJjKysgJSA0KSBvdXRwdXQgKz0gZnJvbUNoYXJDb2RlKDI1NSAmIGJzID4+ICgtMiAqIGJjICYgNikpO1xuICAgICAgfVxuICAgIH0gcmV0dXJuIG91dHB1dDtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdmFsaWRhdGUtYXJndW1lbnRzLWxlbmd0aCcpO1xudmFyIGl0b2MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYmFzZTY0LW1hcCcpLml0b2M7XG5cbnZhciAkYnRvYSA9IGdldEJ1aWx0SW4oJ2J0b2EnKTtcbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIGNoYXJDb2RlQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQ29kZUF0KTtcblxudmFyIE5PX0FSR19SRUNFSVZJTkdfQ0hFQ0sgPSAhISRidG9hICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICRidG9hKCk7XG59KTtcblxudmFyIFdST05HX0FSR19DT05WRVJTSU9OID0gISEkYnRvYSAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkYnRvYShudWxsKSAhPT0gJ2JuVnNiQT09Jztcbn0pO1xuXG52YXIgV1JPTkdfQVJJVFkgPSAhISRidG9hICYmICRidG9hLmxlbmd0aCAhPT0gMTtcblxuLy8gYGJ0b2FgIG1ldGhvZFxuLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvd2ViYXBwYXBpcy5odG1sI2RvbS1idG9hXG4kKHsgZ2xvYmFsOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCBmb3JjZWQ6IE5PX0FSR19SRUNFSVZJTkdfQ0hFQ0sgfHwgV1JPTkdfQVJHX0NPTlZFUlNJT04gfHwgV1JPTkdfQVJJVFkgfSwge1xuICBidG9hOiBmdW5jdGlvbiBidG9hKGRhdGEpIHtcbiAgICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKTtcbiAgICBpZiAoTk9fQVJHX1JFQ0VJVklOR19DSEVDSyB8fCBXUk9OR19BUkdfQ09OVkVSU0lPTiB8fCBXUk9OR19BUklUWSkgcmV0dXJuICRidG9hKHRvU3RyaW5nKGRhdGEpKTtcbiAgICB2YXIgc3RyaW5nID0gdG9TdHJpbmcoZGF0YSk7XG4gICAgdmFyIG91dHB1dCA9ICcnO1xuICAgIHZhciBwb3NpdGlvbiA9IDA7XG4gICAgdmFyIG1hcCA9IGl0b2M7XG4gICAgdmFyIGJsb2NrLCBjaGFyQ29kZTtcbiAgICB3aGlsZSAoY2hhckF0KHN0cmluZywgcG9zaXRpb24pIHx8IChtYXAgPSAnPScsIHBvc2l0aW9uICUgMSkpIHtcbiAgICAgIGNoYXJDb2RlID0gY2hhckNvZGVBdChzdHJpbmcsIHBvc2l0aW9uICs9IDMgLyA0KTtcbiAgICAgIGlmIChjaGFyQ29kZSA+IDB4RkYpIHtcbiAgICAgICAgdGhyb3cgbmV3IChnZXRCdWlsdEluKCdET01FeGNlcHRpb24nKSkoJ1RoZSBzdHJpbmcgY29udGFpbnMgY2hhcmFjdGVycyBvdXRzaWRlIG9mIHRoZSBMYXRpbjEgcmFuZ2UnLCAnSW52YWxpZENoYXJhY3RlckVycm9yJyk7XG4gICAgICB9XG4gICAgICBibG9jayA9IGJsb2NrIDw8IDggfCBjaGFyQ29kZTtcbiAgICAgIG91dHB1dCArPSBjaGFyQXQobWFwLCA2MyAmIGJsb2NrID4+IDggLSBwb3NpdGlvbiAlIDEgKiA4KTtcbiAgICB9IHJldHVybiBvdXRwdXQ7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNsZWFySW1tZWRpYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Rhc2snKS5jbGVhcjtcblxuLy8gYGNsZWFySW1tZWRpYXRlYCBtZXRob2Rcbi8vIGh0dHA6Ly93M2MuZ2l0aHViLmlvL3NldEltbWVkaWF0ZS8jc2ktY2xlYXJJbW1lZGlhdGVcbiQoeyBnbG9iYWw6IHRydWUsIGJpbmQ6IHRydWUsIGVudW1lcmFibGU6IHRydWUsIGZvcmNlZDogZ2xvYmFsLmNsZWFySW1tZWRpYXRlICE9PSBjbGVhckltbWVkaWF0ZSB9LCB7XG4gIGNsZWFySW1tZWRpYXRlOiBjbGVhckltbWVkaWF0ZVxufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERPTUl0ZXJhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20taXRlcmFibGVzJyk7XG52YXIgRE9NVG9rZW5MaXN0UHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS10b2tlbi1saXN0LXByb3RvdHlwZScpO1xudmFyIGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZm9yLWVhY2gnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbnZhciBoYW5kbGVQcm90b3R5cGUgPSBmdW5jdGlvbiAoQ29sbGVjdGlvblByb3RvdHlwZSkge1xuICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGUgJiYgQ29sbGVjdGlvblByb3RvdHlwZS5mb3JFYWNoICE9PSBmb3JFYWNoKSB0cnkge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCAnZm9yRWFjaCcsIGZvckVhY2gpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIENvbGxlY3Rpb25Qcm90b3R5cGUuZm9yRWFjaCA9IGZvckVhY2g7XG4gIH1cbn07XG5cbmZvciAodmFyIENPTExFQ1RJT05fTkFNRSBpbiBET01JdGVyYWJsZXMpIHtcbiAgaWYgKERPTUl0ZXJhYmxlc1tDT0xMRUNUSU9OX05BTUVdKSB7XG4gICAgaGFuZGxlUHJvdG90eXBlKGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdICYmIGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdLnByb3RvdHlwZSk7XG4gIH1cbn1cblxuaGFuZGxlUHJvdG90eXBlKERPTVRva2VuTGlzdFByb3RvdHlwZSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERPTUl0ZXJhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20taXRlcmFibGVzJyk7XG52YXIgRE9NVG9rZW5MaXN0UHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS10b2tlbi1saXN0LXByb3RvdHlwZScpO1xudmFyIEFycmF5SXRlcmF0b3JNZXRob2RzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvcicpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9yTWV0aG9kcy52YWx1ZXM7XG5cbnZhciBoYW5kbGVQcm90b3R5cGUgPSBmdW5jdGlvbiAoQ29sbGVjdGlvblByb3RvdHlwZSwgQ09MTEVDVElPTl9OQU1FKSB7XG4gIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlKSB7XG4gICAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gICAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGVbSVRFUkFUT1JdICE9PSBBcnJheVZhbHVlcykgdHJ5IHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBDb2xsZWN0aW9uUHJvdG90eXBlW0lURVJBVE9SXSA9IEFycmF5VmFsdWVzO1xuICAgIH1cbiAgICBpZiAoIUNvbGxlY3Rpb25Qcm90b3R5cGVbVE9fU1RSSU5HX1RBR10pIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCBDT0xMRUNUSU9OX05BTUUpO1xuICAgIH1cbiAgICBpZiAoRE9NSXRlcmFibGVzW0NPTExFQ1RJT05fTkFNRV0pIGZvciAodmFyIE1FVEhPRF9OQU1FIGluIEFycmF5SXRlcmF0b3JNZXRob2RzKSB7XG4gICAgICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgICAgIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlW01FVEhPRF9OQU1FXSAhPT0gQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdKSB0cnkge1xuICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgTUVUSE9EX05BTUUsIEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBDb2xsZWN0aW9uUHJvdG90eXBlW01FVEhPRF9OQU1FXSA9IEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmZvciAodmFyIENPTExFQ1RJT05fTkFNRSBpbiBET01JdGVyYWJsZXMpIHtcbiAgaGFuZGxlUHJvdG90eXBlKGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdICYmIGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdLnByb3RvdHlwZSwgQ09MTEVDVElPTl9OQU1FKTtcbn1cblxuaGFuZGxlUHJvdG90eXBlKERPTVRva2VuTGlzdFByb3RvdHlwZSwgJ0RPTVRva2VuTGlzdCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdHJ5Tm9kZVJlcXVpcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHJ5LW5vZGUtcmVxdWlyZScpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgZGVmaW5lQnVpbHRJbkFjY2Vzc29yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbi1hY2Nlc3NvcicpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGVycm9yVG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXJyb3ItdG8tc3RyaW5nJyk7XG52YXIgbm9ybWFsaXplU3RyaW5nQXJndW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbm9ybWFsaXplLXN0cmluZy1hcmd1bWVudCcpO1xudmFyIERPTUV4Y2VwdGlvbkNvbnN0YW50cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20tZXhjZXB0aW9uLWNvbnN0YW50cycpO1xudmFyIGNsZWFyRXJyb3JTdGFjayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lcnJvci1zdGFjay1jbGVhcicpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgRE9NX0VYQ0VQVElPTiA9ICdET01FeGNlcHRpb24nO1xudmFyIERBVEFfQ0xPTkVfRVJSID0gJ0RBVEFfQ0xPTkVfRVJSJztcbnZhciBFcnJvciA9IGdldEJ1aWx0SW4oJ0Vycm9yJyk7XG4vLyBOb2RlSlMgPCAxNy4wIGRvZXMgbm90IGV4cG9zZSBgRE9NRXhjZXB0aW9uYCB0byBnbG9iYWxcbnZhciBOYXRpdmVET01FeGNlcHRpb24gPSBnZXRCdWlsdEluKERPTV9FWENFUFRJT04pIHx8IChmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLy8gTm9kZUpTIDwgMTUuMCBkb2VzIG5vdCBleHBvc2UgYE1lc3NhZ2VDaGFubmVsYCB0byBnbG9iYWxcbiAgICB2YXIgTWVzc2FnZUNoYW5uZWwgPSBnZXRCdWlsdEluKCdNZXNzYWdlQ2hhbm5lbCcpIHx8IHRyeU5vZGVSZXF1aXJlKCd3b3JrZXJfdGhyZWFkcycpLk1lc3NhZ2VDaGFubmVsO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLXdlYWstbWFwLCB1bmljb3JuL3JlcXVpcmUtcG9zdC1tZXNzYWdlLXRhcmdldC1vcmlnaW4gLS0gc2FmZVxuICAgIG5ldyBNZXNzYWdlQ2hhbm5lbCgpLnBvcnQxLnBvc3RNZXNzYWdlKG5ldyBXZWFrTWFwKCkpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmIChlcnJvci5uYW1lID09IERBVEFfQ0xPTkVfRVJSICYmIGVycm9yLmNvZGUgPT0gMjUpIHJldHVybiBlcnJvci5jb25zdHJ1Y3RvcjtcbiAgfVxufSkoKTtcbnZhciBOYXRpdmVET01FeGNlcHRpb25Qcm90b3R5cGUgPSBOYXRpdmVET01FeGNlcHRpb24gJiYgTmF0aXZlRE9NRXhjZXB0aW9uLnByb3RvdHlwZTtcbnZhciBFcnJvclByb3RvdHlwZSA9IEVycm9yLnByb3RvdHlwZTtcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKERPTV9FWENFUFRJT04pO1xudmFyIEhBU19TVEFDSyA9ICdzdGFjaycgaW4gRXJyb3IoRE9NX0VYQ0VQVElPTik7XG5cbnZhciBjb2RlRm9yID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIGhhc093bihET01FeGNlcHRpb25Db25zdGFudHMsIG5hbWUpICYmIERPTUV4Y2VwdGlvbkNvbnN0YW50c1tuYW1lXS5tID8gRE9NRXhjZXB0aW9uQ29uc3RhbnRzW25hbWVdLmMgOiAwO1xufTtcblxudmFyICRET01FeGNlcHRpb24gPSBmdW5jdGlvbiBET01FeGNlcHRpb24oKSB7XG4gIGFuSW5zdGFuY2UodGhpcywgRE9NRXhjZXB0aW9uUHJvdG90eXBlKTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBtZXNzYWdlID0gbm9ybWFsaXplU3RyaW5nQXJndW1lbnQoYXJndW1lbnRzTGVuZ3RoIDwgMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSk7XG4gIHZhciBuYW1lID0gbm9ybWFsaXplU3RyaW5nQXJndW1lbnQoYXJndW1lbnRzTGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXSwgJ0Vycm9yJyk7XG4gIHZhciBjb2RlID0gY29kZUZvcihuYW1lKTtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogRE9NX0VYQ0VQVElPTixcbiAgICBuYW1lOiBuYW1lLFxuICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgY29kZTogY29kZVxuICB9KTtcbiAgaWYgKCFERVNDUklQVE9SUykge1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICB9XG4gIGlmIChIQVNfU1RBQ0spIHtcbiAgICB2YXIgZXJyb3IgPSBFcnJvcihtZXNzYWdlKTtcbiAgICBlcnJvci5uYW1lID0gRE9NX0VYQ0VQVElPTjtcbiAgICBkZWZpbmVQcm9wZXJ0eSh0aGlzLCAnc3RhY2snLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgY2xlYXJFcnJvclN0YWNrKGVycm9yLnN0YWNrLCAxKSkpO1xuICB9XG59O1xuXG52YXIgRE9NRXhjZXB0aW9uUHJvdG90eXBlID0gJERPTUV4Y2VwdGlvbi5wcm90b3R5cGUgPSBjcmVhdGUoRXJyb3JQcm90b3R5cGUpO1xuXG52YXIgY3JlYXRlR2V0dGVyRGVzY3JpcHRvciA9IGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCBnZXQ6IGdldCB9O1xufTtcblxudmFyIGdldHRlckZvciA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGNyZWF0ZUdldHRlckRlc2NyaXB0b3IoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpW2tleV07XG4gIH0pO1xufTtcblxuaWYgKERFU0NSSVBUT1JTKSB7XG4gIGRlZmluZUJ1aWx0SW5BY2Nlc3NvcihET01FeGNlcHRpb25Qcm90b3R5cGUsICdjb2RlJywgZ2V0dGVyRm9yKCdjb2RlJykpO1xuICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoRE9NRXhjZXB0aW9uUHJvdG90eXBlLCAnbWVzc2FnZScsIGdldHRlckZvcignbWVzc2FnZScpKTtcbiAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKERPTUV4Y2VwdGlvblByb3RvdHlwZSwgJ25hbWUnLCBnZXR0ZXJGb3IoJ25hbWUnKSk7XG59XG5cbmRlZmluZVByb3BlcnR5KERPTUV4Y2VwdGlvblByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJywgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsICRET01FeGNlcHRpb24pKTtcblxuLy8gRkYzNi0gRE9NRXhjZXB0aW9uIGlzIGEgZnVuY3Rpb24sIGJ1dCBjYW4ndCBiZSBjb25zdHJ1Y3RlZFxudmFyIElOQ09SUkVDVF9DT05TVFJVQ1RPUiA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICEobmV3IE5hdGl2ZURPTUV4Y2VwdGlvbigpIGluc3RhbmNlb2YgRXJyb3IpO1xufSk7XG5cbi8vIFNhZmFyaSAxMC4xIC8gQ2hyb21lIDMyLSAvIElFOC0gRE9NRXhjZXB0aW9uLnByb3RvdHlwZS50b1N0cmluZyBidWdzXG52YXIgSU5DT1JSRUNUX1RPX1NUUklORyA9IElOQ09SUkVDVF9DT05TVFJVQ1RPUiB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBFcnJvclByb3RvdHlwZS50b1N0cmluZyAhPT0gZXJyb3JUb1N0cmluZyB8fCBTdHJpbmcobmV3IE5hdGl2ZURPTUV4Y2VwdGlvbigxLCAyKSkgIT09ICcyOiAxJztcbn0pO1xuXG4vLyBEZW5vIDEuNi4zLSBET01FeGNlcHRpb24ucHJvdG90eXBlLmNvZGUganVzdCBtaXNzZWRcbnZhciBJTkNPUlJFQ1RfQ09ERSA9IElOQ09SUkVDVF9DT05TVFJVQ1RPUiB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgTmF0aXZlRE9NRXhjZXB0aW9uKDEsICdEYXRhQ2xvbmVFcnJvcicpLmNvZGUgIT09IDI1O1xufSk7XG5cbi8vIERlbm8gMS42LjMtIERPTUV4Y2VwdGlvbiBjb25zdGFudHMganVzdCBtaXNzZWRcbnZhciBNSVNTRURfQ09OU1RBTlRTID0gSU5DT1JSRUNUX0NPTlNUUlVDVE9SXG4gIHx8IE5hdGl2ZURPTUV4Y2VwdGlvbltEQVRBX0NMT05FX0VSUl0gIT09IDI1XG4gIHx8IE5hdGl2ZURPTUV4Y2VwdGlvblByb3RvdHlwZVtEQVRBX0NMT05FX0VSUl0gIT09IDI1O1xuXG52YXIgRk9SQ0VEX0NPTlNUUlVDVE9SID0gSVNfUFVSRSA/IElOQ09SUkVDVF9UT19TVFJJTkcgfHwgSU5DT1JSRUNUX0NPREUgfHwgTUlTU0VEX0NPTlNUQU5UUyA6IElOQ09SUkVDVF9DT05TVFJVQ1RPUjtcblxuLy8gYERPTUV4Y2VwdGlvbmAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vd2ViaWRsLnNwZWMud2hhdHdnLm9yZy8jaWRsLURPTUV4Y2VwdGlvblxuJCh7IGdsb2JhbDogdHJ1ZSwgY29uc3RydWN0b3I6IHRydWUsIGZvcmNlZDogRk9SQ0VEX0NPTlNUUlVDVE9SIH0sIHtcbiAgRE9NRXhjZXB0aW9uOiBGT1JDRURfQ09OU1RSVUNUT1IgPyAkRE9NRXhjZXB0aW9uIDogTmF0aXZlRE9NRXhjZXB0aW9uXG59KTtcblxudmFyIFBvbHlmaWxsZWRET01FeGNlcHRpb24gPSBnZXRCdWlsdEluKERPTV9FWENFUFRJT04pO1xudmFyIFBvbHlmaWxsZWRET01FeGNlcHRpb25Qcm90b3R5cGUgPSBQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uLnByb3RvdHlwZTtcblxuaWYgKElOQ09SUkVDVF9UT19TVFJJTkcgJiYgKElTX1BVUkUgfHwgTmF0aXZlRE9NRXhjZXB0aW9uID09PSBQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uKSkge1xuICBkZWZpbmVCdWlsdEluKFBvbHlmaWxsZWRET01FeGNlcHRpb25Qcm90b3R5cGUsICd0b1N0cmluZycsIGVycm9yVG9TdHJpbmcpO1xufVxuXG5pZiAoSU5DT1JSRUNUX0NPREUgJiYgREVTQ1JJUFRPUlMgJiYgTmF0aXZlRE9NRXhjZXB0aW9uID09PSBQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uKSB7XG4gIGRlZmluZUJ1aWx0SW5BY2Nlc3NvcihQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uUHJvdG90eXBlLCAnY29kZScsIGNyZWF0ZUdldHRlckRlc2NyaXB0b3IoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjb2RlRm9yKGFuT2JqZWN0KHRoaXMpLm5hbWUpO1xuICB9KSk7XG59XG5cbmZvciAodmFyIGtleSBpbiBET01FeGNlcHRpb25Db25zdGFudHMpIGlmIChoYXNPd24oRE9NRXhjZXB0aW9uQ29uc3RhbnRzLCBrZXkpKSB7XG4gIHZhciBjb25zdGFudCA9IERPTUV4Y2VwdGlvbkNvbnN0YW50c1trZXldO1xuICB2YXIgY29uc3RhbnROYW1lID0gY29uc3RhbnQucztcbiAgdmFyIGRlc2NyaXB0b3IgPSBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoNiwgY29uc3RhbnQuYyk7XG4gIGlmICghaGFzT3duKFBvbHlmaWxsZWRET01FeGNlcHRpb24sIGNvbnN0YW50TmFtZSkpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uLCBjb25zdGFudE5hbWUsIGRlc2NyaXB0b3IpO1xuICB9XG4gIGlmICghaGFzT3duKFBvbHlmaWxsZWRET01FeGNlcHRpb25Qcm90b3R5cGUsIGNvbnN0YW50TmFtZSkpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uUHJvdG90eXBlLCBjb25zdGFudE5hbWUsIGRlc2NyaXB0b3IpO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgbm9ybWFsaXplU3RyaW5nQXJndW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbm9ybWFsaXplLXN0cmluZy1hcmd1bWVudCcpO1xudmFyIERPTUV4Y2VwdGlvbkNvbnN0YW50cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20tZXhjZXB0aW9uLWNvbnN0YW50cycpO1xudmFyIGNsZWFyRXJyb3JTdGFjayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lcnJvci1zdGFjay1jbGVhcicpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbnZhciBET01fRVhDRVBUSU9OID0gJ0RPTUV4Y2VwdGlvbic7XG52YXIgRXJyb3IgPSBnZXRCdWlsdEluKCdFcnJvcicpO1xudmFyIE5hdGl2ZURPTUV4Y2VwdGlvbiA9IGdldEJ1aWx0SW4oRE9NX0VYQ0VQVElPTik7XG5cbnZhciAkRE9NRXhjZXB0aW9uID0gZnVuY3Rpb24gRE9NRXhjZXB0aW9uKCkge1xuICBhbkluc3RhbmNlKHRoaXMsIERPTUV4Y2VwdGlvblByb3RvdHlwZSk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgbWVzc2FnZSA9IG5vcm1hbGl6ZVN0cmluZ0FyZ3VtZW50KGFyZ3VtZW50c0xlbmd0aCA8IDEgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pO1xuICB2YXIgbmFtZSA9IG5vcm1hbGl6ZVN0cmluZ0FyZ3VtZW50KGFyZ3VtZW50c0xlbmd0aCA8IDIgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMV0sICdFcnJvcicpO1xuICB2YXIgdGhhdCA9IG5ldyBOYXRpdmVET01FeGNlcHRpb24obWVzc2FnZSwgbmFtZSk7XG4gIHZhciBlcnJvciA9IEVycm9yKG1lc3NhZ2UpO1xuICBlcnJvci5uYW1lID0gRE9NX0VYQ0VQVElPTjtcbiAgZGVmaW5lUHJvcGVydHkodGhhdCwgJ3N0YWNrJywgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIGNsZWFyRXJyb3JTdGFjayhlcnJvci5zdGFjaywgMSkpKTtcbiAgaW5oZXJpdElmUmVxdWlyZWQodGhhdCwgdGhpcywgJERPTUV4Y2VwdGlvbik7XG4gIHJldHVybiB0aGF0O1xufTtcblxudmFyIERPTUV4Y2VwdGlvblByb3RvdHlwZSA9ICRET01FeGNlcHRpb24ucHJvdG90eXBlID0gTmF0aXZlRE9NRXhjZXB0aW9uLnByb3RvdHlwZTtcblxudmFyIEVSUk9SX0hBU19TVEFDSyA9ICdzdGFjaycgaW4gRXJyb3IoRE9NX0VYQ0VQVElPTik7XG52YXIgRE9NX0VYQ0VQVElPTl9IQVNfU1RBQ0sgPSAnc3RhY2snIGluIG5ldyBOYXRpdmVET01FeGNlcHRpb24oMSwgMik7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxudmFyIGRlc2NyaXB0b3IgPSBOYXRpdmVET01FeGNlcHRpb24gJiYgREVTQ1JJUFRPUlMgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihnbG9iYWwsIERPTV9FWENFUFRJT04pO1xuXG4vLyBCdW4gfiAwLjEuMSBET01FeGNlcHRpb24gaGF2ZSBpbmNvcnJlY3QgZGVzY3JpcHRvciBhbmQgd2UgY2FuJ3QgcmVkZWZpbmUgaXRcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9KYXJyZWQtU3VtbmVyL2J1bi9pc3N1ZXMvMzk5XG52YXIgQlVHR1lfREVTQ1JJUFRPUiA9ICEhZGVzY3JpcHRvciAmJiAhKGRlc2NyaXB0b3Iud3JpdGFibGUgJiYgZGVzY3JpcHRvci5jb25maWd1cmFibGUpO1xuXG52YXIgRk9SQ0VEX0NPTlNUUlVDVE9SID0gRVJST1JfSEFTX1NUQUNLICYmICFCVUdHWV9ERVNDUklQVE9SICYmICFET01fRVhDRVBUSU9OX0hBU19TVEFDSztcblxuLy8gYERPTUV4Y2VwdGlvbmAgY29uc3RydWN0b3IgcGF0Y2ggZm9yIGAuc3RhY2tgIHdoZXJlIGl0J3MgcmVxdWlyZWRcbi8vIGh0dHBzOi8vd2ViaWRsLnNwZWMud2hhdHdnLm9yZy8jZXMtRE9NRXhjZXB0aW9uLXNwZWNpYWxuZXNzXG4kKHsgZ2xvYmFsOiB0cnVlLCBjb25zdHJ1Y3RvcjogdHJ1ZSwgZm9yY2VkOiBJU19QVVJFIHx8IEZPUkNFRF9DT05TVFJVQ1RPUiB9LCB7IC8vIFRPRE86IGZpeCBleHBvcnQgbG9naWNcbiAgRE9NRXhjZXB0aW9uOiBGT1JDRURfQ09OU1RSVUNUT1IgPyAkRE9NRXhjZXB0aW9uIDogTmF0aXZlRE9NRXhjZXB0aW9uXG59KTtcblxudmFyIFBvbHlmaWxsZWRET01FeGNlcHRpb24gPSBnZXRCdWlsdEluKERPTV9FWENFUFRJT04pO1xudmFyIFBvbHlmaWxsZWRET01FeGNlcHRpb25Qcm90b3R5cGUgPSBQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uLnByb3RvdHlwZTtcblxuaWYgKFBvbHlmaWxsZWRET01FeGNlcHRpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgIT09IFBvbHlmaWxsZWRET01FeGNlcHRpb24pIHtcbiAgaWYgKCFJU19QVVJFKSB7XG4gICAgZGVmaW5lUHJvcGVydHkoUG9seWZpbGxlZERPTUV4Y2VwdGlvblByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJywgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIFBvbHlmaWxsZWRET01FeGNlcHRpb24pKTtcbiAgfVxuXG4gIGZvciAodmFyIGtleSBpbiBET01FeGNlcHRpb25Db25zdGFudHMpIGlmIChoYXNPd24oRE9NRXhjZXB0aW9uQ29uc3RhbnRzLCBrZXkpKSB7XG4gICAgdmFyIGNvbnN0YW50ID0gRE9NRXhjZXB0aW9uQ29uc3RhbnRzW2tleV07XG4gICAgdmFyIGNvbnN0YW50TmFtZSA9IGNvbnN0YW50LnM7XG4gICAgaWYgKCFoYXNPd24oUG9seWZpbGxlZERPTUV4Y2VwdGlvbiwgY29uc3RhbnROYW1lKSkge1xuICAgICAgZGVmaW5lUHJvcGVydHkoUG9seWZpbGxlZERPTUV4Y2VwdGlvbiwgY29uc3RhbnROYW1lLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoNiwgY29uc3RhbnQuYykpO1xuICAgIH1cbiAgfVxufVxuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcblxudmFyIERPTV9FWENFUFRJT04gPSAnRE9NRXhjZXB0aW9uJztcblxuc2V0VG9TdHJpbmdUYWcoZ2V0QnVpbHRJbihET01fRVhDRVBUSU9OKSwgRE9NX0VYQ0VQVElPTik7XG4iLCIvLyBUT0RPOiBSZW1vdmUgdGhpcyBtb2R1bGUgZnJvbSBgY29yZS1qc0A0YCBzaW5jZSBpdCdzIHNwbGl0IHRvIG1vZHVsZXMgbGlzdGVkIGJlbG93XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5jbGVhci1pbW1lZGlhdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLnNldC1pbW1lZGlhdGUnKTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWljcm90YXNrJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy92YWxpZGF0ZS1hcmd1bWVudHMtbGVuZ3RoJyk7XG52YXIgSVNfTk9ERSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZScpO1xuXG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xuXG4vLyBgcXVldWVNaWNyb3Rhc2tgIG1ldGhvZFxuLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvdGltZXJzLWFuZC11c2VyLXByb21wdHMuaHRtbCNkb20tcXVldWVtaWNyb3Rhc2tcbiQoeyBnbG9iYWw6IHRydWUsIGVudW1lcmFibGU6IHRydWUsIGRvbnRDYWxsR2V0U2V0OiB0cnVlIH0sIHtcbiAgcXVldWVNaWNyb3Rhc2s6IGZ1bmN0aW9uIHF1ZXVlTWljcm90YXNrKGZuKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgYUNhbGxhYmxlKGZuKTtcbiAgICB2YXIgZG9tYWluID0gSVNfTk9ERSAmJiBwcm9jZXNzLmRvbWFpbjtcbiAgICBtaWNyb3Rhc2soZG9tYWluID8gZG9tYWluLmJpbmQoZm4pIDogZm4pO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzZXRJbW1lZGlhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGFzaycpLnNldDtcblxuLy8gYHNldEltbWVkaWF0ZWAgbWV0aG9kXG4vLyBodHRwOi8vdzNjLmdpdGh1Yi5pby9zZXRJbW1lZGlhdGUvI3NpLXNldEltbWVkaWF0ZVxuJCh7IGdsb2JhbDogdHJ1ZSwgYmluZDogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgZm9yY2VkOiBnbG9iYWwuc2V0SW1tZWRpYXRlICE9PSBzZXRJbW1lZGlhdGUgfSwge1xuICBzZXRJbW1lZGlhdGU6IHNldEltbWVkaWF0ZVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2V0SW50ZXJ2YWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2NoZWR1bGVycy1maXgnKS5zZXRJbnRlcnZhbDtcblxuLy8gaWU5LSBzZXRJbnRlcnZhbCBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgZml4XG4vLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS90aW1lcnMtYW5kLXVzZXItcHJvbXB0cy5odG1sI2RvbS1zZXRpbnRlcnZhbFxuJCh7IGdsb2JhbDogdHJ1ZSwgYmluZDogdHJ1ZSwgZm9yY2VkOiBnbG9iYWwuc2V0SW50ZXJ2YWwgIT09IHNldEludGVydmFsIH0sIHtcbiAgc2V0SW50ZXJ2YWw6IHNldEludGVydmFsXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzZXRUaW1lb3V0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NjaGVkdWxlcnMtZml4Jykuc2V0VGltZW91dDtcblxuLy8gaWU5LSBzZXRUaW1lb3V0IGFkZGl0aW9uYWwgcGFyYW1ldGVycyBmaXhcbi8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3RpbWVycy1hbmQtdXNlci1wcm9tcHRzLmh0bWwjZG9tLXNldHRpbWVvdXRcbiQoeyBnbG9iYWw6IHRydWUsIGJpbmQ6IHRydWUsIGZvcmNlZDogZ2xvYmFsLnNldFRpbWVvdXQgIT09IHNldFRpbWVvdXQgfSwge1xuICBzZXRUaW1lb3V0OiBzZXRUaW1lb3V0XG59KTtcbiIsInZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRCdWlsdGluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNvbnN0cnVjdG9yJyk7XG52YXIgaXNOdWxsT3JVbmRlZmluZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1zeW1ib2wnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3ZhbGlkYXRlLWFyZ3VtZW50cy1sZW5ndGgnKTtcbnZhciBnZXRSZWdFeHBGbGFncyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZ2V0LWZsYWdzJyk7XG52YXIgRVJST1JfU1RBQ0tfSU5TVEFMTEFCTEUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXJyb3Itc3RhY2staW5zdGFsbGFibGUnKTtcbnZhciBWOCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xudmFyIElTX0JST1dTRVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWJyb3dzZXInKTtcbnZhciBJU19ERU5PID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1kZW5vJyk7XG52YXIgSVNfTk9ERSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZScpO1xuXG52YXIgT2JqZWN0ID0gZ2xvYmFsLk9iamVjdDtcbnZhciBEYXRlID0gZ2xvYmFsLkRhdGU7XG52YXIgRXJyb3IgPSBnbG9iYWwuRXJyb3I7XG52YXIgRXZhbEVycm9yID0gZ2xvYmFsLkV2YWxFcnJvcjtcbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG52YXIgUmVmZXJlbmNlRXJyb3IgPSBnbG9iYWwuUmVmZXJlbmNlRXJyb3I7XG52YXIgU3ludGF4RXJyb3IgPSBnbG9iYWwuU3ludGF4RXJyb3I7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBVUklFcnJvciA9IGdsb2JhbC5VUklFcnJvcjtcbnZhciBQZXJmb3JtYW5jZU1hcmsgPSBnbG9iYWwuUGVyZm9ybWFuY2VNYXJrO1xudmFyIFdlYkFzc2VtYmx5ID0gZ2xvYmFsLldlYkFzc2VtYmx5O1xudmFyIENvbXBpbGVFcnJvciA9IFdlYkFzc2VtYmx5ICYmIFdlYkFzc2VtYmx5LkNvbXBpbGVFcnJvciB8fCBFcnJvcjtcbnZhciBMaW5rRXJyb3IgPSBXZWJBc3NlbWJseSAmJiBXZWJBc3NlbWJseS5MaW5rRXJyb3IgfHwgRXJyb3I7XG52YXIgUnVudGltZUVycm9yID0gV2ViQXNzZW1ibHkgJiYgV2ViQXNzZW1ibHkuUnVudGltZUVycm9yIHx8IEVycm9yO1xudmFyIERPTUV4Y2VwdGlvbiA9IGdldEJ1aWx0aW4oJ0RPTUV4Y2VwdGlvbicpO1xudmFyIFNldCA9IGdldEJ1aWx0aW4oJ1NldCcpO1xudmFyIE1hcCA9IGdldEJ1aWx0aW4oJ01hcCcpO1xudmFyIE1hcFByb3RvdHlwZSA9IE1hcC5wcm90b3R5cGU7XG52YXIgbWFwSGFzID0gdW5jdXJyeVRoaXMoTWFwUHJvdG90eXBlLmhhcyk7XG52YXIgbWFwR2V0ID0gdW5jdXJyeVRoaXMoTWFwUHJvdG90eXBlLmdldCk7XG52YXIgbWFwU2V0ID0gdW5jdXJyeVRoaXMoTWFwUHJvdG90eXBlLnNldCk7XG52YXIgc2V0QWRkID0gdW5jdXJyeVRoaXMoU2V0LnByb3RvdHlwZS5hZGQpO1xudmFyIG9iamVjdEtleXMgPSBnZXRCdWlsdGluKCdPYmplY3QnLCAna2V5cycpO1xudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcbnZhciB0aGlzQm9vbGVhblZhbHVlID0gdW5jdXJyeVRoaXModHJ1ZS52YWx1ZU9mKTtcbnZhciB0aGlzTnVtYmVyVmFsdWUgPSB1bmN1cnJ5VGhpcygxLjAudmFsdWVPZik7XG52YXIgdGhpc1N0cmluZ1ZhbHVlID0gdW5jdXJyeVRoaXMoJycudmFsdWVPZik7XG52YXIgdGhpc1RpbWVWYWx1ZSA9IHVuY3VycnlUaGlzKERhdGUucHJvdG90eXBlLmdldFRpbWUpO1xudmFyIFBFUkZPUk1BTkNFX01BUksgPSB1aWQoJ3N0cnVjdHVyZWRDbG9uZScpO1xudmFyIERBVEFfQ0xPTkVfRVJST1IgPSAnRGF0YUNsb25lRXJyb3InO1xudmFyIFRSQU5TRkVSUklORyA9ICdUcmFuc2ZlcnJpbmcnO1xuXG52YXIgY2hlY2tCYXNpY1NlbWFudGljID0gZnVuY3Rpb24gKHN0cnVjdHVyZWRDbG9uZUltcGxlbWVudGF0aW9uKSB7XG4gIHJldHVybiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZXQxID0gbmV3IGdsb2JhbC5TZXQoWzddKTtcbiAgICB2YXIgc2V0MiA9IHN0cnVjdHVyZWRDbG9uZUltcGxlbWVudGF0aW9uKHNldDEpO1xuICAgIHZhciBudW1iZXIgPSBzdHJ1Y3R1cmVkQ2xvbmVJbXBsZW1lbnRhdGlvbihPYmplY3QoNykpO1xuICAgIHJldHVybiBzZXQyID09IHNldDEgfHwgIXNldDIuaGFzKDcpIHx8IHR5cGVvZiBudW1iZXIgIT0gJ29iamVjdCcgfHwgbnVtYmVyICE9IDc7XG4gIH0pICYmIHN0cnVjdHVyZWRDbG9uZUltcGxlbWVudGF0aW9uO1xufTtcblxudmFyIGNoZWNrRXJyb3JzQ2xvbmluZyA9IGZ1bmN0aW9uIChzdHJ1Y3R1cmVkQ2xvbmVJbXBsZW1lbnRhdGlvbiwgJEVycm9yKSB7XG4gIHJldHVybiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBlcnJvciA9IG5ldyAkRXJyb3IoKTtcbiAgICB2YXIgdGVzdCA9IHN0cnVjdHVyZWRDbG9uZUltcGxlbWVudGF0aW9uKHsgYTogZXJyb3IsIGI6IGVycm9yIH0pO1xuICAgIHJldHVybiAhKHRlc3QgJiYgdGVzdC5hID09PSB0ZXN0LmIgJiYgdGVzdC5hIGluc3RhbmNlb2YgJEVycm9yICYmIHRlc3QuYS5zdGFjayA9PT0gZXJyb3Iuc3RhY2spO1xuICB9KTtcbn07XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS93aGF0d2cvaHRtbC9wdWxsLzU3NDlcbnZhciBjaGVja05ld0Vycm9yc0Nsb25pbmdTZW1hbnRpYyA9IGZ1bmN0aW9uIChzdHJ1Y3R1cmVkQ2xvbmVJbXBsZW1lbnRhdGlvbikge1xuICByZXR1cm4gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGVzdCA9IHN0cnVjdHVyZWRDbG9uZUltcGxlbWVudGF0aW9uKG5ldyBnbG9iYWwuQWdncmVnYXRlRXJyb3IoWzFdLCBQRVJGT1JNQU5DRV9NQVJLLCB7IGNhdXNlOiAzIH0pKTtcbiAgICByZXR1cm4gdGVzdC5uYW1lICE9ICdBZ2dyZWdhdGVFcnJvcicgfHwgdGVzdC5lcnJvcnNbMF0gIT0gMSB8fCB0ZXN0Lm1lc3NhZ2UgIT0gUEVSRk9STUFOQ0VfTUFSSyB8fCB0ZXN0LmNhdXNlICE9IDM7XG4gIH0pO1xufTtcblxuLy8gRkY5NCssIFNhZmFyaSAxNS40KywgQ2hyb21lIDk4KywgTm9kZUpTIDE3LjArLCBEZW5vIDEuMTMrXG4vLyBGRjwxMDMgYW5kIFNhZmFyaSBpbXBsZW1lbnRhdGlvbnMgY2FuJ3QgY2xvbmUgZXJyb3JzXG4vLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xNTU2NjA0XG4vLyBGRjEwMyBjYW4gY2xvbmUgZXJyb3JzLCBidXQgYC5zdGFja2Agb2YgY2xvbmUgaXMgYW4gZW1wdHkgc3RyaW5nXG4vLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xNzc4NzYyXG4vLyBGRjEwNCsgZml4ZWQgaXQgb24gdXN1YWwgZXJyb3JzLCBidXQgbm90IG9uIERPTUV4Y2VwdGlvbnNcbi8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTE3NzczMjFcbi8vIENocm9tZSA8MTAyIHJldHVybnMgYG51bGxgIGlmIGNsb25lZCBvYmplY3QgY29udGFpbnMgbXVsdGlwbGUgcmVmZXJlbmNlcyB0byBvbmUgZXJyb3Jcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTEyNTQyXG4vLyBOb2RlSlMgaW1wbGVtZW50YXRpb24gY2FuJ3QgY2xvbmUgRE9NRXhjZXB0aW9uc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2lzc3Vlcy80MTAzOFxuLy8gb25seSBGRjEwMysgc3VwcG9ydHMgbmV3IChodG1sLzU3NDkpIGVycm9yIGNsb25pbmcgc2VtYW50aWNcbnZhciBuYXRpdmVTdHJ1Y3R1cmVkQ2xvbmUgPSBnbG9iYWwuc3RydWN0dXJlZENsb25lO1xuXG52YXIgRk9SQ0VEX1JFUExBQ0VNRU5UID0gSVNfUFVSRVxuICB8fCAhY2hlY2tFcnJvcnNDbG9uaW5nKG5hdGl2ZVN0cnVjdHVyZWRDbG9uZSwgRXJyb3IpXG4gIHx8ICFjaGVja0Vycm9yc0Nsb25pbmcobmF0aXZlU3RydWN0dXJlZENsb25lLCBET01FeGNlcHRpb24pXG4gIHx8ICFjaGVja05ld0Vycm9yc0Nsb25pbmdTZW1hbnRpYyhuYXRpdmVTdHJ1Y3R1cmVkQ2xvbmUpO1xuXG4vLyBDaHJvbWUgODIrLCBTYWZhcmkgMTQuMSssIERlbm8gMS4xMStcbi8vIENocm9tZSA3OC04MSBpbXBsZW1lbnRhdGlvbiBzd2FwcyBgLm5hbWVgIGFuZCBgLm1lc3NhZ2VgIG9mIGNsb25lZCBgRE9NRXhjZXB0aW9uYFxuLy8gQ2hyb21lIHJldHVybnMgYG51bGxgIGlmIGNsb25lZCBvYmplY3QgY29udGFpbnMgbXVsdGlwbGUgcmVmZXJlbmNlcyB0byBvbmUgZXJyb3Jcbi8vIFNhZmFyaSAxNC4xIGltcGxlbWVudGF0aW9uIGRvZXNuJ3QgY2xvbmUgc29tZSBgUmVnRXhwYCBmbGFncywgc28gcmVxdWlyZXMgYSB3b3JrYXJvdW5kXG4vLyBTYWZhcmkgaW1wbGVtZW50YXRpb24gY2FuJ3QgY2xvbmUgZXJyb3JzXG4vLyBEZW5vIDEuMi0xLjEwIGltcGxlbWVudGF0aW9ucyB0b28gbmFpdmVcbi8vIE5vZGVKUyAxNi4wKyBkb2VzIG5vdCBoYXZlIGBQZXJmb3JtYW5jZU1hcmtgIGNvbnN0cnVjdG9yXG4vLyBOb2RlSlMgPDE3LjIgc3RydWN0dXJlZCBjbG9uaW5nIGltcGxlbWVudGF0aW9uIGZyb20gYHBlcmZvcm1hbmNlLm1hcmtgIGlzIHRvbyBuYWl2ZVxuLy8gYW5kIGNhbid0IGNsb25lLCBmb3IgZXhhbXBsZSwgYFJlZ0V4cGAgb3Igc29tZSBib3hlZCBwcmltaXRpdmVzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvaXNzdWVzLzQwODQwXG4vLyBubyBvbmUgb2YgdGhvc2UgaW1wbGVtZW50YXRpb25zIHN1cHBvcnRzIG5ldyAoaHRtbC81NzQ5KSBlcnJvciBjbG9uaW5nIHNlbWFudGljXG52YXIgc3RydWN0dXJlZENsb25lRnJvbU1hcmsgPSAhbmF0aXZlU3RydWN0dXJlZENsb25lICYmIGNoZWNrQmFzaWNTZW1hbnRpYyhmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIG5ldyBQZXJmb3JtYW5jZU1hcmsoUEVSRk9STUFOQ0VfTUFSSywgeyBkZXRhaWw6IHZhbHVlIH0pLmRldGFpbDtcbn0pO1xuXG52YXIgbmF0aXZlUmVzdHJpY3RlZFN0cnVjdHVyZWRDbG9uZSA9IGNoZWNrQmFzaWNTZW1hbnRpYyhuYXRpdmVTdHJ1Y3R1cmVkQ2xvbmUpIHx8IHN0cnVjdHVyZWRDbG9uZUZyb21NYXJrO1xuXG52YXIgdGhyb3dVbmNsb25lYWJsZSA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gIHRocm93IG5ldyBET01FeGNlcHRpb24oJ1VuY2xvbmVhYmxlIHR5cGU6ICcgKyB0eXBlLCBEQVRBX0NMT05FX0VSUk9SKTtcbn07XG5cbnZhciB0aHJvd1VucG9seWZpbGxhYmxlID0gZnVuY3Rpb24gKHR5cGUsIGFjdGlvbikge1xuICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKChhY3Rpb24gfHwgJ0Nsb25pbmcnKSArICcgb2YgJyArIHR5cGUgKyAnIGNhbm5vdCBiZSBwcm9wZXJseSBwb2x5ZmlsbGVkIGluIHRoaXMgZW5naW5lJywgREFUQV9DTE9ORV9FUlJPUik7XG59O1xuXG52YXIgY3JlYXRlRGF0YVRyYW5zZmVyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZGF0YVRyYW5zZmVyO1xuICB0cnkge1xuICAgIGRhdGFUcmFuc2ZlciA9IG5ldyBnbG9iYWwuRGF0YVRyYW5zZmVyKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdHJ5IHtcbiAgICAgIGRhdGFUcmFuc2ZlciA9IG5ldyBnbG9iYWwuQ2xpcGJvYXJkRXZlbnQoJycpLmNsaXBib2FyZERhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IyKSB7IC8qIGVtcHR5ICovIH1cbiAgfVxuICByZXR1cm4gZGF0YVRyYW5zZmVyICYmIGRhdGFUcmFuc2Zlci5pdGVtcyAmJiBkYXRhVHJhbnNmZXIuZmlsZXMgPyBkYXRhVHJhbnNmZXIgOiBudWxsO1xufTtcblxudmFyIHN0cnVjdHVyZWRDbG9uZUludGVybmFsID0gZnVuY3Rpb24gKHZhbHVlLCBtYXApIHtcbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkgdGhyb3dVbmNsb25lYWJsZSgnU3ltYm9sJyk7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gIC8vIGVmZmVjdGl2ZWx5IHByZXNlcnZlcyBjaXJjdWxhciByZWZlcmVuY2VzXG4gIGlmIChtYXApIHtcbiAgICBpZiAobWFwSGFzKG1hcCwgdmFsdWUpKSByZXR1cm4gbWFwR2V0KG1hcCwgdmFsdWUpO1xuICB9IGVsc2UgbWFwID0gbmV3IE1hcCgpO1xuXG4gIHZhciB0eXBlID0gY2xhc3NvZih2YWx1ZSk7XG4gIHZhciBkZWVwID0gZmFsc2U7XG4gIHZhciBDLCBuYW1lLCBjbG9uZWQsIGRhdGFUcmFuc2ZlciwgaSwgbGVuZ3RoLCBrZXlzLCBrZXksIHNvdXJjZSwgdGFyZ2V0O1xuXG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ0FycmF5JzpcbiAgICAgIGNsb25lZCA9IFtdO1xuICAgICAgZGVlcCA9IHRydWU7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdPYmplY3QnOlxuICAgICAgY2xvbmVkID0ge307XG4gICAgICBkZWVwID0gdHJ1ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ01hcCc6XG4gICAgICBjbG9uZWQgPSBuZXcgTWFwKCk7XG4gICAgICBkZWVwID0gdHJ1ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ1NldCc6XG4gICAgICBjbG9uZWQgPSBuZXcgU2V0KCk7XG4gICAgICBkZWVwID0gdHJ1ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ1JlZ0V4cCc6XG4gICAgICAvLyBpbiB0aGlzIGJsb2NrIGJlY2F1c2Ugb2YgYSBTYWZhcmkgMTQuMSBidWdcbiAgICAgIC8vIG9sZCBGRiBkb2VzIG5vdCBjbG9uZSByZWdleGVzIHBhc3NlZCB0byB0aGUgY29uc3RydWN0b3IsIHNvIGdldCB0aGUgc291cmNlIGFuZCBmbGFncyBkaXJlY3RseVxuICAgICAgY2xvbmVkID0gbmV3IFJlZ0V4cCh2YWx1ZS5zb3VyY2UsIGdldFJlZ0V4cEZsYWdzKHZhbHVlKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdFcnJvcic6XG4gICAgICBuYW1lID0gdmFsdWUubmFtZTtcbiAgICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICBjYXNlICdBZ2dyZWdhdGVFcnJvcic6XG4gICAgICAgICAgY2xvbmVkID0gZ2V0QnVpbHRpbignQWdncmVnYXRlRXJyb3InKShbXSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0V2YWxFcnJvcic6XG4gICAgICAgICAgY2xvbmVkID0gRXZhbEVycm9yKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ1JhbmdlRXJyb3InOlxuICAgICAgICAgIGNsb25lZCA9IFJhbmdlRXJyb3IoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnUmVmZXJlbmNlRXJyb3InOlxuICAgICAgICAgIGNsb25lZCA9IFJlZmVyZW5jZUVycm9yKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ1N5bnRheEVycm9yJzpcbiAgICAgICAgICBjbG9uZWQgPSBTeW50YXhFcnJvcigpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdUeXBlRXJyb3InOlxuICAgICAgICAgIGNsb25lZCA9IFR5cGVFcnJvcigpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdVUklFcnJvcic6XG4gICAgICAgICAgY2xvbmVkID0gVVJJRXJyb3IoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnQ29tcGlsZUVycm9yJzpcbiAgICAgICAgICBjbG9uZWQgPSBDb21waWxlRXJyb3IoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnTGlua0Vycm9yJzpcbiAgICAgICAgICBjbG9uZWQgPSBMaW5rRXJyb3IoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnUnVudGltZUVycm9yJzpcbiAgICAgICAgICBjbG9uZWQgPSBSdW50aW1lRXJyb3IoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBjbG9uZWQgPSBFcnJvcigpO1xuICAgICAgfVxuICAgICAgZGVlcCA9IHRydWU7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdET01FeGNlcHRpb24nOlxuICAgICAgY2xvbmVkID0gbmV3IERPTUV4Y2VwdGlvbih2YWx1ZS5tZXNzYWdlLCB2YWx1ZS5uYW1lKTtcbiAgICAgIGRlZXAgPSB0cnVlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnRGF0YVZpZXcnOlxuICAgIGNhc2UgJ0ludDhBcnJheSc6XG4gICAgY2FzZSAnVWludDhBcnJheSc6XG4gICAgY2FzZSAnVWludDhDbGFtcGVkQXJyYXknOlxuICAgIGNhc2UgJ0ludDE2QXJyYXknOlxuICAgIGNhc2UgJ1VpbnQxNkFycmF5JzpcbiAgICBjYXNlICdJbnQzMkFycmF5JzpcbiAgICBjYXNlICdVaW50MzJBcnJheSc6XG4gICAgY2FzZSAnRmxvYXQzMkFycmF5JzpcbiAgICBjYXNlICdGbG9hdDY0QXJyYXknOlxuICAgIGNhc2UgJ0JpZ0ludDY0QXJyYXknOlxuICAgIGNhc2UgJ0JpZ1VpbnQ2NEFycmF5JzpcbiAgICAgIEMgPSBnbG9iYWxbdHlwZV07XG4gICAgICAvLyBpbiBzb21lIG9sZCBlbmdpbmVzIGxpa2UgU2FmYXJpIDksIHR5cGVvZiBDIGlzICdvYmplY3QnXG4gICAgICAvLyBvbiBVaW50OENsYW1wZWRBcnJheSBvciBzb21lIG90aGVyIGNvbnN0cnVjdG9yc1xuICAgICAgaWYgKCFpc09iamVjdChDKSkgdGhyb3dVbnBvbHlmaWxsYWJsZSh0eXBlKTtcbiAgICAgIGNsb25lZCA9IG5ldyBDKFxuICAgICAgICAvLyB0aGlzIGlzIHNhZmUsIHNpbmNlIGFycmF5YnVmZmVyIGNhbm5vdCBoYXZlIGNpcmN1bGFyIHJlZmVyZW5jZXNcbiAgICAgICAgc3RydWN0dXJlZENsb25lSW50ZXJuYWwodmFsdWUuYnVmZmVyLCBtYXApLFxuICAgICAgICB2YWx1ZS5ieXRlT2Zmc2V0LFxuICAgICAgICB0eXBlID09PSAnRGF0YVZpZXcnID8gdmFsdWUuYnl0ZUxlbmd0aCA6IHZhbHVlLmxlbmd0aFxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ0RPTVF1YWQnOlxuICAgICAgdHJ5IHtcbiAgICAgICAgY2xvbmVkID0gbmV3IERPTVF1YWQoXG4gICAgICAgICAgc3RydWN0dXJlZENsb25lSW50ZXJuYWwodmFsdWUucDEsIG1hcCksXG4gICAgICAgICAgc3RydWN0dXJlZENsb25lSW50ZXJuYWwodmFsdWUucDIsIG1hcCksXG4gICAgICAgICAgc3RydWN0dXJlZENsb25lSW50ZXJuYWwodmFsdWUucDMsIG1hcCksXG4gICAgICAgICAgc3RydWN0dXJlZENsb25lSW50ZXJuYWwodmFsdWUucDQsIG1hcClcbiAgICAgICAgKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChuYXRpdmVSZXN0cmljdGVkU3RydWN0dXJlZENsb25lKSB7XG4gICAgICAgICAgY2xvbmVkID0gbmF0aXZlUmVzdHJpY3RlZFN0cnVjdHVyZWRDbG9uZSh2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB0aHJvd1VucG9seWZpbGxhYmxlKHR5cGUpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnRmlsZUxpc3QnOlxuICAgICAgZGF0YVRyYW5zZmVyID0gY3JlYXRlRGF0YVRyYW5zZmVyKCk7XG4gICAgICBpZiAoZGF0YVRyYW5zZmVyKSB7XG4gICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKHZhbHVlKTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgZGF0YVRyYW5zZmVyLml0ZW1zLmFkZChzdHJ1Y3R1cmVkQ2xvbmVJbnRlcm5hbCh2YWx1ZVtpXSwgbWFwKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2xvbmVkID0gZGF0YVRyYW5zZmVyLmZpbGVzO1xuICAgICAgfSBlbHNlIGlmIChuYXRpdmVSZXN0cmljdGVkU3RydWN0dXJlZENsb25lKSB7XG4gICAgICAgIGNsb25lZCA9IG5hdGl2ZVJlc3RyaWN0ZWRTdHJ1Y3R1cmVkQ2xvbmUodmFsdWUpO1xuICAgICAgfSBlbHNlIHRocm93VW5wb2x5ZmlsbGFibGUodHlwZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdJbWFnZURhdGEnOlxuICAgICAgLy8gU2FmYXJpIDkgSW1hZ2VEYXRhIGlzIGEgY29uc3RydWN0b3IsIGJ1dCB0eXBlb2YgSW1hZ2VEYXRhIGlzICdvYmplY3QnXG4gICAgICB0cnkge1xuICAgICAgICBjbG9uZWQgPSBuZXcgSW1hZ2VEYXRhKFxuICAgICAgICAgIHN0cnVjdHVyZWRDbG9uZUludGVybmFsKHZhbHVlLmRhdGEsIG1hcCksXG4gICAgICAgICAgdmFsdWUud2lkdGgsXG4gICAgICAgICAgdmFsdWUuaGVpZ2h0LFxuICAgICAgICAgIHsgY29sb3JTcGFjZTogdmFsdWUuY29sb3JTcGFjZSB9XG4gICAgICAgICk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAobmF0aXZlUmVzdHJpY3RlZFN0cnVjdHVyZWRDbG9uZSkge1xuICAgICAgICAgIGNsb25lZCA9IG5hdGl2ZVJlc3RyaWN0ZWRTdHJ1Y3R1cmVkQ2xvbmUodmFsdWUpO1xuICAgICAgICB9IGVsc2UgdGhyb3dVbnBvbHlmaWxsYWJsZSh0eXBlKTtcbiAgICAgIH0gYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGlmIChuYXRpdmVSZXN0cmljdGVkU3RydWN0dXJlZENsb25lKSB7XG4gICAgICAgIGNsb25lZCA9IG5hdGl2ZVJlc3RyaWN0ZWRTdHJ1Y3R1cmVkQ2xvbmUodmFsdWUpO1xuICAgICAgfSBlbHNlIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlICdCaWdJbnQnOlxuICAgICAgICAgIC8vIGNhbiBiZSBhIDNyZCBwYXJ0eSBwb2x5ZmlsbFxuICAgICAgICAgIGNsb25lZCA9IE9iamVjdCh2YWx1ZS52YWx1ZU9mKCkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdCb29sZWFuJzpcbiAgICAgICAgICBjbG9uZWQgPSBPYmplY3QodGhpc0Jvb2xlYW5WYWx1ZSh2YWx1ZSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdOdW1iZXInOlxuICAgICAgICAgIGNsb25lZCA9IE9iamVjdCh0aGlzTnVtYmVyVmFsdWUodmFsdWUpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnU3RyaW5nJzpcbiAgICAgICAgICBjbG9uZWQgPSBPYmplY3QodGhpc1N0cmluZ1ZhbHVlKHZhbHVlKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0RhdGUnOlxuICAgICAgICAgIGNsb25lZCA9IG5ldyBEYXRlKHRoaXNUaW1lVmFsdWUodmFsdWUpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnQXJyYXlCdWZmZXInOlxuICAgICAgICAgIEMgPSBnbG9iYWwuRGF0YVZpZXc7XG4gICAgICAgICAgLy8gYEFycmF5QnVmZmVyI3NsaWNlYCBpcyBub3QgYXZhaWxhYmxlIGluIElFMTBcbiAgICAgICAgICAvLyBgQXJyYXlCdWZmZXIjc2xpY2VgIGFuZCBgRGF0YVZpZXdgIGFyZSBub3QgYXZhaWxhYmxlIGluIG9sZCBGRlxuICAgICAgICAgIGlmICghQyAmJiB0eXBlb2YgdmFsdWUuc2xpY2UgIT0gJ2Z1bmN0aW9uJykgdGhyb3dVbnBvbHlmaWxsYWJsZSh0eXBlKTtcbiAgICAgICAgICAvLyBkZXRhY2hlZCBidWZmZXJzIHRocm93cyBpbiBgRGF0YVZpZXdgIGFuZCBgLnNsaWNlYFxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlLnNsaWNlID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgY2xvbmVkID0gdmFsdWUuc2xpY2UoMCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBsZW5ndGggPSB2YWx1ZS5ieXRlTGVuZ3RoO1xuICAgICAgICAgICAgICBjbG9uZWQgPSBuZXcgQXJyYXlCdWZmZXIobGVuZ3RoKTtcbiAgICAgICAgICAgICAgc291cmNlID0gbmV3IEModmFsdWUpO1xuICAgICAgICAgICAgICB0YXJnZXQgPSBuZXcgQyhjbG9uZWQpO1xuICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQuc2V0VWludDgoaSwgc291cmNlLmdldFVpbnQ4KGkpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCdBcnJheUJ1ZmZlciBpcyBkZXRhY2hlZCcsIERBVEFfQ0xPTkVfRVJST1IpO1xuICAgICAgICAgIH0gYnJlYWs7XG4gICAgICAgIGNhc2UgJ1NoYXJlZEFycmF5QnVmZmVyJzpcbiAgICAgICAgICAvLyBTaGFyZWRBcnJheUJ1ZmZlciBzaG91bGQgdXNlIHNoYXJlZCBtZW1vcnksIHdlIGNhbid0IHBvbHlmaWxsIGl0LCBzbyByZXR1cm4gdGhlIG9yaWdpbmFsXG4gICAgICAgICAgY2xvbmVkID0gdmFsdWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0Jsb2InOlxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjbG9uZWQgPSB2YWx1ZS5zbGljZSgwLCB2YWx1ZS5zaXplLCB2YWx1ZS50eXBlKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3dVbnBvbHlmaWxsYWJsZSh0eXBlKTtcbiAgICAgICAgICB9IGJyZWFrO1xuICAgICAgICBjYXNlICdET01Qb2ludCc6XG4gICAgICAgIGNhc2UgJ0RPTVBvaW50UmVhZE9ubHknOlxuICAgICAgICAgIEMgPSBnbG9iYWxbdHlwZV07XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNsb25lZCA9IEMuZnJvbVBvaW50XG4gICAgICAgICAgICAgID8gQy5mcm9tUG9pbnQodmFsdWUpXG4gICAgICAgICAgICAgIDogbmV3IEModmFsdWUueCwgdmFsdWUueSwgdmFsdWUueiwgdmFsdWUudyk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93VW5wb2x5ZmlsbGFibGUodHlwZSk7XG4gICAgICAgICAgfSBicmVhaztcbiAgICAgICAgY2FzZSAnRE9NUmVjdCc6XG4gICAgICAgIGNhc2UgJ0RPTVJlY3RSZWFkT25seSc6XG4gICAgICAgICAgQyA9IGdsb2JhbFt0eXBlXTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY2xvbmVkID0gQy5mcm9tUmVjdFxuICAgICAgICAgICAgICA/IEMuZnJvbVJlY3QodmFsdWUpXG4gICAgICAgICAgICAgIDogbmV3IEModmFsdWUueCwgdmFsdWUueSwgdmFsdWUud2lkdGgsIHZhbHVlLmhlaWdodCk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93VW5wb2x5ZmlsbGFibGUodHlwZSk7XG4gICAgICAgICAgfSBicmVhaztcbiAgICAgICAgY2FzZSAnRE9NTWF0cml4JzpcbiAgICAgICAgY2FzZSAnRE9NTWF0cml4UmVhZE9ubHknOlxuICAgICAgICAgIEMgPSBnbG9iYWxbdHlwZV07XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNsb25lZCA9IEMuZnJvbU1hdHJpeFxuICAgICAgICAgICAgICA/IEMuZnJvbU1hdHJpeCh2YWx1ZSlcbiAgICAgICAgICAgICAgOiBuZXcgQyh2YWx1ZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93VW5wb2x5ZmlsbGFibGUodHlwZSk7XG4gICAgICAgICAgfSBicmVhaztcbiAgICAgICAgY2FzZSAnQXVkaW9EYXRhJzpcbiAgICAgICAgY2FzZSAnVmlkZW9GcmFtZSc6XG4gICAgICAgICAgaWYgKCFpc0NhbGxhYmxlKHZhbHVlLmNsb25lKSkgdGhyb3dVbnBvbHlmaWxsYWJsZSh0eXBlKTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY2xvbmVkID0gdmFsdWUuY2xvbmUoKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3dVbmNsb25lYWJsZSh0eXBlKTtcbiAgICAgICAgICB9IGJyZWFrO1xuICAgICAgICBjYXNlICdGaWxlJzpcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY2xvbmVkID0gbmV3IEZpbGUoW3ZhbHVlXSwgdmFsdWUubmFtZSwgdmFsdWUpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvd1VucG9seWZpbGxhYmxlKHR5cGUpO1xuICAgICAgICAgIH0gYnJlYWs7XG4gICAgICAgIGNhc2UgJ0NyeXB0b0tleSc6XG4gICAgICAgIGNhc2UgJ0dQVUNvbXBpbGF0aW9uTWVzc2FnZSc6XG4gICAgICAgIGNhc2UgJ0dQVUNvbXBpbGF0aW9uSW5mbyc6XG4gICAgICAgIGNhc2UgJ0ltYWdlQml0bWFwJzpcbiAgICAgICAgY2FzZSAnUlRDQ2VydGlmaWNhdGUnOlxuICAgICAgICBjYXNlICdXZWJBc3NlbWJseS5Nb2R1bGUnOlxuICAgICAgICAgIHRocm93VW5wb2x5ZmlsbGFibGUodHlwZSk7XG4gICAgICAgICAgLy8gYnJlYWsgb21pdHRlZFxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93VW5jbG9uZWFibGUodHlwZSk7XG4gICAgICB9XG4gIH1cblxuICBtYXBTZXQobWFwLCB2YWx1ZSwgY2xvbmVkKTtcblxuICBpZiAoZGVlcCkgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnQXJyYXknOlxuICAgIGNhc2UgJ09iamVjdCc6XG4gICAgICBrZXlzID0gb2JqZWN0S2V5cyh2YWx1ZSk7XG4gICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShrZXlzKTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KGNsb25lZCwga2V5LCBzdHJ1Y3R1cmVkQ2xvbmVJbnRlcm5hbCh2YWx1ZVtrZXldLCBtYXApKTtcbiAgICAgIH0gYnJlYWs7XG4gICAgY2FzZSAnTWFwJzpcbiAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24gKHYsIGspIHtcbiAgICAgICAgbWFwU2V0KGNsb25lZCwgc3RydWN0dXJlZENsb25lSW50ZXJuYWwoaywgbWFwKSwgc3RydWN0dXJlZENsb25lSW50ZXJuYWwodiwgbWFwKSk7XG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ1NldCc6XG4gICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIHNldEFkZChjbG9uZWQsIHN0cnVjdHVyZWRDbG9uZUludGVybmFsKHYsIG1hcCkpO1xuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdFcnJvcic6XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoY2xvbmVkLCAnbWVzc2FnZScsIHN0cnVjdHVyZWRDbG9uZUludGVybmFsKHZhbHVlLm1lc3NhZ2UsIG1hcCkpO1xuICAgICAgaWYgKGhhc093bih2YWx1ZSwgJ2NhdXNlJykpIHtcbiAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGNsb25lZCwgJ2NhdXNlJywgc3RydWN0dXJlZENsb25lSW50ZXJuYWwodmFsdWUuY2F1c2UsIG1hcCkpO1xuICAgICAgfVxuICAgICAgaWYgKG5hbWUgPT0gJ0FnZ3JlZ2F0ZUVycm9yJykge1xuICAgICAgICBjbG9uZWQuZXJyb3JzID0gc3RydWN0dXJlZENsb25lSW50ZXJuYWwodmFsdWUuZXJyb3JzLCBtYXApO1xuICAgICAgfSAvLyBicmVhayBvbWl0dGVkXG4gICAgY2FzZSAnRE9NRXhjZXB0aW9uJzpcbiAgICAgIGlmIChFUlJPUl9TVEFDS19JTlNUQUxMQUJMRSkge1xuICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoY2xvbmVkLCAnc3RhY2snLCBzdHJ1Y3R1cmVkQ2xvbmVJbnRlcm5hbCh2YWx1ZS5zdGFjaywgbWFwKSk7XG4gICAgICB9XG4gIH1cblxuICByZXR1cm4gY2xvbmVkO1xufTtcblxudmFyIFBST1BFUl9UUkFOU0ZFUiA9IG5hdGl2ZVN0cnVjdHVyZWRDbG9uZSAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBwcmV2ZW50IFY4IEFycmF5QnVmZmVyRGV0YWNoaW5nIHByb3RlY3RvciBjZWxsIGludmFsaWRhdGlvbiBhbmQgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3OVxuICBpZiAoKElTX0RFTk8gJiYgVjggPiA5MikgfHwgKElTX05PREUgJiYgVjggPiA5NCkgfHwgKElTX0JST1dTRVIgJiYgVjggPiA5NykpIHJldHVybiBmYWxzZTtcbiAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcig4KTtcbiAgdmFyIGNsb25lID0gbmF0aXZlU3RydWN0dXJlZENsb25lKGJ1ZmZlciwgeyB0cmFuc2ZlcjogW2J1ZmZlcl0gfSk7XG4gIHJldHVybiBidWZmZXIuYnl0ZUxlbmd0aCAhPSAwIHx8IGNsb25lLmJ5dGVMZW5ndGggIT0gODtcbn0pO1xuXG52YXIgdHJ5VG9UcmFuc2ZlciA9IGZ1bmN0aW9uIChyYXdUcmFuc2ZlciwgbWFwKSB7XG4gIGlmICghaXNPYmplY3QocmF3VHJhbnNmZXIpKSB0aHJvdyBUeXBlRXJyb3IoJ1RyYW5zZmVyIG9wdGlvbiBjYW5ub3QgYmUgY29udmVydGVkIHRvIGEgc2VxdWVuY2UnKTtcblxuICB2YXIgdHJhbnNmZXIgPSBbXTtcblxuICBpdGVyYXRlKHJhd1RyYW5zZmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBwdXNoKHRyYW5zZmVyLCBhbk9iamVjdCh2YWx1ZSkpO1xuICB9KTtcblxuICB2YXIgaSA9IDA7XG4gIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZSh0cmFuc2Zlcik7XG4gIHZhciB2YWx1ZSwgdHlwZSwgQywgdHJhbnNmZXJyZWRBcnJheSwgdHJhbnNmZXJyZWQsIGNhbnZhcywgY29udGV4dDtcblxuICBpZiAoUFJPUEVSX1RSQU5TRkVSKSB7XG4gICAgdHJhbnNmZXJyZWRBcnJheSA9IG5hdGl2ZVN0cnVjdHVyZWRDbG9uZSh0cmFuc2ZlciwgeyB0cmFuc2ZlcjogdHJhbnNmZXIgfSk7XG4gICAgd2hpbGUgKGkgPCBsZW5ndGgpIG1hcFNldChtYXAsIHRyYW5zZmVyW2ldLCB0cmFuc2ZlcnJlZEFycmF5W2krK10pO1xuICB9IGVsc2Ugd2hpbGUgKGkgPCBsZW5ndGgpIHtcbiAgICB2YWx1ZSA9IHRyYW5zZmVyW2krK107XG4gICAgaWYgKG1hcEhhcyhtYXAsIHZhbHVlKSkgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbignRHVwbGljYXRlIHRyYW5zZmVyYWJsZScsIERBVEFfQ0xPTkVfRVJST1IpO1xuXG4gICAgdHlwZSA9IGNsYXNzb2YodmFsdWUpO1xuXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlICdJbWFnZUJpdG1hcCc6XG4gICAgICAgIEMgPSBnbG9iYWwuT2Zmc2NyZWVuQ2FudmFzO1xuICAgICAgICBpZiAoIWlzQ29uc3RydWN0b3IoQykpIHRocm93VW5wb2x5ZmlsbGFibGUodHlwZSwgVFJBTlNGRVJSSU5HKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjYW52YXMgPSBuZXcgQyh2YWx1ZS53aWR0aCwgdmFsdWUuaGVpZ2h0KTtcbiAgICAgICAgICBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJ2JpdG1hcHJlbmRlcmVyJyk7XG4gICAgICAgICAgY29udGV4dC50cmFuc2ZlckZyb21JbWFnZUJpdG1hcCh2YWx1ZSk7XG4gICAgICAgICAgdHJhbnNmZXJyZWQgPSBjYW52YXMudHJhbnNmZXJUb0ltYWdlQml0bWFwKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdBdWRpb0RhdGEnOlxuICAgICAgY2FzZSAnVmlkZW9GcmFtZSc6XG4gICAgICAgIGlmICghaXNDYWxsYWJsZSh2YWx1ZS5jbG9uZSkgfHwgIWlzQ2FsbGFibGUodmFsdWUuY2xvc2UpKSB0aHJvd1VucG9seWZpbGxhYmxlKHR5cGUsIFRSQU5TRkVSUklORyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdHJhbnNmZXJyZWQgPSB2YWx1ZS5jbG9uZSgpO1xuICAgICAgICAgIHZhbHVlLmNsb3NlKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdBcnJheUJ1ZmZlcic6XG4gICAgICBjYXNlICdNZXNzYWdlUG9ydCc6XG4gICAgICBjYXNlICdPZmZzY3JlZW5DYW52YXMnOlxuICAgICAgY2FzZSAnUmVhZGFibGVTdHJlYW0nOlxuICAgICAgY2FzZSAnVHJhbnNmb3JtU3RyZWFtJzpcbiAgICAgIGNhc2UgJ1dyaXRhYmxlU3RyZWFtJzpcbiAgICAgICAgdGhyb3dVbnBvbHlmaWxsYWJsZSh0eXBlLCBUUkFOU0ZFUlJJTkcpO1xuICAgIH1cblxuICAgIGlmICh0cmFuc2ZlcnJlZCA9PT0gdW5kZWZpbmVkKSB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCdUaGlzIG9iamVjdCBjYW5ub3QgYmUgdHJhbnNmZXJyZWQ6ICcgKyB0eXBlLCBEQVRBX0NMT05FX0VSUk9SKTtcbiAgICBtYXBTZXQobWFwLCB2YWx1ZSwgdHJhbnNmZXJyZWQpO1xuICB9XG59O1xuXG4kKHsgZ2xvYmFsOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCBzaGFtOiAhUFJPUEVSX1RSQU5TRkVSLCBmb3JjZWQ6IEZPUkNFRF9SRVBMQUNFTUVOVCB9LCB7XG4gIHN0cnVjdHVyZWRDbG9uZTogZnVuY3Rpb24gc3RydWN0dXJlZENsb25lKHZhbHVlIC8qICwgeyB0cmFuc2ZlciB9ICovKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKSA+IDEgJiYgIWlzTnVsbE9yVW5kZWZpbmVkKGFyZ3VtZW50c1sxXSkgPyBhbk9iamVjdChhcmd1bWVudHNbMV0pIDogdW5kZWZpbmVkO1xuICAgIHZhciB0cmFuc2ZlciA9IG9wdGlvbnMgPyBvcHRpb25zLnRyYW5zZmVyIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXA7XG5cbiAgICBpZiAodHJhbnNmZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbWFwID0gbmV3IE1hcCgpO1xuICAgICAgdHJ5VG9UcmFuc2Zlcih0cmFuc2ZlciwgbWFwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RydWN0dXJlZENsb25lSW50ZXJuYWwodmFsdWUsIG1hcCk7XG4gIH1cbn0pO1xuIiwiLy8gVE9ETzogUmVtb3ZlIHRoaXMgbW9kdWxlIGZyb20gYGNvcmUtanNANGAgc2luY2UgaXQncyBzcGxpdCB0byBtb2R1bGVzIGxpc3RlZCBiZWxvd1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuc2V0LWludGVydmFsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5zZXQtdGltZW91dCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gVE9ETzogaW4gY29yZS1qc0A0LCBtb3ZlIC9tb2R1bGVzLyBkZXBlbmRlbmNpZXMgdG8gcHVibGljIGVudHJpZXMgZm9yIGJldHRlciBvcHRpbWl6YXRpb24gYnkgdG9vbHMgbGlrZSBgcHJlc2V0LWVudmBcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3InKTtcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIFVTRV9OQVRJVkVfVVJMID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VybC1jb25zdHJ1Y3Rvci1kZXRlY3Rpb24nKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIGRlZmluZUJ1aWx0SW5zID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbnMnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3ItY3JlYXRlLWNvbnN0cnVjdG9yJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyICR0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGdldEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvcicpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy92YWxpZGF0ZS1hcmd1bWVudHMtbGVuZ3RoJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgYXJyYXlTb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNvcnQnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFVSTF9TRUFSQ0hfUEFSQU1TID0gJ1VSTFNlYXJjaFBhcmFtcyc7XG52YXIgVVJMX1NFQVJDSF9QQVJBTVNfSVRFUkFUT1IgPSBVUkxfU0VBUkNIX1BBUkFNUyArICdJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsUGFyYW1zU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihVUkxfU0VBUkNIX1BBUkFNUyk7XG52YXIgZ2V0SW50ZXJuYWxJdGVyYXRvclN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoVVJMX1NFQVJDSF9QQVJBTVNfSVRFUkFUT1IpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gQXZvaWQgTm9kZUpTIGV4cGVyaW1lbnRhbCB3YXJuaW5nXG52YXIgc2FmZUdldEJ1aWx0SW4gPSBmdW5jdGlvbiAobmFtZSkge1xuICBpZiAoIURFU0NSSVBUT1JTKSByZXR1cm4gZ2xvYmFsW25hbWVdO1xuICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihnbG9iYWwsIG5hbWUpO1xuICByZXR1cm4gZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLnZhbHVlO1xufTtcblxudmFyIG5hdGl2ZUZldGNoID0gc2FmZUdldEJ1aWx0SW4oJ2ZldGNoJyk7XG52YXIgTmF0aXZlUmVxdWVzdCA9IHNhZmVHZXRCdWlsdEluKCdSZXF1ZXN0Jyk7XG52YXIgSGVhZGVycyA9IHNhZmVHZXRCdWlsdEluKCdIZWFkZXJzJyk7XG52YXIgUmVxdWVzdFByb3RvdHlwZSA9IE5hdGl2ZVJlcXVlc3QgJiYgTmF0aXZlUmVxdWVzdC5wcm90b3R5cGU7XG52YXIgSGVhZGVyc1Byb3RvdHlwZSA9IEhlYWRlcnMgJiYgSGVhZGVycy5wcm90b3R5cGU7XG52YXIgUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIGRlY29kZVVSSUNvbXBvbmVudCA9IGdsb2JhbC5kZWNvZGVVUklDb21wb25lbnQ7XG52YXIgZW5jb2RlVVJJQ29tcG9uZW50ID0gZ2xvYmFsLmVuY29kZVVSSUNvbXBvbmVudDtcbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIGpvaW4gPSB1bmN1cnJ5VGhpcyhbXS5qb2luKTtcbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG52YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xudmFyIHNoaWZ0ID0gdW5jdXJyeVRoaXMoW10uc2hpZnQpO1xudmFyIHNwbGljZSA9IHVuY3VycnlUaGlzKFtdLnNwbGljZSk7XG52YXIgc3BsaXQgPSB1bmN1cnJ5VGhpcygnJy5zcGxpdCk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbnZhciBwbHVzID0gL1xcKy9nO1xudmFyIHNlcXVlbmNlcyA9IEFycmF5KDQpO1xuXG52YXIgcGVyY2VudFNlcXVlbmNlID0gZnVuY3Rpb24gKGJ5dGVzKSB7XG4gIHJldHVybiBzZXF1ZW5jZXNbYnl0ZXMgLSAxXSB8fCAoc2VxdWVuY2VzW2J5dGVzIC0gMV0gPSBSZWdFeHAoJygoPzolW1xcXFxkYS1mXXsyfSl7JyArIGJ5dGVzICsgJ30pJywgJ2dpJykpO1xufTtcblxudmFyIHBlcmNlbnREZWNvZGUgPSBmdW5jdGlvbiAoc2VxdWVuY2UpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHNlcXVlbmNlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gc2VxdWVuY2U7XG4gIH1cbn07XG5cbnZhciBkZXNlcmlhbGl6ZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gcmVwbGFjZShpdCwgcGx1cywgJyAnKTtcbiAgdmFyIGJ5dGVzID0gNDtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHJlc3VsdCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgd2hpbGUgKGJ5dGVzKSB7XG4gICAgICByZXN1bHQgPSByZXBsYWNlKHJlc3VsdCwgcGVyY2VudFNlcXVlbmNlKGJ5dGVzLS0pLCBwZXJjZW50RGVjb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcblxudmFyIGZpbmQgPSAvWyEnKCl+XXwlMjAvZztcblxudmFyIHJlcGxhY2VtZW50cyA9IHtcbiAgJyEnOiAnJTIxJyxcbiAgXCInXCI6ICclMjcnLFxuICAnKCc6ICclMjgnLFxuICAnKSc6ICclMjknLFxuICAnfic6ICclN0UnLFxuICAnJTIwJzogJysnXG59O1xuXG52YXIgcmVwbGFjZXIgPSBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgcmV0dXJuIHJlcGxhY2VtZW50c1ttYXRjaF07XG59O1xuXG52YXIgc2VyaWFsaXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiByZXBsYWNlKGVuY29kZVVSSUNvbXBvbmVudChpdCksIGZpbmQsIHJlcGxhY2VyKTtcbn07XG5cbnZhciBVUkxTZWFyY2hQYXJhbXNJdGVyYXRvciA9IGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoZnVuY3Rpb24gSXRlcmF0b3IocGFyYW1zLCBraW5kKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IFVSTF9TRUFSQ0hfUEFSQU1TX0lURVJBVE9SLFxuICAgIGl0ZXJhdG9yOiBnZXRJdGVyYXRvcihnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHBhcmFtcykuZW50cmllcyksXG4gICAga2luZDoga2luZFxuICB9KTtcbn0sICdJdGVyYXRvcicsIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsSXRlcmF0b3JTdGF0ZSh0aGlzKTtcbiAgdmFyIGtpbmQgPSBzdGF0ZS5raW5kO1xuICB2YXIgc3RlcCA9IHN0YXRlLml0ZXJhdG9yLm5leHQoKTtcbiAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgaWYgKCFzdGVwLmRvbmUpIHtcbiAgICBzdGVwLnZhbHVlID0ga2luZCA9PT0gJ2tleXMnID8gZW50cnkua2V5IDoga2luZCA9PT0gJ3ZhbHVlcycgPyBlbnRyeS52YWx1ZSA6IFtlbnRyeS5rZXksIGVudHJ5LnZhbHVlXTtcbiAgfSByZXR1cm4gc3RlcDtcbn0sIHRydWUpO1xuXG52YXIgVVJMU2VhcmNoUGFyYW1zU3RhdGUgPSBmdW5jdGlvbiAoaW5pdCkge1xuICB0aGlzLmVudHJpZXMgPSBbXTtcbiAgdGhpcy51cmwgPSBudWxsO1xuXG4gIGlmIChpbml0ICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAoaXNPYmplY3QoaW5pdCkpIHRoaXMucGFyc2VPYmplY3QoaW5pdCk7XG4gICAgZWxzZSB0aGlzLnBhcnNlUXVlcnkodHlwZW9mIGluaXQgPT0gJ3N0cmluZycgPyBjaGFyQXQoaW5pdCwgMCkgPT09ICc/JyA/IHN0cmluZ1NsaWNlKGluaXQsIDEpIDogaW5pdCA6ICR0b1N0cmluZyhpbml0KSk7XG4gIH1cbn07XG5cblVSTFNlYXJjaFBhcmFtc1N0YXRlLnByb3RvdHlwZSA9IHtcbiAgdHlwZTogVVJMX1NFQVJDSF9QQVJBTVMsXG4gIGJpbmRVUkw6IGZ1bmN0aW9uICh1cmwpIHtcbiAgICB0aGlzLnVybCA9IHVybDtcbiAgICB0aGlzLnVwZGF0ZSgpO1xuICB9LFxuICBwYXJzZU9iamVjdDogZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKG9iamVjdCk7XG4gICAgdmFyIGl0ZXJhdG9yLCBuZXh0LCBzdGVwLCBlbnRyeUl0ZXJhdG9yLCBlbnRyeU5leHQsIGZpcnN0LCBzZWNvbmQ7XG5cbiAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgIGl0ZXJhdG9yID0gZ2V0SXRlcmF0b3Iob2JqZWN0LCBpdGVyYXRvck1ldGhvZCk7XG4gICAgICBuZXh0ID0gaXRlcmF0b3IubmV4dDtcbiAgICAgIHdoaWxlICghKHN0ZXAgPSBjYWxsKG5leHQsIGl0ZXJhdG9yKSkuZG9uZSkge1xuICAgICAgICBlbnRyeUl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoYW5PYmplY3Qoc3RlcC52YWx1ZSkpO1xuICAgICAgICBlbnRyeU5leHQgPSBlbnRyeUl0ZXJhdG9yLm5leHQ7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAoZmlyc3QgPSBjYWxsKGVudHJ5TmV4dCwgZW50cnlJdGVyYXRvcikpLmRvbmUgfHxcbiAgICAgICAgICAoc2Vjb25kID0gY2FsbChlbnRyeU5leHQsIGVudHJ5SXRlcmF0b3IpKS5kb25lIHx8XG4gICAgICAgICAgIWNhbGwoZW50cnlOZXh0LCBlbnRyeUl0ZXJhdG9yKS5kb25lXG4gICAgICAgICkgdGhyb3cgVHlwZUVycm9yKCdFeHBlY3RlZCBzZXF1ZW5jZSB3aXRoIGxlbmd0aCAyJyk7XG4gICAgICAgIHB1c2godGhpcy5lbnRyaWVzLCB7IGtleTogJHRvU3RyaW5nKGZpcnN0LnZhbHVlKSwgdmFsdWU6ICR0b1N0cmluZyhzZWNvbmQudmFsdWUpIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSBpZiAoaGFzT3duKG9iamVjdCwga2V5KSkge1xuICAgICAgcHVzaCh0aGlzLmVudHJpZXMsIHsga2V5OiBrZXksIHZhbHVlOiAkdG9TdHJpbmcob2JqZWN0W2tleV0pIH0pO1xuICAgIH1cbiAgfSxcbiAgcGFyc2VRdWVyeTogZnVuY3Rpb24gKHF1ZXJ5KSB7XG4gICAgaWYgKHF1ZXJ5KSB7XG4gICAgICB2YXIgYXR0cmlidXRlcyA9IHNwbGl0KHF1ZXJ5LCAnJicpO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciBhdHRyaWJ1dGUsIGVudHJ5O1xuICAgICAgd2hpbGUgKGluZGV4IDwgYXR0cmlidXRlcy5sZW5ndGgpIHtcbiAgICAgICAgYXR0cmlidXRlID0gYXR0cmlidXRlc1tpbmRleCsrXTtcbiAgICAgICAgaWYgKGF0dHJpYnV0ZS5sZW5ndGgpIHtcbiAgICAgICAgICBlbnRyeSA9IHNwbGl0KGF0dHJpYnV0ZSwgJz0nKTtcbiAgICAgICAgICBwdXNoKHRoaXMuZW50cmllcywge1xuICAgICAgICAgICAga2V5OiBkZXNlcmlhbGl6ZShzaGlmdChlbnRyeSkpLFxuICAgICAgICAgICAgdmFsdWU6IGRlc2VyaWFsaXplKGpvaW4oZW50cnksICc9JykpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHNlcmlhbGl6ZTogZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbnRyaWVzID0gdGhpcy5lbnRyaWVzO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBlbnRyeTtcbiAgICB3aGlsZSAoaW5kZXggPCBlbnRyaWVzLmxlbmd0aCkge1xuICAgICAgZW50cnkgPSBlbnRyaWVzW2luZGV4KytdO1xuICAgICAgcHVzaChyZXN1bHQsIHNlcmlhbGl6ZShlbnRyeS5rZXkpICsgJz0nICsgc2VyaWFsaXplKGVudHJ5LnZhbHVlKSk7XG4gICAgfSByZXR1cm4gam9pbihyZXN1bHQsICcmJyk7XG4gIH0sXG4gIHVwZGF0ZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZW50cmllcy5sZW5ndGggPSAwO1xuICAgIHRoaXMucGFyc2VRdWVyeSh0aGlzLnVybC5xdWVyeSk7XG4gIH0sXG4gIHVwZGF0ZVVSTDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnVybCkgdGhpcy51cmwudXBkYXRlKCk7XG4gIH1cbn07XG5cbi8vIGBVUkxTZWFyY2hQYXJhbXNgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2ludGVyZmFjZS11cmxzZWFyY2hwYXJhbXNcbnZhciBVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIFVSTFNlYXJjaFBhcmFtcygvKiBpbml0ICovKSB7XG4gIGFuSW5zdGFuY2UodGhpcywgVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlKTtcbiAgdmFyIGluaXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZDtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCBuZXcgVVJMU2VhcmNoUGFyYW1zU3RhdGUoaW5pdCkpO1xufTtcblxudmFyIFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZSA9IFVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxuZGVmaW5lQnVpbHRJbnMoVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlLCB7XG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmFwcGVuZGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1hcHBlbmRcbiAgYXBwZW5kOiBmdW5jdGlvbiBhcHBlbmQobmFtZSwgdmFsdWUpIHtcbiAgICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAyKTtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpO1xuICAgIHB1c2goc3RhdGUuZW50cmllcywgeyBrZXk6ICR0b1N0cmluZyhuYW1lKSwgdmFsdWU6ICR0b1N0cmluZyh2YWx1ZSkgfSk7XG4gICAgc3RhdGUudXBkYXRlVVJMKCk7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmRlbGV0ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1kZWxldGVcbiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKTtcbiAgICB2YXIgZW50cmllcyA9IHN0YXRlLmVudHJpZXM7XG4gICAgdmFyIGtleSA9ICR0b1N0cmluZyhuYW1lKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChpbmRleCA8IGVudHJpZXMubGVuZ3RoKSB7XG4gICAgICBpZiAoZW50cmllc1tpbmRleF0ua2V5ID09PSBrZXkpIHNwbGljZShlbnRyaWVzLCBpbmRleCwgMSk7XG4gICAgICBlbHNlIGluZGV4Kys7XG4gICAgfVxuICAgIHN0YXRlLnVwZGF0ZVVSTCgpO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5nZXRgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtZ2V0XG4gIGdldDogZnVuY3Rpb24gZ2V0KG5hbWUpIHtcbiAgICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKTtcbiAgICB2YXIgZW50cmllcyA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcykuZW50cmllcztcbiAgICB2YXIga2V5ID0gJHRvU3RyaW5nKG5hbWUpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgZm9yICg7IGluZGV4IDwgZW50cmllcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGlmIChlbnRyaWVzW2luZGV4XS5rZXkgPT09IGtleSkgcmV0dXJuIGVudHJpZXNbaW5kZXhdLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuZ2V0QWxsYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLWdldGFsbFxuICBnZXRBbGw6IGZ1bmN0aW9uIGdldEFsbChuYW1lKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgdmFyIGVudHJpZXMgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpLmVudHJpZXM7XG4gICAgdmFyIGtleSA9ICR0b1N0cmluZyhuYW1lKTtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBmb3IgKDsgaW5kZXggPCBlbnRyaWVzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgaWYgKGVudHJpZXNbaW5kZXhdLmtleSA9PT0ga2V5KSBwdXNoKHJlc3VsdCwgZW50cmllc1tpbmRleF0udmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5oYXNgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtaGFzXG4gIGhhczogZnVuY3Rpb24gaGFzKG5hbWUpIHtcbiAgICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKTtcbiAgICB2YXIgZW50cmllcyA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcykuZW50cmllcztcbiAgICB2YXIga2V5ID0gJHRvU3RyaW5nKG5hbWUpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgd2hpbGUgKGluZGV4IDwgZW50cmllcy5sZW5ndGgpIHtcbiAgICAgIGlmIChlbnRyaWVzW2luZGV4KytdLmtleSA9PT0ga2V5KSByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5zZXRgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtc2V0XG4gIHNldDogZnVuY3Rpb24gc2V0KG5hbWUsIHZhbHVlKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKTtcbiAgICB2YXIgZW50cmllcyA9IHN0YXRlLmVudHJpZXM7XG4gICAgdmFyIGZvdW5kID0gZmFsc2U7XG4gICAgdmFyIGtleSA9ICR0b1N0cmluZyhuYW1lKTtcbiAgICB2YXIgdmFsID0gJHRvU3RyaW5nKHZhbHVlKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBlbnRyeTtcbiAgICBmb3IgKDsgaW5kZXggPCBlbnRyaWVzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgIGlmIChlbnRyeS5rZXkgPT09IGtleSkge1xuICAgICAgICBpZiAoZm91bmQpIHNwbGljZShlbnRyaWVzLCBpbmRleC0tLCAxKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgIGVudHJ5LnZhbHVlID0gdmFsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghZm91bmQpIHB1c2goZW50cmllcywgeyBrZXk6IGtleSwgdmFsdWU6IHZhbCB9KTtcbiAgICBzdGF0ZS51cGRhdGVVUkwoKTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuc29ydGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1zb3J0XG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoKSB7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKTtcbiAgICBhcnJheVNvcnQoc3RhdGUuZW50cmllcywgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBhLmtleSA+IGIua2V5ID8gMSA6IC0xO1xuICAgIH0pO1xuICAgIHN0YXRlLnVwZGF0ZVVSTCgpO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2RcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFjayAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgZW50cmllcyA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcykuZW50cmllcztcbiAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2ssIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBlbnRyeTtcbiAgICB3aGlsZSAoaW5kZXggPCBlbnRyaWVzLmxlbmd0aCkge1xuICAgICAgZW50cnkgPSBlbnRyaWVzW2luZGV4KytdO1xuICAgICAgYm91bmRGdW5jdGlvbihlbnRyeS52YWx1ZSwgZW50cnkua2V5LCB0aGlzKTtcbiAgICB9XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuICBrZXlzOiBmdW5jdGlvbiBrZXlzKCkge1xuICAgIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zSXRlcmF0b3IodGhpcywgJ2tleXMnKTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUudmFsdWVzYCBtZXRob2RcbiAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoKSB7XG4gICAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXNJdGVyYXRvcih0aGlzLCAndmFsdWVzJyk7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmVudHJpZXNgIG1ldGhvZFxuICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKCkge1xuICAgIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zSXRlcmF0b3IodGhpcywgJ2VudHJpZXMnKTtcbiAgfVxufSwgeyBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG4vLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG5kZWZpbmVCdWlsdEluKFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZSwgSVRFUkFUT1IsIFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZS5lbnRyaWVzLCB7IG5hbWU6ICdlbnRyaWVzJyB9KTtcblxuLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmxzZWFyY2hwYXJhbXMtc3RyaW5naWZpY2F0aW9uLWJlaGF2aW9yXG5kZWZpbmVCdWlsdEluKFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpLnNlcmlhbGl6ZSgpO1xufSwgeyBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG5zZXRUb1N0cmluZ1RhZyhVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3RvciwgVVJMX1NFQVJDSF9QQVJBTVMpO1xuXG4kKHsgZ2xvYmFsOiB0cnVlLCBjb25zdHJ1Y3RvcjogdHJ1ZSwgZm9yY2VkOiAhVVNFX05BVElWRV9VUkwgfSwge1xuICBVUkxTZWFyY2hQYXJhbXM6IFVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yXG59KTtcblxuLy8gV3JhcCBgZmV0Y2hgIGFuZCBgUmVxdWVzdGAgZm9yIGNvcnJlY3Qgd29yayB3aXRoIHBvbHlmaWxsZWQgYFVSTFNlYXJjaFBhcmFtc2BcbmlmICghVVNFX05BVElWRV9VUkwgJiYgaXNDYWxsYWJsZShIZWFkZXJzKSkge1xuICB2YXIgaGVhZGVyc0hhcyA9IHVuY3VycnlUaGlzKEhlYWRlcnNQcm90b3R5cGUuaGFzKTtcbiAgdmFyIGhlYWRlcnNTZXQgPSB1bmN1cnJ5VGhpcyhIZWFkZXJzUHJvdG90eXBlLnNldCk7XG5cbiAgdmFyIHdyYXBSZXF1ZXN0T3B0aW9ucyA9IGZ1bmN0aW9uIChpbml0KSB7XG4gICAgaWYgKGlzT2JqZWN0KGluaXQpKSB7XG4gICAgICB2YXIgYm9keSA9IGluaXQuYm9keTtcbiAgICAgIHZhciBoZWFkZXJzO1xuICAgICAgaWYgKGNsYXNzb2YoYm9keSkgPT09IFVSTF9TRUFSQ0hfUEFSQU1TKSB7XG4gICAgICAgIGhlYWRlcnMgPSBpbml0LmhlYWRlcnMgPyBuZXcgSGVhZGVycyhpbml0LmhlYWRlcnMpIDogbmV3IEhlYWRlcnMoKTtcbiAgICAgICAgaWYgKCFoZWFkZXJzSGFzKGhlYWRlcnMsICdjb250ZW50LXR5cGUnKSkge1xuICAgICAgICAgIGhlYWRlcnNTZXQoaGVhZGVycywgJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD1VVEYtOCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjcmVhdGUoaW5pdCwge1xuICAgICAgICAgIGJvZHk6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCAkdG9TdHJpbmcoYm9keSkpLFxuICAgICAgICAgIGhlYWRlcnM6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCBoZWFkZXJzKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IHJldHVybiBpbml0O1xuICB9O1xuXG4gIGlmIChpc0NhbGxhYmxlKG5hdGl2ZUZldGNoKSkge1xuICAgICQoeyBnbG9iYWw6IHRydWUsIGVudW1lcmFibGU6IHRydWUsIGRvbnRDYWxsR2V0U2V0OiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICAgICAgZmV0Y2g6IGZ1bmN0aW9uIGZldGNoKGlucHV0IC8qICwgaW5pdCAqLykge1xuICAgICAgICByZXR1cm4gbmF0aXZlRmV0Y2goaW5wdXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gd3JhcFJlcXVlc3RPcHRpb25zKGFyZ3VtZW50c1sxXSkgOiB7fSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAoaXNDYWxsYWJsZShOYXRpdmVSZXF1ZXN0KSkge1xuICAgIHZhciBSZXF1ZXN0Q29uc3RydWN0b3IgPSBmdW5jdGlvbiBSZXF1ZXN0KGlucHV0IC8qICwgaW5pdCAqLykge1xuICAgICAgYW5JbnN0YW5jZSh0aGlzLCBSZXF1ZXN0UHJvdG90eXBlKTtcbiAgICAgIHJldHVybiBuZXcgTmF0aXZlUmVxdWVzdChpbnB1dCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyB3cmFwUmVxdWVzdE9wdGlvbnMoYXJndW1lbnRzWzFdKSA6IHt9KTtcbiAgICB9O1xuXG4gICAgUmVxdWVzdFByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJlcXVlc3RDb25zdHJ1Y3RvcjtcbiAgICBSZXF1ZXN0Q29uc3RydWN0b3IucHJvdG90eXBlID0gUmVxdWVzdFByb3RvdHlwZTtcblxuICAgICQoeyBnbG9iYWw6IHRydWUsIGNvbnN0cnVjdG9yOiB0cnVlLCBkb250Q2FsbEdldFNldDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgICAgIFJlcXVlc3Q6IFJlcXVlc3RDb25zdHJ1Y3RvclxuICAgIH0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBVUkxTZWFyY2hQYXJhbXM6IFVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yLFxuICBnZXRTdGF0ZTogZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZVxufTtcbiIsIi8vIFRPRE86IFJlbW92ZSB0aGlzIG1vZHVsZSBmcm9tIGBjb3JlLWpzQDRgIHNpbmNlIGl0J3MgcmVwbGFjZWQgdG8gbW9kdWxlIGJlbG93XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi51cmwtc2VhcmNoLXBhcmFtcy5jb25zdHJ1Y3RvcicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gVE9ETzogaW4gY29yZS1qc0A0LCBtb3ZlIC9tb2R1bGVzLyBkZXBlbmRlbmNpZXMgdG8gcHVibGljIGVudHJpZXMgZm9yIGJldHRlciBvcHRpbWl6YXRpb24gYnkgdG9vbHMgbGlrZSBgcHJlc2V0LWVudmBcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yJyk7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIFVTRV9OQVRJVkVfVVJMID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VybC1jb25zdHJ1Y3Rvci1kZXRlY3Rpb24nKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIGRlZmluZUJ1aWx0SW5BY2Nlc3NvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4tYWNjZXNzb3InKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWFzc2lnbicpO1xudmFyIGFycmF5RnJvbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mcm9tJyk7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZS1zaW1wbGUnKTtcbnZhciBjb2RlQXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZScpLmNvZGVBdDtcbnZhciB0b0FTQ0lJID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1wdW55Y29kZS10by1hc2NpaScpO1xudmFyICR0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3ZhbGlkYXRlLWFyZ3VtZW50cy1sZW5ndGgnKTtcbnZhciBVUkxTZWFyY2hQYXJhbXNNb2R1bGUgPSByZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi51cmwtc2VhcmNoLXBhcmFtcy5jb25zdHJ1Y3RvcicpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFVSTFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoJ1VSTCcpO1xudmFyIFVSTFNlYXJjaFBhcmFtcyA9IFVSTFNlYXJjaFBhcmFtc01vZHVsZS5VUkxTZWFyY2hQYXJhbXM7XG52YXIgZ2V0SW50ZXJuYWxTZWFyY2hQYXJhbXNTdGF0ZSA9IFVSTFNlYXJjaFBhcmFtc01vZHVsZS5nZXRTdGF0ZTtcblxudmFyIE5hdGl2ZVVSTCA9IGdsb2JhbC5VUkw7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBwYXJzZUludCA9IGdsb2JhbC5wYXJzZUludDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoLy4vLmV4ZWMpO1xudmFyIGpvaW4gPSB1bmN1cnJ5VGhpcyhbXS5qb2luKTtcbnZhciBudW1iZXJUb1N0cmluZyA9IHVuY3VycnlUaGlzKDEuMC50b1N0cmluZyk7XG52YXIgcG9wID0gdW5jdXJyeVRoaXMoW10ucG9wKTtcbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG52YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xudmFyIHNoaWZ0ID0gdW5jdXJyeVRoaXMoW10uc2hpZnQpO1xudmFyIHNwbGl0ID0gdW5jdXJyeVRoaXMoJycuc3BsaXQpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xudmFyIHRvTG93ZXJDYXNlID0gdW5jdXJyeVRoaXMoJycudG9Mb3dlckNhc2UpO1xudmFyIHVuc2hpZnQgPSB1bmN1cnJ5VGhpcyhbXS51bnNoaWZ0KTtcblxudmFyIElOVkFMSURfQVVUSE9SSVRZID0gJ0ludmFsaWQgYXV0aG9yaXR5JztcbnZhciBJTlZBTElEX1NDSEVNRSA9ICdJbnZhbGlkIHNjaGVtZSc7XG52YXIgSU5WQUxJRF9IT1NUID0gJ0ludmFsaWQgaG9zdCc7XG52YXIgSU5WQUxJRF9QT1JUID0gJ0ludmFsaWQgcG9ydCc7XG5cbnZhciBBTFBIQSA9IC9bYS16XS9pO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby1vYnNjdXJlLXJhbmdlIC0tIHNhZmVcbnZhciBBTFBIQU5VTUVSSUMgPSAvW1xcZCstLmEtel0vaTtcbnZhciBESUdJVCA9IC9cXGQvO1xudmFyIEhFWF9TVEFSVCA9IC9eMHgvaTtcbnZhciBPQ1QgPSAvXlswLTddKyQvO1xudmFyIERFQyA9IC9eXFxkKyQvO1xudmFyIEhFWCA9IC9eW1xcZGEtZl0rJC9pO1xuLyogZXNsaW50LWRpc2FibGUgcmVnZXhwL25vLWNvbnRyb2wtY2hhcmFjdGVyIC0tIHNhZmUgKi9cbnZhciBGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5UID0gL1tcXDBcXHRcXG5cXHIgIyUvOjw+P0BbXFxcXFxcXV58XS87XG52YXIgRk9SQklEREVOX0hPU1RfQ09ERV9QT0lOVF9FWENMVURJTkdfUEVSQ0VOVCA9IC9bXFwwXFx0XFxuXFxyICMvOjw+P0BbXFxcXFxcXV58XS87XG52YXIgTEVBRElOR19BTkRfVFJBSUxJTkdfQzBfQ09OVFJPTF9PUl9TUEFDRSA9IC9eW1xcdTAwMDAtXFx1MDAyMF0rfFtcXHUwMDAwLVxcdTAwMjBdKyQvZztcbnZhciBUQUJfQU5EX05FV19MSU5FID0gL1tcXHRcXG5cXHJdL2c7XG4vKiBlc2xpbnQtZW5hYmxlIHJlZ2V4cC9uby1jb250cm9sLWNoYXJhY3RlciAtLSBzYWZlICovXG52YXIgRU9GO1xuXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2lwdjQtbnVtYmVyLXBhcnNlclxudmFyIHBhcnNlSVB2NCA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICB2YXIgcGFydHMgPSBzcGxpdChpbnB1dCwgJy4nKTtcbiAgdmFyIHBhcnRzTGVuZ3RoLCBudW1iZXJzLCBpbmRleCwgcGFydCwgcmFkaXgsIG51bWJlciwgaXB2NDtcbiAgaWYgKHBhcnRzLmxlbmd0aCAmJiBwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXSA9PSAnJykge1xuICAgIHBhcnRzLmxlbmd0aC0tO1xuICB9XG4gIHBhcnRzTGVuZ3RoID0gcGFydHMubGVuZ3RoO1xuICBpZiAocGFydHNMZW5ndGggPiA0KSByZXR1cm4gaW5wdXQ7XG4gIG51bWJlcnMgPSBbXTtcbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgcGFydHNMZW5ndGg7IGluZGV4KyspIHtcbiAgICBwYXJ0ID0gcGFydHNbaW5kZXhdO1xuICAgIGlmIChwYXJ0ID09ICcnKSByZXR1cm4gaW5wdXQ7XG4gICAgcmFkaXggPSAxMDtcbiAgICBpZiAocGFydC5sZW5ndGggPiAxICYmIGNoYXJBdChwYXJ0LCAwKSA9PSAnMCcpIHtcbiAgICAgIHJhZGl4ID0gZXhlYyhIRVhfU1RBUlQsIHBhcnQpID8gMTYgOiA4O1xuICAgICAgcGFydCA9IHN0cmluZ1NsaWNlKHBhcnQsIHJhZGl4ID09IDggPyAxIDogMik7XG4gICAgfVxuICAgIGlmIChwYXJ0ID09PSAnJykge1xuICAgICAgbnVtYmVyID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFleGVjKHJhZGl4ID09IDEwID8gREVDIDogcmFkaXggPT0gOCA/IE9DVCA6IEhFWCwgcGFydCkpIHJldHVybiBpbnB1dDtcbiAgICAgIG51bWJlciA9IHBhcnNlSW50KHBhcnQsIHJhZGl4KTtcbiAgICB9XG4gICAgcHVzaChudW1iZXJzLCBudW1iZXIpO1xuICB9XG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHBhcnRzTGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgbnVtYmVyID0gbnVtYmVyc1tpbmRleF07XG4gICAgaWYgKGluZGV4ID09IHBhcnRzTGVuZ3RoIC0gMSkge1xuICAgICAgaWYgKG51bWJlciA+PSBwb3coMjU2LCA1IC0gcGFydHNMZW5ndGgpKSByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2UgaWYgKG51bWJlciA+IDI1NSkgcmV0dXJuIG51bGw7XG4gIH1cbiAgaXB2NCA9IHBvcChudW1iZXJzKTtcbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgbnVtYmVycy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICBpcHY0ICs9IG51bWJlcnNbaW5kZXhdICogcG93KDI1NiwgMyAtIGluZGV4KTtcbiAgfVxuICByZXR1cm4gaXB2NDtcbn07XG5cbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1pcHY2LXBhcnNlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzIC0tIFRPRE9cbnZhciBwYXJzZUlQdjYgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgdmFyIGFkZHJlc3MgPSBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF07XG4gIHZhciBwaWVjZUluZGV4ID0gMDtcbiAgdmFyIGNvbXByZXNzID0gbnVsbDtcbiAgdmFyIHBvaW50ZXIgPSAwO1xuICB2YXIgdmFsdWUsIGxlbmd0aCwgbnVtYmVyc1NlZW4sIGlwdjRQaWVjZSwgbnVtYmVyLCBzd2Fwcywgc3dhcDtcblxuICB2YXIgY2hyID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjaGFyQXQoaW5wdXQsIHBvaW50ZXIpO1xuICB9O1xuXG4gIGlmIChjaHIoKSA9PSAnOicpIHtcbiAgICBpZiAoY2hhckF0KGlucHV0LCAxKSAhPSAnOicpIHJldHVybjtcbiAgICBwb2ludGVyICs9IDI7XG4gICAgcGllY2VJbmRleCsrO1xuICAgIGNvbXByZXNzID0gcGllY2VJbmRleDtcbiAgfVxuICB3aGlsZSAoY2hyKCkpIHtcbiAgICBpZiAocGllY2VJbmRleCA9PSA4KSByZXR1cm47XG4gICAgaWYgKGNocigpID09ICc6Jykge1xuICAgICAgaWYgKGNvbXByZXNzICE9PSBudWxsKSByZXR1cm47XG4gICAgICBwb2ludGVyKys7XG4gICAgICBwaWVjZUluZGV4Kys7XG4gICAgICBjb21wcmVzcyA9IHBpZWNlSW5kZXg7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdmFsdWUgPSBsZW5ndGggPSAwO1xuICAgIHdoaWxlIChsZW5ndGggPCA0ICYmIGV4ZWMoSEVYLCBjaHIoKSkpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUgKiAxNiArIHBhcnNlSW50KGNocigpLCAxNik7XG4gICAgICBwb2ludGVyKys7XG4gICAgICBsZW5ndGgrKztcbiAgICB9XG4gICAgaWYgKGNocigpID09ICcuJykge1xuICAgICAgaWYgKGxlbmd0aCA9PSAwKSByZXR1cm47XG4gICAgICBwb2ludGVyIC09IGxlbmd0aDtcbiAgICAgIGlmIChwaWVjZUluZGV4ID4gNikgcmV0dXJuO1xuICAgICAgbnVtYmVyc1NlZW4gPSAwO1xuICAgICAgd2hpbGUgKGNocigpKSB7XG4gICAgICAgIGlwdjRQaWVjZSA9IG51bGw7XG4gICAgICAgIGlmIChudW1iZXJzU2VlbiA+IDApIHtcbiAgICAgICAgICBpZiAoY2hyKCkgPT0gJy4nICYmIG51bWJlcnNTZWVuIDwgNCkgcG9pbnRlcisrO1xuICAgICAgICAgIGVsc2UgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZXhlYyhESUdJVCwgY2hyKCkpKSByZXR1cm47XG4gICAgICAgIHdoaWxlIChleGVjKERJR0lULCBjaHIoKSkpIHtcbiAgICAgICAgICBudW1iZXIgPSBwYXJzZUludChjaHIoKSwgMTApO1xuICAgICAgICAgIGlmIChpcHY0UGllY2UgPT09IG51bGwpIGlwdjRQaWVjZSA9IG51bWJlcjtcbiAgICAgICAgICBlbHNlIGlmIChpcHY0UGllY2UgPT0gMCkgcmV0dXJuO1xuICAgICAgICAgIGVsc2UgaXB2NFBpZWNlID0gaXB2NFBpZWNlICogMTAgKyBudW1iZXI7XG4gICAgICAgICAgaWYgKGlwdjRQaWVjZSA+IDI1NSkgcmV0dXJuO1xuICAgICAgICAgIHBvaW50ZXIrKztcbiAgICAgICAgfVxuICAgICAgICBhZGRyZXNzW3BpZWNlSW5kZXhdID0gYWRkcmVzc1twaWVjZUluZGV4XSAqIDI1NiArIGlwdjRQaWVjZTtcbiAgICAgICAgbnVtYmVyc1NlZW4rKztcbiAgICAgICAgaWYgKG51bWJlcnNTZWVuID09IDIgfHwgbnVtYmVyc1NlZW4gPT0gNCkgcGllY2VJbmRleCsrO1xuICAgICAgfVxuICAgICAgaWYgKG51bWJlcnNTZWVuICE9IDQpIHJldHVybjtcbiAgICAgIGJyZWFrO1xuICAgIH0gZWxzZSBpZiAoY2hyKCkgPT0gJzonKSB7XG4gICAgICBwb2ludGVyKys7XG4gICAgICBpZiAoIWNocigpKSByZXR1cm47XG4gICAgfSBlbHNlIGlmIChjaHIoKSkgcmV0dXJuO1xuICAgIGFkZHJlc3NbcGllY2VJbmRleCsrXSA9IHZhbHVlO1xuICB9XG4gIGlmIChjb21wcmVzcyAhPT0gbnVsbCkge1xuICAgIHN3YXBzID0gcGllY2VJbmRleCAtIGNvbXByZXNzO1xuICAgIHBpZWNlSW5kZXggPSA3O1xuICAgIHdoaWxlIChwaWVjZUluZGV4ICE9IDAgJiYgc3dhcHMgPiAwKSB7XG4gICAgICBzd2FwID0gYWRkcmVzc1twaWVjZUluZGV4XTtcbiAgICAgIGFkZHJlc3NbcGllY2VJbmRleC0tXSA9IGFkZHJlc3NbY29tcHJlc3MgKyBzd2FwcyAtIDFdO1xuICAgICAgYWRkcmVzc1tjb21wcmVzcyArIC0tc3dhcHNdID0gc3dhcDtcbiAgICB9XG4gIH0gZWxzZSBpZiAocGllY2VJbmRleCAhPSA4KSByZXR1cm47XG4gIHJldHVybiBhZGRyZXNzO1xufTtcblxudmFyIGZpbmRMb25nZXN0WmVyb1NlcXVlbmNlID0gZnVuY3Rpb24gKGlwdjYpIHtcbiAgdmFyIG1heEluZGV4ID0gbnVsbDtcbiAgdmFyIG1heExlbmd0aCA9IDE7XG4gIHZhciBjdXJyU3RhcnQgPSBudWxsO1xuICB2YXIgY3Vyckxlbmd0aCA9IDA7XG4gIHZhciBpbmRleCA9IDA7XG4gIGZvciAoOyBpbmRleCA8IDg7IGluZGV4KyspIHtcbiAgICBpZiAoaXB2NltpbmRleF0gIT09IDApIHtcbiAgICAgIGlmIChjdXJyTGVuZ3RoID4gbWF4TGVuZ3RoKSB7XG4gICAgICAgIG1heEluZGV4ID0gY3VyclN0YXJ0O1xuICAgICAgICBtYXhMZW5ndGggPSBjdXJyTGVuZ3RoO1xuICAgICAgfVxuICAgICAgY3VyclN0YXJ0ID0gbnVsbDtcbiAgICAgIGN1cnJMZW5ndGggPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoY3VyclN0YXJ0ID09PSBudWxsKSBjdXJyU3RhcnQgPSBpbmRleDtcbiAgICAgICsrY3Vyckxlbmd0aDtcbiAgICB9XG4gIH1cbiAgaWYgKGN1cnJMZW5ndGggPiBtYXhMZW5ndGgpIHtcbiAgICBtYXhJbmRleCA9IGN1cnJTdGFydDtcbiAgICBtYXhMZW5ndGggPSBjdXJyTGVuZ3RoO1xuICB9XG4gIHJldHVybiBtYXhJbmRleDtcbn07XG5cbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jaG9zdC1zZXJpYWxpemluZ1xudmFyIHNlcmlhbGl6ZUhvc3QgPSBmdW5jdGlvbiAoaG9zdCkge1xuICB2YXIgcmVzdWx0LCBpbmRleCwgY29tcHJlc3MsIGlnbm9yZTA7XG4gIC8vIGlwdjRcbiAgaWYgKHR5cGVvZiBob3N0ID09ICdudW1iZXInKSB7XG4gICAgcmVzdWx0ID0gW107XG4gICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgNDsgaW5kZXgrKykge1xuICAgICAgdW5zaGlmdChyZXN1bHQsIGhvc3QgJSAyNTYpO1xuICAgICAgaG9zdCA9IGZsb29yKGhvc3QgLyAyNTYpO1xuICAgIH0gcmV0dXJuIGpvaW4ocmVzdWx0LCAnLicpO1xuICAvLyBpcHY2XG4gIH0gZWxzZSBpZiAodHlwZW9mIGhvc3QgPT0gJ29iamVjdCcpIHtcbiAgICByZXN1bHQgPSAnJztcbiAgICBjb21wcmVzcyA9IGZpbmRMb25nZXN0WmVyb1NlcXVlbmNlKGhvc3QpO1xuICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IDg7IGluZGV4KyspIHtcbiAgICAgIGlmIChpZ25vcmUwICYmIGhvc3RbaW5kZXhdID09PSAwKSBjb250aW51ZTtcbiAgICAgIGlmIChpZ25vcmUwKSBpZ25vcmUwID0gZmFsc2U7XG4gICAgICBpZiAoY29tcHJlc3MgPT09IGluZGV4KSB7XG4gICAgICAgIHJlc3VsdCArPSBpbmRleCA/ICc6JyA6ICc6Oic7XG4gICAgICAgIGlnbm9yZTAgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ICs9IG51bWJlclRvU3RyaW5nKGhvc3RbaW5kZXhdLCAxNik7XG4gICAgICAgIGlmIChpbmRleCA8IDcpIHJlc3VsdCArPSAnOic7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnWycgKyByZXN1bHQgKyAnXSc7XG4gIH0gcmV0dXJuIGhvc3Q7XG59O1xuXG52YXIgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCA9IHt9O1xudmFyIGZyYWdtZW50UGVyY2VudEVuY29kZVNldCA9IGFzc2lnbih7fSwgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCwge1xuICAnICc6IDEsICdcIic6IDEsICc8JzogMSwgJz4nOiAxLCAnYCc6IDFcbn0pO1xudmFyIHBhdGhQZXJjZW50RW5jb2RlU2V0ID0gYXNzaWduKHt9LCBmcmFnbWVudFBlcmNlbnRFbmNvZGVTZXQsIHtcbiAgJyMnOiAxLCAnPyc6IDEsICd7JzogMSwgJ30nOiAxXG59KTtcbnZhciB1c2VyaW5mb1BlcmNlbnRFbmNvZGVTZXQgPSBhc3NpZ24oe30sIHBhdGhQZXJjZW50RW5jb2RlU2V0LCB7XG4gICcvJzogMSwgJzonOiAxLCAnOyc6IDEsICc9JzogMSwgJ0AnOiAxLCAnWyc6IDEsICdcXFxcJzogMSwgJ10nOiAxLCAnXic6IDEsICd8JzogMVxufSk7XG5cbnZhciBwZXJjZW50RW5jb2RlID0gZnVuY3Rpb24gKGNociwgc2V0KSB7XG4gIHZhciBjb2RlID0gY29kZUF0KGNociwgMCk7XG4gIHJldHVybiBjb2RlID4gMHgyMCAmJiBjb2RlIDwgMHg3RiAmJiAhaGFzT3duKHNldCwgY2hyKSA/IGNociA6IGVuY29kZVVSSUNvbXBvbmVudChjaHIpO1xufTtcblxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNzcGVjaWFsLXNjaGVtZVxudmFyIHNwZWNpYWxTY2hlbWVzID0ge1xuICBmdHA6IDIxLFxuICBmaWxlOiBudWxsLFxuICBodHRwOiA4MCxcbiAgaHR0cHM6IDQ0MyxcbiAgd3M6IDgwLFxuICB3c3M6IDQ0M1xufTtcblxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN3aW5kb3dzLWRyaXZlLWxldHRlclxudmFyIGlzV2luZG93c0RyaXZlTGV0dGVyID0gZnVuY3Rpb24gKHN0cmluZywgbm9ybWFsaXplZCkge1xuICB2YXIgc2Vjb25kO1xuICByZXR1cm4gc3RyaW5nLmxlbmd0aCA9PSAyICYmIGV4ZWMoQUxQSEEsIGNoYXJBdChzdHJpbmcsIDApKVxuICAgICYmICgoc2Vjb25kID0gY2hhckF0KHN0cmluZywgMSkpID09ICc6JyB8fCAoIW5vcm1hbGl6ZWQgJiYgc2Vjb25kID09ICd8JykpO1xufTtcblxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNzdGFydC13aXRoLWEtd2luZG93cy1kcml2ZS1sZXR0ZXJcbnZhciBzdGFydHNXaXRoV2luZG93c0RyaXZlTGV0dGVyID0gZnVuY3Rpb24gKHN0cmluZykge1xuICB2YXIgdGhpcmQ7XG4gIHJldHVybiBzdHJpbmcubGVuZ3RoID4gMSAmJiBpc1dpbmRvd3NEcml2ZUxldHRlcihzdHJpbmdTbGljZShzdHJpbmcsIDAsIDIpKSAmJiAoXG4gICAgc3RyaW5nLmxlbmd0aCA9PSAyIHx8XG4gICAgKCh0aGlyZCA9IGNoYXJBdChzdHJpbmcsIDIpKSA9PT0gJy8nIHx8IHRoaXJkID09PSAnXFxcXCcgfHwgdGhpcmQgPT09ICc/JyB8fCB0aGlyZCA9PT0gJyMnKVxuICApO1xufTtcblxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNzaW5nbGUtZG90LXBhdGgtc2VnbWVudFxudmFyIGlzU2luZ2xlRG90ID0gZnVuY3Rpb24gKHNlZ21lbnQpIHtcbiAgcmV0dXJuIHNlZ21lbnQgPT09ICcuJyB8fCB0b0xvd2VyQ2FzZShzZWdtZW50KSA9PT0gJyUyZSc7XG59O1xuXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvdWJsZS1kb3QtcGF0aC1zZWdtZW50XG52YXIgaXNEb3VibGVEb3QgPSBmdW5jdGlvbiAoc2VnbWVudCkge1xuICBzZWdtZW50ID0gdG9Mb3dlckNhc2Uoc2VnbWVudCk7XG4gIHJldHVybiBzZWdtZW50ID09PSAnLi4nIHx8IHNlZ21lbnQgPT09ICclMmUuJyB8fCBzZWdtZW50ID09PSAnLiUyZScgfHwgc2VnbWVudCA9PT0gJyUyZSUyZSc7XG59O1xuXG4vLyBTdGF0ZXM6XG52YXIgU0NIRU1FX1NUQVJUID0ge307XG52YXIgU0NIRU1FID0ge307XG52YXIgTk9fU0NIRU1FID0ge307XG52YXIgU1BFQ0lBTF9SRUxBVElWRV9PUl9BVVRIT1JJVFkgPSB7fTtcbnZhciBQQVRIX09SX0FVVEhPUklUWSA9IHt9O1xudmFyIFJFTEFUSVZFID0ge307XG52YXIgUkVMQVRJVkVfU0xBU0ggPSB7fTtcbnZhciBTUEVDSUFMX0FVVEhPUklUWV9TTEFTSEVTID0ge307XG52YXIgU1BFQ0lBTF9BVVRIT1JJVFlfSUdOT1JFX1NMQVNIRVMgPSB7fTtcbnZhciBBVVRIT1JJVFkgPSB7fTtcbnZhciBIT1NUID0ge307XG52YXIgSE9TVE5BTUUgPSB7fTtcbnZhciBQT1JUID0ge307XG52YXIgRklMRSA9IHt9O1xudmFyIEZJTEVfU0xBU0ggPSB7fTtcbnZhciBGSUxFX0hPU1QgPSB7fTtcbnZhciBQQVRIX1NUQVJUID0ge307XG52YXIgUEFUSCA9IHt9O1xudmFyIENBTk5PVF9CRV9BX0JBU0VfVVJMX1BBVEggPSB7fTtcbnZhciBRVUVSWSA9IHt9O1xudmFyIEZSQUdNRU5UID0ge307XG5cbnZhciBVUkxTdGF0ZSA9IGZ1bmN0aW9uICh1cmwsIGlzQmFzZSwgYmFzZSkge1xuICB2YXIgdXJsU3RyaW5nID0gJHRvU3RyaW5nKHVybCk7XG4gIHZhciBiYXNlU3RhdGUsIGZhaWx1cmUsIHNlYXJjaFBhcmFtcztcbiAgaWYgKGlzQmFzZSkge1xuICAgIGZhaWx1cmUgPSB0aGlzLnBhcnNlKHVybFN0cmluZyk7XG4gICAgaWYgKGZhaWx1cmUpIHRocm93IFR5cGVFcnJvcihmYWlsdXJlKTtcbiAgICB0aGlzLnNlYXJjaFBhcmFtcyA9IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJhc2UgIT09IHVuZGVmaW5lZCkgYmFzZVN0YXRlID0gbmV3IFVSTFN0YXRlKGJhc2UsIHRydWUpO1xuICAgIGZhaWx1cmUgPSB0aGlzLnBhcnNlKHVybFN0cmluZywgbnVsbCwgYmFzZVN0YXRlKTtcbiAgICBpZiAoZmFpbHVyZSkgdGhyb3cgVHlwZUVycm9yKGZhaWx1cmUpO1xuICAgIHNlYXJjaFBhcmFtcyA9IGdldEludGVybmFsU2VhcmNoUGFyYW1zU3RhdGUobmV3IFVSTFNlYXJjaFBhcmFtcygpKTtcbiAgICBzZWFyY2hQYXJhbXMuYmluZFVSTCh0aGlzKTtcbiAgICB0aGlzLnNlYXJjaFBhcmFtcyA9IHNlYXJjaFBhcmFtcztcbiAgfVxufTtcblxuVVJMU3RhdGUucHJvdG90eXBlID0ge1xuICB0eXBlOiAnVVJMJyxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmwtcGFyc2luZ1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHMgLS0gVE9ET1xuICBwYXJzZTogZnVuY3Rpb24gKGlucHV0LCBzdGF0ZU92ZXJyaWRlLCBiYXNlKSB7XG4gICAgdmFyIHVybCA9IHRoaXM7XG4gICAgdmFyIHN0YXRlID0gc3RhdGVPdmVycmlkZSB8fCBTQ0hFTUVfU1RBUlQ7XG4gICAgdmFyIHBvaW50ZXIgPSAwO1xuICAgIHZhciBidWZmZXIgPSAnJztcbiAgICB2YXIgc2VlbkF0ID0gZmFsc2U7XG4gICAgdmFyIHNlZW5CcmFja2V0ID0gZmFsc2U7XG4gICAgdmFyIHNlZW5QYXNzd29yZFRva2VuID0gZmFsc2U7XG4gICAgdmFyIGNvZGVQb2ludHMsIGNociwgYnVmZmVyQ29kZVBvaW50cywgZmFpbHVyZTtcblxuICAgIGlucHV0ID0gJHRvU3RyaW5nKGlucHV0KTtcblxuICAgIGlmICghc3RhdGVPdmVycmlkZSkge1xuICAgICAgdXJsLnNjaGVtZSA9ICcnO1xuICAgICAgdXJsLnVzZXJuYW1lID0gJyc7XG4gICAgICB1cmwucGFzc3dvcmQgPSAnJztcbiAgICAgIHVybC5ob3N0ID0gbnVsbDtcbiAgICAgIHVybC5wb3J0ID0gbnVsbDtcbiAgICAgIHVybC5wYXRoID0gW107XG4gICAgICB1cmwucXVlcnkgPSBudWxsO1xuICAgICAgdXJsLmZyYWdtZW50ID0gbnVsbDtcbiAgICAgIHVybC5jYW5ub3RCZUFCYXNlVVJMID0gZmFsc2U7XG4gICAgICBpbnB1dCA9IHJlcGxhY2UoaW5wdXQsIExFQURJTkdfQU5EX1RSQUlMSU5HX0MwX0NPTlRST0xfT1JfU1BBQ0UsICcnKTtcbiAgICB9XG5cbiAgICBpbnB1dCA9IHJlcGxhY2UoaW5wdXQsIFRBQl9BTkRfTkVXX0xJTkUsICcnKTtcblxuICAgIGNvZGVQb2ludHMgPSBhcnJheUZyb20oaW5wdXQpO1xuXG4gICAgd2hpbGUgKHBvaW50ZXIgPD0gY29kZVBvaW50cy5sZW5ndGgpIHtcbiAgICAgIGNociA9IGNvZGVQb2ludHNbcG9pbnRlcl07XG4gICAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICAgIGNhc2UgU0NIRU1FX1NUQVJUOlxuICAgICAgICAgIGlmIChjaHIgJiYgZXhlYyhBTFBIQSwgY2hyKSkge1xuICAgICAgICAgICAgYnVmZmVyICs9IHRvTG93ZXJDYXNlKGNocik7XG4gICAgICAgICAgICBzdGF0ZSA9IFNDSEVNRTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFzdGF0ZU92ZXJyaWRlKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IE5PX1NDSEVNRTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSByZXR1cm4gSU5WQUxJRF9TQ0hFTUU7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBTQ0hFTUU6XG4gICAgICAgICAgaWYgKGNociAmJiAoZXhlYyhBTFBIQU5VTUVSSUMsIGNocikgfHwgY2hyID09ICcrJyB8fCBjaHIgPT0gJy0nIHx8IGNociA9PSAnLicpKSB7XG4gICAgICAgICAgICBidWZmZXIgKz0gdG9Mb3dlckNhc2UoY2hyKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNociA9PSAnOicpIHtcbiAgICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlICYmIChcbiAgICAgICAgICAgICAgKHVybC5pc1NwZWNpYWwoKSAhPSBoYXNPd24oc3BlY2lhbFNjaGVtZXMsIGJ1ZmZlcikpIHx8XG4gICAgICAgICAgICAgIChidWZmZXIgPT0gJ2ZpbGUnICYmICh1cmwuaW5jbHVkZXNDcmVkZW50aWFscygpIHx8IHVybC5wb3J0ICE9PSBudWxsKSkgfHxcbiAgICAgICAgICAgICAgKHVybC5zY2hlbWUgPT0gJ2ZpbGUnICYmICF1cmwuaG9zdClcbiAgICAgICAgICAgICkpIHJldHVybjtcbiAgICAgICAgICAgIHVybC5zY2hlbWUgPSBidWZmZXI7XG4gICAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSkge1xuICAgICAgICAgICAgICBpZiAodXJsLmlzU3BlY2lhbCgpICYmIHNwZWNpYWxTY2hlbWVzW3VybC5zY2hlbWVdID09IHVybC5wb3J0KSB1cmwucG9ydCA9IG51bGw7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgICAgaWYgKHVybC5zY2hlbWUgPT0gJ2ZpbGUnKSB7XG4gICAgICAgICAgICAgIHN0YXRlID0gRklMRTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodXJsLmlzU3BlY2lhbCgpICYmIGJhc2UgJiYgYmFzZS5zY2hlbWUgPT0gdXJsLnNjaGVtZSkge1xuICAgICAgICAgICAgICBzdGF0ZSA9IFNQRUNJQUxfUkVMQVRJVkVfT1JfQVVUSE9SSVRZO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh1cmwuaXNTcGVjaWFsKCkpIHtcbiAgICAgICAgICAgICAgc3RhdGUgPSBTUEVDSUFMX0FVVEhPUklUWV9TTEFTSEVTO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjb2RlUG9pbnRzW3BvaW50ZXIgKyAxXSA9PSAnLycpIHtcbiAgICAgICAgICAgICAgc3RhdGUgPSBQQVRIX09SX0FVVEhPUklUWTtcbiAgICAgICAgICAgICAgcG9pbnRlcisrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdXJsLmNhbm5vdEJlQUJhc2VVUkwgPSB0cnVlO1xuICAgICAgICAgICAgICBwdXNoKHVybC5wYXRoLCAnJyk7XG4gICAgICAgICAgICAgIHN0YXRlID0gQ0FOTk9UX0JFX0FfQkFTRV9VUkxfUEFUSDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKCFzdGF0ZU92ZXJyaWRlKSB7XG4gICAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gTk9fU0NIRU1FO1xuICAgICAgICAgICAgcG9pbnRlciA9IDA7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgcmV0dXJuIElOVkFMSURfU0NIRU1FO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgTk9fU0NIRU1FOlxuICAgICAgICAgIGlmICghYmFzZSB8fCAoYmFzZS5jYW5ub3RCZUFCYXNlVVJMICYmIGNociAhPSAnIycpKSByZXR1cm4gSU5WQUxJRF9TQ0hFTUU7XG4gICAgICAgICAgaWYgKGJhc2UuY2Fubm90QmVBQmFzZVVSTCAmJiBjaHIgPT0gJyMnKSB7XG4gICAgICAgICAgICB1cmwuc2NoZW1lID0gYmFzZS5zY2hlbWU7XG4gICAgICAgICAgICB1cmwucGF0aCA9IGFycmF5U2xpY2UoYmFzZS5wYXRoKTtcbiAgICAgICAgICAgIHVybC5xdWVyeSA9IGJhc2UucXVlcnk7XG4gICAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICAgIHVybC5jYW5ub3RCZUFCYXNlVVJMID0gdHJ1ZTtcbiAgICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RhdGUgPSBiYXNlLnNjaGVtZSA9PSAnZmlsZScgPyBGSUxFIDogUkVMQVRJVkU7XG4gICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgY2FzZSBTUEVDSUFMX1JFTEFUSVZFX09SX0FVVEhPUklUWTpcbiAgICAgICAgICBpZiAoY2hyID09ICcvJyAmJiBjb2RlUG9pbnRzW3BvaW50ZXIgKyAxXSA9PSAnLycpIHtcbiAgICAgICAgICAgIHN0YXRlID0gU1BFQ0lBTF9BVVRIT1JJVFlfSUdOT1JFX1NMQVNIRVM7XG4gICAgICAgICAgICBwb2ludGVyKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXRlID0gUkVMQVRJVkU7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGJyZWFrO1xuXG4gICAgICAgIGNhc2UgUEFUSF9PUl9BVVRIT1JJVFk6XG4gICAgICAgICAgaWYgKGNociA9PSAnLycpIHtcbiAgICAgICAgICAgIHN0YXRlID0gQVVUSE9SSVRZO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICBjYXNlIFJFTEFUSVZFOlxuICAgICAgICAgIHVybC5zY2hlbWUgPSBiYXNlLnNjaGVtZTtcbiAgICAgICAgICBpZiAoY2hyID09IEVPRikge1xuICAgICAgICAgICAgdXJsLnVzZXJuYW1lID0gYmFzZS51c2VybmFtZTtcbiAgICAgICAgICAgIHVybC5wYXNzd29yZCA9IGJhc2UucGFzc3dvcmQ7XG4gICAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICAgIHVybC5wb3J0ID0gYmFzZS5wb3J0O1xuICAgICAgICAgICAgdXJsLnBhdGggPSBhcnJheVNsaWNlKGJhc2UucGF0aCk7XG4gICAgICAgICAgICB1cmwucXVlcnkgPSBiYXNlLnF1ZXJ5O1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hyID09ICcvJyB8fCAoY2hyID09ICdcXFxcJyAmJiB1cmwuaXNTcGVjaWFsKCkpKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IFJFTEFUSVZFX1NMQVNIO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hyID09ICc/Jykge1xuICAgICAgICAgICAgdXJsLnVzZXJuYW1lID0gYmFzZS51c2VybmFtZTtcbiAgICAgICAgICAgIHVybC5wYXNzd29yZCA9IGJhc2UucGFzc3dvcmQ7XG4gICAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICAgIHVybC5wb3J0ID0gYmFzZS5wb3J0O1xuICAgICAgICAgICAgdXJsLnBhdGggPSBhcnJheVNsaWNlKGJhc2UucGF0aCk7XG4gICAgICAgICAgICB1cmwucXVlcnkgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gUVVFUlk7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT0gJyMnKSB7XG4gICAgICAgICAgICB1cmwudXNlcm5hbWUgPSBiYXNlLnVzZXJuYW1lO1xuICAgICAgICAgICAgdXJsLnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDtcbiAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgICAgdXJsLnBvcnQgPSBiYXNlLnBvcnQ7XG4gICAgICAgICAgICB1cmwucGF0aCA9IGFycmF5U2xpY2UoYmFzZS5wYXRoKTtcbiAgICAgICAgICAgIHVybC5xdWVyeSA9IGJhc2UucXVlcnk7XG4gICAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVybC51c2VybmFtZSA9IGJhc2UudXNlcm5hbWU7XG4gICAgICAgICAgICB1cmwucGFzc3dvcmQgPSBiYXNlLnBhc3N3b3JkO1xuICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICB1cmwucG9ydCA9IGJhc2UucG9ydDtcbiAgICAgICAgICAgIHVybC5wYXRoID0gYXJyYXlTbGljZShiYXNlLnBhdGgpO1xuICAgICAgICAgICAgdXJsLnBhdGgubGVuZ3RoLS07XG4gICAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGJyZWFrO1xuXG4gICAgICAgIGNhc2UgUkVMQVRJVkVfU0xBU0g6XG4gICAgICAgICAgaWYgKHVybC5pc1NwZWNpYWwoKSAmJiAoY2hyID09ICcvJyB8fCBjaHIgPT0gJ1xcXFwnKSkge1xuICAgICAgICAgICAgc3RhdGUgPSBTUEVDSUFMX0FVVEhPUklUWV9JR05PUkVfU0xBU0hFUztcbiAgICAgICAgICB9IGVsc2UgaWYgKGNociA9PSAnLycpIHtcbiAgICAgICAgICAgIHN0YXRlID0gQVVUSE9SSVRZO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1cmwudXNlcm5hbWUgPSBiYXNlLnVzZXJuYW1lO1xuICAgICAgICAgICAgdXJsLnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDtcbiAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgICAgdXJsLnBvcnQgPSBiYXNlLnBvcnQ7XG4gICAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGJyZWFrO1xuXG4gICAgICAgIGNhc2UgU1BFQ0lBTF9BVVRIT1JJVFlfU0xBU0hFUzpcbiAgICAgICAgICBzdGF0ZSA9IFNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTO1xuICAgICAgICAgIGlmIChjaHIgIT0gJy8nIHx8IGNoYXJBdChidWZmZXIsIHBvaW50ZXIgKyAxKSAhPSAnLycpIGNvbnRpbnVlO1xuICAgICAgICAgIHBvaW50ZXIrKztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTOlxuICAgICAgICAgIGlmIChjaHIgIT0gJy8nICYmIGNociAhPSAnXFxcXCcpIHtcbiAgICAgICAgICAgIHN0YXRlID0gQVVUSE9SSVRZO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBicmVhaztcblxuICAgICAgICBjYXNlIEFVVEhPUklUWTpcbiAgICAgICAgICBpZiAoY2hyID09ICdAJykge1xuICAgICAgICAgICAgaWYgKHNlZW5BdCkgYnVmZmVyID0gJyU0MCcgKyBidWZmZXI7XG4gICAgICAgICAgICBzZWVuQXQgPSB0cnVlO1xuICAgICAgICAgICAgYnVmZmVyQ29kZVBvaW50cyA9IGFycmF5RnJvbShidWZmZXIpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBidWZmZXJDb2RlUG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIHZhciBjb2RlUG9pbnQgPSBidWZmZXJDb2RlUG9pbnRzW2ldO1xuICAgICAgICAgICAgICBpZiAoY29kZVBvaW50ID09ICc6JyAmJiAhc2VlblBhc3N3b3JkVG9rZW4pIHtcbiAgICAgICAgICAgICAgICBzZWVuUGFzc3dvcmRUb2tlbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdmFyIGVuY29kZWRDb2RlUG9pbnRzID0gcGVyY2VudEVuY29kZShjb2RlUG9pbnQsIHVzZXJpbmZvUGVyY2VudEVuY29kZVNldCk7XG4gICAgICAgICAgICAgIGlmIChzZWVuUGFzc3dvcmRUb2tlbikgdXJsLnBhc3N3b3JkICs9IGVuY29kZWRDb2RlUG9pbnRzO1xuICAgICAgICAgICAgICBlbHNlIHVybC51c2VybmFtZSArPSBlbmNvZGVkQ29kZVBvaW50cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICBjaHIgPT0gRU9GIHx8IGNociA9PSAnLycgfHwgY2hyID09ICc/JyB8fCBjaHIgPT0gJyMnIHx8XG4gICAgICAgICAgICAoY2hyID09ICdcXFxcJyAmJiB1cmwuaXNTcGVjaWFsKCkpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAoc2VlbkF0ICYmIGJ1ZmZlciA9PSAnJykgcmV0dXJuIElOVkFMSURfQVVUSE9SSVRZO1xuICAgICAgICAgICAgcG9pbnRlciAtPSBhcnJheUZyb20oYnVmZmVyKS5sZW5ndGggKyAxO1xuICAgICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IEhPU1Q7XG4gICAgICAgICAgfSBlbHNlIGJ1ZmZlciArPSBjaHI7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBIT1NUOlxuICAgICAgICBjYXNlIEhPU1ROQU1FOlxuICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlICYmIHVybC5zY2hlbWUgPT0gJ2ZpbGUnKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEZJTEVfSE9TVDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hyID09ICc6JyAmJiAhc2VlbkJyYWNrZXQpIHtcbiAgICAgICAgICAgIGlmIChidWZmZXIgPT0gJycpIHJldHVybiBJTlZBTElEX0hPU1Q7XG4gICAgICAgICAgICBmYWlsdXJlID0gdXJsLnBhcnNlSG9zdChidWZmZXIpO1xuICAgICAgICAgICAgaWYgKGZhaWx1cmUpIHJldHVybiBmYWlsdXJlO1xuICAgICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IFBPUlQ7XG4gICAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSA9PSBIT1NUTkFNRSkgcmV0dXJuO1xuICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICBjaHIgPT0gRU9GIHx8IGNociA9PSAnLycgfHwgY2hyID09ICc/JyB8fCBjaHIgPT0gJyMnIHx8XG4gICAgICAgICAgICAoY2hyID09ICdcXFxcJyAmJiB1cmwuaXNTcGVjaWFsKCkpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAodXJsLmlzU3BlY2lhbCgpICYmIGJ1ZmZlciA9PSAnJykgcmV0dXJuIElOVkFMSURfSE9TVDtcbiAgICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlICYmIGJ1ZmZlciA9PSAnJyAmJiAodXJsLmluY2x1ZGVzQ3JlZGVudGlhbHMoKSB8fCB1cmwucG9ydCAhPT0gbnVsbCkpIHJldHVybjtcbiAgICAgICAgICAgIGZhaWx1cmUgPSB1cmwucGFyc2VIb3N0KGJ1ZmZlcik7XG4gICAgICAgICAgICBpZiAoZmFpbHVyZSkgcmV0dXJuIGZhaWx1cmU7XG4gICAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gUEFUSF9TVEFSVDtcbiAgICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlKSByZXR1cm47XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGNociA9PSAnWycpIHNlZW5CcmFja2V0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGVsc2UgaWYgKGNociA9PSAnXScpIHNlZW5CcmFja2V0ID0gZmFsc2U7XG4gICAgICAgICAgICBidWZmZXIgKz0gY2hyO1xuICAgICAgICAgIH0gYnJlYWs7XG5cbiAgICAgICAgY2FzZSBQT1JUOlxuICAgICAgICAgIGlmIChleGVjKERJR0lULCBjaHIpKSB7XG4gICAgICAgICAgICBidWZmZXIgKz0gY2hyO1xuICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICBjaHIgPT0gRU9GIHx8IGNociA9PSAnLycgfHwgY2hyID09ICc/JyB8fCBjaHIgPT0gJyMnIHx8XG4gICAgICAgICAgICAoY2hyID09ICdcXFxcJyAmJiB1cmwuaXNTcGVjaWFsKCkpIHx8XG4gICAgICAgICAgICBzdGF0ZU92ZXJyaWRlXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAoYnVmZmVyICE9ICcnKSB7XG4gICAgICAgICAgICAgIHZhciBwb3J0ID0gcGFyc2VJbnQoYnVmZmVyLCAxMCk7XG4gICAgICAgICAgICAgIGlmIChwb3J0ID4gMHhGRkZGKSByZXR1cm4gSU5WQUxJRF9QT1JUO1xuICAgICAgICAgICAgICB1cmwucG9ydCA9ICh1cmwuaXNTcGVjaWFsKCkgJiYgcG9ydCA9PT0gc3BlY2lhbFNjaGVtZXNbdXJsLnNjaGVtZV0pID8gbnVsbCA6IHBvcnQ7XG4gICAgICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUpIHJldHVybjtcbiAgICAgICAgICAgIHN0YXRlID0gUEFUSF9TVEFSVDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSByZXR1cm4gSU5WQUxJRF9QT1JUO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgRklMRTpcbiAgICAgICAgICB1cmwuc2NoZW1lID0gJ2ZpbGUnO1xuICAgICAgICAgIGlmIChjaHIgPT0gJy8nIHx8IGNociA9PSAnXFxcXCcpIHN0YXRlID0gRklMRV9TTEFTSDtcbiAgICAgICAgICBlbHNlIGlmIChiYXNlICYmIGJhc2Uuc2NoZW1lID09ICdmaWxlJykge1xuICAgICAgICAgICAgaWYgKGNociA9PSBFT0YpIHtcbiAgICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICAgIHVybC5wYXRoID0gYXJyYXlTbGljZShiYXNlLnBhdGgpO1xuICAgICAgICAgICAgICB1cmwucXVlcnkgPSBiYXNlLnF1ZXJ5O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT0gJz8nKSB7XG4gICAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgICAgICB1cmwucGF0aCA9IGFycmF5U2xpY2UoYmFzZS5wYXRoKTtcbiAgICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gJyc7XG4gICAgICAgICAgICAgIHN0YXRlID0gUVVFUlk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNociA9PSAnIycpIHtcbiAgICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICAgIHVybC5wYXRoID0gYXJyYXlTbGljZShiYXNlLnBhdGgpO1xuICAgICAgICAgICAgICB1cmwucXVlcnkgPSBiYXNlLnF1ZXJ5O1xuICAgICAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmICghc3RhcnRzV2l0aFdpbmRvd3NEcml2ZUxldHRlcihqb2luKGFycmF5U2xpY2UoY29kZVBvaW50cywgcG9pbnRlciksICcnKSkpIHtcbiAgICAgICAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICAgICAgICB1cmwucGF0aCA9IGFycmF5U2xpY2UoYmFzZS5wYXRoKTtcbiAgICAgICAgICAgICAgICB1cmwuc2hvcnRlblBhdGgoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGJyZWFrO1xuXG4gICAgICAgIGNhc2UgRklMRV9TTEFTSDpcbiAgICAgICAgICBpZiAoY2hyID09ICcvJyB8fCBjaHIgPT0gJ1xcXFwnKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEZJTEVfSE9TVDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoYmFzZSAmJiBiYXNlLnNjaGVtZSA9PSAnZmlsZScgJiYgIXN0YXJ0c1dpdGhXaW5kb3dzRHJpdmVMZXR0ZXIoam9pbihhcnJheVNsaWNlKGNvZGVQb2ludHMsIHBvaW50ZXIpLCAnJykpKSB7XG4gICAgICAgICAgICBpZiAoaXNXaW5kb3dzRHJpdmVMZXR0ZXIoYmFzZS5wYXRoWzBdLCB0cnVlKSkgcHVzaCh1cmwucGF0aCwgYmFzZS5wYXRoWzBdKTtcbiAgICAgICAgICAgIGVsc2UgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICBjYXNlIEZJTEVfSE9TVDpcbiAgICAgICAgICBpZiAoY2hyID09IEVPRiB8fCBjaHIgPT0gJy8nIHx8IGNociA9PSAnXFxcXCcgfHwgY2hyID09ICc/JyB8fCBjaHIgPT0gJyMnKSB7XG4gICAgICAgICAgICBpZiAoIXN0YXRlT3ZlcnJpZGUgJiYgaXNXaW5kb3dzRHJpdmVMZXR0ZXIoYnVmZmVyKSkge1xuICAgICAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGJ1ZmZlciA9PSAnJykge1xuICAgICAgICAgICAgICB1cmwuaG9zdCA9ICcnO1xuICAgICAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSkgcmV0dXJuO1xuICAgICAgICAgICAgICBzdGF0ZSA9IFBBVEhfU1RBUlQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBmYWlsdXJlID0gdXJsLnBhcnNlSG9zdChidWZmZXIpO1xuICAgICAgICAgICAgICBpZiAoZmFpbHVyZSkgcmV0dXJuIGZhaWx1cmU7XG4gICAgICAgICAgICAgIGlmICh1cmwuaG9zdCA9PSAnbG9jYWxob3N0JykgdXJsLmhvc3QgPSAnJztcbiAgICAgICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUpIHJldHVybjtcbiAgICAgICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgICAgIHN0YXRlID0gUEFUSF9TVEFSVDtcbiAgICAgICAgICAgIH0gY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIGJ1ZmZlciArPSBjaHI7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBQQVRIX1NUQVJUOlxuICAgICAgICAgIGlmICh1cmwuaXNTcGVjaWFsKCkpIHtcbiAgICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICAgIGlmIChjaHIgIT0gJy8nICYmIGNociAhPSAnXFxcXCcpIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIXN0YXRlT3ZlcnJpZGUgJiYgY2hyID09ICc/Jykge1xuICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IFFVRVJZO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIXN0YXRlT3ZlcnJpZGUgJiYgY2hyID09ICcjJykge1xuICAgICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hyICE9IEVPRikge1xuICAgICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgICAgaWYgKGNociAhPSAnLycpIGNvbnRpbnVlO1xuICAgICAgICAgIH0gYnJlYWs7XG5cbiAgICAgICAgY2FzZSBQQVRIOlxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGNociA9PSBFT0YgfHwgY2hyID09ICcvJyB8fFxuICAgICAgICAgICAgKGNociA9PSAnXFxcXCcgJiYgdXJsLmlzU3BlY2lhbCgpKSB8fFxuICAgICAgICAgICAgKCFzdGF0ZU92ZXJyaWRlICYmIChjaHIgPT0gJz8nIHx8IGNociA9PSAnIycpKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgaWYgKGlzRG91YmxlRG90KGJ1ZmZlcikpIHtcbiAgICAgICAgICAgICAgdXJsLnNob3J0ZW5QYXRoKCk7XG4gICAgICAgICAgICAgIGlmIChjaHIgIT0gJy8nICYmICEoY2hyID09ICdcXFxcJyAmJiB1cmwuaXNTcGVjaWFsKCkpKSB7XG4gICAgICAgICAgICAgICAgcHVzaCh1cmwucGF0aCwgJycpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzU2luZ2xlRG90KGJ1ZmZlcikpIHtcbiAgICAgICAgICAgICAgaWYgKGNociAhPSAnLycgJiYgIShjaHIgPT0gJ1xcXFwnICYmIHVybC5pc1NwZWNpYWwoKSkpIHtcbiAgICAgICAgICAgICAgICBwdXNoKHVybC5wYXRoLCAnJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmICh1cmwuc2NoZW1lID09ICdmaWxlJyAmJiAhdXJsLnBhdGgubGVuZ3RoICYmIGlzV2luZG93c0RyaXZlTGV0dGVyKGJ1ZmZlcikpIHtcbiAgICAgICAgICAgICAgICBpZiAodXJsLmhvc3QpIHVybC5ob3N0ID0gJyc7XG4gICAgICAgICAgICAgICAgYnVmZmVyID0gY2hhckF0KGJ1ZmZlciwgMCkgKyAnOic7IC8vIG5vcm1hbGl6ZSB3aW5kb3dzIGRyaXZlIGxldHRlclxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHB1c2godXJsLnBhdGgsIGJ1ZmZlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICAgIGlmICh1cmwuc2NoZW1lID09ICdmaWxlJyAmJiAoY2hyID09IEVPRiB8fCBjaHIgPT0gJz8nIHx8IGNociA9PSAnIycpKSB7XG4gICAgICAgICAgICAgIHdoaWxlICh1cmwucGF0aC5sZW5ndGggPiAxICYmIHVybC5wYXRoWzBdID09PSAnJykge1xuICAgICAgICAgICAgICAgIHNoaWZ0KHVybC5wYXRoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNociA9PSAnPycpIHtcbiAgICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gJyc7XG4gICAgICAgICAgICAgIHN0YXRlID0gUVVFUlk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNociA9PSAnIycpIHtcbiAgICAgICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ1ZmZlciArPSBwZXJjZW50RW5jb2RlKGNociwgcGF0aFBlcmNlbnRFbmNvZGVTZXQpO1xuICAgICAgICAgIH0gYnJlYWs7XG5cbiAgICAgICAgY2FzZSBDQU5OT1RfQkVfQV9CQVNFX1VSTF9QQVRIOlxuICAgICAgICAgIGlmIChjaHIgPT0gJz8nKSB7XG4gICAgICAgICAgICB1cmwucXVlcnkgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gUVVFUlk7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT0gJyMnKSB7XG4gICAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaHIgIT0gRU9GKSB7XG4gICAgICAgICAgICB1cmwucGF0aFswXSArPSBwZXJjZW50RW5jb2RlKGNociwgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCk7XG4gICAgICAgICAgfSBicmVhaztcblxuICAgICAgICBjYXNlIFFVRVJZOlxuICAgICAgICAgIGlmICghc3RhdGVPdmVycmlkZSAmJiBjaHIgPT0gJyMnKSB7XG4gICAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaHIgIT0gRU9GKSB7XG4gICAgICAgICAgICBpZiAoY2hyID09IFwiJ1wiICYmIHVybC5pc1NwZWNpYWwoKSkgdXJsLnF1ZXJ5ICs9ICclMjcnO1xuICAgICAgICAgICAgZWxzZSBpZiAoY2hyID09ICcjJykgdXJsLnF1ZXJ5ICs9ICclMjMnO1xuICAgICAgICAgICAgZWxzZSB1cmwucXVlcnkgKz0gcGVyY2VudEVuY29kZShjaHIsIEMwQ29udHJvbFBlcmNlbnRFbmNvZGVTZXQpO1xuICAgICAgICAgIH0gYnJlYWs7XG5cbiAgICAgICAgY2FzZSBGUkFHTUVOVDpcbiAgICAgICAgICBpZiAoY2hyICE9IEVPRikgdXJsLmZyYWdtZW50ICs9IHBlcmNlbnRFbmNvZGUoY2hyLCBmcmFnbWVudFBlcmNlbnRFbmNvZGVTZXQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBwb2ludGVyKys7XG4gICAgfVxuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2hvc3QtcGFyc2luZ1xuICBwYXJzZUhvc3Q6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIHZhciByZXN1bHQsIGNvZGVQb2ludHMsIGluZGV4O1xuICAgIGlmIChjaGFyQXQoaW5wdXQsIDApID09ICdbJykge1xuICAgICAgaWYgKGNoYXJBdChpbnB1dCwgaW5wdXQubGVuZ3RoIC0gMSkgIT0gJ10nKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgICAgcmVzdWx0ID0gcGFyc2VJUHY2KHN0cmluZ1NsaWNlKGlucHV0LCAxLCAtMSkpO1xuICAgICAgaWYgKCFyZXN1bHQpIHJldHVybiBJTlZBTElEX0hPU1Q7XG4gICAgICB0aGlzLmhvc3QgPSByZXN1bHQ7XG4gICAgLy8gb3BhcXVlIGhvc3RcbiAgICB9IGVsc2UgaWYgKCF0aGlzLmlzU3BlY2lhbCgpKSB7XG4gICAgICBpZiAoZXhlYyhGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5UX0VYQ0xVRElOR19QRVJDRU5ULCBpbnB1dCkpIHJldHVybiBJTlZBTElEX0hPU1Q7XG4gICAgICByZXN1bHQgPSAnJztcbiAgICAgIGNvZGVQb2ludHMgPSBhcnJheUZyb20oaW5wdXQpO1xuICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgY29kZVBvaW50cy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgcmVzdWx0ICs9IHBlcmNlbnRFbmNvZGUoY29kZVBvaW50c1tpbmRleF0sIEMwQ29udHJvbFBlcmNlbnRFbmNvZGVTZXQpO1xuICAgICAgfVxuICAgICAgdGhpcy5ob3N0ID0gcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dCA9IHRvQVNDSUkoaW5wdXQpO1xuICAgICAgaWYgKGV4ZWMoRk9SQklEREVOX0hPU1RfQ09ERV9QT0lOVCwgaW5wdXQpKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgICAgcmVzdWx0ID0gcGFyc2VJUHY0KGlucHV0KTtcbiAgICAgIGlmIChyZXN1bHQgPT09IG51bGwpIHJldHVybiBJTlZBTElEX0hPU1Q7XG4gICAgICB0aGlzLmhvc3QgPSByZXN1bHQ7XG4gICAgfVxuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2Nhbm5vdC1oYXZlLWEtdXNlcm5hbWUtcGFzc3dvcmQtcG9ydFxuICBjYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gIXRoaXMuaG9zdCB8fCB0aGlzLmNhbm5vdEJlQUJhc2VVUkwgfHwgdGhpcy5zY2hlbWUgPT0gJ2ZpbGUnO1xuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2luY2x1ZGUtY3JlZGVudGlhbHNcbiAgaW5jbHVkZXNDcmVkZW50aWFsczogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnVzZXJuYW1lICE9ICcnIHx8IHRoaXMucGFzc3dvcmQgIT0gJyc7XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jaXMtc3BlY2lhbFxuICBpc1NwZWNpYWw6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaGFzT3duKHNwZWNpYWxTY2hlbWVzLCB0aGlzLnNjaGVtZSk7XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jc2hvcnRlbi1hLXVybHMtcGF0aFxuICBzaG9ydGVuUGF0aDogZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXRoID0gdGhpcy5wYXRoO1xuICAgIHZhciBwYXRoU2l6ZSA9IHBhdGgubGVuZ3RoO1xuICAgIGlmIChwYXRoU2l6ZSAmJiAodGhpcy5zY2hlbWUgIT0gJ2ZpbGUnIHx8IHBhdGhTaXplICE9IDEgfHwgIWlzV2luZG93c0RyaXZlTGV0dGVyKHBhdGhbMF0sIHRydWUpKSkge1xuICAgICAgcGF0aC5sZW5ndGgtLTtcbiAgICB9XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC11cmwtc2VyaWFsaXplclxuICBzZXJpYWxpemU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdXJsID0gdGhpcztcbiAgICB2YXIgc2NoZW1lID0gdXJsLnNjaGVtZTtcbiAgICB2YXIgdXNlcm5hbWUgPSB1cmwudXNlcm5hbWU7XG4gICAgdmFyIHBhc3N3b3JkID0gdXJsLnBhc3N3b3JkO1xuICAgIHZhciBob3N0ID0gdXJsLmhvc3Q7XG4gICAgdmFyIHBvcnQgPSB1cmwucG9ydDtcbiAgICB2YXIgcGF0aCA9IHVybC5wYXRoO1xuICAgIHZhciBxdWVyeSA9IHVybC5xdWVyeTtcbiAgICB2YXIgZnJhZ21lbnQgPSB1cmwuZnJhZ21lbnQ7XG4gICAgdmFyIG91dHB1dCA9IHNjaGVtZSArICc6JztcbiAgICBpZiAoaG9zdCAhPT0gbnVsbCkge1xuICAgICAgb3V0cHV0ICs9ICcvLyc7XG4gICAgICBpZiAodXJsLmluY2x1ZGVzQ3JlZGVudGlhbHMoKSkge1xuICAgICAgICBvdXRwdXQgKz0gdXNlcm5hbWUgKyAocGFzc3dvcmQgPyAnOicgKyBwYXNzd29yZCA6ICcnKSArICdAJztcbiAgICAgIH1cbiAgICAgIG91dHB1dCArPSBzZXJpYWxpemVIb3N0KGhvc3QpO1xuICAgICAgaWYgKHBvcnQgIT09IG51bGwpIG91dHB1dCArPSAnOicgKyBwb3J0O1xuICAgIH0gZWxzZSBpZiAoc2NoZW1lID09ICdmaWxlJykgb3V0cHV0ICs9ICcvLyc7XG4gICAgb3V0cHV0ICs9IHVybC5jYW5ub3RCZUFCYXNlVVJMID8gcGF0aFswXSA6IHBhdGgubGVuZ3RoID8gJy8nICsgam9pbihwYXRoLCAnLycpIDogJyc7XG4gICAgaWYgKHF1ZXJ5ICE9PSBudWxsKSBvdXRwdXQgKz0gJz8nICsgcXVlcnk7XG4gICAgaWYgKGZyYWdtZW50ICE9PSBudWxsKSBvdXRwdXQgKz0gJyMnICsgZnJhZ21lbnQ7XG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLWhyZWZcbiAgc2V0SHJlZjogZnVuY3Rpb24gKGhyZWYpIHtcbiAgICB2YXIgZmFpbHVyZSA9IHRoaXMucGFyc2UoaHJlZik7XG4gICAgaWYgKGZhaWx1cmUpIHRocm93IFR5cGVFcnJvcihmYWlsdXJlKTtcbiAgICB0aGlzLnNlYXJjaFBhcmFtcy51cGRhdGUoKTtcbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLW9yaWdpblxuICBnZXRPcmlnaW46IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2NoZW1lID0gdGhpcy5zY2hlbWU7XG4gICAgdmFyIHBvcnQgPSB0aGlzLnBvcnQ7XG4gICAgaWYgKHNjaGVtZSA9PSAnYmxvYicpIHRyeSB7XG4gICAgICByZXR1cm4gbmV3IFVSTENvbnN0cnVjdG9yKHNjaGVtZS5wYXRoWzBdKS5vcmlnaW47XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiAnbnVsbCc7XG4gICAgfVxuICAgIGlmIChzY2hlbWUgPT0gJ2ZpbGUnIHx8ICF0aGlzLmlzU3BlY2lhbCgpKSByZXR1cm4gJ251bGwnO1xuICAgIHJldHVybiBzY2hlbWUgKyAnOi8vJyArIHNlcmlhbGl6ZUhvc3QodGhpcy5ob3N0KSArIChwb3J0ICE9PSBudWxsID8gJzonICsgcG9ydCA6ICcnKTtcbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXByb3RvY29sXG4gIGdldFByb3RvY29sOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2NoZW1lICsgJzonO1xuICB9LFxuICBzZXRQcm90b2NvbDogZnVuY3Rpb24gKHByb3RvY29sKSB7XG4gICAgdGhpcy5wYXJzZSgkdG9TdHJpbmcocHJvdG9jb2wpICsgJzonLCBTQ0hFTUVfU1RBUlQpO1xuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtdXNlcm5hbWVcbiAgZ2V0VXNlcm5hbWU6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy51c2VybmFtZTtcbiAgfSxcbiAgc2V0VXNlcm5hbWU6IGZ1bmN0aW9uICh1c2VybmFtZSkge1xuICAgIHZhciBjb2RlUG9pbnRzID0gYXJyYXlGcm9tKCR0b1N0cmluZyh1c2VybmFtZSkpO1xuICAgIGlmICh0aGlzLmNhbm5vdEhhdmVVc2VybmFtZVBhc3N3b3JkUG9ydCgpKSByZXR1cm47XG4gICAgdGhpcy51c2VybmFtZSA9ICcnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29kZVBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy51c2VybmFtZSArPSBwZXJjZW50RW5jb2RlKGNvZGVQb2ludHNbaV0sIHVzZXJpbmZvUGVyY2VudEVuY29kZVNldCk7XG4gICAgfVxuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtcGFzc3dvcmRcbiAgZ2V0UGFzc3dvcmQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXNzd29yZDtcbiAgfSxcbiAgc2V0UGFzc3dvcmQ6IGZ1bmN0aW9uIChwYXNzd29yZCkge1xuICAgIHZhciBjb2RlUG9pbnRzID0gYXJyYXlGcm9tKCR0b1N0cmluZyhwYXNzd29yZCkpO1xuICAgIGlmICh0aGlzLmNhbm5vdEhhdmVVc2VybmFtZVBhc3N3b3JkUG9ydCgpKSByZXR1cm47XG4gICAgdGhpcy5wYXNzd29yZCA9ICcnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29kZVBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5wYXNzd29yZCArPSBwZXJjZW50RW5jb2RlKGNvZGVQb2ludHNbaV0sIHVzZXJpbmZvUGVyY2VudEVuY29kZVNldCk7XG4gICAgfVxuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaG9zdFxuICBnZXRIb3N0OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhvc3QgPSB0aGlzLmhvc3Q7XG4gICAgdmFyIHBvcnQgPSB0aGlzLnBvcnQ7XG4gICAgcmV0dXJuIGhvc3QgPT09IG51bGwgPyAnJ1xuICAgICAgOiBwb3J0ID09PSBudWxsID8gc2VyaWFsaXplSG9zdChob3N0KVxuICAgICAgOiBzZXJpYWxpemVIb3N0KGhvc3QpICsgJzonICsgcG9ydDtcbiAgfSxcbiAgc2V0SG9zdDogZnVuY3Rpb24gKGhvc3QpIHtcbiAgICBpZiAodGhpcy5jYW5ub3RCZUFCYXNlVVJMKSByZXR1cm47XG4gICAgdGhpcy5wYXJzZShob3N0LCBIT1NUKTtcbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLWhvc3RuYW1lXG4gIGdldEhvc3RuYW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhvc3QgPSB0aGlzLmhvc3Q7XG4gICAgcmV0dXJuIGhvc3QgPT09IG51bGwgPyAnJyA6IHNlcmlhbGl6ZUhvc3QoaG9zdCk7XG4gIH0sXG4gIHNldEhvc3RuYW1lOiBmdW5jdGlvbiAoaG9zdG5hbWUpIHtcbiAgICBpZiAodGhpcy5jYW5ub3RCZUFCYXNlVVJMKSByZXR1cm47XG4gICAgdGhpcy5wYXJzZShob3N0bmFtZSwgSE9TVE5BTUUpO1xuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtcG9ydFxuICBnZXRQb3J0OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBvcnQgPSB0aGlzLnBvcnQ7XG4gICAgcmV0dXJuIHBvcnQgPT09IG51bGwgPyAnJyA6ICR0b1N0cmluZyhwb3J0KTtcbiAgfSxcbiAgc2V0UG9ydDogZnVuY3Rpb24gKHBvcnQpIHtcbiAgICBpZiAodGhpcy5jYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQoKSkgcmV0dXJuO1xuICAgIHBvcnQgPSAkdG9TdHJpbmcocG9ydCk7XG4gICAgaWYgKHBvcnQgPT0gJycpIHRoaXMucG9ydCA9IG51bGw7XG4gICAgZWxzZSB0aGlzLnBhcnNlKHBvcnQsIFBPUlQpO1xuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtcGF0aG5hbWVcbiAgZ2V0UGF0aG5hbWU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGF0aCA9IHRoaXMucGF0aDtcbiAgICByZXR1cm4gdGhpcy5jYW5ub3RCZUFCYXNlVVJMID8gcGF0aFswXSA6IHBhdGgubGVuZ3RoID8gJy8nICsgam9pbihwYXRoLCAnLycpIDogJyc7XG4gIH0sXG4gIHNldFBhdGhuYW1lOiBmdW5jdGlvbiAocGF0aG5hbWUpIHtcbiAgICBpZiAodGhpcy5jYW5ub3RCZUFCYXNlVVJMKSByZXR1cm47XG4gICAgdGhpcy5wYXRoID0gW107XG4gICAgdGhpcy5wYXJzZShwYXRobmFtZSwgUEFUSF9TVEFSVCk7XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1zZWFyY2hcbiAgZ2V0U2VhcmNoOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHF1ZXJ5ID0gdGhpcy5xdWVyeTtcbiAgICByZXR1cm4gcXVlcnkgPyAnPycgKyBxdWVyeSA6ICcnO1xuICB9LFxuICBzZXRTZWFyY2g6IGZ1bmN0aW9uIChzZWFyY2gpIHtcbiAgICBzZWFyY2ggPSAkdG9TdHJpbmcoc2VhcmNoKTtcbiAgICBpZiAoc2VhcmNoID09ICcnKSB7XG4gICAgICB0aGlzLnF1ZXJ5ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCc/JyA9PSBjaGFyQXQoc2VhcmNoLCAwKSkgc2VhcmNoID0gc3RyaW5nU2xpY2Uoc2VhcmNoLCAxKTtcbiAgICAgIHRoaXMucXVlcnkgPSAnJztcbiAgICAgIHRoaXMucGFyc2Uoc2VhcmNoLCBRVUVSWSk7XG4gICAgfVxuICAgIHRoaXMuc2VhcmNoUGFyYW1zLnVwZGF0ZSgpO1xuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtc2VhcmNocGFyYW1zXG4gIGdldFNlYXJjaFBhcmFtczogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnNlYXJjaFBhcmFtcy5mYWNhZGU7XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1oYXNoXG4gIGdldEhhc2g6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZnJhZ21lbnQgPSB0aGlzLmZyYWdtZW50O1xuICAgIHJldHVybiBmcmFnbWVudCA/ICcjJyArIGZyYWdtZW50IDogJyc7XG4gIH0sXG4gIHNldEhhc2g6IGZ1bmN0aW9uIChoYXNoKSB7XG4gICAgaGFzaCA9ICR0b1N0cmluZyhoYXNoKTtcbiAgICBpZiAoaGFzaCA9PSAnJykge1xuICAgICAgdGhpcy5mcmFnbWVudCA9IG51bGw7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICgnIycgPT0gY2hhckF0KGhhc2gsIDApKSBoYXNoID0gc3RyaW5nU2xpY2UoaGFzaCwgMSk7XG4gICAgdGhpcy5mcmFnbWVudCA9ICcnO1xuICAgIHRoaXMucGFyc2UoaGFzaCwgRlJBR01FTlQpO1xuICB9LFxuICB1cGRhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnF1ZXJ5ID0gdGhpcy5zZWFyY2hQYXJhbXMuc2VyaWFsaXplKCkgfHwgbnVsbDtcbiAgfVxufTtcblxuLy8gYFVSTGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsLWNsYXNzXG52YXIgVVJMQ29uc3RydWN0b3IgPSBmdW5jdGlvbiBVUkwodXJsIC8qICwgYmFzZSAqLykge1xuICB2YXIgdGhhdCA9IGFuSW5zdGFuY2UodGhpcywgVVJMUHJvdG90eXBlKTtcbiAgdmFyIGJhc2UgPSB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKSA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHZhciBzdGF0ZSA9IHNldEludGVybmFsU3RhdGUodGhhdCwgbmV3IFVSTFN0YXRlKHVybCwgZmFsc2UsIGJhc2UpKTtcbiAgaWYgKCFERVNDUklQVE9SUykge1xuICAgIHRoYXQuaHJlZiA9IHN0YXRlLnNlcmlhbGl6ZSgpO1xuICAgIHRoYXQub3JpZ2luID0gc3RhdGUuZ2V0T3JpZ2luKCk7XG4gICAgdGhhdC5wcm90b2NvbCA9IHN0YXRlLmdldFByb3RvY29sKCk7XG4gICAgdGhhdC51c2VybmFtZSA9IHN0YXRlLmdldFVzZXJuYW1lKCk7XG4gICAgdGhhdC5wYXNzd29yZCA9IHN0YXRlLmdldFBhc3N3b3JkKCk7XG4gICAgdGhhdC5ob3N0ID0gc3RhdGUuZ2V0SG9zdCgpO1xuICAgIHRoYXQuaG9zdG5hbWUgPSBzdGF0ZS5nZXRIb3N0bmFtZSgpO1xuICAgIHRoYXQucG9ydCA9IHN0YXRlLmdldFBvcnQoKTtcbiAgICB0aGF0LnBhdGhuYW1lID0gc3RhdGUuZ2V0UGF0aG5hbWUoKTtcbiAgICB0aGF0LnNlYXJjaCA9IHN0YXRlLmdldFNlYXJjaCgpO1xuICAgIHRoYXQuc2VhcmNoUGFyYW1zID0gc3RhdGUuZ2V0U2VhcmNoUGFyYW1zKCk7XG4gICAgdGhhdC5oYXNoID0gc3RhdGUuZ2V0SGFzaCgpO1xuICB9XG59O1xuXG52YXIgVVJMUHJvdG90eXBlID0gVVJMQ29uc3RydWN0b3IucHJvdG90eXBlO1xuXG52YXIgYWNjZXNzb3JEZXNjcmlwdG9yID0gZnVuY3Rpb24gKGdldHRlciwgc2V0dGVyKSB7XG4gIHJldHVybiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKVtnZXR0ZXJdKCk7XG4gICAgfSxcbiAgICBzZXQ6IHNldHRlciAmJiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpW3NldHRlcl0odmFsdWUpO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfTtcbn07XG5cbmlmIChERVNDUklQVE9SUykge1xuICAvLyBgVVJMLnByb3RvdHlwZS5ocmVmYCBhY2Nlc3NvcnMgcGFpclxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaHJlZlxuICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoVVJMUHJvdG90eXBlLCAnaHJlZicsIGFjY2Vzc29yRGVzY3JpcHRvcignc2VyaWFsaXplJywgJ3NldEhyZWYnKSk7XG4gIC8vIGBVUkwucHJvdG90eXBlLm9yaWdpbmAgZ2V0dGVyXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1vcmlnaW5cbiAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKFVSTFByb3RvdHlwZSwgJ29yaWdpbicsIGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0T3JpZ2luJykpO1xuICAvLyBgVVJMLnByb3RvdHlwZS5wcm90b2NvbGAgYWNjZXNzb3JzIHBhaXJcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXByb3RvY29sXG4gIGRlZmluZUJ1aWx0SW5BY2Nlc3NvcihVUkxQcm90b3R5cGUsICdwcm90b2NvbCcsIGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0UHJvdG9jb2wnLCAnc2V0UHJvdG9jb2wnKSk7XG4gIC8vIGBVUkwucHJvdG90eXBlLnVzZXJuYW1lYCBhY2Nlc3NvcnMgcGFpclxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtdXNlcm5hbWVcbiAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKFVSTFByb3RvdHlwZSwgJ3VzZXJuYW1lJywgYWNjZXNzb3JEZXNjcmlwdG9yKCdnZXRVc2VybmFtZScsICdzZXRVc2VybmFtZScpKTtcbiAgLy8gYFVSTC5wcm90b3R5cGUucGFzc3dvcmRgIGFjY2Vzc29ycyBwYWlyXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1wYXNzd29yZFxuICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoVVJMUHJvdG90eXBlLCAncGFzc3dvcmQnLCBhY2Nlc3NvckRlc2NyaXB0b3IoJ2dldFBhc3N3b3JkJywgJ3NldFBhc3N3b3JkJykpO1xuICAvLyBgVVJMLnByb3RvdHlwZS5ob3N0YCBhY2Nlc3NvcnMgcGFpclxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaG9zdFxuICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoVVJMUHJvdG90eXBlLCAnaG9zdCcsIGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0SG9zdCcsICdzZXRIb3N0JykpO1xuICAvLyBgVVJMLnByb3RvdHlwZS5ob3N0bmFtZWAgYWNjZXNzb3JzIHBhaXJcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLWhvc3RuYW1lXG4gIGRlZmluZUJ1aWx0SW5BY2Nlc3NvcihVUkxQcm90b3R5cGUsICdob3N0bmFtZScsIGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0SG9zdG5hbWUnLCAnc2V0SG9zdG5hbWUnKSk7XG4gIC8vIGBVUkwucHJvdG90eXBlLnBvcnRgIGFjY2Vzc29ycyBwYWlyXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1wb3J0XG4gIGRlZmluZUJ1aWx0SW5BY2Nlc3NvcihVUkxQcm90b3R5cGUsICdwb3J0JywgYWNjZXNzb3JEZXNjcmlwdG9yKCdnZXRQb3J0JywgJ3NldFBvcnQnKSk7XG4gIC8vIGBVUkwucHJvdG90eXBlLnBhdGhuYW1lYCBhY2Nlc3NvcnMgcGFpclxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtcGF0aG5hbWVcbiAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKFVSTFByb3RvdHlwZSwgJ3BhdGhuYW1lJywgYWNjZXNzb3JEZXNjcmlwdG9yKCdnZXRQYXRobmFtZScsICdzZXRQYXRobmFtZScpKTtcbiAgLy8gYFVSTC5wcm90b3R5cGUuc2VhcmNoYCBhY2Nlc3NvcnMgcGFpclxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtc2VhcmNoXG4gIGRlZmluZUJ1aWx0SW5BY2Nlc3NvcihVUkxQcm90b3R5cGUsICdzZWFyY2gnLCBhY2Nlc3NvckRlc2NyaXB0b3IoJ2dldFNlYXJjaCcsICdzZXRTZWFyY2gnKSk7XG4gIC8vIGBVUkwucHJvdG90eXBlLnNlYXJjaFBhcmFtc2AgZ2V0dGVyXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1zZWFyY2hwYXJhbXNcbiAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKFVSTFByb3RvdHlwZSwgJ3NlYXJjaFBhcmFtcycsIGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0U2VhcmNoUGFyYW1zJykpO1xuICAvLyBgVVJMLnByb3RvdHlwZS5oYXNoYCBhY2Nlc3NvcnMgcGFpclxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaGFzaFxuICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoVVJMUHJvdG90eXBlLCAnaGFzaCcsIGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0SGFzaCcsICdzZXRIYXNoJykpO1xufVxuXG4vLyBgVVJMLnByb3RvdHlwZS50b0pTT05gIG1ldGhvZFxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXRvanNvblxuZGVmaW5lQnVpbHRJbihVUkxQcm90b3R5cGUsICd0b0pTT04nLCBmdW5jdGlvbiB0b0pTT04oKSB7XG4gIHJldHVybiBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpLnNlcmlhbGl6ZSgpO1xufSwgeyBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG4vLyBgVVJMLnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI1VSTC1zdHJpbmdpZmljYXRpb24tYmVoYXZpb3JcbmRlZmluZUJ1aWx0SW4oVVJMUHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIGdldEludGVybmFsVVJMU3RhdGUodGhpcykuc2VyaWFsaXplKCk7XG59LCB7IGVudW1lcmFibGU6IHRydWUgfSk7XG5cbmlmIChOYXRpdmVVUkwpIHtcbiAgdmFyIG5hdGl2ZUNyZWF0ZU9iamVjdFVSTCA9IE5hdGl2ZVVSTC5jcmVhdGVPYmplY3RVUkw7XG4gIHZhciBuYXRpdmVSZXZva2VPYmplY3RVUkwgPSBOYXRpdmVVUkwucmV2b2tlT2JqZWN0VVJMO1xuICAvLyBgVVJMLmNyZWF0ZU9iamVjdFVSTGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9VUkwvY3JlYXRlT2JqZWN0VVJMXG4gIGlmIChuYXRpdmVDcmVhdGVPYmplY3RVUkwpIGRlZmluZUJ1aWx0SW4oVVJMQ29uc3RydWN0b3IsICdjcmVhdGVPYmplY3RVUkwnLCBiaW5kKG5hdGl2ZUNyZWF0ZU9iamVjdFVSTCwgTmF0aXZlVVJMKSk7XG4gIC8vIGBVUkwucmV2b2tlT2JqZWN0VVJMYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1VSTC9yZXZva2VPYmplY3RVUkxcbiAgaWYgKG5hdGl2ZVJldm9rZU9iamVjdFVSTCkgZGVmaW5lQnVpbHRJbihVUkxDb25zdHJ1Y3RvciwgJ3Jldm9rZU9iamVjdFVSTCcsIGJpbmQobmF0aXZlUmV2b2tlT2JqZWN0VVJMLCBOYXRpdmVVUkwpKTtcbn1cblxuc2V0VG9TdHJpbmdUYWcoVVJMQ29uc3RydWN0b3IsICdVUkwnKTtcblxuJCh7IGdsb2JhbDogdHJ1ZSwgY29uc3RydWN0b3I6IHRydWUsIGZvcmNlZDogIVVTRV9OQVRJVkVfVVJMLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBVUkw6IFVSTENvbnN0cnVjdG9yXG59KTtcbiIsIi8vIFRPRE86IFJlbW92ZSB0aGlzIG1vZHVsZSBmcm9tIGBjb3JlLWpzQDRgIHNpbmNlIGl0J3MgcmVwbGFjZWQgdG8gbW9kdWxlIGJlbG93XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi51cmwuY29uc3RydWN0b3InKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xuXG4vLyBgVVJMLnByb3RvdHlwZS50b0pTT05gIG1ldGhvZFxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXRvanNvblxuJCh7IHRhcmdldDogJ1VSTCcsIHByb3RvOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlIH0sIHtcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIGNhbGwoVVJMLnByb3RvdHlwZS50b1N0cmluZywgdGhpcyk7XG4gIH1cbn0pO1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjXG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkgc2NyaXB0VXJsID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdLnNyY1xuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCJpbXBvcnQgaW1hZ2VHbGFzcyBmcm9tIFwiLi4vaW1hZ2VzL9Ch0YLQtdC60LvQvi5qcGdcIjtcblxuZXhwb3J0IGNsYXNzIENhcmQge1xuICBjb25zdHJ1Y3Rvcih7IGRhdGEsIGhhbmRsZUltYWdlT3BlblBvcHVwICwgaGFuZGxlUmVtb3ZlQ2xpY2sgLCB1c2VySWQsIHB1dExpa2VDYXJkfSwgY2FyZFNlbGVjdG9yKSB7XG4gICAgdGhpcy5fZGF0YSA9IGRhdGE7XG4gICAgdGhpcy5fY2FyZFNlbGVjdG9yID0gY2FyZFNlbGVjdG9yO1xuICAgIHRoaXMuX2hhbmRsZUltYWdlT3BlblBvcHVwID0gaGFuZGxlSW1hZ2VPcGVuUG9wdXA7XG4gICAgdGhpcy5faGFuZGxlUmVtb3ZlQ2xpY2sgPSBoYW5kbGVSZW1vdmVDbGljaztcbiAgICB0aGlzLl91c2VySWQgPSB1c2VySWQ7XG4gICAgdGhpcy5fcHV0TGlrZUNhcmQgPSBwdXRMaWtlQ2FyZDtcbiAgfVxuXG4gIGdlbmVyYXRlQ2FyZCgpIHtcbiAgICB0aGlzLl9lbGVtZW50ID0gdGhpcy5fZ2V0VGVtcGxhdGUoKTtcbiAgICB0aGlzLl9jYXJkSW1hZ2UgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZWxlbWVudF9faW1hZ2VcIik7XG4gICAgXG4gICAgLyrQoNCw0LHQvtGC0LAg0YEg0LvQsNC50LrQvtC8Ki9cbiAgICB0aGlzLl9saWtlQnV0dG9uID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmVsZW1lbnRfX2xpa2VcIik7XG4gICAgdGhpcy5fY291bnRlcnNMaWtlcz0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmVsZW1lbnRfX2NvdW50ZXJzLWxpa2VzXCIpO1xuICAgIHRoaXMuX2NvdW50aW5nTGlrZSgpO1xuXG4gICAgLyrRg9C00LDQu9C10L3QuNC1Ki9cbiAgICB0aGlzLl9kZWxldGXQoWFyZCA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5lbGVtZW50X19iYXNrZXRzXCIpO1xuICAgIHRoaXMuX3JlbW92ZUJhY2tlZCgpO1xuICAgIFxuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzQWxsKCk7XG5cbiAgICAvKtCX0LDRidC40YLQsCzQtdGB0LvQuCDQv9GA0LjQtNC10YIg0L3QtSDQutC+0YDRgNC10LrRgtC90LDRjyDQuNC90YTQvtGA0LzQsNGG0LjRjyDQuNGB0L/QvtC70YzQt9GD0LXQvCA/Ki9cbiAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZWxlbWVudF9fdGl0bGVcIikudGV4dENvbnRlbnQgPVxuICAgIHRoaXMuX2RhdGE/Lm5hbWU7XG4gICAgdGhpcy5fY2FyZEltYWdlLnNyYyA9IHRoaXMuX2RhdGE/Lmxpbms7XG4gICAgdGhpcy5fY2FyZEltYWdlLmFsdCA9IHRoaXMuX2RhdGE/Lmxpbms7XG5cbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcbiAgfVxuXG4gIF9nZXRUZW1wbGF0ZSgpIHtcbiAgICBjb25zdCBjYXJkRWxlbWVudCA9IGRvY3VtZW50XG4gICAgICAucXVlcnlTZWxlY3Rvcih0aGlzLl9jYXJkU2VsZWN0b3IpXG4gICAgICAuY29udGVudC5xdWVyeVNlbGVjdG9yKFwiLmVsZW1lbnRcIilcbiAgICAgIC5jbG9uZU5vZGUodHJ1ZSk7XG5cbiAgICByZXR1cm4gY2FyZEVsZW1lbnQ7XG4gIH1cblxuICAvKtGE0YPQvdC60YbQuNGPINC00LvRjyDQv9C+0LTRgdGH0LXRgtCwINC70LDQudC60L7QsiovXG5cbiAgaXNMaWtlZCgpe1xuICAgIHJldHVybiB0aGlzLl9kYXRhLmxpa2VzLnNvbWUoKGl0ZW0pID0+e1xuXG4gICAgICByZXR1cm4gaXRlbS5faWQgPT09IHRoaXMuX3VzZXJJZDtcbiAgICAgIFxuICB9KVxufVxuICBfY291bnRpbmdMaWtlKCl7XG4gICAgdGhpcy5fY291bnRlcnNMaWtlcy50ZXh0Q29udGVudCA9IHRoaXMuX2RhdGEubGlrZXMubGVuZ3RoO1xuICAgICBpZih0aGlzLmlzTGlrZWQoKSkge1xuICAgICAgdGhpcy5fbGlrZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwiZWxlbWVudF9fbGlrZV9hY3RpdmVcIik7XG4gICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9saWtlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoXCJlbGVtZW50X19saWtlX2FjdGl2ZVwiKTtcbiAgICAgfVxuICB9XG5cbiAgcmVzZXRMaWtlRGF0YShkYXRhKXtcbiAgICB0aGlzLl9kYXRhLmxpa2VzID0gZGF0YS5saWtlcztcbiAgICB0aGlzLl9jb3VudGluZ0xpa2UoKTtcbiAgXG4gIH1cbiAgXG5cbiAgLyrQo9C00LDQu9C10L3QuNC1Ki9cblxuICBfcmVtb3ZlQmFja2VkKCl7XG4gICAgaWYodGhpcy5fZGF0YS5vd25lci5faWQgPT09IHRoaXMuX3VzZXJJZCkge1xuXG4gICAgICB0aGlzLl9kZWxldGXQoWFyZC5jbGFzc0xpc3QuYWRkKFwiZWxlbWVudF9fYmFza2V0c19hY3RpdmVcIik7XG4gICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9kZWxldGXQoWFyZC5jbGFzc0xpc3QucmVtb3ZlKFwiLmVsZW1lbnRfX2Jhc2tldHNfYWN0aXZlXCIpO1xuICAgICB9XG4gIH1cblxuICByZW1vdmUoKSB7XG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmUoXCIuZWxlbWVudFwiKTtcbiAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICBcbiAgfVxuXG4gIC8q0KHQu9GD0YjQsNGC0LXQu9C4Ki9cblxuICBfc2V0RXZlbnRMaXN0ZW5lcnNBbGwoKSB7XG4gICAgdGhpcy5fbGlrZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5fY291bnRpbmdMaWtlKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9saWtlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICB0aGlzLl9wdXRMaWtlQ2FyZCh0aGlzKTtcbiAgICB9KTtcbiAgICB0aGlzLl9kZWxldGXQoWFyZC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gdGhpcy5faGFuZGxlUmVtb3ZlQ2xpY2sodGhpcykgKTtcblxuICAgIHRoaXMuX2NhcmRJbWFnZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5faGFuZGxlSW1hZ2VPcGVuUG9wdXAodGhpcy5fZGF0YSlcbiAgICB9KTtcbiAgICAvKtCV0YHQu9C4INC60LDRgNGC0LjQvdC60LAg0L/RgNC40YXQvtC00LjRgiDQsdC40YLQsNGPKi9cblxuICAgIHRoaXMuX2NhcmRJbWFnZS5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgKCkgPT4ge1xuICAgIHRoaXMuX2RhdGEubGluayA9IGltYWdlR2xhc3M7XG4gICAgdGhpcy5fY2FyZEltYWdlLnNyYyA9IGltYWdlR2xhc3M7XG4gICAgdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmVsZW1lbnRfX3RpdGxlXCIpLnRleHRDb250ZW50ICA9IFwi0JrQsNGA0YLQuNC90LrQsCDQstC/0YPRgtC4XCI7XG4gICAgfSk7XG4gIH1cblxuICBnZXRJZCgpe1xuICAgIHJldHVybiB0aGlzLl9kYXRhLl9pZDtcbiAgfVxuICBcbn1cbiIsImV4cG9ydCBjbGFzcyBGb3JtVmFsaWRhdG9yIHtcbiAgY29uc3RydWN0b3IoY29uZmlnLCBmb3JtRWxlbWVudCkge1xuICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcbiAgICB0aGlzLl9mb3JtRWxlbWVudCA9IGZvcm1FbGVtZW50O1xuICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuX2NvbmZpZy5idXR0b25FbGVtZW50KTtcbiAgfVxuXG4gIC8q0L7QsdGA0LDQsdC+0YLRh9C40LrQuCDRgdC+0LHRi9GC0LjQuSovXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLl9pbnB1dExpc3QgPSBBcnJheS5mcm9tKFxuICAgICAgdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLl9jb25maWcuaW5wdXRQb3B1cClcbiAgICApO1xuICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKChpbnB1dEVsZW1lbnQpID0+IHtcbiAgICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xuICAgICAgICB0aGlzLl9pbnB1dEVsZW1lbnQgPSBpbnB1dEVsZW1lbnQ7XG4gICAgICAgIHRoaXMuX2lzVmFsaWQoKTtcbiAgICAgICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyrRhNGD0L3QutGG0LjRjyDQv9GA0L7QstC10YDQutC4INCy0LDQu9C40LTQsNGG0LjQuCovXG4gIF9pc1ZhbGlkKCkge1xuICAgIGlmICghdGhpcy5faW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkKSB7XG4gICAgICB0aGlzLl9zaG93SW5wdXRFcnJvcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcigpO1xuICAgIH1cbiAgfVxuXG4gIC8q0L/QvtC60LDQt9GL0LLQsNC10YIg0Y3Qu9C10LzQtdC90YIg0L7RiNC40LHQutC4Ki9cbiAgX3Nob3dJbnB1dEVycm9yKCkge1xuICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IHRoaXMuX2lucHV0RWxlbWVudC52YWxpZGF0aW9uTWVzc2FnZTtcbiAgICB0aGlzLl9lcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgYCNlcnJvci0ke3RoaXMuX2lucHV0RWxlbWVudC5pZH1gXG4gICAgKTtcbiAgICBcbiAgICB0aGlzLl9jb250ZWluZXJFbGVtZW50ID0gdGhpcy5fZXJyb3JFbGVtZW50LmNsb3Nlc3QoXG4gICAgICB0aGlzLl9jb25maWcuY29udGVpbmVySW5wdXRcbiAgICApO1xuICAgIHRoaXMuX2NvbnRlaW5lckVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9jb25maWcuaW5wdXRDb250ZWluZXJJbnZhbGlkKTtcbiAgICB0aGlzLl9lcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSBlcnJvck1lc3NhZ2U7XG4gIH1cblxuICAvKtGB0LrRgNGL0LLQsNC10YIg0Y3Qu9C10LzQtdC90YIg0L7RiNC40LHQutC4Ki9cbiAgX2hpZGVJbnB1dEVycm9yKCkge1xuICAgIHRoaXMuX2Vycm9yRWxlbWVudCA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICBgI2Vycm9yLSR7dGhpcy5faW5wdXRFbGVtZW50LmlkfWBcbiAgICApO1xuICAgIHRoaXMuX2NvbnRlaW5lckVsZW1lbnQgPSB0aGlzLl9lcnJvckVsZW1lbnQuY2xvc2VzdChcbiAgICAgIHRoaXMuX2NvbmZpZy5jb250ZWluZXJJbnB1dFxuICAgICk7XG4gICAgdGhpcy5fY29udGVpbmVyRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2NvbmZpZy5pbnB1dENvbnRlaW5lckludmFsaWQpO1xuICAgIHRoaXMuX2Vycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IFwiIFwiO1xuICB9XG5cbiAgLyrQvtGC0LrQu9GO0YfQsNC10YIg0LrQvdC+0L/QutGDKi9cbiAgZGlzYWJsZWRCdXR0b24oKSB7XG4gICAgdGhpcy5fYnV0dG9uRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2NvbmZpZy5pbmFjdGl2ZUJ1dHRvbik7XG4gICAgdGhpcy5fYnV0dG9uRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCBcImRpc2FibGVkXCIpO1xuICB9XG5cbiAgZGlzYWJsZWRCdXR0b25BY3RpdigpIHtcbiAgICB0aGlzLl9idXR0b25FbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fY29uZmlnLmluYWN0aXZlQnV0dG9uKTtcbiAgICB0aGlzLl9idXR0b25FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcImRpc2FibGVkXCIpO1xuICB9XG5cbiAgX3RvZ2dsZUJ1dHRvblN0YXRlKCkge1xuICAgIGlmICghdGhpcy5faGFzSW52YWxpZElucHV0KCkpIHtcbiAgICAgIHRoaXMuZGlzYWJsZWRCdXR0b25BY3RpdigpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRpc2FibGVkQnV0dG9uKCk7XG4gICAgfVxuICB9XG5cbiAgX2hhc0ludmFsaWRJbnB1dCgpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLl9pbnB1dExpc3QpLnNvbWUoKGlucHV0RWxlbWVudCkgPT4ge1xuICAgICAgcmV0dXJuICFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQ7XG4gICAgfSk7XG4gIH1cblxuICAvKtC90LDRhdC+0LTQuNGCINC4INC/0LXRgNC10LHQuNGA0LDQtdGCINCy0YHQtSDRhNC+0YDQvNGLKi9cbiAgZW5hYmxlVmFsaWRhdGlvbigpIHtcbiAgICB0aGlzLl9mb3JtRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChldnQpID0+IHtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0pO1xuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XG4gIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBTZWN0aW9uIHtcbiAgY29uc3RydWN0b3IoY29udGVpbmVyU2VjdGlvbiwgcmVuZGVyZXIpIHtcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgIHRoaXMuX2NvbnRlaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29udGVpbmVyU2VjdGlvbik7XG4gIH1cbiAgYWRkSXRlbShub2RlKSB7XG4gICAgdGhpcy5fY29udGVpbmVyLnByZXBlbmQobm9kZSk7XG4gIH1cbiAgcmVuZGVyZXJJdGVtKGRhdGFBcnJheSkge1xuICAgIGRhdGFBcnJheS5mb3JFYWNoKChkYXRhRWxlbWVudHMpID0+IHtcbiAgICAgIHRoaXMuX3JlbmRlcmVyKGRhdGFFbGVtZW50cyk7XG4gICAgfSk7XG4gIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBQb3B1cCB7XG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcbiAgICB0aGlzLl9wb3B1cCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocG9wdXBTZWxlY3Rvcik7XG4gIH1cblxuICBfaGFuZGxlRXNjQ2xvc2UgPSAoZXZ0KSA9PiB7XG4gICAgaWYgKGV2dC5rZXkgPT09IFwiRXNjYXBlXCIpIHtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG4gIH07XG5cbiAgb3BlbigpIHtcbiAgICB0aGlzLl9wb3B1cC5jbGFzc0xpc3QuYWRkKFwicG9wdXBfb3BlbmVkXCIpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcbiAgfVxuICBjbG9zZSgpIHtcbiAgICB0aGlzLl9wb3B1cC5jbGFzc0xpc3QucmVtb3ZlKFwicG9wdXBfb3BlbmVkXCIpO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcbiAgfVxuXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHRoaXMuX3BvcHVwLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgKGV2dCkgPT4ge1xuICAgICAgaWYgKFxuICAgICAgICBldnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcInBvcHVwXCIpIHx8XG4gICAgICAgIGV2dC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwicG9wdXBfX2Nsb3NlXCIpXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBQb3B1cCB9IGZyb20gXCIuL1BvcHVwLmpzXCI7XG5cbmV4cG9ydCBjbGFzcyBQb3B1cFdpdGhGb3JtIGV4dGVuZHMgUG9wdXAge1xuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yLCBmb3JtU2VsZWN0b3IsIHN1Ym1pdEhhbmRsZXIgPSBudWxsKSB7XG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XG4gICAgdGhpcy5fZm9ybSA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoZm9ybVNlbGVjdG9yKTtcbiAgICB0aGlzLl9zdWJtaXRIYW5kbGVyID0gc3VibWl0SGFuZGxlcjtcbiAgfVxuXG4gIF9nZXRJbnB1dFZhbHVlcygpIHtcbiAgICBjb25zdCBmb3JtSXRlbU9iamVjdCA9IHt9O1xuICAgIGNvbnN0IGlucHV0RWxlbWVudHMgPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoXCIucG9wdXBfX2lucHV0XCIpO1xuICAgIGlucHV0RWxlbWVudHMuZm9yRWFjaCgoaW5wdXQpID0+IHtcbiAgICAgIGZvcm1JdGVtT2JqZWN0W2lucHV0Lm5hbWVdID0gaW5wdXQudmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZvcm1JdGVtT2JqZWN0O1xuICB9XG5cbiAgY2hhbmdlU3VibWl0SGFuZGxlcihuZXdTdWJtaXRIYW5kbGVyKSB7XG4gICAgdGhpcy5fc3VibWl0SGFuZGxlciA9IG5ld1N1Ym1pdEhhbmRsZXJcbiAgfVxuICBcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5fZm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChldnQpID0+IHtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhpcy5fc3VibWl0SGFuZGxlcih0aGlzLl9nZXRJbnB1dFZhbHVlcygpKTtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgIGV2dC50YXJnZXQucmVzZXQoKTsgXG4gICAgfSk7XG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgUG9wdXAgfSBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xuXG5leHBvcnQgY2xhc3MgUG9wdXBXaXRoSW1hZ2UgZXh0ZW5kcyBQb3B1cCB7XG4gIG9wZW4oeyBuYW1lLCBsaW5rIH0pIHtcbiAgICB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX19pbWFnZVwiKS5zcmMgPSBsaW5rO1xuICAgIHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXBfX2ltYWdlXCIpLmFsdCA9IG5hbWU7XG4gICAgdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcihcIi5wb3B1cF9faGVhZGluZ1wiKS50ZXh0Q29udGVudCA9IG5hbWU7XG4gICAgc3VwZXIub3BlbigpO1xuICB9XG59XG4iLCJleHBvcnQgY2xhc3MgVXNlckluZm8ge1xuICBjb25zdHJ1Y3Rvcih7ZGF0YSwgcHJvZmlsZVRleHQsIHByb2ZpbGVUaXRsZSwgcG9maWxlQXZhdGFyLCBoYW5kbGVBdmF0YXJDbGlja30pIHtcbiAgICB0aGlzLl9kYXRhID0gZGF0YTtcbiAgICB0aGlzLl9uYW1lID0gcHJvZmlsZVRleHQ7XG4gICAgdGhpcy5fYWJvdXQgPSBwcm9maWxlVGl0bGU7XG4gICAgdGhpcy5fYXZhdGFyID0gcG9maWxlQXZhdGFyOyBcbiAgICB0aGlzLl9oYW5kbGVBdmF0YXJDbGljayA9IGhhbmRsZUF2YXRhckNsaWNrO1xuICB9XG4gIGdldFVzZXJJbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgbmFtZTogdGhpcy5fbmFtZS50ZXh0Q29udGVudCxcbiAgICBhYm91dDogdGhpcy5fYWJvdXQudGV4dENvbnRlbnQsXG4gICAgYXZhdGFyOiB0aGlzLl9hdmF0YXIuc3JjXG4gIH1cbn1cbiAgc2V0VXNlckluZm8oZGF0YSkge1xuICAgIHRoaXMuX25hbWUudGV4dENvbnRlbnQgPSBkYXRhLm5hbWU7XG4gICAgdGhpcy5fYWJvdXQudGV4dENvbnRlbnQgPSBkYXRhLmFib3V0O1xuICAgIHRoaXMuX2F2YXRhci5zcmMgPSBkYXRhLmF2YXRhcjtcbiAgfVxuXG59XG4iLCJleHBvcnQgY29uc3QgY29uZmlnID0ge1xuICBmb3JtRWxlbWVudDogXCIucG9wdXBfX2Zvcm1cIixcbiAgaW5wdXRQb3B1cDogXCIucG9wdXBfX2lucHV0XCIsXG4gIGJ1dHRvbkVsZW1lbnQ6IFwiLnBvcHVwX19idXR0b25cIixcbiAgaW5hY3RpdmVCdXR0b246IFwiYnV0dG9uX2luYWN0aXZlXCIsXG4gIGlucHV0RXJyb3JDbGFzczogXCJwb3B1cF9faW5wdXRfZXJyb3JcIixcbiAgZXJyb3JDbGFzczogXCJwb3B1cF9fZXJyb3JfdmlzaWJsZVwiLFxuICBpbnB1dENvbnRlaW5lckludmFsaWQ6IFwiaW5wdXQtY29udGVpbmVyX19pbnZhbGlkXCIsXG4gIGNvbnRlaW5lcklucHV0OiBcIi5pbnB1dC1jb250ZWluZXJcIixcbn07XG5cbmV4cG9ydCBjb25zdCBwcm9maWxlVGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX3RpdGxlXCIpO1xuZXhwb3J0IGNvbnN0IHByb2ZpbGVUZXh0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX190ZXh0XCIpO1xuZXhwb3J0IGNvbnN0IHBvZmlsZUF2YXRhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fYXZhdGFyXCIpXG5cbiIsImltcG9ydCB7IFByb21pc2UgfSBmcm9tIFwiY29yZS1qc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEFwaXtcclxuI29uUmVzcG9uc2UocmVzcG9uc2Upe1xyXG4gIGlmIChyZXNwb25zZS5vaykge1xyXG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHttZXNzYWdlOiBg0J7RiNC40LHQutCwINC+0YLQv9GA0LDQstC60Lgg0LrQsNGA0YLQuNC90LrQuCDQvdCwINGB0YLQvtGA0L7QvdC1INGB0LXRgNCy0LXRgNCwYCwgcmVzcG9uc2V9KTtcclxuICB9XHJcbn1cclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWdzKXtcclxuICAgICAgICB0aGlzLl91cmwgPSBjb25maWdzLnVybDtcclxuICAgICAgICB0aGlzLl9oZWFkZXJzID0gY29uZmlncy5oZWFkZXJzO1xyXG4gICAgfVxyXG4gICAgLyrQt9Cw0LPRgNGD0LfQutCwINC60LDRgNGC0L7Rh9C10Log0YEg0YHQtdGA0LLQtdGA0LAqL1xyXG4gICAgZ2V0QWxsVGFza3MoKXtcclxuICAgICAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fdXJsfS9jYXJkc2AsIHtcclxuICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzfSlcclxuICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcclxuICAgICAgICAgIHJldHVybiB0aGlzLiNvblJlc3BvbnNlKHJlc3BvbnNlKTtcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICAvKtC/0L7Qu9C90LDRjyDQuNC90YTQvtGA0LzQsNGG0LjRjyDQv9GA0Lgg0LfQsNCz0YDRg9C30LrQtSovXHJcblxyXG4gIGdldEFsbEluZm8oKSB7XHJcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoW3RoaXMuZ2V0QWxsUHJvZmlsZSgpLCB0aGlzLmdldEFsbFRhc2tzKCldKVxyXG4gIH1cclxuXHJcbi8q0LTQvtCx0LDQstC70LXQvdC40LUg0LrQsNGA0YLQvtGH0LrQuCDQvdCwINGB0LXRgNCy0LXRgCovXHJcbiAgYWRkTmV3VGFza3MoZm9ybUl0ZW1PYmplY3Qpe1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX3VybH0vY2FyZHNgLCB7XHJcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShmb3JtSXRlbU9iamVjdClcclxuICAgIH0pXHJcbiAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNvblJlc3BvbnNlKHJlc3BvbnNlKTtcclxuICB9KVxyXG4gIH1cclxuXHJcbiAgICByZW1vdmVDYXJkKGlkQ2FyZCl7XHJcbiAgICAgICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX3VybH0vY2FyZHMvJHtpZENhcmR9YCwge1xyXG4gICAgICAgICAgICBtZXRob2Q6ICdERUxFVEUnLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzfSlcclxuICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcclxuICAgICAgICAgcmV0dXJuIHRoaXMuI29uUmVzcG9uc2UocmVzcG9uc2UpO1xyXG4gICAgfSlcclxuICB9XHJcbi8q0LfQsNCz0YDRg9C30LrQsCDQv9GA0L7RhNC40LvRjyDRgdGB0LXRgNCy0LXRgNCwKi9cclxuICAgIGdldEFsbFByb2ZpbGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX3VybH0vdXNlcnMvbWVgLCB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnN9KVxyXG4gICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcclxuICAgICAgICAgICAgICByZXR1cm4gdGhpcy4jb25SZXNwb25zZShyZXNwb25zZSk7XHJcbiAgICAgICAgfSlcclxufVxyXG4vKtC30LDQs9GA0YPQt9C60LAg0L3QsCDRgdC10YDQstC10YAg0L3QvtCy0YvRhSDQtNCw0L3QvdGL0YUg0L/RgNC+0YTQuNC70Y8qL1xyXG5cclxuYWRkTmV3UHJvZmlsZShmb3JtSXRlbU9iamVjdCkge1xyXG4gIHJldHVybiBmZXRjaChgJHt0aGlzLl91cmx9L3VzZXJzL21lYCwge1xyXG4gICAgICBtZXRob2Q6ICdQQVRDSCcsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgIGJvZHk6SlNPTi5zdHJpbmdpZnkoZm9ybUl0ZW1PYmplY3QpXHJcbiAgICBcclxuICAgIH0pXHJcbiAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNvblJlc3BvbnNlKHJlc3BvbnNlKTtcclxuICB9KVxyXG59XHJcblxyXG5jaGFuZ2VMaWtlKGlkQ2FyZCwgaXNMaWtlKSB7XHJcbiAgcmV0dXJuIGZldGNoKGAke3RoaXMuX3VybH0vY2FyZHMvJHtpZENhcmR9L2xpa2VzYCwge1xyXG4gICAgbWV0aG9kOiBpc0xpa2UgPyAnREVMRVRFJyA6ICdQVVQnLFxyXG4gICAgaGVhZGVyczogdGhpcy5faGVhZGVyc30pXHJcbi50aGVuKChyZXNwb25zZSkgPT4ge1xyXG4gcmV0dXJuIHRoaXMuI29uUmVzcG9uc2UocmVzcG9uc2UpO1xyXG59KVxyXG59XHJcblxyXG4vKtCh0LzQtdC90LAg0LDQstCw0YLQsNGA0LrQuCovXHJcblxyXG5hZGROZXdBdmF0YXIoYXZhdGFyKSB7XHJcbiAgcmV0dXJuIGZldGNoKGAke3RoaXMuX3VybH0vdXNlcnMvbWUvYXZhdGFyYCwge1xyXG4gICAgICBtZXRob2Q6ICdQQVRDSCcsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgIGJvZHk6SlNPTi5zdHJpbmdpZnkoe2F2YXRhcn0pXHJcbiAgICBcclxuICAgIH0pXHJcbiAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNvblJlc3BvbnNlKHJlc3BvbnNlKTtcclxuICB9KVxyXG59XHJcbiBcclxufVxyXG5cclxuIiwiLyrQn9C+0LTQutC70Y7Rh9C10L3QuNC1Ki9cbmltcG9ydCB7IENhcmQgfSBmcm9tIFwiLi9jb21wb25lbnRzL0NhcmQuanNcIjtcbmltcG9ydCB7IEZvcm1WYWxpZGF0b3IgfSBmcm9tIFwiLi9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanNcIjtcbmltcG9ydCB7IFNlY3Rpb24gfSBmcm9tIFwiLi9jb21wb25lbnRzL1NlY3Rpb24uanNcIjtcbmltcG9ydCB7IFBvcHVwV2l0aEZvcm0gfSBmcm9tIFwiLi9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanNcIjtcbmltcG9ydCB7IFBvcHVwV2l0aEltYWdlIH0gZnJvbSBcIi4vY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qc1wiO1xuaW1wb3J0IHsgVXNlckluZm8gfSBmcm9tIFwiLi9jb21wb25lbnRzL1VzZXJJbmZvLmpzXCI7XG5pbXBvcnQgeyBjb25maWcsIHByb2ZpbGVUaXRsZSwgcHJvZmlsZVRleHQsICBwb2ZpbGVBdmF0YXJ9IGZyb20gXCIuL3V0aWxzL2NvbnN0YW50cy5qc1wiO1xuaW1wb3J0IFwiLi9zdHlsZXMvaW5kZXguY3NzXCI7XG5pbXBvcnQgeyBBcGkgfSBmcm9tIFwiLi9jb21wb25lbnRzL2FwaS5qc1wiO1xuXG4vKkFwaSovXG5cbmNvbnN0IGNvbmZpZ3MgPSB7XG4gIHVybDonaHR0cHM6Ly9tZXN0by5ub21vcmVwYXJ0aWVzLmNvL3YxL2NvaG9ydC01NCcsXG4gIGhlYWRlcnM6IHtcbiAgICAgIFwiY29udGVudC10eXBlXCI6XCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICBhdXRob3JpemF0aW9uOicgYjg0YzcyMjMtNjZjNy00ODU5LWIzM2YtOWIxYzE5MmI1ZjA3J1xuICB9XG59XG5jb25zdCBhcGkgPSBuZXcgQXBpKGNvbmZpZ3MpO1xuXG4vKtCf0LXRgNCy0YvQuSBwb3B1cCovXG5jb25zdCBidXR0b25FZGl0UHJvZmlsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fZWRpdC1idXR0b25cIik7XG5jb25zdCBmb3JtRWRpdFByb2ZpbGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX19mb3JtX2VkaXQtYnV0dG9uXCIpO1xuXG5cbi8q0KTQvtGA0LzQsCDQn9GA0L7RhNC40LvRjyovXG5jb25zdCB1c2VyTmV3ID0gbmV3IFVzZXJJbmZvKHtwcm9maWxlVGV4dCwgXG4gIHByb2ZpbGVUaXRsZSwgXG4gIHBvZmlsZUF2YXRhcn0pO1xuXG4vKjEu0LfQsNCz0YDRg9C30LrQsCDQtNCw0L3QvdGL0YUg0YEg0YHQtdGA0LLQtdGA0LAqL1xuYXBpLmdldEFsbFByb2ZpbGUoKVxuICAudGhlbihmdW5jdGlvbihkYXRhKXtcbiAgICB1c2VyTmV3LnNldFVzZXJJbmZvKGRhdGEpO1xuICB9KVxuICAuY2F0Y2goZnVuY3Rpb24oZXJyKXtcbiAgICBjb25zb2xlLmxvZygn0J7RiNC40LHQutCwJywgZXJyKTtcbiAgfSk7XG5cbi8qMi7RgNC10LTQsNC60YLQuNGA0L7QstCw0L3QuNC1INC/0YDQvtGE0LjQu9GPKi9cblxuLyphLiDQstCw0LvQuNC00LDRhtC40Y8g0YTQvtGA0LzRiyovXG5jb25zdCBmb3JtVmFsaWRFZGl0UHJvZmlsZSA9IG5ldyBGb3JtVmFsaWRhdG9yKGNvbmZpZywgZm9ybUVkaXRQcm9maWxlKTtcbmZvcm1WYWxpZEVkaXRQcm9maWxlLmVuYWJsZVZhbGlkYXRpb24oKTtcblxuLyrQntGC0L/RgNCw0LLQutCwINC30LDQv9GA0L7RgdCwINC90LAg0YHQtdGA0LLQtdGAINC4INGB0LzQtdC90LAg0LTQsNC90L3Ri9GFINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjyovXG5mdW5jdGlvbiBoYW5kbGVFZGl0Rm9ybVN1Ym1pdChmb3JtSXRlbU9iamVjdCkge1xuICBhcGkuYWRkTmV3UHJvZmlsZShmb3JtSXRlbU9iamVjdClcbiAgLnRoZW4oKHJlcykgPT4geyBcbiAgICB1c2VyTmV3LnNldFVzZXJJbmZvKHJlcyk7XG4gIH0pXG4gIC5jYXRjaChmdW5jdGlvbihlcnIpe1xuICAgIGNvbnNvbGUubG9nKCfQntGI0LjQsdC60LAnLCBlcnIpO1xuICB9KTtcbn07XG5cbmNvbnN0IHBvcHVwRWRpdENhcmQgPSBuZXcgUG9wdXBXaXRoRm9ybShcbiAgXCIucG9wdXBfZWRpdC1idXR0b25cIixcbiAgXCIucG9wdXBfX2Zvcm1fZWRpdC1idXR0b25cIixcbiAgICBoYW5kbGVFZGl0Rm9ybVN1Ym1pdFxuKTtcbnBvcHVwRWRpdENhcmQuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuYnV0dG9uRWRpdFByb2ZpbGUuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgcG9wdXBFZGl0Q2FyZC5vcGVuKCk7XG4gIGZvcm1WYWxpZEVkaXRQcm9maWxlLmRpc2FibGVkQnV0dG9uKCk7XG4gIHVzZXJOZXcuZ2V0VXNlckluZm8oKTtcbn0pO1xuXG5cbi8q0JjQt9C80LXQvdC10L3QuNC1INCw0LLQsNGC0LDRgNC60LgqL1xuXG5jb25zdCBidXR0b25BdmF0YXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX2F2YXRhclwiKTtcbmNvbnN0IGZvcm1BdmF0YXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX19mb3JtX2NoYW5naW5nLWF2YXRhclwiKTtcblxuXG5jb25zdCBmb3JtVmFsaWRBdmF0YXIgPSBuZXcgRm9ybVZhbGlkYXRvcihjb25maWcsIGZvcm1BdmF0YXIpO1xuZm9ybVZhbGlkQXZhdGFyLmVuYWJsZVZhbGlkYXRpb24oKTtcblxuY29uc3QgcG9wdXBBdmF0YXIgPSBuZXcgUG9wdXBXaXRoRm9ybShcblwiLnBvcHVwX2NoYW5naW5nLWF2YXRhclwiLCBcblwiLnBvcHVwX19mb3JtX2NoYW5naW5nLWF2YXRhclwiLFxuIGhhbmRsZUF2YXRhckNsaWNrKTtcbnBvcHVwQXZhdGFyLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cblxuZnVuY3Rpb24gaGFuZGxlQXZhdGFyQ2xpY2soZGF0YSkge1xuICBhcGkuYWRkTmV3QXZhdGFyKGRhdGEuYXZhdGFyKVxuICAudGhlbigocmVzKSA9PiB7IFxuICAgIHVzZXJOZXcuc2V0VXNlckluZm8ocmVzKTtcbiAgfSlcbiAgLmNhdGNoKGZ1bmN0aW9uKGVycil7XG4gICAgY29uc29sZS5sb2coJ9Ce0YjQuNCx0LrQsCcsIGVycik7XG4gIH0pO1xuICBcbn1cblxuYnV0dG9uQXZhdGFyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gIHBvcHVwQXZhdGFyLm9wZW4oKTtcbiAgZm9ybVZhbGlkQXZhdGFyLmRpc2FibGVkQnV0dG9uKCk7XG4gIHVzZXJOZXcuZ2V0VXNlckluZm8oKTtcbn0pO1xuXG4vKnpvb20qL1xuXG5mdW5jdGlvbiBoYW5kbGVJbWFnZU9wZW5Qb3B1cChkYXRhKSB7XG4gIHBvcHVwWm9vbUltYWdlLm9wZW4oZGF0YSk7XG59XG5cbi8q0YPQtNCw0LvQtdC90LjQtSovXG5cbmNvbnN0IHBvcHVwUmVtb3ZlID0gbmV3IFBvcHVwV2l0aEZvcm0oXCIucG9wdXBfcmVtb3ZlXCIsIFwiLnBvcHVwX19mb3JtX3JlbW92ZVwiKTtcbnBvcHVwUmVtb3ZlLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cbmZ1bmN0aW9uIGhhbmRsZVJlbW92ZUNsaWNrKGNhcmRJbnN0YW5jZSkge1xuICBwb3B1cFJlbW92ZS5vcGVuKCk7XG4gIHBvcHVwUmVtb3ZlLmNoYW5nZVN1Ym1pdEhhbmRsZXIoKCkgPT4ge1xuICBhcGkucmVtb3ZlQ2FyZChjYXJkSW5zdGFuY2UuZ2V0SWQoKSlcbiAgLnRoZW4oKCkgPT4ge1xuICAgIGNhcmRJbnN0YW5jZS5yZW1vdmUoKTtcbiAgfSlcbn0pXG59O1xuXG4vKtC/0L7RgdGC0LDQvdC+0LLQutCwINC70LDQudC60LAqL1xuXG5mdW5jdGlvbiBwdXRMaWtlQ2FyZChpbnN0YW5jZSkge1xuICBhcGkuY2hhbmdlTGlrZShpbnN0YW5jZS5nZXRJZCgpLCBpbnN0YW5jZS5pc0xpa2VkKCkpXG4gIC50aGVuKGRhdGFDYXJkU2VydmVyID0+IHtcbiAgICBpbnN0YW5jZS5yZXNldExpa2VEYXRhKGRhdGFDYXJkU2VydmVyKVxuICB9KVxufVxuXG5jb25zdCBwb3B1cFpvb21JbWFnZSA9IG5ldyBQb3B1cFdpdGhJbWFnZShcIi5wb3B1cF96b29tXCIpO1xucG9wdXBab29tSW1hZ2Uuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuLypiINC00LXQudGB0YLQstC40Y8g0YEg0LrQsNGA0YLQvtGH0LrQsNC80LgqL1xuZnVuY3Rpb24gY3JlYXRlQ2FyZChkYXRhKSB7XG4gIGNvbnN0IGNhcmQgPSBuZXcgQ2FyZCAoeyBkYXRhLCBoYW5kbGVJbWFnZU9wZW5Qb3B1cCwgaGFuZGxlUmVtb3ZlQ2xpY2ssIHVzZXJJZCwgcHV0TGlrZUNhcmQsXG59LCBcIi5lbGVtZW50cy10ZW1wbGF0ZVwiKTtcblxuICByZXR1cm4gY2FyZC5nZW5lcmF0ZUNhcmQoKTsgIFxufVxuXG4vKtCU0L7QsdCw0LLQu9C10L3QuNC1INC60LDRgNGC0L7Rh9C10LoqL1xuY29uc3QgZm9ybUFkZENhcmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX19mb3JtX2FkZC1idXR0b25cIik7XG5jb25zdCBidXR0b25BZGRDYXJkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19hZGQtYnV0dG9uXCIpO1xuXG4vKtCwLkFwaSDQt9Cw0LPRgNGD0LfQutCwINC60LDRgNGC0L7Rh9C10Log0YEg0YHQtdGA0LLQtdGA0LAqL1xuXG5sZXQgdXNlcklkID0gbnVsbDtcblxuXG5jb25zdCBzZWN0aW9uID0gbmV3IFNlY3Rpb24oXCIuZWxlbWVudHNcIiwgKGRhdGFFbGVtZW50cykgPT4ge1xuICBzZWN0aW9uLmFkZEl0ZW0oY3JlYXRlQ2FyZChkYXRhRWxlbWVudHMpKTtcbn0pO1xuXG4vKtC/0L7Qu9GD0YfQtdC90LjQtSBpZCDQuCDQt9Cw0LPRgNGD0LfQutCwINC00LDQvdC90YvRhSovXG5cbmFwaS5nZXRBbGxJbmZvKClcbi50aGVuKChbcHJvZmlsZURhdGEsIHBvc3RBbGxdKSA9PiB7XG4gIHVzZXJJZCA9IHByb2ZpbGVEYXRhLl9pZDtcbiAgc2VjdGlvbi5yZW5kZXJlckl0ZW0ocG9zdEFsbCk7XG59KVxuLmNhdGNoKGZ1bmN0aW9uKGVycil7XG4gIGNvbnNvbGUubG9nKCfQntGI0LjQsdC60LAnLCBlcnIpO1xufSk7XG5cblxuXG4vKtCk0L7RgNC80LAg0J3QvtCy0L7QtSDQvNC10YHRgtC+INC00L7QsdCw0LLQu9C10L3QuNC1INC90L7QstC+0Lkg0LrQsNGA0YLQvtGH0LrQuCovXG5cbi8qMS7QktCw0LvQuNC00LDRhtC40Y8g0YTQvtGA0LzRiyDQndC+0LLQvtC1INC80LXRgdGC0L4qL1xuY29uc3QgZm9ybVZhbGlkQWRkQ2FyZCA9IG5ldyBGb3JtVmFsaWRhdG9yKGNvbmZpZywgZm9ybUFkZENhcmQpO1xuZm9ybVZhbGlkQWRkQ2FyZC5lbmFibGVWYWxpZGF0aW9uKCk7XG5cbi8qMi7QtNC+0LHQsNCy0LvQtdC90LjQtSDQvdC+0LLQvtC5INC60LDRgNGC0L7Rh9C60LgqL1xuZnVuY3Rpb24gaGFuZGxlQWRkRm9ybVN1Ym1pdCggZm9ybUl0ZW1PYmplY3QpIHtcbiAgYXBpLmFkZE5ld1Rhc2tzKGZvcm1JdGVtT2JqZWN0KVxuICAudGhlbigoZGF0YSkgPT4geyBcbiAgICBzZWN0aW9uLmFkZEl0ZW0oY3JlYXRlQ2FyZChkYXRhKSk7XG4gIH0pXG4gIC5jYXRjaChmdW5jdGlvbihlcnIpe1xuICAgIGNvbnNvbGUubG9nKCfQntGI0LjQsdC60LAnLCBlcnIpO1xuICB9KTtcbn07XG5cbmNvbnN0IHBvcHVwQWRkQ2FyZCA9IG5ldyBQb3B1cFdpdGhGb3JtKFwiLnBvcHVwX2FkZC1idXR0b25cIiwgXCIucG9wdXBfX2Zvcm1fYWRkLWJ1dHRvblwiLCBoYW5kbGVBZGRGb3JtU3VibWl0KTtcbnBvcHVwQWRkQ2FyZC5zZXRFdmVudExpc3RlbmVycygpO1xuXG5idXR0b25BZGRDYXJkLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gIHBvcHVwQWRkQ2FyZC5vcGVuKCk7XG4gIGZvcm1WYWxpZEFkZENhcmQuZGlzYWJsZWRCdXR0b24oKTtcbn0pO1xuXG5cblxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIiwiaXNDYWxsYWJsZSIsInRyeVRvU3RyaW5nIiwiJFR5cGVFcnJvciIsIlR5cGVFcnJvciIsImFyZ3VtZW50IiwiaXNDb25zdHJ1Y3RvciIsIiRTdHJpbmciLCJTdHJpbmciLCJ3ZWxsS25vd25TeW1ib2wiLCJjcmVhdGUiLCJkZWZpbmVQcm9wZXJ0eSIsIlVOU0NPUEFCTEVTIiwiQXJyYXlQcm90b3R5cGUiLCJBcnJheSIsInByb3RvdHlwZSIsInVuZGVmaW5lZCIsImNvbmZpZ3VyYWJsZSIsInZhbHVlIiwia2V5IiwiY2hhckF0IiwiUyIsImluZGV4IiwidW5pY29kZSIsImxlbmd0aCIsImlzUHJvdG90eXBlT2YiLCJpdCIsIlByb3RvdHlwZSIsImlzT2JqZWN0IiwiQXJyYXlCdWZmZXIiLCJEYXRhVmlldyIsImZhaWxzIiwiYnVmZmVyIiwiT2JqZWN0IiwiaXNFeHRlbnNpYmxlIiwiTkFNRSIsIkNvbnN0cnVjdG9yIiwiTkFUSVZFX0FSUkFZX0JVRkZFUiIsIkRFU0NSSVBUT1JTIiwiZ2xvYmFsIiwiaGFzT3duIiwiY2xhc3NvZiIsImNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSIsImRlZmluZUJ1aWx0SW4iLCJnZXRQcm90b3R5cGVPZiIsInNldFByb3RvdHlwZU9mIiwidWlkIiwiSW50ZXJuYWxTdGF0ZU1vZHVsZSIsImVuZm9yY2VJbnRlcm5hbFN0YXRlIiwiZW5mb3JjZSIsImdldEludGVybmFsU3RhdGUiLCJnZXQiLCJJbnQ4QXJyYXkiLCJJbnQ4QXJyYXlQcm90b3R5cGUiLCJVaW50OENsYW1wZWRBcnJheSIsIlVpbnQ4Q2xhbXBlZEFycmF5UHJvdG90eXBlIiwiVHlwZWRBcnJheSIsIlR5cGVkQXJyYXlQcm90b3R5cGUiLCJPYmplY3RQcm90b3R5cGUiLCJUT19TVFJJTkdfVEFHIiwiVFlQRURfQVJSQVlfVEFHIiwiTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyIsIm9wZXJhIiwiVFlQRURfQVJSQVlfVEFHX1JFUVVJUkVEIiwiVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QiLCJVaW50OEFycmF5IiwiSW50MTZBcnJheSIsIlVpbnQxNkFycmF5IiwiSW50MzJBcnJheSIsIlVpbnQzMkFycmF5IiwiRmxvYXQzMkFycmF5IiwiRmxvYXQ2NEFycmF5IiwiQmlnSW50QXJyYXlDb25zdHJ1Y3RvcnNMaXN0IiwiQmlnSW50NjRBcnJheSIsIkJpZ1VpbnQ2NEFycmF5IiwiaXNUeXBlZEFycmF5Iiwia2xhc3MiLCJGdW5jdGlvbiIsInRoaXMiLCJhVHlwZWRBcnJheSIsImFUeXBlZEFycmF5Q29uc3RydWN0b3IiLCJDIiwiZXhwb3J0VHlwZWRBcnJheU1ldGhvZCIsIktFWSIsInByb3BlcnR5IiwiZm9yY2VkIiwib3B0aW9ucyIsIkFSUkFZIiwiVHlwZWRBcnJheUNvbnN0cnVjdG9yIiwiZXJyb3IiLCJlcnJvcjIiLCJleHBvcnRUeXBlZEFycmF5U3RhdGljTWV0aG9kIiwiZ2V0VHlwZWRBcnJheUNvbnN0cnVjdG9yIiwicHJvdG8iLCJzdGF0ZSIsImlzVmlldyIsInVuY3VycnlUaGlzIiwiRnVuY3Rpb25OYW1lIiwiZGVmaW5lQnVpbHRJbnMiLCJhbkluc3RhbmNlIiwidG9JbnRlZ2VyT3JJbmZpbml0eSIsInRvTGVuZ3RoIiwidG9JbmRleCIsIklFRUU3NTQiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiYXJyYXlGaWxsIiwiYXJyYXlTbGljZSIsInNldFRvU3RyaW5nVGFnIiwiUFJPUEVSX0ZVTkNUSU9OX05BTUUiLCJQUk9QRVIiLCJDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSIsIkNPTkZJR1VSQUJMRSIsInNldEludGVybmFsU3RhdGUiLCJzZXQiLCJBUlJBWV9CVUZGRVIiLCJXUk9OR19JTkRFWCIsIk5hdGl2ZUFycmF5QnVmZmVyIiwiJEFycmF5QnVmZmVyIiwiQXJyYXlCdWZmZXJQcm90b3R5cGUiLCIkRGF0YVZpZXciLCJEYXRhVmlld1Byb3RvdHlwZSIsIlJhbmdlRXJyb3IiLCJmaWxsIiwicmV2ZXJzZSIsInBhY2tJRUVFNzU0IiwicGFjayIsInVucGFja0lFRUU3NTQiLCJ1bnBhY2siLCJwYWNrSW50OCIsIm51bWJlciIsInBhY2tJbnQxNiIsInBhY2tJbnQzMiIsInVucGFja0ludDMyIiwicGFja0Zsb2F0MzIiLCJwYWNrRmxvYXQ2NCIsImFkZEdldHRlciIsInZpZXciLCJjb3VudCIsImlzTGl0dGxlRW5kaWFuIiwiaW50SW5kZXgiLCJzdG9yZSIsImJ5dGVMZW5ndGgiLCJieXRlcyIsInN0YXJ0IiwiYnl0ZU9mZnNldCIsImNvbnZlcnNpb24iLCJpIiwiSU5DT1JSRUNUX0FSUkFZX0JVRkZFUl9OQU1FIiwibmFtZSIsIk5hTiIsImtleXMiLCJqIiwiY29uc3RydWN0b3IiLCJ0ZXN0VmlldyIsIiRzZXRJbnQ4Iiwic2V0SW50OCIsImdldEludDgiLCJzZXRVaW50OCIsInVuc2FmZSIsImJ1ZmZlckxlbmd0aCIsIm9mZnNldCIsImdldFVpbnQ4IiwiZ2V0SW50MTYiLCJhcmd1bWVudHMiLCJnZXRVaW50MTYiLCJnZXRJbnQzMiIsImdldFVpbnQzMiIsImdldEZsb2F0MzIiLCJnZXRGbG9hdDY0Iiwic2V0SW50MTYiLCJzZXRVaW50MTYiLCJzZXRJbnQzMiIsInNldFVpbnQzMiIsInNldEZsb2F0MzIiLCJzZXRGbG9hdDY0IiwidG9PYmplY3QiLCJ0b0Fic29sdXRlSW5kZXgiLCJsZW5ndGhPZkFycmF5TGlrZSIsImRlbGV0ZVByb3BlcnR5T3JUaHJvdyIsIm1pbiIsIk1hdGgiLCJjb3B5V2l0aGluIiwidGFyZ2V0IiwiTyIsImxlbiIsInRvIiwiZnJvbSIsImVuZCIsImluYyIsImFyZ3VtZW50c0xlbmd0aCIsImVuZFBvcyIsIiRmb3JFYWNoIiwiU1RSSUNUX01FVEhPRCIsImFycmF5TWV0aG9kSXNTdHJpY3QiLCJmb3JFYWNoIiwiY2FsbGJhY2tmbiIsImJpbmQiLCJnZXRBc3luY0l0ZXJhdG9yIiwiZ2V0SXRlcmF0b3IiLCJnZXRJdGVyYXRvck1ldGhvZCIsImdldE1ldGhvZCIsImdldFZpcnR1YWwiLCJnZXRCdWlsdEluIiwiQXN5bmNGcm9tU3luY0l0ZXJhdG9yIiwidG9BcnJheSIsIkFTWU5DX0lURVJBVE9SIiwiYXJyYXlJdGVyYXRvciIsInZhbHVlcyIsImFzeW5jSXRlbXMiLCJtYXBmbiIsInRoaXNBcmciLCJyZXNvbHZlIiwidXNpbmdBc3luY0l0ZXJhdG9yIiwidXNpbmdTeW5jSXRlcmF0b3IiLCJBIiwiaXRlcmF0b3IiLCJsaXN0IiwicmVzdWx0IiwiY2FsbCIsImNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmciLCJpc0FycmF5SXRlcmF0b3JNZXRob2QiLCJjcmVhdGVQcm9wZXJ0eSIsIiRBcnJheSIsImFycmF5TGlrZSIsIklTX0NPTlNUUlVDVE9SIiwibWFwcGluZyIsInN0ZXAiLCJuZXh0IiwiaXRlcmF0b3JNZXRob2QiLCJkb25lIiwiSW5kZXhlZE9iamVjdCIsIk1hcCIsIk1hcFByb3RvdHlwZSIsIm1hcEdldCIsIm1hcEhhcyIsImhhcyIsIm1hcFNldCIsInB1c2giLCJzZWxmIiwiYm91bmRGdW5jdGlvbiIsIm1hcCIsInRvUHJvcGVydHlLZXkiLCJvYmplY3RDcmVhdGUiLCJhcnJheUZyb21Db25zdHJ1Y3RvckFuZExpc3QiLCIkdGhpcyIsInRoYXQiLCJzcGVjaWZpY0NvbnN0cnVjdG9yIiwidG9JbmRleGVkT2JqZWN0IiwiY3JlYXRlTWV0aG9kIiwiSVNfSU5DTFVERVMiLCJlbCIsImZyb21JbmRleCIsImluY2x1ZGVzIiwiaW5kZXhPZiIsIlRZUEUiLCJJU19GSU5EX0xBU1RfSU5ERVgiLCJmaW5kTGFzdCIsImZpbmRMYXN0SW5kZXgiLCJhcnJheVNwZWNpZXNDcmVhdGUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiSVNfRklMVEVSX1JFSkVDVCIsIk5PX0hPTEVTIiwic3BlY2lmaWNDcmVhdGUiLCJmaWx0ZXIiLCJzb21lIiwiZXZlcnkiLCJmaW5kIiwiZmluZEluZGV4IiwiZmlsdGVyUmVqZWN0IiwiYXBwbHkiLCIkbGFzdEluZGV4T2YiLCJsYXN0SW5kZXhPZiIsIk5FR0FUSVZFX1pFUk8iLCJGT1JDRUQiLCJzZWFyY2hFbGVtZW50IiwiVjhfVkVSU0lPTiIsIlNQRUNJRVMiLCJNRVRIT0RfTkFNRSIsImFycmF5IiwiZm9vIiwiQm9vbGVhbiIsIm1ldGhvZCIsImFDYWxsYWJsZSIsIklTX1JJR0hUIiwibWVtbyIsImxlZnQiLCJyaWdodCIsImlzQXJyYXkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJTSUxFTlRfT05fTk9OX1dSSVRBQkxFX0xFTkdUSF9TRVQiLCJ3cml0YWJsZSIsIm1heCIsImsiLCJmaW4iLCJuIiwic2xpY2UiLCJmbG9vciIsIm1lcmdlU29ydCIsImNvbXBhcmVmbiIsIm1pZGRsZSIsImVsZW1lbnQiLCJpbnNlcnRpb25Tb3J0IiwibGxlbmd0aCIsInJsZW5ndGgiLCJsaW5kZXgiLCJyaW5kZXgiLCJtZXJnZSIsIm9yaWdpbmFsQXJyYXkiLCJhcnJheVNwZWNpZXNDb25zdHJ1Y3RvciIsImlzTnVsbE9yVW5kZWZpbmVkIiwibWFwRm9yRWFjaCIsInJlc29sdmVyIiwiaXRlbSIsInJlc29sdmVyRnVuY3Rpb24iLCIkUmFuZ2VFcnJvciIsInJlbGF0aXZlSW5kZXgiLCJhY3R1YWxJbmRleCIsImFuT2JqZWN0IiwiQXN5bmNJdGVyYXRvclByb3RvdHlwZSIsImNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QiLCJQcm9taXNlIiwiQVNZTkNfRlJPTV9TWU5DX0lURVJBVE9SIiwiZ2V0dGVyRm9yIiwiYXN5bmNGcm9tU3luY0l0ZXJhdG9yQ29udGludWF0aW9uIiwicmVqZWN0IiwidGhlbiIsInR5cGUiLCIkcmV0dXJuIiwicmV0dXJuTWV0aG9kIiwicGVyZm9ybSIsIml0ZXJhdG9yQ2xvc2UiLCJBU1lOQ19JVEVSQVRPUl9IRUxQRVIiLCJXUkFQX0ZPUl9WQUxJRF9BU1lOQ19JVEVSQVRPUiIsImNyZWF0ZUFzeW5jSXRlcmF0b3JQcm94eVByb3RvdHlwZSIsIklTX0lURVJBVE9SIiwiSVNfR0VORVJBVE9SIiwiQVNZTkNfSVRFUkFUT1JfUFJPWFkiLCJnZXRTdGF0ZU9yRWFybHlFeGl0Iiwic3RhdGVDb21wbGV0aW9uIiwic3RhdGVFcnJvciIsImV4aXQiLCJlbnF1ZXVlIiwiaGFuZGxlciIsInRhc2siLCJwcm9taXNlIiwiYXdhaXRpbmciLCJjbGVhbiIsIkFzeW5jSXRlcmF0b3JQcm94eVByb3RvdHlwZSIsImhhbmRsZXJDb21wbGV0aW9uIiwibmV4dEhhbmRsZXIiLCJoYW5kbGVyRXJyb3IiLCJpbm5lckl0ZXJhdG9yIiwiY29tcGxldGlvbiIsInJlc29sdmVkIiwiQXN5bmNJdGVyYXRvckhlbHBlclByb3RvdHlwZSIsIldyYXBGb3JWYWxpZEFzeW5jSXRlcmF0b3JQcm90b3R5cGUiLCJBc3luY0l0ZXJhdG9yUHJveHkiLCJyZWNvcmQiLCJnZXRJdGVyYXRvckRpcmVjdCIsImNyZWF0ZUFzeW5jSXRlcmF0b3JQcm94eSIsImRvZXNOb3RFeGNlZWRTYWZlSW50ZWdlciIsImNsb3NlQXN5bmNJdGVyYXRpb24iLCJJU19UT19BUlJBWSIsIklTX0ZPUl9FQUNIIiwib2JqZWN0IiwiZm4iLCJNQVBQSU5HIiwiaWZBYnJ1cHRDbG9zZUFzeW5jSXRlcmF0b3IiLCJsb29wIiwiZXJyb3I1IiwiZXJyb3I0IiwiZXJyb3IzIiwic2hhcmVkIiwiSVNfUFVSRSIsIkFzeW5jSXRlcmF0b3IiLCJQYXNzZWRBc3luY0l0ZXJhdG9yUHJvdG90eXBlIiwiaXRvYyIsImN0b2kiLCJFTlRSSUVTIiwiSVRFUkFUT1IiLCJTQUZFX0NMT1NJTkciLCJjYWxsZWQiLCJpdGVyYXRvcldpdGhSZXR1cm4iLCJleGVjIiwiU0tJUF9DTE9TSU5HIiwiSVRFUkFUSU9OX1NVUFBPUlQiLCJ0b1N0cmluZyIsInN0cmluZ1NsaWNlIiwiVE9fU1RSSU5HX1RBR19TVVBQT1JUIiwiY2xhc3NvZlJhdyIsIiRPYmplY3QiLCJDT1JSRUNUX0FSR1VNRU5UUyIsInRhZyIsInRyeUdldCIsImNhbGxlZSIsImFkZGVyIiwiYWRkIiwid2FzRGVsZXRlZCIsImNvbGxlY3Rpb24iLCJyZW1vdmVyIiwiYWxsRGVsZXRlZCIsImFDb25zdHJ1Y3RvciIsIml0ZXJhdGUiLCJzb3VyY2UiLCJtYXBGbiIsIm5leHRJdGVtIiwiZGVmaW5lSXRlcmF0b3IiLCJzZXRTcGVjaWVzIiwiZmFzdEtleSIsImludGVybmFsU3RhdGVHZXR0ZXJGb3IiLCJnZXRDb25zdHJ1Y3RvciIsIndyYXBwZXIiLCJDT05TVFJVQ1RPUl9OQU1FIiwiQURERVIiLCJpdGVyYWJsZSIsImZpcnN0IiwibGFzdCIsInNpemUiLCJBU19FTlRSSUVTIiwiZGVmaW5lIiwicHJldmlvdXMiLCJlbnRyeSIsImdldEVudHJ5IiwicmVtb3ZlZCIsImNsZWFyIiwiZGF0YSIsInByZXYiLCJzZXRTdHJvbmciLCJJVEVSQVRPUl9OQU1FIiwiZ2V0SW50ZXJuYWxDb2xsZWN0aW9uU3RhdGUiLCJnZXRJbnRlcm5hbEl0ZXJhdG9yU3RhdGUiLCJpdGVyYXRlZCIsImtpbmQiLCJnZXRXZWFrRGF0YSIsIkFycmF5SXRlcmF0aW9uTW9kdWxlIiwic3BsaWNlIiwiaWQiLCJ1bmNhdWdodEZyb3plblN0b3JlIiwiZnJvemVuIiwiVW5jYXVnaHRGcm96ZW5TdG9yZSIsImVudHJpZXMiLCJmaW5kVW5jYXVnaHRGcm96ZW4iLCIkIiwiaXNGb3JjZWQiLCJJbnRlcm5hbE1ldGFkYXRhTW9kdWxlIiwiY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uIiwiaW5oZXJpdElmUmVxdWlyZWQiLCJjb21tb24iLCJJU19XRUFLIiwiTmF0aXZlQ29uc3RydWN0b3IiLCJOYXRpdmVQcm90b3R5cGUiLCJleHBvcnRlZCIsImZpeE1ldGhvZCIsInVuY3VycmllZE5hdGl2ZU1ldGhvZCIsImVuYWJsZSIsImluc3RhbmNlIiwiSEFTTlRfQ0hBSU5JTkciLCJUSFJPV1NfT05fUFJJTUlUSVZFUyIsIkFDQ0VQVF9JVEVSQUJMRVMiLCJCVUdHWV9aRVJPIiwiJGluc3RhbmNlIiwiZHVtbXkiLCJXZWFrTWFwIiwiTm9kZSIsInN5bWJvbCIsInByaW1pdGl2ZXMiLCJvYmplY3RzQnlJbmRleCIsImluaXRpYWxpemVyIiwiSVNfT0JKRUNUIiwicm9vdCIsImFjdGl2ZSIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUiLCJkZWZpbmVQcm9wZXJ0eU1vZHVsZSIsImV4Y2VwdGlvbnMiLCJmIiwiTUFUQ0giLCJyZWdleHAiLCJlcnJvcjEiLCJGIiwicmVxdWlyZU9iamVjdENvZXJjaWJsZSIsInF1b3QiLCJyZXBsYWNlIiwic3RyaW5nIiwiYXR0cmlidXRlIiwicDEiLCJjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IiLCJiaXRtYXAiLCJlbnVtZXJhYmxlIiwicHJvcGVydHlLZXkiLCJwYWRTdGFydCIsIiRpc0Zpbml0ZSIsImlzRmluaXRlIiwiYWJzIiwiRGF0ZVByb3RvdHlwZSIsIkRhdGUiLCJuYXRpdmVEYXRlVG9JU09TdHJpbmciLCJ0b0lTT1N0cmluZyIsInRoaXNUaW1lVmFsdWUiLCJnZXRUaW1lIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENTZWNvbmRzIiwiZGF0ZSIsInllYXIiLCJtaWxsaXNlY29uZHMiLCJzaWduIiwib3JkaW5hcnlUb1ByaW1pdGl2ZSIsImhpbnQiLCJtYWtlQnVpbHRJbiIsImRlc2NyaXB0b3IiLCJnZXR0ZXIiLCJzZXR0ZXIiLCJkZWZpbmVHbG9iYWxQcm9wZXJ0eSIsInNpbXBsZSIsIm5vbkNvbmZpZ3VyYWJsZSIsIm5vbldyaXRhYmxlIiwic3JjIiwiUCIsImRvY3VtZW50QWxsIiwiZG9jdW1lbnQiLCJhbGwiLCJJU19IVE1MRERBIiwiRVhJU1RTIiwiY3JlYXRlRWxlbWVudCIsIkluZGV4U2l6ZUVycm9yIiwicyIsImMiLCJtIiwiRE9NU3RyaW5nU2l6ZUVycm9yIiwiSGllcmFyY2h5UmVxdWVzdEVycm9yIiwiV3JvbmdEb2N1bWVudEVycm9yIiwiSW52YWxpZENoYXJhY3RlckVycm9yIiwiTm9EYXRhQWxsb3dlZEVycm9yIiwiTm9Nb2RpZmljYXRpb25BbGxvd2VkRXJyb3IiLCJOb3RGb3VuZEVycm9yIiwiTm90U3VwcG9ydGVkRXJyb3IiLCJJblVzZUF0dHJpYnV0ZUVycm9yIiwiSW52YWxpZFN0YXRlRXJyb3IiLCJTeW50YXhFcnJvciIsIkludmFsaWRNb2RpZmljYXRpb25FcnJvciIsIk5hbWVzcGFjZUVycm9yIiwiSW52YWxpZEFjY2Vzc0Vycm9yIiwiVmFsaWRhdGlvbkVycm9yIiwiVHlwZU1pc21hdGNoRXJyb3IiLCJTZWN1cml0eUVycm9yIiwiTmV0d29ya0Vycm9yIiwiQWJvcnRFcnJvciIsIlVSTE1pc21hdGNoRXJyb3IiLCJRdW90YUV4Y2VlZGVkRXJyb3IiLCJUaW1lb3V0RXJyb3IiLCJJbnZhbGlkTm9kZVR5cGVFcnJvciIsIkRhdGFDbG9uZUVycm9yIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJjbGFzc0xpc3QiLCJkb2N1bWVudENyZWF0ZUVsZW1lbnQiLCJET01Ub2tlbkxpc3RQcm90b3R5cGUiLCJmaXJlZm94IiwibWF0Y2giLCJJU19ERU5PIiwiSVNfTk9ERSIsIndpbmRvdyIsIkRlbm8iLCJ2ZXJzaW9uIiwiVUEiLCJ0ZXN0IiwidXNlckFnZW50IiwiUGViYmxlIiwicHJvY2VzcyIsInZlcnNpb25zIiwidjgiLCJzcGxpdCIsIndlYmtpdCIsIkNPTlNUUlVDVE9SIiwiJEVycm9yIiwiRXJyb3IiLCJURVNUIiwic3RhY2siLCJWOF9PUl9DSEFLUkFfU1RBQ0tfRU5UUlkiLCJJU19WOF9PUl9DSEFLUkFfU1RBQ0siLCJkcm9wRW50cmllcyIsInByZXBhcmVTdGFja1RyYWNlIiwibm9ybWFsaXplU3RyaW5nQXJndW1lbnQiLCJuYXRpdmVFcnJvclRvU3RyaW5nIiwiSU5DT1JSRUNUX1RPX1NUUklORyIsIm1lc3NhZ2UiLCJjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzIiwidGFyZ2V0UHJvcGVydHkiLCJzb3VyY2VQcm9wZXJ0eSIsIlRBUkdFVCIsIkdMT0JBTCIsIlNUQVRJQyIsInN0YXQiLCJkb250Q2FsbEdldFNldCIsInNoYW0iLCJyZWdleHBFeGVjIiwiUmVnRXhwUHJvdG90eXBlIiwiUmVnRXhwIiwiU0hBTSIsIlNZTUJPTCIsIkRFTEVHQVRFU19UT19TWU1CT0wiLCJERUxFR0FURVNfVE9fRVhFQyIsImV4ZWNDYWxsZWQiLCJyZSIsImZsYWdzIiwidW5jdXJyaWVkTmF0aXZlUmVnRXhwTWV0aG9kIiwibWV0aG9kcyIsIm5hdGl2ZU1ldGhvZCIsInN0ciIsImFyZzIiLCJmb3JjZVN0cmluZ01ldGhvZCIsIiRleGVjIiwiZmxhdHRlbkludG9BcnJheSIsIm9yaWdpbmFsIiwic291cmNlTGVuIiwiZGVwdGgiLCJtYXBwZXIiLCJ0YXJnZXRJbmRleCIsInNvdXJjZUluZGV4IiwicHJldmVudEV4dGVuc2lvbnMiLCJOQVRJVkVfQklORCIsIkZ1bmN0aW9uUHJvdG90eXBlIiwiUmVmbGVjdCIsImhhc093blByb3BlcnR5IiwiJEZ1bmN0aW9uIiwiY29uY2F0Iiwiam9pbiIsImZhY3RvcmllcyIsImNvbnN0cnVjdCIsImFyZ3NMZW5ndGgiLCJhcmdzIiwicGFydEFyZ3MiLCJnZXREZXNjcmlwdG9yIiwidXNpbmdJdGVyYXRvciIsImFGdW5jdGlvbiIsIm5hbWVzcGFjZSIsIm9iaiIsIkl0ZXJhdG9ycyIsIlYiLCJmdW5jIiwiU2V0IiwiU1VCU1RJVFVUSU9OX1NZTUJPTFMiLCJTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCIsIm1hdGNoZWQiLCJwb3NpdGlvbiIsImNhcHR1cmVzIiwibmFtZWRDYXB0dXJlcyIsInJlcGxhY2VtZW50IiwidGFpbFBvcyIsInN5bWJvbHMiLCJjaCIsImNhcHR1cmUiLCJjaGVjayIsImdsb2JhbFRoaXMiLCJhIiwiYiIsImNvbnNvbGUiLCJwb3ciLCJsb2ciLCJMTjIiLCJtYW50aXNzYUxlbmd0aCIsImV4cG9uZW50IiwibWFudGlzc2EiLCJleHBvbmVudExlbmd0aCIsImVNYXgiLCJlQmlhcyIsInJ0IiwiSW5maW5pdHkiLCJuQml0cyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiV3JhcHBlciIsIk5ld1RhcmdldCIsIk5ld1RhcmdldFByb3RvdHlwZSIsImZ1bmN0aW9uVG9TdHJpbmciLCJpbnNwZWN0U291cmNlIiwiY2F1c2UiLCJoaWRkZW5LZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSIsImdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbE1vZHVsZSIsIkZSRUVaSU5HIiwiUkVRVUlSRUQiLCJNRVRBREFUQSIsInNldE1ldGFkYXRhIiwib2JqZWN0SUQiLCJ3ZWFrRGF0YSIsIm1ldGEiLCJvbkZyZWV6ZSIsIk5BVElWRV9XRUFLX01BUCIsInNoYXJlZEtleSIsIk9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEIiwid21nZXQiLCJ3bWhhcyIsIndtc2V0IiwibWV0YWRhdGEiLCJmYWNhZGUiLCJTVEFURSIsIiRkb2N1bWVudEFsbCIsIm5vb3AiLCJlbXB0eSIsImNvbnN0cnVjdG9yUmVnRXhwIiwiaXNDb25zdHJ1Y3Rvck1vZGVybiIsImlzQ29uc3RydWN0b3JMZWdhY3kiLCJmZWF0dXJlIiwiZGV0ZWN0aW9uIiwibm9ybWFsaXplIiwiUE9MWUZJTEwiLCJOQVRJVkUiLCJ0b0xvd2VyQ2FzZSIsIk51bWJlciIsImlzSW50ZWdlciIsImlzUmVnRXhwIiwiVVNFX1NZTUJPTF9BU19VSUQiLCIkU3ltYm9sIiwiUmVzdWx0Iiwic3RvcHBlZCIsIlJlc3VsdFByb3RvdHlwZSIsInVuYm91bmRGdW5jdGlvbiIsIml0ZXJGbiIsIklTX1JFQ09SRCIsIklOVEVSUlVQVEVEIiwic3RvcCIsImNvbmRpdGlvbiIsImNhbGxGbiIsImlubmVyUmVzdWx0IiwiaW5uZXJFcnJvciIsIkl0ZXJhdG9yUHJvdG90eXBlIiwicmV0dXJuVGhpcyIsIkl0ZXJhdG9yQ29uc3RydWN0b3IiLCJFTlVNRVJBQkxFX05FWFQiLCJJVEVSQVRPUl9IRUxQRVIiLCJXUkFQX0ZPUl9WQUxJRF9JVEVSQVRPUiIsImNyZWF0ZUl0ZXJhdG9yUHJveHlQcm90b3R5cGUiLCJJVEVSQVRPUl9QUk9YWSIsIkl0ZXJhdG9yUHJveHlQcm90b3R5cGUiLCJJdGVyYXRvckhlbHBlclByb3RvdHlwZSIsIldyYXBGb3JWYWxpZEl0ZXJhdG9yUHJvdG90eXBlIiwiSXRlcmF0b3JQcm94eSIsImNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IiLCJJdGVyYXRvcnNDb3JlIiwiQlVHR1lfU0FGQVJJX0lURVJBVE9SUyIsIktFWVMiLCJWQUxVRVMiLCJJdGVyYWJsZSIsIkRFRkFVTFQiLCJJU19TRVQiLCJDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUiLCJnZXRJdGVyYXRpb25NZXRob2QiLCJLSU5EIiwiZGVmYXVsdEl0ZXJhdG9yIiwiSXRlcmFibGVQcm90b3R5cGUiLCJJTkNPUlJFQ1RfVkFMVUVTX05BTUUiLCJuYXRpdmVJdGVyYXRvciIsImFueU5hdGl2ZUl0ZXJhdG9yIiwiY3JlYXRlSXRlcmF0b3JQcm94eSIsIlByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSIsIkNPTkZJR1VSQUJMRV9MRU5HVEgiLCJURU1QTEFURSIsImFyaXR5IiwiaW5zZXJ0ZWQiLCJ1cGRhdGUiLCJpbnNlcnQiLCJ1cGRhdGVGbiIsImluc2VydEZuIiwiJGV4cG0xIiwiZXhwbTEiLCJleHAiLCJ4IiwiRVBTSUxPTiIsIkVQU0lMT04zMiIsIk1BWDMyIiwiTUlOMzIiLCJmcm91bmQiLCIkYWJzIiwiJHNpZ24iLCJyb3VuZFRpZXNUb0V2ZW4iLCJMT0cxMEUiLCJsb2cxMCIsImxvZzFwIiwic2NhbGUiLCJpbkxvdyIsImluSGlnaCIsIm91dExvdyIsIm91dEhpZ2giLCJueCIsIm5JbkxvdyIsIm5JbkhpZ2giLCJuT3V0TG93Iiwibk91dEhpZ2giLCJjZWlsIiwidHJ1bmMiLCJmbHVzaCIsImhlYWQiLCJub3RpZnkiLCJ0b2dnbGUiLCJub2RlIiwibWFjcm90YXNrIiwiSVNfSU9TIiwiSVNfSU9TX1BFQkJMRSIsIklTX1dFQk9TX1dFQktJVCIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwicXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yIiwicXVldWVNaWNyb3Rhc2siLCJwYXJlbnQiLCJkb21haW4iLCJlbnRlciIsIm5leHRUaWNrIiwiY3JlYXRlVGV4dE5vZGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsIlByb21pc2VDYXBhYmlsaXR5IiwiJCRyZXNvbHZlIiwiJCRyZWplY3QiLCIkZGVmYXVsdCIsImdsb2JhbElzRmluaXRlIiwidHJpbSIsIndoaXRlc3BhY2VzIiwiJHBhcnNlRmxvYXQiLCJwYXJzZUZsb2F0IiwiU3ltYm9sIiwidHJpbW1lZFN0cmluZyIsIiRwYXJzZUludCIsInBhcnNlSW50IiwiaGV4IiwicmFkaXgiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiSU5DT1JSRUNUX1JBTkdFIiwiTlVNRVJJQ19SQU5HRV9JVEVSQVRPUiIsIiRSYW5nZUl0ZXJhdG9yIiwib3B0aW9uIiwiemVybyIsIm9uZSIsImlmSW5jcmVhc2UiLCJpbmNsdXNpdmVFbmQiLCJpbmNsdXNpdmUiLCJoaXRzRW5kIiwiY3VycmVudENvdW50IiwiY3VycmVudFlpZWxkaW5nVmFsdWUiLCJvYmplY3RLZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlIiwicHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUiLCIkYXNzaWduIiwiYXNzaWduIiwiQiIsImFscGhhYmV0IiwiY2hyIiwiVCIsImdldE93blByb3BlcnR5U3ltYm9scyIsImFjdGl2ZVhEb2N1bWVudCIsImRlZmluZVByb3BlcnRpZXNNb2R1bGUiLCJlbnVtQnVnS2V5cyIsImh0bWwiLCJJRV9QUk9UTyIsIkVtcHR5Q29uc3RydWN0b3IiLCJzY3JpcHRUYWciLCJjb250ZW50IiwiTFQiLCJOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYIiwid3JpdGUiLCJjbG9zZSIsInRlbXAiLCJwYXJlbnRXaW5kb3ciLCJOdWxsUHJvdG9PYmplY3QiLCJBY3RpdmVYT2JqZWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwiUHJvcGVydGllcyIsIlY4X1BST1RPVFlQRV9ERUZJTkVfQlVHIiwicHJvcHMiLCJJRThfRE9NX0RFRklORSIsIiRkZWZpbmVQcm9wZXJ0eSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJBdHRyaWJ1dGVzIiwiY3VycmVudCIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwid2luZG93TmFtZXMiLCJnZXRXaW5kb3dOYW1lcyIsImludGVybmFsT2JqZWN0S2V5cyIsIkNPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiIsIkFSUkFZX0JVRkZFUl9OT05fRVhURU5TSUJMRSIsIiRpc0V4dGVuc2libGUiLCJGQUlMU19PTl9QUklNSVRJVkVTIiwiT0JKRUNUX0lURVJBVE9SIiwibW9kZSIsIm5hbWVzIiwiJHByb3BlcnR5SXNFbnVtZXJhYmxlIiwiTkFTSE9STl9CVUciLCJXRUJLSVQiLCJyYW5kb20iLCJfX2RlZmluZVNldHRlcl9fIiwiYVBvc3NpYmxlUHJvdG90eXBlIiwiQ09SUkVDVF9TRVRURVIiLCJfX3Byb3RvX18iLCJUT19FTlRSSUVTIiwiJCRPQlNFUlZBQkxFIiwiTmF0aXZlT2JzZXJ2YWJsZSIsIk9ic2VydmFibGUiLCJOYXRpdmVPYnNlcnZhYmxlUHJvdG90eXBlIiwib2YiLCJzdWJzY3JpYmUiLCJpbnB1dCIsInByZWYiLCJ2YWwiLCJ2YWx1ZU9mIiwiTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yIiwiSVNfQlJPV1NFUiIsIk5hdGl2ZVByb21pc2VQcm90b3R5cGUiLCJTVUJDTEFTU0lORyIsIk5BVElWRV9QUk9NSVNFX1JFSkVDVElPTl9FVkVOVCIsIlByb21pc2VSZWplY3Rpb25FdmVudCIsIkZPUkNFRF9QUk9NSVNFX0NPTlNUUlVDVE9SIiwiUFJPTUlTRV9DT05TVFJVQ1RPUl9TT1VSQ0UiLCJHTE9CQUxfQ09SRV9KU19QUk9NSVNFIiwiRmFrZVByb21pc2UiLCJSRUpFQ1RJT05fRVZFTlQiLCJuZXdQcm9taXNlQ2FwYWJpbGl0eSIsInByb21pc2VDYXBhYmlsaXR5IiwiVGFyZ2V0IiwiU291cmNlIiwiUXVldWUiLCJ0YWlsIiwiZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCIsInRhcmdldEtleSIsInRhcmdldE1ldGFkYXRhIiwia2V5TWV0YWRhdGEiLCJnZXRNYXAiLCJNZXRhZGF0YUtleSIsIm1ldGFkYXRhTWFwIiwiTWV0YWRhdGFWYWx1ZSIsIl8iLCJ0b0tleSIsIlIiLCJyZTEiLCJyZTIiLCJyZWdleHBGbGFncyIsInN0aWNreUhlbHBlcnMiLCJVTlNVUFBPUlRFRF9ET1RfQUxMIiwiVU5TVVBQT1JURURfTkNHIiwibmF0aXZlUmVwbGFjZSIsIm5hdGl2ZUV4ZWMiLCJwYXRjaGVkRXhlYyIsIlVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyIsImxhc3RJbmRleCIsIlVOU1VQUE9SVEVEX1kiLCJCUk9LRU5fQ0FSRVQiLCJOUENHX0lOQ0xVREVEIiwicmVDb3B5IiwiZ3JvdXAiLCJyYXciLCJncm91cHMiLCJzdGlja3kiLCJjaGFyc0FkZGVkIiwic3RyQ29weSIsIm11bHRpbGluZSIsImhhc0luZGljZXMiLCJpZ25vcmVDYXNlIiwiZG90QWxsIiwidW5pY29kZVNldHMiLCJyZWdFeHBGbGFncyIsIiRSZWdFeHAiLCJNSVNTRURfU1RJQ0tZIiwieSIsImlzIiwidmFsaWRhdGVBcmd1bWVudHNMZW5ndGgiLCJNU0lFIiwid3JhcCIsInNjaGVkdWxlciIsInRpbWVvdXQiLCJib3VuZEFyZ3MiLCJzZXRUaW1lb3V0Iiwic2V0SW50ZXJ2YWwiLCJUQUciLCJTSEFSRUQiLCJjb3B5cmlnaHQiLCJsaWNlbnNlIiwiZGVmYXVsdENvbnN0cnVjdG9yIiwiY2hhckNvZGVBdCIsIkNPTlZFUlRfVE9fU1RSSU5HIiwicG9zIiwic2Vjb25kIiwiY29kZUF0IiwiJHJlcGVhdCIsInJlcGVhdCIsIklTX0VORCIsIm1heExlbmd0aCIsImZpbGxTdHJpbmciLCJmaWxsTGVuIiwic3RyaW5nRmlsbGVyIiwiaW50TWF4TGVuZ3RoIiwic3RyaW5nTGVuZ3RoIiwiZmlsbFN0ciIsIm1heEludCIsInJlZ2V4Tm9uQVNDSUkiLCJyZWdleFNlcGFyYXRvcnMiLCJPVkVSRkxPV19FUlJPUiIsImZyb21DaGFyQ29kZSIsImRpZ2l0VG9CYXNpYyIsImRpZ2l0IiwiYWRhcHQiLCJkZWx0YSIsIm51bVBvaW50cyIsImZpcnN0VGltZSIsImJhc2VNaW51c1RNaW4iLCJiYXNlIiwiZW5jb2RlIiwib3V0cHV0IiwiY291bnRlciIsImV4dHJhIiwidWNzMmRlY29kZSIsImN1cnJlbnRWYWx1ZSIsImlucHV0TGVuZ3RoIiwiYmlhcyIsImJhc2ljTGVuZ3RoIiwiaGFuZGxlZENQQ291bnQiLCJoYW5kbGVkQ1BDb3VudFBsdXNPbmUiLCJxIiwidCIsInFNaW51c1QiLCJiYXNlTWludXNUIiwibGFiZWwiLCJlbmNvZGVkIiwibGFiZWxzIiwiJHRyaW1FbmQiLCJmb3JjZWRTdHJpbmdUcmltTWV0aG9kIiwidHJpbUVuZCIsIiR0cmltU3RhcnQiLCJ0cmltU3RhcnQiLCJ3aGl0ZXNwYWNlIiwibHRyaW0iLCJydHJpbSIsIlN5bWJvbFByb3RvdHlwZSIsIlRPX1BSSU1JVElWRSIsIk5BVElWRV9TWU1CT0wiLCJrZXlGb3IiLCJsb2NhdGlvbiIsImRlZmVyIiwiY2hhbm5lbCIsInBvcnQiLCJzZXRJbW1lZGlhdGUiLCJjbGVhckltbWVkaWF0ZSIsIkRpc3BhdGNoIiwiTWVzc2FnZUNoYW5uZWwiLCJxdWV1ZSIsInJ1biIsInJ1bm5lciIsImxpc3RlbmVyIiwiZXZlbnQiLCJwb3N0IiwicG9zdE1lc3NhZ2UiLCJwcm90b2NvbCIsImhvc3QiLCJub3ciLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImltcG9ydFNjcmlwdHMiLCJyZW1vdmVDaGlsZCIsImludGVnZXIiLCJ0b1ByaW1pdGl2ZSIsInByaW0iLCJCaWdJbnQiLCJ0b1Bvc2l0aXZlSW50ZWdlciIsIkJZVEVTIiwiaXNTeW1ib2wiLCJleG90aWNUb1ByaW0iLCJUWVBFRF9BUlJBWVNfQ09OU1RSVUNUT1JTX1JFUVVJUkVTX1dSQVBQRVJTIiwiQXJyYXlCdWZmZXJWaWV3Q29yZSIsIkFycmF5QnVmZmVyTW9kdWxlIiwiaXNJbnRlZ3JhbE51bWJlciIsInRvT2Zmc2V0IiwidHlwZWRBcnJheUZyb20iLCJuYXRpdmVEZWZpbmVQcm9wZXJ0eSIsIm5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInJvdW5kIiwiQllURVNfUEVSX0VMRU1FTlQiLCJXUk9OR19MRU5HVEgiLCJmcm9tTGlzdCIsImlzQXJyYXlCdWZmZXIiLCJpc1R5cGVkQXJyYXlJbmRleCIsIndyYXBwZWRHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ3cmFwcGVkRGVmaW5lUHJvcGVydHkiLCJDTEFNUEVEIiwiR0VUVEVSIiwiU0VUVEVSIiwiTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yIiwiVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlIiwiYWRkRWxlbWVudCIsInR5cGVkQXJyYXlPZmZzZXQiLCIkbGVuZ3RoIiwiJGxlbiIsInR5cGVkQXJyYXlTcGVjaWVzQ29uc3RydWN0b3IiLCJpc0JpZ0ludEFycmF5IiwidG9CaWdJbnQiLCJ0aGlzSXNCaWdJbnRBcnJheSIsInNwZWNpZXNDb25zdHJ1Y3RvciIsInBvc3RmaXgiLCJ1cmwiLCJVUkwiLCJzZWFyY2hQYXJhbXMiLCJwYXRobmFtZSIsInRvSlNPTiIsInNvcnQiLCJocmVmIiwiVVJMU2VhcmNoUGFyYW1zIiwidXNlcm5hbWUiLCJoYXNoIiwicGFzc2VkIiwicmVxdWlyZWQiLCJwYXRoIiwid3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSIsIldlbGxLbm93blN5bWJvbHNTdG9yZSIsInN5bWJvbEZvciIsImNyZWF0ZVdlbGxLbm93blN5bWJvbCIsIndpdGhvdXRTZXR0ZXIiLCJkZXNjcmlwdGlvbiIsInByb3h5QWNjZXNzb3IiLCJpbnN0YWxsRXJyb3JDYXVzZSIsImNsZWFyRXJyb3JTdGFjayIsIkVSUk9SX1NUQUNLX0lOU1RBTExBQkxFIiwiRlVMTF9OQU1FIiwiSVNfQUdHUkVHQVRFX0VSUk9SIiwiU1RBQ0tfVFJBQ0VfTElNSVQiLCJPUFRJT05TX1BPU0lUSU9OIiwiRVJST1JfTkFNRSIsIk9yaWdpbmFsRXJyb3IiLCJPcmlnaW5hbEVycm9yUHJvdG90eXBlIiwiQmFzZUVycm9yIiwiV3JhcHBlZEVycm9yIiwid3JhcEVycm9yQ29uc3RydWN0b3JXaXRoQ2F1c2UiLCJBR0dSRUdBVEVfRVJST1IiLCIkQWdncmVnYXRlRXJyb3IiLCJlcnJvcnMiLCJBZ2dyZWdhdGVFcnJvciIsImluaXQiLCJpc0luc3RhbmNlIiwiQWdncmVnYXRlRXJyb3JQcm90b3R5cGUiLCJlcnJvcnNBcnJheSIsImFycmF5QnVmZmVyTW9kdWxlIiwibmF0aXZlQXJyYXlCdWZmZXJTbGljZSIsInZpZXdTb3VyY2UiLCJ2aWV3VGFyZ2V0IiwiYWRkVG9VbnNjb3BhYmxlcyIsImF0IiwiYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCIsIklTX0NPTkNBVF9TUFJFQURBQkxFIiwiSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCIsIlNQRUNJRVNfU1VQUE9SVCIsImlzQ29uY2F0U3ByZWFkYWJsZSIsInNwcmVhZGFibGUiLCJhcmciLCJFIiwiJGV2ZXJ5IiwiJGZpbHRlciIsIiRmaW5kSW5kZXgiLCJGSU5EX0lOREVYIiwiU0tJUFNfSE9MRVMiLCIkZmluZExhc3RJbmRleCIsIiRmaW5kTGFzdCIsIiRmaW5kIiwiRklORCIsImZsYXRNYXAiLCJmbGF0IiwiZGVwdGhBcmciLCIkaW5jbHVkZXMiLCIkaW5kZXhPZiIsIm5hdGl2ZUluZGV4T2YiLCJBUlJBWV9JVEVSQVRPUiIsIkFyZ3VtZW50cyIsIm5hdGl2ZUpvaW4iLCJFUzNfU1RSSU5HUyIsInNlcGFyYXRvciIsIiRtYXAiLCJzZXRBcnJheUxlbmd0aCIsIklOQ09SUkVDVF9UT19MRU5HVEgiLCJTSUxFTlRfT05fTk9OX1dSSVRBQkxFX0xFTkdUSCIsImFyZ0NvdW50IiwiJHJlZHVjZVJpZ2h0IiwiQ0hST01FX1ZFUlNJT04iLCJyZWR1Y2VSaWdodCIsIiRyZWR1Y2UiLCJyZWR1Y2UiLCJuYXRpdmVSZXZlcnNlIiwibmF0aXZlU2xpY2UiLCJIQVNfU1BFQ0lFU19TVVBQT1JUIiwiJHNvbWUiLCJpbnRlcm5hbFNvcnQiLCJGRiIsIklFX09SX0VER0UiLCJWOCIsIm5hdGl2ZVNvcnQiLCJGQUlMU19PTl9VTkRFRklORUQiLCJGQUlMU19PTl9OVUxMIiwiU1RBQkxFX1NPUlQiLCJjb2RlIiwidiIsIml0ZW1zTGVuZ3RoIiwiaXRlbXMiLCJhcnJheUxlbmd0aCIsImdldFNvcnRDb21wYXJlIiwiZGVsZXRlQ291bnQiLCJpbnNlcnRDb3VudCIsImFjdHVhbERlbGV0ZUNvdW50IiwiYWN0dWFsU3RhcnQiLCJJTkNPUlJFQ1RfUkVTVUxUIiwidW5zaGlmdCIsImdldFllYXIiLCJnZXRGdWxsWWVhciIsIiREYXRlIiwic2V0RnVsbFllYXIiLCJzZXRZZWFyIiwieWkiLCJ0b0dNVFN0cmluZyIsInRvVVRDU3RyaW5nIiwicHYiLCJkYXRlVG9QcmltaXRpdmUiLCJJTlZBTElEX0RBVEUiLCJuYXRpdmVEYXRlVG9TdHJpbmciLCJXZWJBc3NlbWJseSIsImV4cG9ydEdsb2JhbEVycm9yQ2F1c2VXcmFwcGVyIiwiZXhwb3J0V2ViQXNzZW1ibHlFcnJvckNhdXNlV3JhcHBlciIsIldFQl9BU1NFTUJMWSIsImVycm9yVG9TdHJpbmciLCJFcnJvclByb3RvdHlwZSIsIm51bWJlclRvU3RyaW5nIiwidG9VcHBlckNhc2UiLCJlc2NhcGUiLCJIQVNfSU5TVEFOQ0UiLCJGVU5DVElPTl9OQU1FX0VYSVNUUyIsIm5hbWVSRSIsInJlZ0V4cEV4ZWMiLCIkc3RyaW5naWZ5IiwidGVzdGVyIiwibG93IiwiaGkiLCJXUk9OR19TWU1CT0xTX0NPTlZFUlNJT04iLCJJTExfRk9STUVEX1VOSUNPREUiLCJzdHJpbmdpZnlXaXRoU3ltYm9sc0ZpeCIsInJlcGxhY2VyIiwiJHJlcGxhY2VyIiwiZml4SWxsRm9ybWVkIiwic3RyaW5naWZ5Iiwic3BhY2UiLCJKU09OIiwiJGFjb3NoIiwiYWNvc2giLCJzcXJ0IiwiTUFYX1ZBTFVFIiwiJGFzaW5oIiwiYXNpbmgiLCIkYXRhbmgiLCJhdGFuaCIsImNicnQiLCJMT0cyRSIsImNsejMyIiwiJGNvc2giLCJjb3NoIiwiJGh5cG90IiwiaHlwb3QiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJkaXYiLCJzdW0iLCJhTGVuIiwibGFyZyIsIiRpbXVsIiwiaW11bCIsIlVJTlQxNiIsInhuIiwieW4iLCJ4bCIsInlsIiwibG9nMiIsInNpbmgiLCJ0YW5oIiwidGhpc051bWJlclZhbHVlIiwiTlVNQkVSIiwiTmF0aXZlTnVtYmVyIiwiTnVtYmVyUHJvdG90eXBlIiwidG9OdW1lcmljIiwicHJpbVZhbHVlIiwidG9OdW1iZXIiLCJ0aGlyZCIsIm1heENvZGUiLCJkaWdpdHMiLCJOdW1iZXJXcmFwcGVyIiwiaXNOYU4iLCJpc1NhZmVJbnRlZ2VyIiwiTUFYX1NBRkVfSU5URUdFUiIsIk1JTl9TQUZFX0lOVEVHRVIiLCJuYXRpdmVUb0V4cG9uZW50aWFsIiwidG9FeHBvbmVudGlhbCIsIlJPVU5EU19QUk9QRVJMWSIsIlRIUk9XU19PTl9JTkZJTklUWV9GUkFDVElPTiIsIlBST1BFUl9OT05fRklOSVRFX1RISVNfQ0hFQ0siLCJmcmFjdGlvbkRpZ2l0cyIsImUiLCJkIiwibCIsInciLCJuYXRpdmVUb0ZpeGVkIiwidG9GaXhlZCIsImFjYyIsIm11bHRpcGx5IiwiYzIiLCJkaXZpZGUiLCJkYXRhVG9TdHJpbmciLCJ6IiwiZnJhY3REaWdpdHMiLCJ4MiIsIm5hdGl2ZVRvUHJlY2lzaW9uIiwidG9QcmVjaXNpb24iLCJwcmVjaXNpb24iLCJfX2RlZmluZUdldHRlcl9fIiwiJGVudHJpZXMiLCIkZnJlZXplIiwiZnJlZXplIiwiZnJvbUVudHJpZXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIm5hdGl2ZUdldFByb3RvdHlwZU9mIiwiJGlzRnJvemVuIiwiaXNGcm96ZW4iLCIkaXNTZWFsZWQiLCJpc1NlYWxlZCIsIm5hdGl2ZUtleXMiLCJfX2xvb2t1cEdldHRlcl9fIiwiZGVzYyIsIl9fbG9va3VwU2V0dGVyX18iLCIkcHJldmVudEV4dGVuc2lvbnMiLCJkZWZpbmVCdWlsdEluQWNjZXNzb3IiLCJQUk9UTyIsIiRzZWFsIiwic2VhbCIsIiR2YWx1ZXMiLCJuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSIsImFsbFNldHRsZWQiLCJjYXBhYmlsaXR5IiwicHJvbWlzZVJlc29sdmUiLCJyZW1haW5pbmciLCJhbHJlYWR5Q2FsbGVkIiwic3RhdHVzIiwicmVhc29uIiwiJHByb21pc2VSZXNvbHZlIiwiUFJPTUlTRV9BTllfRVJST1IiLCJhbnkiLCJhbHJlYWR5UmVzb2x2ZWQiLCJhbHJlYWR5UmVqZWN0ZWQiLCJyZWFsIiwib25SZWplY3RlZCIsIkludGVybmFsIiwiT3duUHJvbWlzZUNhcGFiaWxpdHkiLCJuYXRpdmVUaGVuIiwibWljcm90YXNrIiwiaG9zdFJlcG9ydEVycm9ycyIsIlByb21pc2VDb25zdHJ1Y3RvckRldGVjdGlvbiIsIlBST01JU0UiLCJOQVRJVkVfUFJPTUlTRV9TVUJDTEFTU0lORyIsImdldEludGVybmFsUHJvbWlzZVN0YXRlIiwiUHJvbWlzZUNvbnN0cnVjdG9yIiwiUHJvbWlzZVByb3RvdHlwZSIsIm5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSIsIkRJU1BBVENIX0VWRU5UIiwiY3JlYXRlRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiVU5IQU5ETEVEX1JFSkVDVElPTiIsImlzVGhlbmFibGUiLCJjYWxsUmVhY3Rpb24iLCJyZWFjdGlvbiIsImV4aXRlZCIsIm9rIiwiZmFpbCIsInJlamVjdGlvbiIsIm9uSGFuZGxlVW5oYW5kbGVkIiwiaXNSZWplY3QiLCJub3RpZmllZCIsInJlYWN0aW9ucyIsIm9uVW5oYW5kbGVkIiwiaW5pdEV2ZW50IiwiaXNVbmhhbmRsZWQiLCJlbWl0IiwidW53cmFwIiwiaW50ZXJuYWxSZWplY3QiLCJpbnRlcm5hbFJlc29sdmUiLCJleGVjdXRvciIsIm9uRnVsZmlsbGVkIiwiUHJvbWlzZVdyYXBwZXIiLCJvbkZpbmFsbHkiLCJpc0Z1bmN0aW9uIiwicmFjZSIsInIiLCJQcm9taXNlQ29uc3RydWN0b3JXcmFwcGVyIiwiQ0hFQ0tfV1JBUFBFUiIsImZ1bmN0aW9uQXBwbHkiLCJ0aGlzQXJndW1lbnQiLCJhcmd1bWVudHNMaXN0IiwibmF0aXZlQ29uc3RydWN0IiwiTkVXX1RBUkdFVF9CVUciLCJBUkdTX0JVRyIsIm5ld1RhcmdldCIsIiRhcmdzIiwiYXR0cmlidXRlcyIsImRlbGV0ZVByb3BlcnR5Iiwib2JqZWN0R2V0UHJvdG90eXBlT2YiLCJpc0RhdGFEZXNjcmlwdG9yIiwicmVjZWl2ZXIiLCJvYmplY3RQcmV2ZW50RXh0ZW5zaW9ucyIsIm9iamVjdFNldFByb3RvdHlwZU9mIiwiZXhpc3RpbmdEZXNjcmlwdG9yIiwib3duRGVzY3JpcHRvciIsImdldFJlZ0V4cEZsYWdzIiwiTmF0aXZlUmVnRXhwIiwic3RyaW5nSW5kZXhPZiIsIklTX05DRyIsIkNPUlJFQ1RfTkVXIiwiUmVnRXhwV3JhcHBlciIsInBhdHRlcm4iLCJyYXdGbGFncyIsImhhbmRsZWQiLCJ0aGlzSXNSZWdFeHAiLCJwYXR0ZXJuSXNSZWdFeHAiLCJmbGFnc0FyZVVuZGVmaW5lZCIsInJhd1BhdHRlcm4iLCJuYW1lZCIsImJyYWNrZXRzIiwibmNnIiwiZ3JvdXBpZCIsImdyb3VwbmFtZSIsImhhbmRsZU5DRyIsImhhbmRsZURvdEFsbCIsIklORElDRVNfU1VQUE9SVCIsImNhbGxzIiwiZXhwZWN0ZWQiLCJwYWlycyIsIm5hdGl2ZVRlc3QiLCIkdG9TdHJpbmciLCJUT19TVFJJTkciLCJuYXRpdmVUb1N0cmluZyIsIk5PVF9HRU5FUklDIiwiSU5DT1JSRUNUX05BTUUiLCJjcmVhdGVIVE1MIiwiZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCIsImFuY2hvciIsImJpZyIsImJsaW5rIiwiYm9sZCIsImNvZGVQb2ludEF0Iiwibm90QVJlZ0V4cCIsImNvcnJlY3RJc1JlZ0V4cExvZ2ljIiwibmF0aXZlRW5kc1dpdGgiLCJlbmRzV2l0aCIsIkNPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDIiwic2VhcmNoU3RyaW5nIiwiZW5kUG9zaXRpb24iLCJzZWFyY2giLCJmaXhlZCIsImZvbnRjb2xvciIsImNvbG9yIiwiZm9udHNpemUiLCIkZnJvbUNvZGVQb2ludCIsImZyb21Db2RlUG9pbnQiLCJlbGVtZW50cyIsIml0YWxpY3MiLCJTVFJJTkdfSVRFUkFUT1IiLCJwb2ludCIsImxpbmsiLCJhZHZhbmNlU3RyaW5nSW5kZXgiLCJNQVRDSF9BTEwiLCJSRUdFWFBfU1RSSU5HX0lURVJBVE9SIiwiUkVHRVhQX1NUUklORyIsIm5hdGl2ZU1hdGNoQWxsIiwibWF0Y2hBbGwiLCJXT1JLU19XSVRIX05PTl9HTE9CQUxfUkVHRVgiLCIkUmVnRXhwU3RyaW5nSXRlcmF0b3IiLCIkZ2xvYmFsIiwiZnVsbFVuaWNvZGUiLCIkbWF0Y2hBbGwiLCJtYXRjaGVyIiwicngiLCJmaXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYyIsIm5hdGl2ZU1hdGNoIiwibWF5YmVDYWxsTmF0aXZlIiwicmVzIiwibWF0Y2hTdHIiLCIkcGFkRW5kIiwicGFkRW5kIiwiJHBhZFN0YXJ0IiwidGVtcGxhdGUiLCJyYXdUZW1wbGF0ZSIsImxpdGVyYWxTZWdtZW50cyIsImdldFN1YnN0aXR1dGlvbiIsIlJFUExBQ0UiLCJzZWFyY2hWYWx1ZSIsInJlcGxhY2VBbGwiLCJyZXBsYWNlVmFsdWUiLCJJU19SRUdfRVhQIiwiZnVuY3Rpb25hbFJlcGxhY2UiLCJzZWFyY2hMZW5ndGgiLCJhZHZhbmNlQnkiLCJlbmRPZkxhc3RNYXRjaCIsIlJFUExBQ0VfS0VFUFNfJDAiLCJSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSIsIlVOU0FGRV9TVUJTVElUVVRFIiwicmVzdWx0cyIsImFjY3VtdWxhdGVkUmVzdWx0IiwibmV4dFNvdXJjZVBvc2l0aW9uIiwicmVwbGFjZXJBcmdzIiwic2FtZVZhbHVlIiwiU0VBUkNIIiwibmF0aXZlU2VhcmNoIiwic2VhcmNoZXIiLCJwcmV2aW91c0xhc3RJbmRleCIsInNtYWxsIiwiY2FsbFJlZ0V4cEV4ZWMiLCJNQVhfVUlOVDMyIiwiJHB1c2giLCJTUExJVCIsIm5hdGl2ZVNwbGl0IiwiaW50ZXJuYWxTcGxpdCIsImxpbWl0IiwibGltIiwibGFzdExlbmd0aCIsImxhc3RMYXN0SW5kZXgiLCJzZXBhcmF0b3JDb3B5Iiwic3BsaXR0ZXIiLCJ1bmljb2RlTWF0Y2hpbmciLCJwIiwib3JpZ2luYWxFeGVjIiwibmF0aXZlU3RhcnRzV2l0aCIsInN0YXJ0c1dpdGgiLCJzdHJpa2UiLCJzdWIiLCJzdWJzdHIiLCJpbnRMZW5ndGgiLCJpbnRFbmQiLCJpbnRTdGFydCIsInN1cCIsInRyaW1MZWZ0IiwidHJpbVJpZ2h0IiwiJHRyaW0iLCJkZWZpbmVXZWxsS25vd25TeW1ib2wiLCJuYXRpdmVPYmplY3RDcmVhdGUiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwiLCJkZWZpbmVTeW1ib2xUb1ByaW1pdGl2ZSIsIkhJRERFTiIsIlFPYmplY3QiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzIiwibmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUiLCJBbGxTeW1ib2xzIiwiT2JqZWN0UHJvdG90eXBlU3ltYm9scyIsIlVTRV9TRVRURVIiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjcmlwdG9yIiwiT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwicHJvcGVydGllcyIsIklTX09CSkVDVF9QUk9UT1RZUEUiLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCJOYXRpdmVTeW1ib2wiLCJFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmUiLCJTeW1ib2xXcmFwcGVyIiwidGhpc1N5bWJvbFZhbHVlIiwic3ltYm9sRGVzY3JpcHRpdmVTdHJpbmciLCJOQVRJVkVfU1lNQk9MX1JFR0lTVFJZIiwiU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSIsIlN5bWJvbFRvU3RyaW5nUmVnaXN0cnkiLCJzeW0iLCJ1JEFycmF5Q29weVdpdGhpbiIsIiRmaWxsIiwiYWN0dWFsVmFsdWUiLCJmcm9tU3BlY2llc0FuZExpc3QiLCJwcmVkaWNhdGUiLCJjcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IiLCJBcnJheUl0ZXJhdG9ycyIsImFycmF5VmFsdWVzIiwiYXJyYXlLZXlzIiwiYXJyYXlFbnRyaWVzIiwiR0VORVJJQyIsIklURVJBVE9SX0lTX1ZBTFVFUyIsInR5cGVkQXJyYXlWYWx1ZXMiLCIkam9pbiIsIiRzZXQiLCJXT1JLU19XSVRIX09CSkVDVFNfQU5EX0dFRVJJQ19PTl9UWVBFRF9BUlJBWVMiLCJUT19PQkpFQ1RfQlVHIiwiQUNDRVBUX0lOQ09SUkVDVF9BUkdVTUVOVFMiLCJtb2QiLCJiZWdpbiIsImJlZ2luSW5kZXgiLCIkdG9Mb2NhbGVTdHJpbmciLCJ0b0xvY2FsZVN0cmluZyIsIlRPX0xPQ0FMRV9TVFJJTkdfQlVHIiwiVWludDhBcnJheVByb3RvdHlwZSIsImFycmF5VG9TdHJpbmciLCJJU19OT1RfQVJSQVlfTUVUSE9EIiwiaGV4MiIsImhleDQiLCJ1bmVzY2FwZSIsInBhcnQiLCJJbnRlcm5hbFdlYWtNYXAiLCJjb2xsZWN0aW9uV2VhayIsIklTX0lFMTEiLCIkV2Vha01hcCIsIldlYWtNYXBQcm90b3R5cGUiLCJuYXRpdmVEZWxldGUiLCJuYXRpdmVIYXMiLCJuYXRpdmVHZXQiLCJuYXRpdmVTZXQiLCIkZmlsdGVyUmVqZWN0IiwiZmlsdGVyT3V0IiwiZnJvbUFzeW5jIiwiJGdyb3VwVG9NYXAiLCJncm91cEJ5VG9NYXAiLCIkZ3JvdXAiLCJncm91cEJ5IiwiZ3JvdXBUb01hcCIsImlzRnJvemVuU3RyaW5nQXJyYXkiLCJhbGxvd1VuZGVmaW5lZCIsImlzVGVtcGxhdGVPYmplY3QiLCJhcnJheVRvUmV2ZXJzZWQiLCJ0b1JldmVyc2VkIiwidG9Tb3J0ZWQiLCJjb21wYXJlRm4iLCJ0b1NwbGljZWQiLCJuZXdMZW4iLCJ1bmlxdWVCeSIsImFycmF5V2l0aCIsImFzSW5kZXhlZFBhaXJzIiwiQXN5bmNJdGVyYXRvckNvbnN0cnVjdG9yIiwibm90QU5hTiIsImRvbmVBbmRSZWplY3QiLCJlcnIiLCJkcm9wIiwiZmlsdGVyZXIiLCJzZWxlY3RlZCIsIm91dGVyTG9vcCIsIm1hcHBlZCIsImlubmVyTmV4dCIsImlubmVyTG9vcCIsIldyYXBBc3luY0l0ZXJhdG9yIiwiaW5kZXhlZCIsInJlZHVjZXIiLCJub0luaXRpYWwiLCJhY2N1bXVsYXRvciIsInJlc3VsdERvbmUiLCJ0YWtlIiwiJHRvQXJyYXkiLCJOdW1lcmljUmFuZ2VJdGVyYXRvciIsInJhbmdlIiwiZ2V0Q29tcG9zaXRlS2V5Tm9kZSIsImNvbXBvc2l0ZUtleSIsImNvbXBvc2l0ZVN5bWJvbCIsIiRpc0NhbGxhYmxlIiwiY2xhc3NSZWdFeHAiLCJpc0NsYXNzQ29uc3RydWN0b3IiLCJ1blRoaXMiLCJOYXRpdmVJdGVyYXRvciIsIkl0ZXJhdG9yIiwidG9Bc3luYyIsImRlbGV0ZUFsbCIsImVtcGxhY2UiLCJnZXRNYXBJdGVyYXRvciIsIm5ld01hcCIsImZpbmRLZXkiLCJrZXlEZXJpdmF0aXZlIiwiZGVyaXZlZEtleSIsInNhbWVWYWx1ZVplcm8iLCJrZXlCeSIsImtleU9mIiwibWFwS2V5cyIsIm1hcFZhbHVlcyIsInVwZGF0ZU9ySW5zZXJ0IiwiY2FsbGJhY2siLCJpc1ByZXNlbnRJbk1hcCIsInVwc2VydCIsImNsYW1wIiwibG93ZXIiLCJ1cHBlciIsIkRFR19QRVJfUkFEIiwiUEkiLCJSQURfUEVSX0RFRyIsImRlZ3JlZXMiLCJyYWRpYW5zIiwiZnNjYWxlIiwiaWFkZGgiLCJ4MCIsIngxIiwieTAiLCJ5MSIsIiR4MCIsIiR5MCIsImltdWxoIiwidSIsIiR1IiwiJHYiLCJ1MCIsInYwIiwidTEiLCJ2MSIsImlzdWJoIiwibnVtYmVySXNGaW5pdGUiLCJTRUVERURfUkFORE9NX0dFTkVSQVRPUiIsIlNFRURFRF9SQU5ET00iLCIkU2VlZGVkUmFuZG9tR2VuZXJhdG9yIiwic2VlZCIsInNlZWRlZFBSTkciLCJzaWduYml0IiwidW11bGgiLCJJTlZBTElEX05VTUJFUl9SRVBSRVNFTlRBVElPTiIsIiRTeW50YXhFcnJvciIsInZhbGlkIiwiZnJvbVN0cmluZyIsIm1hdGhOdW0iLCJPYmplY3RJdGVyYXRvciIsIml0ZXJhdGVFbnRyaWVzIiwiaXRlcmF0ZUtleXMiLCJpdGVyYXRlVmFsdWVzIiwiT0JTRVJWQUJMRV9GT1JDRUQiLCJPQlNFUlZBQkxFIiwiU1VCU0NSSVBUSU9OIiwiU1VCU0NSSVBUSU9OX09CU0VSVkVSIiwiZ2V0T2JzZXJ2YWJsZUludGVybmFsU3RhdGUiLCJnZXRTdWJzY3JpcHRpb25JbnRlcm5hbFN0YXRlIiwiZ2V0U3Vic2NyaXB0aW9uT2JzZXJ2ZXJJbnRlcm5hbFN0YXRlIiwiU3Vic2NyaXB0aW9uU3RhdGUiLCJvYnNlcnZlciIsImNsZWFudXAiLCJzdWJzY3JpcHRpb25PYnNlcnZlciIsInN1YnNjcmlwdGlvbiIsImNsb3NlZCIsImlzQ2xvc2VkIiwiU3Vic2NyaXB0aW9uIiwic3Vic2NyaWJlciIsInN1YnNjcmlwdGlvblN0YXRlIiwiU3Vic2NyaXB0aW9uT2JzZXJ2ZXIiLCJ1bnN1YnNjcmliZSIsIm5leHRNZXRob2QiLCJlcnJvck1ldGhvZCIsImNvbXBsZXRlIiwiY29tcGxldGVNZXRob2QiLCIkT2JzZXJ2YWJsZSIsIk9ic2VydmFibGVQcm90b3R5cGUiLCJvYnNlcnZhYmxlTWV0aG9kIiwib2JzZXJ2YWJsZSIsIlJlZmxlY3RNZXRhZGF0YU1vZHVsZSIsInRvTWV0YWRhdGFLZXkiLCJvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhIiwiZGVmaW5lTWV0YWRhdGEiLCJtZXRhZGF0YUtleSIsIm1ldGFkYXRhVmFsdWUiLCJkZWxldGVNZXRhZGF0YSIsImFycmF5VW5pcXVlQnkiLCJvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyIsIm9yZGluYXJ5TWV0YWRhdGFLZXlzIiwib0tleXMiLCJwS2V5cyIsImdldE1ldGFkYXRhS2V5cyIsIm9yZGluYXJ5SGFzT3duTWV0YWRhdGEiLCJvcmRpbmFyeUdldE93bk1ldGFkYXRhIiwib3JkaW5hcnlHZXRNZXRhZGF0YSIsImdldE1ldGFkYXRhIiwiZ2V0T3duTWV0YWRhdGFLZXlzIiwiZ2V0T3duTWV0YWRhdGEiLCJvcmRpbmFyeUhhc01ldGFkYXRhIiwiaGFzTWV0YWRhdGEiLCJoYXNPd25NZXRhZGF0YSIsImFkZEFsbCIsImRpZmZlcmVuY2UiLCJuZXdTZXQiLCJnZXRTZXRJdGVyYXRvciIsImludGVyc2VjdGlvbiIsImhhc0NoZWNrIiwiaXNEaXNqb2ludEZyb20iLCJpc1N1YnNldE9mIiwib3RoZXJTZXQiLCJpc1N1cGVyc2V0T2YiLCJhcnJheUpvaW4iLCJzZXAiLCJzeW1tZXRyaWNEaWZmZXJlbmNlIiwidW5pb24iLCJTdHJpbmdNdWx0aWJ5dGVNb2R1bGUiLCIkU3RyaW5nSXRlcmF0b3IiLCJjb2RlUG9pbnQiLCJjb2RlUG9pbnRzIiwiY29va2VkIiwiY29va2VkVGVtcGxhdGUiLCJuZXh0VmFsIiwiYXJyYXlGcm9tQXN5bmMiLCJjb252ZXJ0ZWRJdGVtcyIsInNwbGljZWQiLCIkYXJyYXlVbmlxdWVCeSIsIlBST1BFUl9PUkRFUiIsImRpc2FsbG93ZWQiLCJmaW5hbEVxIiwiJGF0b2IiLCJOT19TUEFDRVNfSUdOT1JFIiwiTk9fRU5DT0RJTkdfQ0hFQ0siLCJOT19BUkdfUkVDRUlWSU5HX0NIRUNLIiwiV1JPTkdfQVJJVFkiLCJhdG9iIiwiYnMiLCJiYyIsIiRidG9hIiwiV1JPTkdfQVJHX0NPTlZFUlNJT04iLCJidG9hIiwiYmxvY2siLCJjaGFyQ29kZSIsIkRPTUl0ZXJhYmxlcyIsImhhbmRsZVByb3RvdHlwZSIsIkNvbGxlY3Rpb25Qcm90b3R5cGUiLCJDT0xMRUNUSU9OX05BTUUiLCJBcnJheUl0ZXJhdG9yTWV0aG9kcyIsIkFycmF5VmFsdWVzIiwidHJ5Tm9kZVJlcXVpcmUiLCJET01FeGNlcHRpb25Db25zdGFudHMiLCJET01fRVhDRVBUSU9OIiwiTmF0aXZlRE9NRXhjZXB0aW9uIiwiTmF0aXZlRE9NRXhjZXB0aW9uUHJvdG90eXBlIiwiSEFTX1NUQUNLIiwiY29kZUZvciIsIiRET01FeGNlcHRpb24iLCJET01FeGNlcHRpb25Qcm90b3R5cGUiLCJjcmVhdGVHZXR0ZXJEZXNjcmlwdG9yIiwiSU5DT1JSRUNUX0NPTlNUUlVDVE9SIiwiSU5DT1JSRUNUX0NPREUiLCJNSVNTRURfQ09OU1RBTlRTIiwiRk9SQ0VEX0NPTlNUUlVDVE9SIiwiRE9NRXhjZXB0aW9uIiwiUG9seWZpbGxlZERPTUV4Y2VwdGlvbiIsIlBvbHlmaWxsZWRET01FeGNlcHRpb25Qcm90b3R5cGUiLCJjb25zdGFudCIsImNvbnN0YW50TmFtZSIsIkVSUk9SX0hBU19TVEFDSyIsIkRPTV9FWENFUFRJT05fSEFTX1NUQUNLIiwiQlVHR1lfREVTQ1JJUFRPUiIsInN0cnVjdHVyZWRDbG9uZUltcGxlbWVudGF0aW9uIiwiZ2V0QnVpbHRpbiIsIkV2YWxFcnJvciIsIlJlZmVyZW5jZUVycm9yIiwiVVJJRXJyb3IiLCJQZXJmb3JtYW5jZU1hcmsiLCJDb21waWxlRXJyb3IiLCJMaW5rRXJyb3IiLCJSdW50aW1lRXJyb3IiLCJzZXRBZGQiLCJ0aGlzQm9vbGVhblZhbHVlIiwidGhpc1N0cmluZ1ZhbHVlIiwiUEVSRk9STUFOQ0VfTUFSSyIsIkRBVEFfQ0xPTkVfRVJST1IiLCJUUkFOU0ZFUlJJTkciLCJjaGVja0Jhc2ljU2VtYW50aWMiLCJzZXQxIiwic2V0MiIsImNoZWNrRXJyb3JzQ2xvbmluZyIsIm5hdGl2ZVN0cnVjdHVyZWRDbG9uZSIsInN0cnVjdHVyZWRDbG9uZSIsIkZPUkNFRF9SRVBMQUNFTUVOVCIsInN0cnVjdHVyZWRDbG9uZUZyb21NYXJrIiwiZGV0YWlsIiwibmF0aXZlUmVzdHJpY3RlZFN0cnVjdHVyZWRDbG9uZSIsInRocm93VW5jbG9uZWFibGUiLCJ0aHJvd1VucG9seWZpbGxhYmxlIiwiYWN0aW9uIiwic3RydWN0dXJlZENsb25lSW50ZXJuYWwiLCJjbG9uZWQiLCJkYXRhVHJhbnNmZXIiLCJkZWVwIiwiRE9NUXVhZCIsInAyIiwicDMiLCJwNCIsIkRhdGFUcmFuc2ZlciIsIkNsaXBib2FyZEV2ZW50IiwiY2xpcGJvYXJkRGF0YSIsImZpbGVzIiwiY3JlYXRlRGF0YVRyYW5zZmVyIiwiSW1hZ2VEYXRhIiwid2lkdGgiLCJoZWlnaHQiLCJjb2xvclNwYWNlIiwiZnJvbVBvaW50IiwiZnJvbVJlY3QiLCJmcm9tTWF0cml4IiwiY2xvbmUiLCJGaWxlIiwiUFJPUEVSX1RSQU5TRkVSIiwidHJhbnNmZXIiLCJ0cnlUb1RyYW5zZmVyIiwicmF3VHJhbnNmZXIiLCJ0cmFuc2ZlcnJlZEFycmF5IiwidHJhbnNmZXJyZWQiLCJjYW52YXMiLCJPZmZzY3JlZW5DYW52YXMiLCJnZXRDb250ZXh0IiwidHJhbnNmZXJGcm9tSW1hZ2VCaXRtYXAiLCJ0cmFuc2ZlclRvSW1hZ2VCaXRtYXAiLCJVU0VfTkFUSVZFX1VSTCIsImFycmF5U29ydCIsIlVSTF9TRUFSQ0hfUEFSQU1TIiwiVVJMX1NFQVJDSF9QQVJBTVNfSVRFUkFUT1IiLCJnZXRJbnRlcm5hbFBhcmFtc1N0YXRlIiwic2FmZUdldEJ1aWx0SW4iLCJuYXRpdmVGZXRjaCIsIk5hdGl2ZVJlcXVlc3QiLCJIZWFkZXJzIiwiUmVxdWVzdFByb3RvdHlwZSIsIkhlYWRlcnNQcm90b3R5cGUiLCJkZWNvZGVVUklDb21wb25lbnQiLCJlbmNvZGVVUklDb21wb25lbnQiLCJzaGlmdCIsInBsdXMiLCJzZXF1ZW5jZXMiLCJwZXJjZW50U2VxdWVuY2UiLCJwZXJjZW50RGVjb2RlIiwic2VxdWVuY2UiLCJkZXNlcmlhbGl6ZSIsInJlcGxhY2VtZW50cyIsInNlcmlhbGl6ZSIsIlVSTFNlYXJjaFBhcmFtc0l0ZXJhdG9yIiwicGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zU3RhdGUiLCJwYXJzZU9iamVjdCIsInBhcnNlUXVlcnkiLCJiaW5kVVJMIiwiZW50cnlJdGVyYXRvciIsImVudHJ5TmV4dCIsInF1ZXJ5IiwidXBkYXRlVVJMIiwiVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3IiLCJVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUiLCJhcHBlbmQiLCJnZXRBbGwiLCJmb3VuZCIsImhlYWRlcnNIYXMiLCJoZWFkZXJzU2V0Iiwid3JhcFJlcXVlc3RPcHRpb25zIiwiaGVhZGVycyIsImJvZHkiLCJmZXRjaCIsIlJlcXVlc3RDb25zdHJ1Y3RvciIsIlJlcXVlc3QiLCJnZXRTdGF0ZSIsIkVPRiIsImFycmF5RnJvbSIsInRvQVNDSUkiLCJVUkxTZWFyY2hQYXJhbXNNb2R1bGUiLCJnZXRJbnRlcm5hbFVSTFN0YXRlIiwiZ2V0SW50ZXJuYWxTZWFyY2hQYXJhbXNTdGF0ZSIsIk5hdGl2ZVVSTCIsInBvcCIsIklOVkFMSURfU0NIRU1FIiwiSU5WQUxJRF9IT1NUIiwiSU5WQUxJRF9QT1JUIiwiQUxQSEEiLCJBTFBIQU5VTUVSSUMiLCJESUdJVCIsIkhFWF9TVEFSVCIsIk9DVCIsIkRFQyIsIkhFWCIsIkZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlQiLCJGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5UX0VYQ0xVRElOR19QRVJDRU5UIiwiTEVBRElOR19BTkRfVFJBSUxJTkdfQzBfQ09OVFJPTF9PUl9TUEFDRSIsIlRBQl9BTkRfTkVXX0xJTkUiLCJzZXJpYWxpemVIb3N0IiwiY29tcHJlc3MiLCJpZ25vcmUwIiwiaXB2NiIsIm1heEluZGV4IiwiY3VyclN0YXJ0IiwiY3Vyckxlbmd0aCIsImZpbmRMb25nZXN0WmVyb1NlcXVlbmNlIiwiQzBDb250cm9sUGVyY2VudEVuY29kZVNldCIsImZyYWdtZW50UGVyY2VudEVuY29kZVNldCIsInBhdGhQZXJjZW50RW5jb2RlU2V0IiwidXNlcmluZm9QZXJjZW50RW5jb2RlU2V0IiwicGVyY2VudEVuY29kZSIsInNwZWNpYWxTY2hlbWVzIiwiZnRwIiwiZmlsZSIsImh0dHAiLCJodHRwcyIsIndzIiwid3NzIiwiaXNXaW5kb3dzRHJpdmVMZXR0ZXIiLCJub3JtYWxpemVkIiwic3RhcnRzV2l0aFdpbmRvd3NEcml2ZUxldHRlciIsImlzU2luZ2xlRG90Iiwic2VnbWVudCIsIlNDSEVNRV9TVEFSVCIsIlNDSEVNRSIsIk5PX1NDSEVNRSIsIlNQRUNJQUxfUkVMQVRJVkVfT1JfQVVUSE9SSVRZIiwiUEFUSF9PUl9BVVRIT1JJVFkiLCJSRUxBVElWRSIsIlJFTEFUSVZFX1NMQVNIIiwiU1BFQ0lBTF9BVVRIT1JJVFlfU0xBU0hFUyIsIlNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTIiwiQVVUSE9SSVRZIiwiSE9TVCIsIkhPU1ROQU1FIiwiUE9SVCIsIkZJTEUiLCJGSUxFX1NMQVNIIiwiRklMRV9IT1NUIiwiUEFUSF9TVEFSVCIsIlBBVEgiLCJDQU5OT1RfQkVfQV9CQVNFX1VSTF9QQVRIIiwiUVVFUlkiLCJGUkFHTUVOVCIsIlVSTFN0YXRlIiwiaXNCYXNlIiwiYmFzZVN0YXRlIiwiZmFpbHVyZSIsInVybFN0cmluZyIsInBhcnNlIiwic3RhdGVPdmVycmlkZSIsImJ1ZmZlckNvZGVQb2ludHMiLCJwb2ludGVyIiwic2VlbkF0Iiwic2VlbkJyYWNrZXQiLCJzZWVuUGFzc3dvcmRUb2tlbiIsInNjaGVtZSIsInBhc3N3b3JkIiwiZnJhZ21lbnQiLCJjYW5ub3RCZUFCYXNlVVJMIiwiaXNTcGVjaWFsIiwiaW5jbHVkZXNDcmVkZW50aWFscyIsImVuY29kZWRDb2RlUG9pbnRzIiwicGFyc2VIb3N0Iiwic2hvcnRlblBhdGgiLCJudW1iZXJzU2VlbiIsImlwdjRQaWVjZSIsInN3YXBzIiwic3dhcCIsImFkZHJlc3MiLCJwaWVjZUluZGV4IiwicGFyc2VJUHY2IiwicGFydHNMZW5ndGgiLCJudW1iZXJzIiwiaXB2NCIsInBhcnRzIiwicGFyc2VJUHY0IiwiY2Fubm90SGF2ZVVzZXJuYW1lUGFzc3dvcmRQb3J0IiwicGF0aFNpemUiLCJzZXRIcmVmIiwiZ2V0T3JpZ2luIiwiVVJMQ29uc3RydWN0b3IiLCJvcmlnaW4iLCJnZXRQcm90b2NvbCIsInNldFByb3RvY29sIiwiZ2V0VXNlcm5hbWUiLCJzZXRVc2VybmFtZSIsImdldFBhc3N3b3JkIiwic2V0UGFzc3dvcmQiLCJnZXRIb3N0Iiwic2V0SG9zdCIsImdldEhvc3RuYW1lIiwic2V0SG9zdG5hbWUiLCJob3N0bmFtZSIsImdldFBvcnQiLCJzZXRQb3J0IiwiZ2V0UGF0aG5hbWUiLCJzZXRQYXRobmFtZSIsImdldFNlYXJjaCIsInNldFNlYXJjaCIsImdldFNlYXJjaFBhcmFtcyIsImdldEhhc2giLCJzZXRIYXNoIiwiVVJMUHJvdG90eXBlIiwiYWNjZXNzb3JEZXNjcmlwdG9yIiwibmF0aXZlQ3JlYXRlT2JqZWN0VVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwibmF0aXZlUmV2b2tlT2JqZWN0VVJMIiwicmV2b2tlT2JqZWN0VVJMIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImciLCJzY3JpcHRVcmwiLCJjdXJyZW50U2NyaXB0Iiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiQ2FyZCIsImNhcmRTZWxlY3RvciIsImhhbmRsZUltYWdlT3BlblBvcHVwIiwiaGFuZGxlUmVtb3ZlQ2xpY2siLCJ1c2VySWQiLCJwdXRMaWtlQ2FyZCIsIl9kYXRhIiwiX2NhcmRTZWxlY3RvciIsIl9oYW5kbGVJbWFnZU9wZW5Qb3B1cCIsIl9oYW5kbGVSZW1vdmVDbGljayIsIl91c2VySWQiLCJfcHV0TGlrZUNhcmQiLCJfZWxlbWVudCIsIl9nZXRUZW1wbGF0ZSIsIl9jYXJkSW1hZ2UiLCJxdWVyeVNlbGVjdG9yIiwiX2xpa2VCdXR0b24iLCJfY291bnRlcnNMaWtlcyIsIl9jb3VudGluZ0xpa2UiLCJfZGVsZXRl0KFhcmQiLCJfcmVtb3ZlQmFja2VkIiwiX3NldEV2ZW50TGlzdGVuZXJzQWxsIiwidGV4dENvbnRlbnQiLCJhbHQiLCJjbG9uZU5vZGUiLCJsaWtlcyIsIl9pZCIsImlzTGlrZWQiLCJyZW1vdmUiLCJvd25lciIsImltYWdlR2xhc3MiLCJGb3JtVmFsaWRhdG9yIiwiY29uZmlnIiwiZm9ybUVsZW1lbnQiLCJfY29uZmlnIiwiX2Zvcm1FbGVtZW50IiwiX2J1dHRvbkVsZW1lbnQiLCJidXR0b25FbGVtZW50IiwiX2lucHV0TGlzdCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpbnB1dFBvcHVwIiwiaW5wdXRFbGVtZW50IiwiX2lucHV0RWxlbWVudCIsIl9pc1ZhbGlkIiwiX3RvZ2dsZUJ1dHRvblN0YXRlIiwidmFsaWRpdHkiLCJfaGlkZUlucHV0RXJyb3IiLCJfc2hvd0lucHV0RXJyb3IiLCJlcnJvck1lc3NhZ2UiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsIl9lcnJvckVsZW1lbnQiLCJfY29udGVpbmVyRWxlbWVudCIsImNsb3Nlc3QiLCJjb250ZWluZXJJbnB1dCIsImlucHV0Q29udGVpbmVySW52YWxpZCIsImluYWN0aXZlQnV0dG9uIiwic2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiX2hhc0ludmFsaWRJbnB1dCIsImRpc2FibGVkQnV0dG9uIiwiZGlzYWJsZWRCdXR0b25BY3RpdiIsImV2dCIsInByZXZlbnREZWZhdWx0IiwiX3NldEV2ZW50TGlzdGVuZXJzIiwiU2VjdGlvbiIsImNvbnRlaW5lclNlY3Rpb24iLCJyZW5kZXJlciIsIl9yZW5kZXJlciIsIl9jb250ZWluZXIiLCJwcmVwZW5kIiwiZGF0YUFycmF5IiwiZGF0YUVsZW1lbnRzIiwiUG9wdXAiLCJwb3B1cFNlbGVjdG9yIiwiX3BvcHVwIiwiX2hhbmRsZUVzY0Nsb3NlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNvbnRhaW5zIiwiUG9wdXBXaXRoRm9ybSIsImZvcm1TZWxlY3RvciIsInN1Ym1pdEhhbmRsZXIiLCJfZm9ybSIsIl9zdWJtaXRIYW5kbGVyIiwiZm9ybUl0ZW1PYmplY3QiLCJuZXdTdWJtaXRIYW5kbGVyIiwiX2dldElucHV0VmFsdWVzIiwicmVzZXQiLCJQb3B1cFdpdGhJbWFnZSIsIlVzZXJJbmZvIiwicHJvZmlsZVRleHQiLCJwcm9maWxlVGl0bGUiLCJwb2ZpbGVBdmF0YXIiLCJoYW5kbGVBdmF0YXJDbGljayIsIl9uYW1lIiwiX2Fib3V0IiwiX2F2YXRhciIsIl9oYW5kbGVBdmF0YXJDbGljayIsImFib3V0IiwiYXZhdGFyIiwiaW5wdXRFcnJvckNsYXNzIiwiZXJyb3JDbGFzcyIsInJlc3BvbnNlIiwianNvbiIsImFwaSIsImNvbmZpZ3MiLCJfdXJsIiwiX2hlYWRlcnMiLCJnZXRBbGxQcm9maWxlIiwiZ2V0QWxsVGFza3MiLCJpZENhcmQiLCJpc0xpa2UiLCJhdXRob3JpemF0aW9uIiwiYnV0dG9uRWRpdFByb2ZpbGUiLCJmb3JtRWRpdFByb2ZpbGUiLCJ1c2VyTmV3Iiwic2V0VXNlckluZm8iLCJjYXRjaCIsImZvcm1WYWxpZEVkaXRQcm9maWxlIiwiZW5hYmxlVmFsaWRhdGlvbiIsInBvcHVwRWRpdENhcmQiLCJhZGROZXdQcm9maWxlIiwic2V0RXZlbnRMaXN0ZW5lcnMiLCJnZXRVc2VySW5mbyIsImJ1dHRvbkF2YXRhciIsImZvcm1WYWxpZEF2YXRhciIsInBvcHVwQXZhdGFyIiwiYWRkTmV3QXZhdGFyIiwicG9wdXBab29tSW1hZ2UiLCJwb3B1cFJlbW92ZSIsImNhcmRJbnN0YW5jZSIsImNoYW5nZVN1Ym1pdEhhbmRsZXIiLCJyZW1vdmVDYXJkIiwiZ2V0SWQiLCJjaGFuZ2VMaWtlIiwiZGF0YUNhcmRTZXJ2ZXIiLCJyZXNldExpa2VEYXRhIiwiY3JlYXRlQ2FyZCIsImdlbmVyYXRlQ2FyZCIsImZvcm1BZGRDYXJkIiwiYnV0dG9uQWRkQ2FyZCIsInNlY3Rpb24iLCJhZGRJdGVtIiwiZ2V0QWxsSW5mbyIsInByb2ZpbGVEYXRhIiwicG9zdEFsbCIsInJlbmRlcmVySXRlbSIsImZvcm1WYWxpZEFkZENhcmQiLCJwb3B1cEFkZENhcmQiLCJhZGROZXdUYXNrcyJdLCJzb3VyY2VSb290IjoiIn0=